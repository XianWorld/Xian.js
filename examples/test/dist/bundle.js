(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Xian = require("../../src/xian/xian");

Xian.globalize();

var random = Math.random,
    PI = Math.PI,
    TWO_PI = PI * 2;


function CameraControl(opts) {
    opts || (opts = {});

    Component.call(this, "CameraControl", opts);

    this.speed = 1;
    this.zoomSpeed = 6;
}
Component.extend(CameraControl);

CameraControl.prototype.update = function () {
    var transform = this.transform2d,
        position = this.transform2d.position,
        camera2d = this.camera2d,
        dt = Time.delta,
        spd = this.speed,
        mouseWheel = Input.axis("mouseWheel");

    if (Input.mouseButton(0)) {
        position.x += -dt * spd * Input.axis("mouseX");
        position.y += dt * spd * Input.axis("mouseY");
    }
    if (Input.mouseButton(1)) {
        var instance = random() < 0.5 ? box.clone() : circle.clone();

        camera2d.toWorld(Input.mousePosition, instance.transform2d.position);
        instance.transform2d.rotation = TWO_PI * random();

        this.gameObject.scene.addGameObject(instance);
    }
    if (mouseWheel) camera2d.setOrthographicSize(camera2d.orthographicSize + -dt * this.zoomSpeed * Input.axis("mouseWheel"));
};


Assets.addAssets(
    new ShaderLib.Unlit,
    new Texture({
        name: "img_player",
        flipY: true,
        filter: Enums.FilterMode.None,
        src: "../content/images/player.png"
    }),
    new Texture({
        name: "img_hospital",
        flipY: true,
        filter: Enums.FilterMode.None,
        src: "../content/images/hospital.png"
    })
);

Assets.addAssets(
    new Material({
        name: "mat_player",
        uniforms: {
            diffuseMap: Assets.get("img_player")
        },
        shader: Assets.get("shader_unlit")
    }),
    new Material({
        name: "mat_hospital",
        uniforms: {
            diffuseMap: Assets.get("img_hospital")
        },
        shader: Assets.get("shader_unlit")
    })
);

game = new Game({
    debug: true,
    forceCanvas: false,
    width: 960,
    height: 640,
    renderer: {
        disableDepth: true
    }
});

Phys2D.P2Space.DefaultBroadPhase = Phys2D.P2BroadphaseSpatialHash;

var scene = new Scene({
    name: "PlayGround",
    world: new World2D({
        space: {
            useGravity: true,
            gravity: new Vec2(0, -9.801),
            broadphase: {
                cellSize: 1
            }
        }
    })
});

var camera = new GameObject({
    components: [
        new Transform2D({
            position: new Vec2(0, 8)
        }),
        new Camera2D({
            orthographicSize: 9
        }),
        new CameraControl
    ],
    tag: "Camera"
});
var circle = new GameObject({
    components: [
        new Transform2D,
        new Sprite({
            material: Assets.get("mat_player"),
            x: 0,
            y: 0,
            w: 64,
            h: 64,
            width: 1,
            height: 1
        }),
        new RigidBody2D({
            motionState: Phys2D.P2Enums.MotionState.Dynamic,
            shape: new Phys2D.P2Circle({
                radius: 0.5
            })
        })
    ]
});
var box = new GameObject({
    components: [
        new Transform2D,
        new Sprite({
            material: Assets.get("mat_player"),
            x: 0,
            y: 0,
            w: 64,
            h: 64,
            width: 1,
            height: 1
        }),
        new RigidBody2D({
            motionState: Phys2D.P2Enums.MotionState.Dynamic,
            shape: new Phys2D.P2Rect({
                extents: new Vec2(0.5, 0.5)
            })
        })
    ]
});
var top = new GameObject({
    components: [
        new Transform2D({
            position: new Vec2(0, 32)
        }),
        new Sprite({
            material: Assets.get("mat_hospital"),
            x: 0,
            y: 0,
            w: 64,
            h: 64,
            width: 32,
        }),
        new RigidBody2D({
            motionState: Phys2D.P2Enums.MotionState.Static,
            shape: new Phys2D.P2Rect({
                extents: new Vec2(16, 0.5)
            })
        })
    ]
});
var bottom = new GameObject({
    components: [
        new Transform2D,
        new Sprite({
            material: Assets.get("mat_hospital"),
            x: 0,
            y: 0,
            w: 64,
            h: 64,
            width: 32
        }),
        new RigidBody2D({
            motionState: Phys2D.P2Enums.MotionState.Static,
            shape: new Phys2D.P2Rect({
                extents: new Vec2(16, 0.5)
            })
        })
    ]
});
var left = new GameObject({
    components: [
        new Transform2D({
            position: new Vec2(-16, 16)
        }),
        new Sprite({
            material: Assets.get("mat_hospital"),
            x: 0,
            y: 0,
            w: 64,
            h: 64,
            height: 32,
        }),
        new RigidBody2D({
            motionState: Phys2D.P2Enums.MotionState.Static,
            shape: new Phys2D.P2Rect({
                extents: new Vec2(0.5, 16)
            })
        })
    ]
});
var right = new GameObject({
    components: [
        new Transform2D({
            position: new Vec2(16, 16)
        }),
        new Sprite({
            material: Assets.get("mat_hospital"),
            x: 0,
            y: 0,
            w: 64,
            h: 64,
            height: 32,
        }),
        new RigidBody2D({
            motionState: Phys2D.P2Enums.MotionState.Static,
            shape: new Phys2D.P2Rect({
                extents: new Vec2(0.5, 16)
            })
        })
    ]
});

scene.addGameObjects(camera, left, right, top, bottom);


gui = new Xian.GUI({
    name: "Level"
});
guiObject = new Xian.GUIObject({
    position: new Rect(0, 0, 64, 64),
    //components: [
    //    new Xian.GUIContent({
    //        text: "Hey Stop That",
    //        style: {
    //            wordWrap: true,
    //            stretchWidth: false,
    //
    //            normal: {
    //                text: new Xian.Color()
    //            },
    //            hover: {
    //                text: new Xian.Color("red")
    //            },
    //            active: {
    //                text: new Xian.Color("blue")
    //            }
    //        }
    //    })
    //]
});
gui.addGUIObject(guiObject);

game.addGUI(gui);
game.addScene(scene);


function start() {
    game.setGUI("Level");
    game.setScene("PlayGround");
    game.setCamera(game.scene.findByTagFirst("Camera"));
}

function restart() {
    start();
}


game.on("start", function () {
    start();
});


AssetLoader.on("load", function () {

    game.start();
}).load();

},{"../../src/xian/xian":132}],2:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":3,"ieee754":4,"is-array":5}],3:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],4:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],5:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canMutationObserver = typeof window !== 'undefined'
    && window.MutationObserver;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    var queue = [];

    if (canMutationObserver) {
        var hiddenDiv = document.createElement("div");
        var observer = new MutationObserver(function () {
            var queueList = queue.slice();
            queue.length = 0;
            queueList.forEach(function (fn) {
                fn();
            });
        });

        observer.observe(hiddenDiv, { attributes: true });

        return function nextTick(fn) {
            if (!queue.length) {
                hiddenDiv.setAttribute('yes', 'no');
            }
            queue.push(fn);
        };
    }

    if (canPost) {
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],7:[function(require,module,exports){
(function (global){
var Dom = require('./dom');
var Device = require('./device');

'use strict';


var w = typeof(window) !== 'undefined' ? window : global,
    addEvent = Dom.addEvent,
    removeEvent = Dom.removeEvent,
    AudioContext = (
    w.AudioContext ||
    w.webkitAudioContext ||
    w.mozAudioContext ||
    w.oAudioContext ||
    w.msAudioContext
    ),
    audioContext = null;

if (typeof(AudioContext) !== 'undefined') {
    audioContext = new AudioContext();
    var AudioContextPrototype = AudioContext.prototype;

    AudioContextPrototype.UNLOCKED = !Device.mobile;
    AudioContextPrototype.createGain || (AudioContextPrototype.createGain = AudioContextPrototype.createGainNode);
    AudioContextPrototype.createPanner || (AudioContextPrototype.createPanner = AudioContextPrototype.createPannerNode);
    AudioContextPrototype.createDelay || (AudioContextPrototype.createDelay = AudioContextPrototype.createDelayNode);
    AudioContextPrototype.createScriptProcessor || (AudioContextPrototype.createScriptProcessor = AudioContextPrototype.createJavaScriptNode);

    var OscillatorPrototype = audioContext.createOscillator().constructor.prototype,
        BufferSourceNodePrototype = audioContext.createBufferSource().constructor.prototype,
        GainPrototype = audioContext.createGain().gain.constructor.prototype;

    OscillatorPrototype.start || (OscillatorPrototype.start = OscillatorPrototype.noteOn);
    OscillatorPrototype.stop || (OscillatorPrototype.stop = OscillatorPrototype.stop);
    OscillatorPrototype.setPeriodicWave || (OscillatorPrototype.setPeriodicWave = OscillatorPrototype.setWaveTable);

    BufferSourceNodePrototype.start || (BufferSourceNodePrototype.start = BufferSourceNodePrototype.noteOn);
    BufferSourceNodePrototype.stop || (BufferSourceNodePrototype.stop = BufferSourceNodePrototype.stop);

    GainPrototype.setTargetAtTime || (GainPrototype.setTargetAtTime = GainPrototype.setTargetValueAtTime);

    var onTouchStart = function (e) {
        window.removeEventListener('touchstart', onTouchStart, false);
        var buffer = audioContext.createBuffer(1, 1, 22050),
            source = audioContext.createBufferSource();

        source.buffer = buffer;
        source.connect(audioContext.destination);
        source.start(0);

        audioContext.UNLOCKED = true;
        window.dispatchEvent(new Event('audiocontextunlock'));
    };
    window.addEventListener('touchstart', onTouchStart, false);
}

module.exports = audioContext != undefined ? audioContext : false;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./device":10,"./dom":11}],8:[function(require,module,exports){
var EventEmitter = require('./event_emitter');
'use strict';


var CLASS_ID = 0;

/**
 * @class Xian.Class
 * @extends Xian.EventEmitter
 */
function Class() {

    EventEmitter.call(this);

    this._id = ++CLASS_ID;
    this._jsonId = -1;
    this._name = '';
}

EventEmitter.extend(Class);


/**
 * returns new copy of this
 * @memberof Xian.Class
 * @return Class
 */
Class.prototype.clone = function () {

    return new this.constructor().copy(this);
};

/**
 * copies other of same class
 * @memberof Xian.Class
 * @param {Xian.Class} other
 * @return this
 */
Class.prototype.copy = function () {

    return this;
};

/**
 * clears data for GC
 * @memberof Xian.Class
 * @return this
 */
Class.prototype.clear = function () {

    return this;
};

/**
 * converts this to a JSON object
 * @memberof Xian.Class
 * @return json
 */
Class.prototype.toJSON = function (json) {
    json || (json = {});

    json._id = this._id;
    json._jsonId = this._id;
    json._className = this._className;

    return json;
};

/**
 * sets this from JSON object
 * @memberof Xian.Class
 * @return this
 */
Class.prototype.fromJSON = function (json) {

    this._jsonId = json._jsonId;

    return this;
};

/**
 * returns class name
 * @memberof Xian.Class
 * @return string
 */
Class.prototype.toString = function () {

    return this._name;
};

/**
 * @memberof Xian.Class
 * @param {constructor} child
 * @param {constructor} parent
 * @return child
 */
Class.extend = function (child, parent) {
    if (!parent) parent = this;

    child.prototype = Object.create(parent.prototype);
    child.prototype.constructor = child;

    child.extend = parent.extend;
    child.prototype._className = child._className = child.name;

    (this._children || (this._children = {}))[child.name] = child;
    child._parent = this;

    Class._classes[child.name] = child;

    if (parent.onExtend) {
        if (!child.onExtend) child.onExtend = parent.onExtend;
        parent.onExtend(child);
    }

    return child;
};

/**
 * creates new Xian.Class from json object
 * @memberof Xian.Class
 * @param {object} json
 * @return Xian.Class
 */
Class.fromJSON = function (json) {

    return new Class._classes[json._className]().fromJSON(json);
};

/**
 * creates new Xian.Class from string type
 * @memberof Xian.Class
 * @param {string} type
 * @return Xian.Class
 */
Class.create = function (type) {

    return new Class._classes[type];
};


Class._classes = {};


module.exports = Class;

},{"./event_emitter":13}],9:[function(require,module,exports){
'use strict';


var hasOwnProperty = Object.prototype.hasOwnProperty;


function Config() {

    this.debug = false;

    this.host = '127.0.0.1';
    this.port = 3000;

    this.FAKE_LAG = 0;
    this.SCENE_SYNC_RATE = 0.5;

    this.MAX_SCENE_STATES = 5;

    this.MIN_DELTA = 0.000001;
    this.MAX_DELTA = 0.25;
}


Config.prototype.fromJSON = function (json) {

    for (var key in json) {
        if (this[key] != undefined) this[key] = json[key];
    }

    return this;
};


Config.prototype.toJSON = function (json) {
    json || (json = {});

    for (var key in this) {
        if (this[key] != undefined && hasOwnProperty.call(this, key)) json[key] = this[key];
    }

    return json;
};


module.exports = new Config;

},{}],10:[function(require,module,exports){
"use strict";


function Device() {
    var userAgent = navigator.userAgent.toLowerCase(),
        audio = new Audio,
        video = document.createElement("video");

    this.userAgent = userAgent;

    this.pixelRatio = window.devicePixelRatio || 1;
    this.invPixelRatio = 1 / this.pixelRatio;

    this.browser = userAgent.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i)[1];
    this.touch = "ontouchstart" in window;
    this.mobile = /android|webos|iphone|ipad|ipod|blackberry/i.test(userAgent);

    this.pointerLock = "pointerLockElement" in document || "mozPointerLockElement" in document || "webkitPointerLockElement" in document;
    this.fullScreen = "fullscreenElement" in document || "mozFullscreenElement" in document || "webkitFullscreenElement" in document;

    this.webgl = (function () {
        var canvas = document.createElement("canvas"),
            names = ["3d", "moz-webgl", "experimental-webgl", "webkit-3d", "webgl"],
            has, i = names.length;

        while (i--) {
            has = !!canvas.getContext(names[i]);
            if (has) break;
        }

        return has;
    }());

    this.canvas = (function () {
        var canvas = document.createElement("canvas"),
            has = !!canvas.getContext("2d");

        return has;
    }());

    this.gamepads = !!navigator.getGamepads || !!navigator.webkitGetGamepads || !!navigator.webkitGamepads;

    this.audioMpeg = !!audio.canPlayType("audio/mpeg");
    this.audioOgg = !!audio.canPlayType("audio/ogg");
    this.audioMp3 = !!audio.canPlayType("audio/mp3");
    this.audioMp4 = !!audio.canPlayType("audio/mp4");

    this.videoWebm = !!video.canPlayType("video/webm");
    this.videoOgg = !!video.canPlayType("video/ogg");
    this.videoMp4 = !!video.canPlayType("video/mp4");
}


module.exports = new Device;

},{}],11:[function(require,module,exports){
"use strict";


var SPLITER = /[ ,]+/,

    WEBGL_NAMES = ["webgl", "webkit-3d", "moz-webgl", "experimental-webgl", "3d"],
    WEBGL_ATTRIBUTES = {
        alpha: true,
        antialias: true,
        depth: true,
        premultipliedAlpha: true,
        preserveDrawingBuffer: false,
        stencil: true
    };


function Dom() {
}


var EVENT_CALLBACK_ID = 0,
    EVENT_CALLBACKS = {};
Dom.prototype.addEvent = function (obj, name, callback, ctx) {
    var names = name.split(SPLITER),
        i = names.length,
        scope = ctx || obj,
        afn = function (e) {
            callback.call(scope, e || window.event);
        };

    EVENT_CALLBACKS[(callback.__EVENT_CALLBACK_ID__ = EVENT_CALLBACK_ID++)] = afn;

    while (i--) {
        name = names[i];

        if (obj.attachEvent) {
            obj.attachEvent("on" + name, afn);
        } else {
            obj.addEventListener(name, afn, false);
        }
    }
};


Dom.prototype.removeEvent = function (obj, name, callback, ctx) {
    var names = name.split(SPLITER),
        i = names.length,
        scope = ctx || obj,
        id = callback.__EVENT_CALLBACK_ID__,
        afn = EVENT_CALLBACKS[id];

    EVENT_CALLBACKS[id] = null;

    while (i--) {
        name = names[i];

        if (obj.detachEvent) {
            obj.detachEvent("on" + name, afn);
        } else {
            obj.removeEventListener(name, afn, false);
        }
    }
};


Dom.prototype.addMeta = function (id, name, content) {
    var meta = document.createElement("meta"),
        head = document.head;

    if (id) meta.id = id;
    if (name) meta.name = name;
    if (content) meta.content = content;

    head.insertBefore(meta, head.firstChild);
};


Dom.prototype.getWebGLContext = function (canvas, attributes) {
    var key, gl, i = WEBGL_NAMES.length;

    attributes || (attributes = {});
    for (key in WEBGL_ATTRIBUTES) {
        if (attributes[key] == undefined) attributes[key] = WEBGL_ATTRIBUTES[key];
    }

    while (i--) {
        try {
            gl = canvas.getContext(WEBGL_NAMES[i], attributes);
        } catch (err) {
            console.error("Dom.getWebGLContext: could not get a WebGL Context " + (err.message || ""));
        }
        if (gl) break;
    }

    if (!gl) throw "Dom.getWebGLContext: could not get a WebGL Context";

    return gl;
};


var createShader = Dom.prototype.createShader = function (gl, source, type) {
    var shader = gl.createShader(type);

    gl.shaderSource(shader, source);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error("Dom.createShader: problem compiling shader " + gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return undefined;
    }

    return shader;
};


Dom.prototype.createProgram = function (gl, vertex, fragment) {
    var program = gl.createProgram(),
        shader;

    shader = createShader(gl, vertex, gl.VERTEX_SHADER);
    gl.attachShader(program, shader);
    gl.deleteShader(shader);

    shader = createShader(gl, fragment, gl.FRAGMENT_SHADER);
    gl.attachShader(program, shader);
    gl.deleteShader(shader);

    gl.linkProgram(program);
    gl.validateProgram(program);
    gl.useProgram(program);

    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error("Dom.createProgram: problem compiling Program " + gl.getProgramInfoLog(program));
        gl.deleteProgram(program);
        return undefined;
    }

    return program;
};


module.exports = new Dom;

},{}],12:[function(require,module,exports){
var util = require("./util");
"use strict";


var isArray = util.isArray,
    SPLITER = /[ ,]+/,
    COUNTER = 0;


function Enum(enums) {
    enums = isArray(enums) ? enums : enums.split(SPLITER);
    var i = enums.length;

    while (i--) this[enums[i]] = ++COUNTER;
}


Enum.prototype.add = function (enums) {
    enums = isArray(enums) ? enums : enums.split(SPLITER);
    var i = enums.length;

    while (i--) this[enums[i]] = ++COUNTER;

    return this;
};


Enum.prototype.in = function (num) {
    var key;

    for (key in this) {
        if (this[key] == num) return true;
    }

    return false;
};


module.exports = Enum;

},{"./util":19}],13:[function(require,module,exports){
'use strict';


var shift = Array.prototype.shift;


/**
 * @class Xian.EventEmitter
 */
function EventEmitter() {

    this._events = {};
}

/**
 * attaches function to an event
 * @memberof Xian.EventEmitter
 * @param {string} type
 * @param {function} listener
 * @param {object} ctx
 * @return this
 */
EventEmitter.prototype.on = function (type, listener, ctx) {
    var events = this._events;

    (events[type] || (events[type] = [])).push({
        listener: listener,
        ctx: ctx || this
    });

    return this;
};

/**
 * attaches function to an event, on the first call its removed
 * @memberof Xian.EventEmitter
 * @param {string} type
 * @param {function} listener
 * @param {object} ctx
 * @return this
 */
EventEmitter.prototype.once = function (type, listener, ctx) {
    var _this = this;
    ctx = ctx || this;

    function once() {
        _this.off(type, once, ctx);
        listener.apply(ctx, arguments);
    }

    return this.on(type, once, ctx);
};

/**
 * attaches function to an event on another object
 * @memberof Xian.EventEmitter
 * @param {object} obj
 * @param {string} type
 * @param {function} listener
 * @param {object} ctx
 * @return this
 */
EventEmitter.prototype.listenTo = function (obj, type, listener, ctx) {
    if (!(obj instanceof EventEmitter)) throw "Can't listen to Object, it's not a instance of EventEmitter";

    obj.on(type, listener, ctx || this);

    return this;
};

/**
 * removes function from an event
 * @memberof Xian.EventEmitter
 * @param {string} type
 * @param {function} listener
 * @param {object} ctx
 * @return this
 */
EventEmitter.prototype.off = function (type, listener, ctx) {
    var thisEvents = this._events,
        events, event,
        i;

    if (!type) {
        for (i in thisEvents)
            if ((events = thisEvents[i])) events.length = 0;
        return this;
    }

    events = thisEvents[type];
    if (!events) return this;

    if (!listener) {
        events.length = 0;
    } else {
        ctx = ctx || this;
        i = events.length;

        while (i--) {
            event = events[i];

            if (event.listener === listener && event.ctx === ctx) {
                events.splice(i, 1);
                break;
            }
        }
    }

    return this;
};

/**
 * emits event type
 * @memberof Xian.EventEmitter
 * @param {string} type
 * @return this
 */
EventEmitter.prototype.emit = function (type) {
    var events = this._events[type],
        a1, a2, a3, a4,
        length, event,
        i;

    if (!events || !events.length) return this;
    length = arguments.length;

    if (length === 1) {
        i = events.length;
        while (i--) {
            (event = events[i]).listener.call(event.ctx);
        }
    } else if (length === 2) {
        a1 = arguments[1];
        i = events.length;
        while (i--) {
            (event = events[i]).listener.call(event.ctx, a1);
        }
    } else if (length === 3) {
        a1 = arguments[1];
        a2 = arguments[2];
        i = events.length;
        while (i--) {
            (event = events[i]).listener.call(event.ctx, a1, a2);
        }
    } else if (length === 4) {
        a1 = arguments[1];
        a2 = arguments[2];
        a3 = arguments[3];
        i = events.length;
        while (i--) {
            (event = events[i]).listener.call(event.ctx, a1, a2, a3);
        }
    } else if (length === 5) {
        a1 = arguments[1];
        a2 = arguments[2];
        a3 = arguments[3];
        a4 = arguments[4];
        i = events.length;
        while (i--) {
            (event = events[i]).listener.call(event.ctx, a1, a2, a3, a4);
        }
    } else {
        shift.apply(arguments);
        i = events.length;
        while (i--) {
            (event = events[i]).listener.apply(event.ctx, arguments);
        }
    }

    return this;
};

/**
 * @memberof Xian.EventEmitter
 * @param {constructor} child
 * @param {constructor} parent
 * @return child
 */
EventEmitter.extend = function (child, parent) {
    if (!parent) parent = this;

    child.prototype = Object.create(parent.prototype);
    child.prototype.constructor = child;

    (this._children || (this._children = {}))[child.name] = child;
    child._parent = this;

    child.extend = parent.extend || this.extend;

    if (parent.onExtend) {
        if (!child.onExtend) child.onExtend = parent.onExtend;
        parent.onExtend(child);
    }

    return child;
};


module.exports = EventEmitter;

},{}],14:[function(require,module,exports){
var Device = require("./device");
var util = require("./util");
var Config = require("./config");
"use strict";


var each = util.each;


function Log() {
}


if (Device.mobile) {
    var slice = Array.prototype.slice;

    Log.prototype.debug = Log.prototype.info = Log.prototype.log = function () {
        if (!Config.debug) return;
        alert(slice.call(arguments, 0));
    };

    Log.prototype.warn = function () {
        if (!(Config.debug || Config.warn)) return;
        alert(slice.call(arguments, 0));
    };

    Log.prototype.error = function () {
        if (!(Config.debug || Config.error)) return;
        alert(slice.call(arguments, 0));
    };
} else {
    Log.prototype.debug = Log.prototype.info = Log.prototype.log = function () {
        if (!Config.debug) return;
        console.log.apply(console, arguments);
    };

    Log.prototype.warn = function () {
        if (!(Config.debug || Config.warn)) return;
        console.warn.apply(console, arguments);
    };

    Log.prototype.error = function () {
        if (!(Config.debug || Config.error)) return;
        console.error.apply(console, arguments);
    };
}


var CACHE = {};
Log.prototype.once = function () {
    if (!(Config.debug || Config.error) || CACHE[cacheKey(arguments)]) return;

    CACHE[cacheKey(arguments)] = true;
    this.error.apply(this, arguments);
};


function cacheKey(args) {
    var key = "",
        i;

    for (i = args.length; i--;) key += args[i];

    return key;
};


Log.prototype.object = function (obj, values, tabs) {
    if (!Config.debug) return "";
    var str = "";

    tabs || (tabs = "");
    values || (values = []);

    each(obj, function (value, i) {
        if (~values.indexOf(value)) return;

        var type = typeof(value),
            tmp;

        if (type === "object") {
            tmp = tabs;
            values.push(value);
            tabs += "\t";
            str += tabs + i + " = " + this.object(value, values, tabs) + "\n";
            tabs = tmp;
        } else if (type !== "function") {
            str += tabs + i + " = " + value + "\n";
        } else {
            values.push(value);
            str += tabs + value + "\n";
        }
    }, this);

    return str;
};


module.exports = new Log;

},{"./config":9,"./device":10,"./util":19}],15:[function(require,module,exports){
"use strict";


function ObjectPool(constructor) {

    this.pooled = [];
    this.objects = [];
    this.object = constructor;
}


ObjectPool.prototype.create = function () {
    var pooled = this.pooled,
        object = pooled.length ? pooled.pop() : new this.object;

    this.objects.push(object);
    return object;
};


ObjectPool.prototype.removeObject = function (object) {
    var objects = this.objects,
        pooled = this.pooled,
        index = objects.indexOf(object);

    if (index > -1) {
        pooled.push(object);
        objects.splice(index, 1);
    }

    return this;
};


ObjectPool.prototype.remove = ObjectPool.prototype.removeObjects = function () {
    var i = arguments.length;

    while (i--) this.removeObject(arguments[i]);

    return this;
};


ObjectPool.prototype.clear = function () {
    var objects = this.objects,
        pooled = this.pooled,
        i = objects.length;

    while (i--) pooled.push(objects[i]);
    objects.length = 0;

    return this;
};


ObjectPool.prototype.clearForEach = function (fn) {
    var objects = this.objects,
        pooled = this.pooled,
        object,
        i = objects.length;

    while (i--) {
        object = objects[i];

        pooled.push(object);
        fn(object);
    }
    objects.length = 0;

    return this;
};


ObjectPool.prototype.empty = function () {

    this.pooled.length = this.objects.length = 0;

    return this;
};


module.exports = ObjectPool;

},{}],16:[function(require,module,exports){
(function (global){
"use strict";


var RATE = 1000 / 60,
    w = typeof(window) !== "undefined" ? window : global;

module.exports = (
w.requestAnimationFrame ||
w.webkitRequestAnimationFrame ||
w.mozRequestAnimationFrame ||
w.oRequestAnimationFrame ||
w.msRequestAnimationFrame ||
function (callback) {

    return w.setTimeout(callback, RATE);
}
);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],17:[function(require,module,exports){
(function() {
    var io = (function(exports, global) {
        var io = exports;
        io.version = "0.9.16";
        io.protocol = 1;
        io.transports = [];
        io.j = [];
        io.sockets = {};
        io.connect = function(host, details) {
            var uri = io.util.parseUri(host),
                uuri, socket;
            if (global && global.location) {
                uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);
                uri.host = uri.host || (global.document ? global.document.domain : global.location.hostname);
                uri.port = uri.port || global.location.port
            }
            uuri = io.util.uniqueUri(uri);
            var options = {
                host: uri.host,
                secure: "https" == uri.protocol,
                port: uri.port || ("https" == uri.protocol ? 443 : 80),
                query: uri.query || ""
            };
            io.util.merge(options, details);
            if (options["force new connection"] || !io.sockets[uuri]) {
                socket = new io.Socket(options)
            }
            if (!options["force new connection"] && socket) {
                io.sockets[uuri] = socket
            }
            socket = socket || io.sockets[uuri];
            return socket.of(uri.path.length > 1 ? uri.path : "")
        };
        return io
    })({}, this);
    (function(exports, global) {
        var util = exports.util = {};
        var re = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
        var parts = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
        util.parseUri = function(str) {
            var m = re.exec(str || ""),
                uri = {}, i = 14;
            while (i--) {
                uri[parts[i]] = m[i] || ""
            }
            return uri
        };
        util.uniqueUri = function(uri) {
            var protocol = uri.protocol,
                host = uri.host,
                port = uri.port;
            if ("document" in global) {
                host = host || document.domain;
                port = port || (protocol == "https" && document.location.protocol !== "https:" ? 443 : document.location.port)
            } else {
                host = host || "localhost";
                if (!port && protocol == "https") {
                    port = 443
                }
            }
            return (protocol || "http") + "://" + host + ":" + (port || 80)
        };
        util.query = function(base, addition) {
            var query = util.chunkQuery(base || ""),
                components = [];
            util.merge(query, util.chunkQuery(addition || ""));
            for (var part in query) {
                if (query.hasOwnProperty(part)) {
                    components.push(part + "=" + query[part])
                }
            }
            return components.length ? "?" + components.join("&") : ""
        };
        util.chunkQuery = function(qs) {
            var query = {}, params = qs.split("&"),
                i = 0,
                l = params.length,
                kv;
            for (; i < l; ++i) {
                kv = params[i].split("=");
                if (kv[0]) {
                    query[kv[0]] = kv[1]
                }
            }
            return query
        };
        var pageLoaded = false;
        util.load = function(fn) {
            if ("document" in global && document.readyState === "complete" || pageLoaded) {
                return fn()
            }
            util.on(global, "load", fn, false)
        };
        util.on = function(element, event, fn, capture) {
            if (element.attachEvent) {
                element.attachEvent("on" + event, fn)
            } else {
                if (element.addEventListener) {
                    element.addEventListener(event, fn, capture)
                }
            }
        };
        util.request = function(xdomain) {
            if (xdomain && "undefined" != typeof XDomainRequest && !util.ua.hasCORS) {
                return new XDomainRequest()
            }
            if ("undefined" != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {
                return new XMLHttpRequest()
            }
            if (!xdomain) {
                try {
                    return new window[(["Active"].concat("Object").join("X"))]("Microsoft.XMLHTTP")
                } catch (e) {}
            }
            return null
        };
        if ("undefined" != typeof window) {
            util.load(function() {
                pageLoaded = true
            })
        }
        util.defer = function(fn) {
            if (!util.ua.webkit || "undefined" != typeof importScripts) {
                return fn()
            }
            util.load(function() {
                setTimeout(fn, 100)
            })
        };
        util.merge = function merge(target, additional, deep, lastseen) {
            var seen = lastseen || [],
                depth = typeof deep == "undefined" ? 2 : deep,
                prop;
            for (prop in additional) {
                if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {
                    if (typeof target[prop] !== "object" || !depth) {
                        target[prop] = additional[prop];
                        seen.push(additional[prop])
                    } else {
                        util.merge(target[prop], additional[prop], depth - 1, seen)
                    }
                }
            }
            return target
        };
        util.mixin = function(ctor, ctor2) {
            util.merge(ctor.prototype, ctor2.prototype)
        };
        util.inherit = function(ctor, ctor2) {
            function f() {}
            f.prototype = ctor2.prototype;
            ctor.prototype = new f
        };
        util.isArray = Array.isArray || function(obj) {
            return Object.prototype.toString.call(obj) === "[object Array]"
        };
        util.intersect = function(arr, arr2) {
            var ret = [],
                longest = arr.length > arr2.length ? arr : arr2,
                shortest = arr.length > arr2.length ? arr2 : arr;
            for (var i = 0, l = shortest.length; i < l; i++) {
                if (~util.indexOf(longest, shortest[i])) {
                    ret.push(shortest[i])
                }
            }
            return ret
        };
        util.indexOf = function(arr, o, i) {
            for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0; i < j && arr[i] !== o; i++) {}
            return j <= i ? -1 : i
        };
        util.toArray = function(enu) {
            var arr = [];
            for (var i = 0, l = enu.length; i < l; i++) {
                arr.push(enu[i])
            }
            return arr
        };
        util.ua = {};
        util.ua.hasCORS = "undefined" != typeof XMLHttpRequest && (function() {
            try {
                var a = new XMLHttpRequest()
            } catch (e) {
                return false
            }
            return a.withCredentials != undefined
        })();
        util.ua.webkit = "undefined" != typeof navigator && /webkit/i.test(navigator.userAgent);
        util.ua.iDevice = "undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent)
    })("undefined" != typeof io ? io : module.exports, this);
    (function(exports, io) {
        exports.EventEmitter = EventEmitter;

        function EventEmitter() {}
        EventEmitter.prototype.on = function(name, fn) {
            if (!this.$events) {
                this.$events = {}
            }
            if (!this.$events[name]) {
                this.$events[name] = fn
            } else {
                if (io.util.isArray(this.$events[name])) {
                    this.$events[name].push(fn)
                } else {
                    this.$events[name] = [this.$events[name], fn]
                }
            }
            return this
        };
        EventEmitter.prototype.addListener = EventEmitter.prototype.on;
        EventEmitter.prototype.once = function(name, fn) {
            var self = this;

            function on() {
                self.removeListener(name, on);
                fn.apply(this, arguments)
            }
            on.listener = fn;
            this.on(name, on);
            return this
        };
        EventEmitter.prototype.removeListener = function(name, fn) {
            if (this.$events && this.$events[name]) {
                var list = this.$events[name];
                if (io.util.isArray(list)) {
                    var pos = -1;
                    for (var i = 0, l = list.length; i < l; i++) {
                        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
                            pos = i;
                            break
                        }
                    }
                    if (pos < 0) {
                        return this
                    }
                    list.splice(pos, 1);
                    if (!list.length) {
                        delete this.$events[name]
                    }
                } else {
                    if (list === fn || (list.listener && list.listener === fn)) {
                        delete this.$events[name]
                    }
                }
            }
            return this
        };
        EventEmitter.prototype.removeAllListeners = function(name) {
            if (name === undefined) {
                this.$events = {};
                return this
            }
            if (this.$events && this.$events[name]) {
                this.$events[name] = null
            }
            return this
        };
        EventEmitter.prototype.listeners = function(name) {
            if (!this.$events) {
                this.$events = {}
            }
            if (!this.$events[name]) {
                this.$events[name] = []
            }
            if (!io.util.isArray(this.$events[name])) {
                this.$events[name] = [this.$events[name]]
            }
            return this.$events[name]
        };
        EventEmitter.prototype.emit = function(name) {
            if (!this.$events) {
                return false
            }
            var handler = this.$events[name];
            if (!handler) {
                return false
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if ("function" == typeof handler) {
                handler.apply(this, args)
            } else {
                if (io.util.isArray(handler)) {
                    var listeners = handler.slice();
                    for (var i = 0, l = listeners.length; i < l; i++) {
                        listeners[i].apply(this, args)
                    }
                } else {
                    return false
                }
            }
            return true
        }
    })("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports);
    (function(exports, nativeJSON) {
        if (nativeJSON && nativeJSON.parse) {
            return exports.JSON = {
                parse: nativeJSON.parse,
                stringify: nativeJSON.stringify
            }
        }
        var JSON = exports.JSON = {};

        function f(n) {
            return n < 10 ? "0" + n : n
        }

        function date(d) {
            return isFinite(d.valueOf()) ? d.getUTCFullYear() + "-" + f(d.getUTCMonth() + 1) + "-" + f(d.getUTCDate()) + "T" + f(d.getUTCHours()) + ":" + f(d.getUTCMinutes()) + ":" + f(d.getUTCSeconds()) + "Z" : null
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap, indent, meta = {
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\f": "\\f",
                "\r": "\\r",
                '"': '\\"',
                "\\": "\\\\"
            }, rep;

        function quote(string) {
            escapable.lastIndex = 0;
            return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
                var c = meta[a];
                return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
            }) + '"' : '"' + string + '"'
        }

        function str(key, holder) {
            var i, k, v, length, mind = gap,
                partial, value = holder[key];
            if (value instanceof Date) {
                value = date(key)
            }
            if (typeof rep === "function") {
                value = rep.call(holder, key, value)
            }
            switch (typeof value) {
                case "string":
                    return quote(value);
                case "number":
                    return isFinite(value) ? String(value) : "null";
                case "boolean":
                case "null":
                    return String(value);
                case "object":
                    if (!value) {
                        return "null"
                    }
                    gap += indent;
                    partial = [];
                    if (Object.prototype.toString.apply(value) === "[object Array]") {
                        length = value.length;
                        for (i = 0; i < length; i += 1) {
                            partial[i] = str(i, value) || "null"
                        }
                        v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                        gap = mind;
                        return v
                    }
                    if (rep && typeof rep === "object") {
                        length = rep.length;
                        for (i = 0; i < length; i += 1) {
                            if (typeof rep[i] === "string") {
                                k = rep[i];
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ": " : ":") + v)
                                }
                            }
                        }
                    } else {
                        for (k in value) {
                            if (Object.prototype.hasOwnProperty.call(value, k)) {
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ": " : ":") + v)
                                }
                            }
                        }
                    }
                    v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                    gap = mind;
                    return v
            }
        }
        JSON.stringify = function(value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        };
        JSON.parse = function(text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function(a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    })("undefined" != typeof io ? io : module.exports, typeof JSON !== "undefined" ? JSON : undefined);
    (function(exports, io) {
        var parser = exports.parser = {};
        var packets = parser.packets = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error", "noop"];
        var reasons = parser.reasons = ["transport not supported", "client not handshaken", "unauthorized"];
        var advice = parser.advice = ["reconnect"];
        var JSON = io.JSON,
            indexOf = io.util.indexOf;
        parser.encodePacket = function(packet) {
            var type = indexOf(packets, packet.type),
                id = packet.id || "",
                endpoint = packet.endpoint || "",
                ack = packet.ack,
                data = null;
            switch (packet.type) {
                case "error":
                    var reason = packet.reason ? indexOf(reasons, packet.reason) : "",
                        adv = packet.advice ? indexOf(advice, packet.advice) : "";
                    if (reason !== "" || adv !== "") {
                        data = reason + (adv !== "" ? ("+" + adv) : "")
                    }
                    break;
                case "message":
                    if (packet.data !== "") {
                        data = packet.data
                    }
                    break;
                case "event":
                    var ev = {
                        name: packet.name
                    };
                    if (packet.args && packet.args.length) {
                        ev.args = packet.args
                    }
                    data = JSON.stringify(ev);
                    break;
                case "json":
                    data = JSON.stringify(packet.data);
                    break;
                case "connect":
                    if (packet.qs) {
                        data = packet.qs
                    }
                    break;
                case "ack":
                    data = packet.ackId + (packet.args && packet.args.length ? "+" + JSON.stringify(packet.args) : "");
                    break
            }
            var encoded = [type, id + (ack == "data" ? "+" : ""), endpoint];
            if (data !== null && data !== undefined) {
                encoded.push(data)
            }
            return encoded.join(":")
        };
        parser.encodePayload = function(packets) {
            var decoded = "";
            if (packets.length == 1) {
                return packets[0]
            }
            for (var i = 0, l = packets.length; i < l; i++) {
                var packet = packets[i];
                decoded += "\ufffd" + packet.length + "\ufffd" + packets[i]
            }
            return decoded
        };
        var regexp = /([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;
        parser.decodePacket = function(data) {
            var pieces = data.match(regexp);
            if (!pieces) {
                return {}
            }
            var id = pieces[2] || "",
                data = pieces[5] || "",
                packet = {
                    type: packets[pieces[1]],
                    endpoint: pieces[4] || ""
                };
            if (id) {
                packet.id = id;
                if (pieces[3]) {
                    packet.ack = "data"
                } else {
                    packet.ack = true
                }
            }
            switch (packet.type) {
                case "error":
                    var pieces = data.split("+");
                    packet.reason = reasons[pieces[0]] || "";
                    packet.advice = advice[pieces[1]] || "";
                    break;
                case "message":
                    packet.data = data || "";
                    break;
                case "event":
                    try {
                        var opts = JSON.parse(data);
                        packet.name = opts.name;
                        packet.args = opts.args
                    } catch (e) {}
                    packet.args = packet.args || [];
                    break;
                case "json":
                    try {
                        packet.data = JSON.parse(data)
                    } catch (e) {}
                    break;
                case "connect":
                    packet.qs = data || "";
                    break;
                case "ack":
                    var pieces = data.match(/^([0-9]+)(\+)?(.*)/);
                    if (pieces) {
                        packet.ackId = pieces[1];
                        packet.args = [];
                        if (pieces[3]) {
                            try {
                                packet.args = pieces[3] ? JSON.parse(pieces[3]) : []
                            } catch (e) {}
                        }
                    }
                    break;
                case "disconnect":
                case "heartbeat":
                    break
            }
            return packet
        };
        parser.decodePayload = function(data) {
            if (data.charAt(0) == "\ufffd") {
                var ret = [];
                for (var i = 1, length = ""; i < data.length; i++) {
                    if (data.charAt(i) == "\ufffd") {
                        ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));
                        i += Number(length) + 1;
                        length = ""
                    } else {
                        length += data.charAt(i)
                    }
                }
                return ret
            } else {
                return [parser.decodePacket(data)]
            }
        }
    })("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports);
    (function(exports, io) {
        exports.Transport = Transport;

        function Transport(socket, sessid) {
            this.socket = socket;
            this.sessid = sessid
        }
        io.util.mixin(Transport, io.EventEmitter);
        Transport.prototype.heartbeats = function() {
            return true
        };
        Transport.prototype.onData = function(data) {
            this.clearCloseTimeout();
            if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {
                this.setCloseTimeout()
            }
            if (data !== "") {
                var msgs = io.parser.decodePayload(data);
                if (msgs && msgs.length) {
                    for (var i = 0, l = msgs.length; i < l; i++) {
                        this.onPacket(msgs[i])
                    }
                }
            }
            return this
        };
        Transport.prototype.onPacket = function(packet) {
            this.socket.setHeartbeatTimeout();
            if (packet.type == "heartbeat") {
                return this.onHeartbeat()
            }
            if (packet.type == "connect" && packet.endpoint == "") {
                this.onConnect()
            }
            if (packet.type == "error" && packet.advice == "reconnect") {
                this.isOpen = false
            }
            this.socket.onPacket(packet);
            return this
        };
        Transport.prototype.setCloseTimeout = function() {
            if (!this.closeTimeout) {
                var self = this;
                this.closeTimeout = setTimeout(function() {
                    self.onDisconnect()
                }, this.socket.closeTimeout)
            }
        };
        Transport.prototype.onDisconnect = function() {
            if (this.isOpen) {
                this.close()
            }
            this.clearTimeouts();
            this.socket.onDisconnect();
            return this
        };
        Transport.prototype.onConnect = function() {
            this.socket.onConnect();
            return this
        };
        Transport.prototype.clearCloseTimeout = function() {
            if (this.closeTimeout) {
                clearTimeout(this.closeTimeout);
                this.closeTimeout = null
            }
        };
        Transport.prototype.clearTimeouts = function() {
            this.clearCloseTimeout();
            if (this.reopenTimeout) {
                clearTimeout(this.reopenTimeout)
            }
        };
        Transport.prototype.packet = function(packet) {
            this.send(io.parser.encodePacket(packet))
        };
        Transport.prototype.onHeartbeat = function() {
            this.packet({
                type: "heartbeat"
            })
        };
        Transport.prototype.onOpen = function() {
            this.isOpen = true;
            this.clearCloseTimeout();
            this.socket.onOpen()
        };
        Transport.prototype.onClose = function() {
            this.isOpen = false;
            this.socket.onClose();
            this.onDisconnect()
        };
        Transport.prototype.prepareUrl = function() {
            var options = this.socket.options;
            return this.scheme() + "://" + options.host + ":" + options.port + "/" + options.resource + "/" + io.protocol + "/" + this.name + "/" + this.sessid
        };
        Transport.prototype.ready = function(socket, fn) {
            fn.call(this)
        }
    })("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports);
    (function(exports, io, global) {
        exports.Socket = Socket;

        function Socket(options) {
            this.options = {
                port: 80,
                secure: false,
                document: "document" in global ? document : false,
                resource: "socket.io",
                transports: io.transports,
                "connect timeout": 10000,
                "try multiple transports": true,
                "reconnect": true,
                "reconnection delay": 500,
                "reconnection limit": Infinity,
                "reopen delay": 3000,
                "max reconnection attempts": 10,
                "sync disconnect on unload": false,
                "auto connect": true,
                "flash policy port": 10843,
                "manualFlush": false
            };
            io.util.merge(this.options, options);
            this.connected = false;
            this.open = false;
            this.connecting = false;
            this.reconnecting = false;
            this.namespaces = {};
            this.buffer = [];
            this.doBuffer = false;
            if (this.options["sync disconnect on unload"] && (!this.isXDomain() || io.util.ua.hasCORS)) {
                var self = this;
                io.util.on(global, "beforeunload", function() {
                    self.disconnectSync()
                }, false)
            }
            if (this.options["auto connect"]) {
                this.connect()
            }
        }
        io.util.mixin(Socket, io.EventEmitter);
        Socket.prototype.of = function(name) {
            if (!this.namespaces[name]) {
                this.namespaces[name] = new io.SocketNamespace(this, name);
                if (name !== "") {
                    this.namespaces[name].packet({
                        type: "connect"
                    })
                }
            }
            return this.namespaces[name]
        };
        Socket.prototype.publish = function() {
            this.emit.apply(this, arguments);
            var nsp;
            for (var i in this.namespaces) {
                if (this.namespaces.hasOwnProperty(i)) {
                    nsp = this.of(i);
                    nsp.$emit.apply(nsp, arguments)
                }
            }
        };

        function empty() {}
        Socket.prototype.handshake = function(fn) {
            var self = this,
                options = this.options;

            function complete(data) {
                if (data instanceof Error) {
                    self.connecting = false;
                    self.onError(data.message)
                } else {
                    fn.apply(null, data.split(":"))
                }
            }
            var url = ["http" + (options.secure ? "s" : "") + ":/", options.host + ":" + options.port, options.resource, io.protocol, io.util.query(this.options.query, "t=" + +new Date)].join("/");
            if (this.isXDomain() && !io.util.ua.hasCORS) {
                var insertAt = document.getElementsByTagName("script")[0],
                    script = document.createElement("script");
                script.src = url + "&jsonp=" + io.j.length;
                insertAt.parentNode.insertBefore(script, insertAt);
                io.j.push(function(data) {
                    complete(data);
                    script.parentNode.removeChild(script)
                })
            } else {
                var xhr = io.util.request();
                xhr.open("GET", url, true);
                if (this.isXDomain()) {
                    xhr.withCredentials = true
                }
                xhr.onreadystatechange = function() {
                    if (xhr.readyState == 4) {
                        xhr.onreadystatechange = empty;
                        if (xhr.status == 200) {
                            complete(xhr.responseText)
                        } else {
                            if (xhr.status == 403) {
                                self.onError(xhr.responseText)
                            } else {
                                self.connecting = false;
                                !self.reconnecting && self.onError(xhr.responseText)
                            }
                        }
                    }
                };
                xhr.send(null)
            }
        };
        Socket.prototype.getTransport = function(override) {
            var transports = override || this.transports;
            for (var i = 0, transport; transport = transports[i]; i++) {
                if (io.Transport[transport] && io.Transport[transport].check(this) && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {
                    return new io.Transport[transport](this, this.sessionid)
                }
            }
            return null
        };
        Socket.prototype.connect = function(fn) {
            if (this.connecting) {
                return this
            }
            var self = this;
            self.connecting = true;
            this.handshake(function(sid, heartbeat, close, transports) {
                self.sessionid = sid;
                self.closeTimeout = close * 1000;
                self.heartbeatTimeout = heartbeat * 1000;
                if (!self.transports) {
                    self.transports = self.origTransports = (transports ? io.util.intersect(transports.split(","), self.options.transports) : self.options.transports)
                }
                self.setHeartbeatTimeout();

                function connect(transports) {
                    if (self.transport) {
                        self.transport.clearTimeouts()
                    }
                    self.transport = self.getTransport(transports);
                    if (!self.transport) {
                        return self.publish("connect_failed")
                    }
                    self.transport.ready(self, function() {
                        self.connecting = true;
                        self.publish("connecting", self.transport.name);
                        self.transport.open();
                        if (self.options["connect timeout"]) {
                            self.connectTimeoutTimer = setTimeout(function() {
                                if (!self.connected) {
                                    self.connecting = false;
                                    if (self.options["try multiple transports"]) {
                                        var remaining = self.transports;
                                        while (remaining.length > 0 && remaining.splice(0, 1)[0] != self.transport.name) {}
                                        if (remaining.length) {
                                            connect(remaining)
                                        } else {
                                            self.publish("connect_failed")
                                        }
                                    }
                                }
                            }, self.options["connect timeout"])
                        }
                    })
                }
                connect(self.transports);
                self.once("connect", function() {
                    clearTimeout(self.connectTimeoutTimer);
                    fn && typeof fn == "function" && fn()
                })
            });
            return this
        };
        Socket.prototype.setHeartbeatTimeout = function() {
            clearTimeout(this.heartbeatTimeoutTimer);
            if (this.transport && !this.transport.heartbeats()) {
                return
            }
            var self = this;
            this.heartbeatTimeoutTimer = setTimeout(function() {
                self.transport.onClose()
            }, this.heartbeatTimeout)
        };
        Socket.prototype.packet = function(data) {
            if (this.connected && !this.doBuffer) {
                this.transport.packet(data)
            } else {
                this.buffer.push(data)
            }
            return this
        };
        Socket.prototype.setBuffer = function(v) {
            this.doBuffer = v;
            if (!v && this.connected && this.buffer.length) {
                if (!this.options["manualFlush"]) {
                    this.flushBuffer()
                }
            }
        };
        Socket.prototype.flushBuffer = function() {
            this.transport.payload(this.buffer);
            this.buffer = []
        };
        Socket.prototype.disconnect = function() {
            if (this.connected || this.connecting) {
                if (this.open) {
                    this.of("").packet({
                        type: "disconnect"
                    })
                }
                this.onDisconnect("booted")
            }
            return this
        };
        Socket.prototype.disconnectSync = function() {
            var xhr = io.util.request();
            var uri = ["http" + (this.options.secure ? "s" : "") + ":/", this.options.host + ":" + this.options.port, this.options.resource, io.protocol, "", this.sessionid].join("/") + "/?disconnect=1";
            xhr.open("GET", uri, false);
            xhr.send(null);
            this.onDisconnect("booted")
        };
        Socket.prototype.isXDomain = function() {
            var port = global.location.port || ("https:" == global.location.protocol ? 443 : 80);
            return this.options.host !== global.location.hostname || this.options.port != port
        };
        Socket.prototype.onConnect = function() {
            if (!this.connected) {
                this.connected = true;
                this.connecting = false;
                if (!this.doBuffer) {
                    this.setBuffer(false)
                }
                this.emit("connect")
            }
        };
        Socket.prototype.onOpen = function() {
            this.open = true
        };
        Socket.prototype.onClose = function() {
            this.open = false;
            clearTimeout(this.heartbeatTimeoutTimer)
        };
        Socket.prototype.onPacket = function(packet) {
            this.of(packet.endpoint).onPacket(packet)
        };
        Socket.prototype.onError = function(err) {
            if (err && err.advice) {
                if (err.advice === "reconnect" && (this.connected || this.connecting)) {
                    this.disconnect();
                    if (this.options.reconnect) {
                        this.reconnect()
                    }
                }
            }
            this.publish("error", err && err.reason ? err.reason : err)
        };
        Socket.prototype.onDisconnect = function(reason) {
            var wasConnected = this.connected,
                wasConnecting = this.connecting;
            this.connected = false;
            this.connecting = false;
            this.open = false;
            if (wasConnected || wasConnecting) {
                this.transport.close();
                this.transport.clearTimeouts();
                if (wasConnected) {
                    this.publish("disconnect", reason);
                    if ("booted" != reason && this.options.reconnect && !this.reconnecting) {
                        this.reconnect()
                    }
                }
            }
        };
        Socket.prototype.reconnect = function() {
            this.reconnecting = true;
            this.reconnectionAttempts = 0;
            this.reconnectionDelay = this.options["reconnection delay"];
            var self = this,
                maxAttempts = this.options["max reconnection attempts"],
                tryMultiple = this.options["try multiple transports"],
                limit = this.options["reconnection limit"];

            function reset() {
                if (self.connected) {
                    for (var i in self.namespaces) {
                        if (self.namespaces.hasOwnProperty(i) && "" !== i) {
                            self.namespaces[i].packet({
                                type: "connect"
                            })
                        }
                    }
                    self.publish("reconnect", self.transport.name, self.reconnectionAttempts)
                }
                clearTimeout(self.reconnectionTimer);
                self.removeListener("connect_failed", maybeReconnect);
                self.removeListener("connect", maybeReconnect);
                self.reconnecting = false;
                delete self.reconnectionAttempts;
                delete self.reconnectionDelay;
                delete self.reconnectionTimer;
                delete self.redoTransports;
                self.options["try multiple transports"] = tryMultiple
            }

            function maybeReconnect() {
                if (!self.reconnecting) {
                    return
                }
                if (self.connected) {
                    return reset()
                }
                if (self.connecting && self.reconnecting) {
                    return self.reconnectionTimer = setTimeout(maybeReconnect, 1000)
                }
                if (self.reconnectionAttempts++ >= maxAttempts) {
                    if (!self.redoTransports) {
                        self.on("connect_failed", maybeReconnect);
                        self.options["try multiple transports"] = true;
                        self.transports = self.origTransports;
                        self.transport = self.getTransport();
                        self.redoTransports = true;
                        self.connect()
                    } else {
                        self.publish("reconnect_failed");
                        reset()
                    }
                } else {
                    if (self.reconnectionDelay < limit) {
                        self.reconnectionDelay *= 2
                    }
                    self.connect();
                    self.publish("reconnecting", self.reconnectionDelay, self.reconnectionAttempts);
                    self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay)
                }
            }
            this.options["try multiple transports"] = false;
            this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);
            this.on("connect", maybeReconnect)
        }
    })("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports, this);
    (function(exports, io) {
        exports.SocketNamespace = SocketNamespace;

        function SocketNamespace(socket, name) {
            this.socket = socket;
            this.name = name || "";
            this.flags = {};
            this.json = new Flag(this, "json");
            this.ackPackets = 0;
            this.acks = {}
        }
        io.util.mixin(SocketNamespace, io.EventEmitter);
        SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;
        SocketNamespace.prototype.of = function() {
            return this.socket.of.apply(this.socket, arguments)
        };
        SocketNamespace.prototype.packet = function(packet) {
            packet.endpoint = this.name;
            this.socket.packet(packet);
            this.flags = {};
            return this
        };
        SocketNamespace.prototype.send = function(data, fn) {
            var packet = {
                type: this.flags.json ? "json" : "message",
                data: data
            };
            if ("function" == typeof fn) {
                packet.id = ++this.ackPackets;
                packet.ack = true;
                this.acks[packet.id] = fn
            }
            return this.packet(packet)
        };
        SocketNamespace.prototype.emit = function(name) {
            var args = Array.prototype.slice.call(arguments, 1),
                lastArg = args[args.length - 1],
                packet = {
                    type: "event",
                    name: name
                };
            if ("function" == typeof lastArg) {
                packet.id = ++this.ackPackets;
                packet.ack = "data";
                this.acks[packet.id] = lastArg;
                args = args.slice(0, args.length - 1)
            }
            packet.args = args;
            return this.packet(packet)
        };
        SocketNamespace.prototype.disconnect = function() {
            if (this.name === "") {
                this.socket.disconnect()
            } else {
                this.packet({
                    type: "disconnect"
                });
                this.$emit("disconnect")
            }
            return this
        };
        SocketNamespace.prototype.onPacket = function(packet) {
            var self = this;

            function ack() {
                self.packet({
                    type: "ack",
                    args: io.util.toArray(arguments),
                    ackId: packet.id
                })
            }
            switch (packet.type) {
                case "connect":
                    this.$emit("connect");
                    break;
                case "disconnect":
                    if (this.name === "") {
                        this.socket.onDisconnect(packet.reason || "booted")
                    } else {
                        this.$emit("disconnect", packet.reason)
                    }
                    break;
                case "message":
                case "json":
                    var params = ["message", packet.data];
                    if (packet.ack == "data") {
                        params.push(ack)
                    } else {
                        if (packet.ack) {
                            this.packet({
                                type: "ack",
                                ackId: packet.id
                            })
                        }
                    }
                    this.$emit.apply(this, params);
                    break;
                case "event":
                    var params = [packet.name].concat(packet.args);
                    if (packet.ack == "data") {
                        params.push(ack)
                    }
                    this.$emit.apply(this, params);
                    break;
                case "ack":
                    if (this.acks[packet.ackId]) {
                        this.acks[packet.ackId].apply(this, packet.args);
                        delete this.acks[packet.ackId]
                    }
                    break;
                case "error":
                    if (packet.advice) {
                        this.socket.onError(packet)
                    } else {
                        if (packet.reason == "unauthorized") {
                            this.$emit("connect_failed", packet.reason)
                        } else {
                            this.$emit("error", packet.reason)
                        }
                    }
                    break
            }
        };

        function Flag(nsp, name) {
            this.namespace = nsp;
            this.name = name
        }
        Flag.prototype.send = function() {
            this.namespace.flags[this.name] = true;
            this.namespace.send.apply(this.namespace, arguments)
        };
        Flag.prototype.emit = function() {
            this.namespace.flags[this.name] = true;
            this.namespace.emit.apply(this.namespace, arguments)
        }
    })("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports);
    (function(exports, io, global) {
        exports.websocket = WS;

        function WS() {
            io.Transport.apply(this, arguments)
        }
        io.util.inherit(WS, io.Transport);
        WS.prototype.name = "websocket";
        WS.prototype.open = function() {
            var query = io.util.query(this.socket.options.query),
                self = this,
                Socket;
            if (!Socket) {
                Socket = global.MozWebSocket || global.WebSocket
            }
            this.websocket = new Socket(this.prepareUrl() + query);
            this.websocket.onopen = function() {
                self.onOpen();
                self.socket.setBuffer(false)
            };
            this.websocket.onmessage = function(ev) {
                self.onData(ev.data)
            };
            this.websocket.onclose = function() {
                self.onClose();
                self.socket.setBuffer(true)
            };
            this.websocket.onerror = function(e) {
                self.onError(e)
            };
            return this
        };
        if (io.util.ua.iDevice) {
            WS.prototype.send = function(data) {
                var self = this;
                setTimeout(function() {
                    self.websocket.send(data)
                }, 0);
                return this
            }
        } else {
            WS.prototype.send = function(data) {
                this.websocket.send(data);
                return this
            }
        }
        WS.prototype.payload = function(arr) {
            for (var i = 0, l = arr.length; i < l; i++) {
                this.packet(arr[i])
            }
            return this
        };
        WS.prototype.close = function() {
            this.websocket.close();
            return this
        };
        WS.prototype.onError = function(e) {
            this.socket.onError(e)
        };
        WS.prototype.scheme = function() {
            return this.socket.options.secure ? "wss" : "ws"
        };
        WS.check = function() {
            return ("WebSocket" in global && !("__addTask" in WebSocket)) || "MozWebSocket" in global
        };
        WS.xdomainCheck = function() {
            return true
        };
        io.transports.push("websocket")
    })("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, this);
    (function(exports, io, global) {
        exports.XHR = XHR;

        function XHR(socket) {
            if (!socket) {
                return
            }
            io.Transport.apply(this, arguments);
            this.sendBuffer = []
        }
        io.util.inherit(XHR, io.Transport);
        XHR.prototype.open = function() {
            this.socket.setBuffer(false);
            this.onOpen();
            this.get();
            this.setCloseTimeout();
            return this
        };
        XHR.prototype.payload = function(payload) {
            var msgs = [];
            for (var i = 0, l = payload.length; i < l; i++) {
                msgs.push(io.parser.encodePacket(payload[i]))
            }
            this.send(io.parser.encodePayload(msgs))
        };
        XHR.prototype.send = function(data) {
            this.post(data);
            return this
        };

        function empty() {}
        XHR.prototype.post = function(data) {
            var self = this;
            this.socket.setBuffer(true);

            function stateChange() {
                if (this.readyState == 4) {
                    this.onreadystatechange = empty;
                    self.posting = false;
                    if (this.status == 200) {
                        self.socket.setBuffer(false)
                    } else {
                        self.onClose()
                    }
                }
            }

            function onload() {
                this.onload = empty;
                self.socket.setBuffer(false)
            }
            this.sendXHR = this.request("POST");
            if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {
                this.sendXHR.onload = this.sendXHR.onerror = onload
            } else {
                this.sendXHR.onreadystatechange = stateChange
            }
            this.sendXHR.send(data)
        };
        XHR.prototype.close = function() {
            this.onClose();
            return this
        };
        XHR.prototype.request = function(method) {
            var req = io.util.request(this.socket.isXDomain()),
                query = io.util.query(this.socket.options.query, "t=" + +new Date);
            req.open(method || "GET", this.prepareUrl() + query, true);
            if (method == "POST") {
                try {
                    if (req.setRequestHeader) {
                        req.setRequestHeader("Content-type", "text/plain;charset=UTF-8")
                    } else {
                        req.contentType = "text/plain"
                    }
                } catch (e) {}
            }
            return req
        };
        XHR.prototype.scheme = function() {
            return this.socket.options.secure ? "https" : "http"
        };
        XHR.check = function(socket, xdomain) {
            try {
                var request = io.util.request(xdomain),
                    usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),
                    socketProtocol = (socket && socket.options && socket.options.secure ? "https:" : "http:"),
                    isXProtocol = (global.location && socketProtocol != global.location.protocol);
                if (request && !(usesXDomReq && isXProtocol)) {
                    return true
                }
            } catch (e) {}
            return false
        };
        XHR.xdomainCheck = function(socket) {
            return XHR.check(socket, true)
        }
    })("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, this);
    (function(exports, io) {
        exports.htmlfile = HTMLFile;

        function HTMLFile() {
            io.Transport.XHR.apply(this, arguments)
        }
        io.util.inherit(HTMLFile, io.Transport.XHR);
        HTMLFile.prototype.name = "htmlfile";
        HTMLFile.prototype.get = function() {
            this.doc = new window[(["Active"].concat("Object").join("X"))]("htmlfile");
            this.doc.open();
            this.doc.write("<html></html>");
            this.doc.close();
            this.doc.parentWindow.s = this;
            var iframeC = this.doc.createElement("div");
            iframeC.className = "socketio";
            this.doc.body.appendChild(iframeC);
            this.iframe = this.doc.createElement("iframe");
            iframeC.appendChild(this.iframe);
            var self = this,
                query = io.util.query(this.socket.options.query, "t=" + +new Date);
            this.iframe.src = this.prepareUrl() + query;
            io.util.on(window, "unload", function() {
                self.destroy()
            })
        };
        HTMLFile.prototype._ = function(data, doc) {
            data = data.replace(/\\\//g, "/");
            this.onData(data);
            try {
                var script = doc.getElementsByTagName("script")[0];
                script.parentNode.removeChild(script)
            } catch (e) {}
        };
        HTMLFile.prototype.destroy = function() {
            if (this.iframe) {
                try {
                    this.iframe.src = "about:blank"
                } catch (e) {}
                this.doc = null;
                this.iframe.parentNode.removeChild(this.iframe);
                this.iframe = null;
                CollectGarbage()
            }
        };
        HTMLFile.prototype.close = function() {
            this.destroy();
            return io.Transport.XHR.prototype.close.call(this)
        };
        HTMLFile.check = function(socket) {
            if (typeof window != "undefined" && (["Active"].concat("Object").join("X")) in window) {
                try {
                    var a = new window[(["Active"].concat("Object").join("X"))]("htmlfile");
                    return a && io.Transport.XHR.check(socket)
                } catch (e) {}
            }
            return false
        };
        HTMLFile.xdomainCheck = function() {
            return false
        };
        io.transports.push("htmlfile")
    })("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports);
    (function(exports, io, global) {
        exports["xhr-polling"] = XHRPolling;

        function XHRPolling() {
            io.Transport.XHR.apply(this, arguments)
        }
        io.util.inherit(XHRPolling, io.Transport.XHR);
        io.util.merge(XHRPolling, io.Transport.XHR);
        XHRPolling.prototype.name = "xhr-polling";
        XHRPolling.prototype.heartbeats = function() {
            return false
        };
        XHRPolling.prototype.open = function() {
            var self = this;
            io.Transport.XHR.prototype.open.call(self);
            return false
        };

        function empty() {}
        XHRPolling.prototype.get = function() {
            if (!this.isOpen) {
                return
            }
            var self = this;

            function stateChange() {
                if (this.readyState == 4) {
                    this.onreadystatechange = empty;
                    if (this.status == 200) {
                        self.onData(this.responseText);
                        self.get()
                    } else {
                        self.onClose()
                    }
                }
            }

            function onload() {
                this.onload = empty;
                this.onerror = empty;
                self.retryCounter = 1;
                self.onData(this.responseText);
                self.get()
            }

            function onerror() {
                self.retryCounter++;
                if (!self.retryCounter || self.retryCounter > 3) {
                    self.onClose()
                } else {
                    self.get()
                }
            }
            this.xhr = this.request();
            if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {
                this.xhr.onload = onload;
                this.xhr.onerror = onerror
            } else {
                this.xhr.onreadystatechange = stateChange
            }
            this.xhr.send(null)
        };
        XHRPolling.prototype.onClose = function() {
            io.Transport.XHR.prototype.onClose.call(this);
            if (this.xhr) {
                this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;
                try {
                    this.xhr.abort()
                } catch (e) {}
                this.xhr = null
            }
        };
        XHRPolling.prototype.ready = function(socket, fn) {
            var self = this;
            io.util.defer(function() {
                fn.call(self, socket)
            })
        };
        io.transports.push("xhr-polling")
    })("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, this);
    (function(exports, io, global) {
        var indicator = global.document && "MozAppearance" in global.document.documentElement.style;
        exports["jsonp-polling"] = JSONPPolling;

        function JSONPPolling() {
            io.Transport["xhr-polling"].apply(this, arguments);
            this.index = io.j.length;
            var self = this;
            io.j.push(function(msg) {
                self._(msg)
            })
        }
        io.util.inherit(JSONPPolling, io.Transport["xhr-polling"]);
        JSONPPolling.prototype.name = "jsonp-polling";
        JSONPPolling.prototype.post = function(data) {
            var self = this,
                query = io.util.query(this.socket.options.query, "t=" + (+new Date) + "&i=" + this.index);
            if (!this.form) {
                var form = document.createElement("form"),
                    area = document.createElement("textarea"),
                    id = this.iframeId = "socketio_iframe_" + this.index,
                    iframe;
                form.className = "socketio";
                form.style.position = "absolute";
                form.style.top = "0px";
                form.style.left = "0px";
                form.style.display = "none";
                form.target = id;
                form.method = "POST";
                form.setAttribute("accept-charset", "utf-8");
                area.name = "d";
                form.appendChild(area);
                document.body.appendChild(form);
                this.form = form;
                this.area = area
            }
            this.form.action = this.prepareUrl() + query;

            function complete() {
                initIframe();
                self.socket.setBuffer(false)
            }

            function initIframe() {
                if (self.iframe) {
                    self.form.removeChild(self.iframe)
                }
                try {
                    iframe = document.createElement('<iframe name="' + self.iframeId + '">')
                } catch (e) {
                    iframe = document.createElement("iframe");
                    iframe.name = self.iframeId
                }
                iframe.id = self.iframeId;
                self.form.appendChild(iframe);
                self.iframe = iframe
            }
            initIframe();
            this.area.value = io.JSON.stringify(data);
            try {
                this.form.submit()
            } catch (e) {}
            if (this.iframe.attachEvent) {
                iframe.onreadystatechange = function() {
                    if (self.iframe.readyState == "complete") {
                        complete()
                    }
                }
            } else {
                this.iframe.onload = complete
            }
            this.socket.setBuffer(true)
        };
        JSONPPolling.prototype.get = function() {
            var self = this,
                script = document.createElement("script"),
                query = io.util.query(this.socket.options.query, "t=" + (+new Date) + "&i=" + this.index);
            if (this.script) {
                this.script.parentNode.removeChild(this.script);
                this.script = null
            }
            script.async = true;
            script.src = this.prepareUrl() + query;
            script.onerror = function() {
                self.onClose()
            };
            var insertAt = document.getElementsByTagName("script")[0];
            insertAt.parentNode.insertBefore(script, insertAt);
            this.script = script;
            if (indicator) {
                setTimeout(function() {
                    var iframe = document.createElement("iframe");
                    document.body.appendChild(iframe);
                    document.body.removeChild(iframe)
                }, 100)
            }
        };
        JSONPPolling.prototype._ = function(msg) {
            this.onData(msg);
            if (this.isOpen) {
                this.get()
            }
            return this
        };
        JSONPPolling.prototype.ready = function(socket, fn) {
            var self = this;
            if (!indicator) {
                return fn.call(this)
            }
            io.util.load(function() {
                fn.call(self)
            })
        };
        JSONPPolling.check = function() {
            return "document" in global
        };
        JSONPPolling.xdomainCheck = function() {
            return true
        };
        io.transports.push("jsonp-polling")
    })("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, this);
    if (typeof define === "function" && define.amd) {
        define([], function() {
            return io
        })
    }
}());

},{}],18:[function(require,module,exports){
(function (process){
var Config = require('./config');
'use strict';


var isServer = typeof(window) === 'undefined',
    w = isServer ? {} : window,
    performance = typeof(w.performance) !== 'undefined' ? w.performance : {},
    defineProperty = Object.defineProperty,
    START_MS = Date.now(),
    START = START_MS * 0.001,
    DELTA = 1 / 60,
    FIXED_DELTA = DELTA,
    GLOBAL_FIXED = DELTA,
    SCALE = 1,
    DateNow;


if (isServer) {
    var HR_TIME = process.hrtime();

    DateNow = function () {
        var hrtime = process.hrtime(HR_TIME),
            s = hrtime[0] * 1000,
            ns = hrtime[1] * 1e-6;

        return s + ns;
    }
} else {
    DateNow = function () {
        return Date.now() - START_MS;
    }
}


performance.now || (performance.now = (
performance.webkitNow ||
performance.mozNow ||
performance.msNow ||
performance.oNow ||
DateNow
));

function now() {

    return performance.now() * 0.001;
}


function Time() {

    this.start = START;
    this.sinceStart = 0;
    this.time = 0;
    this.fps = 60;
    this.delta = DELTA;
    this.frameCount = 0;

    defineProperty(this, 'scale', {
        get: function () {
            return SCALE;
        },
        set: function (value) {
            SCALE = value;
            FIXED_DELTA = GLOBAL_FIXED * value
        }
    });

    defineProperty(this, 'fixedDelta', {
        get: function () {
            return FIXED_DELTA;
        },
        set: function (value) {
            GLOBAL_FIXED = value;
            FIXED_DELTA = GLOBAL_FIXED * SCALE;
        }
    });
}


Time.prototype.now = now;


Time.prototype.stamp = function () {

    return Date.now() * 0.001;
};


Time.prototype.stampMS = function () {

    return Date.now();
};


var frameCount = 0,
    last = -1 / 60,
    time = 0,
    delta = 1 / 60,
    fpsFrame = 0,
    fpsLast = 0,
    fpsTime = 0;

Time.prototype.update = function () {
    var MIN_DELTA = Config.MIN_DELTA,
        MAX_DELTA = Config.MAX_DELTA;

    this.frameCount = frameCount++;

    last = time;
    time = now();
    this.sinceStart = time;

    fpsTime = time;
    fpsFrame++;

    if (fpsLast + 1 < fpsTime) {
        this.fps = fpsFrame / (fpsTime - fpsLast);

        fpsLast = fpsTime;
        fpsFrame = 0;
    }

    delta = (time - last) * SCALE;
    this.delta = delta < MIN_DELTA ? MIN_DELTA : delta > MAX_DELTA ? MAX_DELTA : delta;

    this.time = time * SCALE;
};


module.exports = new Time;

}).call(this,require('_process'))
},{"./config":9,"_process":6}],19:[function(require,module,exports){
(function (process,Buffer){
"use strict";


var util = {},
    random = Math.random,

    isServer = typeof(window) === "undefined",
    cwd = isServer ? process.cwd() : window.location.href.match(/.*\//)[0],

    ObjectProto = Object.prototype,
    toString = ObjectProto.toString,
    hasOwnProperty = ObjectProto.hasOwnProperty,

    ArrayProto = Array.prototype,
    ArrayForEach = ArrayProto.forEach,

    keys = Object.keys || (Object.keys = function (obj) {
            var out = [],
                key;

            for (key in obj) {
                if (hasOwnProperty.call(obj, key)) out.push(key);
            }
            return out;
        }),

    isArray = Array.isArray || (Array.isArray = function (obj) {
            return toString.call(obj) === "[object Array]";
        }),

    SPILTER = /[ \_\-\.]+|(?=[A-Z][^A-Z])/g,
    UNDERSCORE = /([a-z])([A-Z])/g,
    FORMAT_REGEX = /%[sdj%]/g;

function isObject(obj) {

    return obj === Object(obj);
}
util.isObject = isObject;


function isArrayLike(obj) {

    return typeof(obj) === "object" && typeof(obj.length) === "number";
}
util.isArrayLike = isArrayLike;
util.isArray = isArray;


function isArguments(obj) {

    return toString.call(obj) === "[object Arguments]";
}
util.isArguments = isArguments;


function isFunction(obj) {

    return typeof(obj) === "function"
}
util.isFunction = isFunction;


function isString(obj) {

    return toString.call(obj) === "[object String]";
}
util.isString = isString;


function isNumber(obj) {

    return toString.call(obj) === "[object Number]";
}
util.isNumber = isNumber;


function isDecimal(obj) {

    return isNumber(obj) && obj % 1 !== 0;
}
util.isDecimal = isDecimal;


function isInteger(obj) {

    return isNumber(obj) && obj % 1 === 0;
}
util.isInteger = isInteger;


function isDate(obj) {

    return toString.call(obj) === "[object Date]";
}
util.isDate = isDate;


function isRegExp(obj) {

    return toString.call(obj) === "[object RegExp]";
}
util.isRegExp = isRegExp;


util.isFinite = isFinite;


util.isNaN = isNaN;


function isBoolean(obj) {

    return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
}
util.isBoolean = isBoolean;


function isNull(obj) {

    return obj === null;
}
util.isNull = isNull;


function isUndefined(obj) {

    return obj === void 0;
}
util.isUndefined = isUndefined;


function has(obj, key) {

    return hasOwnProperty.call(obj, key);
}
util.has = has;


function format(fmt) {
    var i = 1,
        args = arguments,
        len = args.length;

    return String(fmt).replace(FORMAT_REGEX, function (x) {
        if (x === "%%") return "%";
        if (i >= len) return x;

        if (x === "%s") {
            return String(args[i++]);
        } else if (x === "%d") {
            return Number(args[i++]);
        } else if (x === "%j") {
            try {
                return JSON.stringify(args[i++]);
            } catch (e) {
                return "[Circular]";
            }
        } else {
            return x;
        }
    });
}
util.format = format;


function camelize(word, lowFirstLetter) {
    var parts = word.split(SPILTER),
        string = "",
        part, i, il;

    for (i = 0, il = parts.length; i < il; i++) {
        part = parts[i];
        string += part[0].toUpperCase() + part.slice(1).toLowerCase();
    }

    return lowFirstLetter ? string[0].toLowerCase() + string.slice(1) : string;
};
util.camelize = camelize;


function underscore(word) {

    return word.replace(SPILTER, "").replace(UNDERSCORE, "$1_$2").toLowerCase();
};
util.underscore = underscore;


function merge(obj, add) {
    var key;

    for (key in add) {
        if (obj[key] == undefined) obj[key] = add[key];
    }

    return obj;
};
util.merge = merge;


function override(obj, add) {
    var key;

    for (key in add) {
        if (add[key] != undefined) obj[key] = add[key];
    }

    return obj;
};
util.override = override;


function copy(obj, out) {
    var type = typeof(obj),
        key, i, il;

    if (type !== "object") return obj;

    if (isArrayLike(obj)) {
        out = [];
        for (i = 0, il = obj.length; i < il; i++) out[i] = copy(obj[i]);
    } else if (isObject(obj)) {
        out = {};
        for (key in obj) out[key] = copy(obj[key]);
    }

    return out;
};
util.copy = copy;


function clear(obj) {
    var key;

    for (key in obj) delete obj[key];

    return obj;
};
util.clear = clear;


util.keys = keys;


function arrayBufferToBase64(buffer) {
    var binary = "",
        bytes = new Uint8Array(buffer),
        len = bytes.byteLength,
        i = 0;

    for (; i < len; i++) binary += String.fromCharCode(bytes[i]);

    return isServer ? new Buffer(binary.toString(), "binary").toString("base64") : window.btoa(binary);
}
util.arrayBufferToBase64 = arrayBufferToBase64;


function base64ToArrayBuffer(str) {
    var binary = isServer ? new Buffer(str, "base64").toString("binary") : window.atob(str),
        len = binary.length,
        bytes = new Uint8Array(len).
            i = 0;

    for (; i < len; i++) bytes[i] = str.charCodeAt(i);

    return bytes.buffer;
}
util.base64ToArrayBuffer = base64ToArrayBuffer;


function uid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(UID_REPLACER, function (c) {
        var a = 16 * random() | 0;
        return ("x" == c ? a : a & 3 | 8).toString(16);
    })
}
var UID_REPLACER = /[xy]/g;
util.uid = uid;


function each(obj, iterator, ctx) {
    if (obj == null) return;

    if (ArrayForEach && obj.forEach === ArrayForEach) {
        obj.forEach(iterator, ctx);
    } else if (obj.length === +obj.length) {
        for (var i = 0, length = obj.length; i < length; i++) {
            if (iterator.call(ctx, obj[i], i, obj) === false) return;
        }
    } else {
        var objKeys = keys(obj);

        for (var i = 0, length = objKeys.length; i < length; i++) {
            if (iterator.call(ctx, obj[objKeys[i]], objKeys[i], obj) === false) return;
        }
    }
}
util.each = each;


function normalizePath(path) {
    var parts = path.split("/"),
        directories = [],
        i = 0,
        il = parts.length,
        prev, directory;

    for (; i < il; i++) {
        directory = parts[i];

        if (directory === "" && i !== 0 && i !== il) continue;
        if (directory === "." && prev !== undefined) continue;
        if (directories.length === 1 && directories[0] === "" && (directory === "." || directory === "..")) continue;

        if (directory === ".." && directories.length && prev !== ".." && prev !== "." && prev !== undefined && (prev !== "")) {
            directories.pop();
            prev = directories[0];
        } else {
            if (prev === ".") directories.pop();
            directories.push(directory);
            prev = directory;
        }
    }
    if ((path = directories[0]) && path.indexOf(":") === path.length - 1) directories[0] += "/";

    return directories.join("/");
}
util.normalizePath = normalizePath;


function relativePath(path) {
    path || (path = "./");
    return normalizePath(require.toUrl(path));
}
util.relativePath = relativePath;


function absolutePath(path) {
    path || (path = "./");
    return normalizePath(cwd + require.toUrl(path));
}
util.absolutePath = absolutePath;


if (!isServer) {
    util.createWorker = function (fn) {
        var blobURL = URL.createObjectURL(
                new Blob([
                    "(function() {\n" +
                    "importScripts(\"" + absolutePath("odin/require.js") + "\");\n" +
                    "require.config({baseUrl: \"" + absolutePath("./") + "\"});\n" +
                    "(" + fn.toString() + ").call(this);\n" +
                    "}).call(this);"
                ], {
                    type: "application/javascript"
                })
            ),
            worker = new Worker(blobURL);

        URL.revokeObjectURL(blobURL);

        return worker;
    };

    util.ajax = function ajax(opts) {
        opts || (opts = {});
        var request = new XMLHttpRequest,
            src = opts.src,
            method = opts.method || (opts.method = "GET"),
            before = opts.before,
            success = opts.success,
            error = opts.error,
            async = opts.async != undefined ? !!opts.async : true;

        request.addEventListener("load", function () {
            var status = this.status;

            if ((status > 199 && status < 301) || status == 304) {
                if (typeof(success) === "function") success.call(this);
            } else {
                if (typeof(error) === "function") {
                    error.call(this, new Error(method + " " + src + " " + status));
                } else {
                    throw new Error(method + " " + src + " " + status);
                }
            }
        }, false);
        request.addEventListener("error", function () {
            if (typeof(error) === "function") {
                error(new Error(method + " " + src));
            } else {
                throw new Error(method + " " + src);
            }
        }, false);

        request.open(method, src, async);
        if (typeof(before) === "function") before.call(request);
        request.send();
    };
}


module.exports = util;

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":6,"buffer":2}],20:[function(require,module,exports){
var Log = require("../../base/log");
var Class = require("../../base/class");
"use strict";


var defineProperty = Object.defineProperty;


function Asset(opts) {
    opts || (opts = {});

    Class.call(this);

    this._name = opts.name != undefined ? opts.name : "Asset_" + this._id;
    this._loaded = false;

    this.json = opts.json != undefined ? !!opts.json : true;

    this.assets = undefined;
    this.load = opts.load != undefined ? !!opts.load : !!opts.src;
    this.src = opts.src;
    this.raw = opts.raw;
}

Class.extend(Asset);


defineProperty(Asset.prototype, "name", {
    get: function () {
        return this._name;
    },
    set: function (value) {
        var assets = this.assets,
            hash;

        if (assets) {
            hash = assets.hash;

            if (hash[value]) {
                Log.warn("Asset.set name: can't change name to " + value + " Assets already have an asset with same name");
                return;
            }

            delete hash[this.name];
            hash[value] = this;
        }

        this._name = value;
    }
});


Asset.prototype.copy = function (other) {

    this.sync = other.sync;
    this.json = other.json;

    this.name = other.name + "." + this._id;
    this.src = other.src;
    this.raw = other.raw;

    if (other.assets && this.assets !== other.assets) other.assets.addAsset(this);

    return this;
};


Asset.prototype.clear = function () {

    this.raw = null;
    return this;
};


Asset.prototype.destroy = function () {
    if (!this.assets) {
        Log.error("Asset.destroy: can't destroy Asset if it's not added to Assets");
        return this;
    }

    this.assets.removeAsset(this);
    this.clear();

    return this;
};


Asset.prototype.parse = function (raw) {

    this.raw = raw;
    return this;
};


Asset.prototype.toJSON = function (json, pack) {
    json = Class.prototype.toJSON.call(this, json);

    json.name = this.name;
    if (!pack) json.src = this.src;

    return json;
};


Asset.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.name = json.name;
    this.src = json.src;

    return this;
};


module.exports = Asset;

},{"../../base/class":8,"../../base/log":14}],21:[function(require,module,exports){
var Device = require("../../base/device");
var util = require("../../base/util");
var EventEmitter = require("../../base/event_emitter");
var AudioCtx = require("../../base/audio_ctx");
var Asset = require("./asset");
var Assets = require("./assets");
var Log = require("../../base/log");
"use strict";


var isArray = util.isArray,
    ajax = util.ajax,
    each = util.each;


function getExt(src) {

    return src ? (src.split(".").pop()).toLowerCase() : "none";
};


function AssetLoader() {

    EventEmitter.call(this);

    var supports = this.supports = ["json", "jpeg", "jpg", "png", "gif"];

    if (Device.audioMpeg) supports.push("mpeg");
    if (Device.audioOgg || Device.videoOgg) supports.push("ogg");
    if (Device.audioMp3) supports.push("mp3");
    if (Device.audioMp4 || Device.videoMp4) supports.push("mp4");
}

EventEmitter.extend(AssetLoader);


AssetLoader.prototype.load = function (reload) {
    var _this = this,
        count = Assets.length,
        i = count,
        fn = function (err) {
            if (err) Log.error(err);

            count--;
            if (count <= 0) _this.emit("load");
        };

    if (!count) this.emit("load");
    while (i--) this.loadAsset(Assets[i], fn, reload, true);
};


AssetLoader.prototype.loadAsset = function (asset, callback, reload, known) {
    var _this = this,
        supports = this.supports,
        src = asset.src;

    if (!known || Assets.indexOf(asset) === -1) Assets.addAsset(asset);

    if (!asset.load || !src || asset.raw && !reload) {
        asset._loaded = true;
        callback && callback()
        return;
    }
    ;

    if (isArray(src)) {
        var raw = [],
            exts = [],
            loaded = src.length,
            hasExt = false;

        each(src, function (s, i) {
            var ext = getExt(s);
            exts.push(ext);

            if (!this[ext]) {
                callback && callback(new Error("AssetLoader.load: has no loader for " + src + " of type " + ext));
                return false;
            }

            this[ext](s, function (err, data) {
                loaded--;
                raw[i] = data;

                if (err) Log.error(err);

                if (loaded <= 0) {
                    for (var j = exts.length; j--;) {
                        if (supports.indexOf(exts[i]) !== -1) {
                            hasExt = true;
                            break;
                        }
                    }

                    if (!hasExt) {
                        callback && callback(new Error("AssetLoader.load: device does not support any of the given file types " + exts));
                        return;
                    }

                    asset._loaded = true;
                    asset.parse(raw);
                    asset.emit("load", raw);
                    _this.emit("loadAsset", asset);
                    callback && callback();
                }
            });

            return true;
        }, this);
    } else {
        var ext = getExt(src);

        if (!this[ext]) {
            callback && callback(new Error("AssetLoader.load: has no loader file " + src + " of type " + ext));
            return;
        }
        if (supports.indexOf(ext) === -1) {
            callback && callback(new Error("AssetLoader.load: device does not support file " + src + " of type " + ext));
            return;
        }

        this[ext](src, function (err, raw) {
            if (err) {
                callback && callback(new Error("AssetLoader.load: " + err.message));
                return;
            }

            asset._loaded = true;
            asset.parse(raw);
            asset.emit("load", raw);
            _this.emit("loadAsset", asset);
            callback && callback();
        });
    }
};


AssetLoader.prototype.gif = AssetLoader.prototype.jpg = AssetLoader.prototype.jpeg = AssetLoader.prototype.png = function (src, callback) {
    var image = new Image;

    image.onload = function () {
        callback && callback(null, image);
    };
    image.onerror = function () {
        callback && callback(new Error("GET " + src + " 404 (Not Found)"));
    };

    image.src = src;
};


AssetLoader.prototype.json = function (src, callback) {

    ajax({
        src: src,
        before: function () {
            this.setRequestHeader("Content-Type", "application/json");
        },
        success: function () {
            var json = this.responseText;

            try {
                json = JSON.parse(this.responseText);
            } catch (err) {
                callback && callback(err);
                return;
            }

            callback && callback(null, json);
        },
        error: function (err) {
            callback && callback(err);
        }
    });
};


AssetLoader.prototype.ogg = AssetLoader.prototype.wav = AssetLoader.prototype.mp3 = AssetLoader.prototype.aac = function (src, callback) {

    ajax({
        src: src,
        before: function () {
            this.responseType = "arraybuffer";
        },
        success: function () {
            if (AudioCtx) {
                if (AudioCtx.decodeAudioData) {
                    AudioCtx.decodeAudioData(
                        this.response,
                        function success(buffer) {
                            callback && callback(null, buffer);
                        },
                        function failure() {
                            callback && callback(new Error("AudioContext Failed to parse Audio Clip"));
                        }
                    );
                } else {
                    var buffer = AudioCtx.createBuffer(this.response, false);

                    if (buffer) {
                        callback && callback(null, buffer);
                    } else {
                        callback && callback(new Error("AudioContext Failed to parse Audio Clip"));
                    }
                }
            } else {
                callback && callback(new Error("AudioContext (WebAudio API) is not supported by this browser"));
            }
        },
        error: function (err) {
            callback && callback(err);
        }
    });
};


module.exports = new AssetLoader;

},{"../../base/audio_ctx":7,"../../base/device":10,"../../base/event_emitter":13,"../../base/log":14,"../../base/util":19,"./asset":20,"./assets":22}],22:[function(require,module,exports){
var Class = require("../../base/class");
var Asset = require("./asset");
var Log = require("../../base/log");
"use strict";


function Assets() {

    Array.call(this);

    this.hash = {};
}

Assets.prototype = Object.create(Array.prototype);
Assets.prototype.constructor = Assets;


Assets.prototype.get = function (name) {
    var asset = this.hash[name];
    if (asset) return asset;

    Log.error("Assets.get: can't find asset with name " + name + ", it has not been added to Assets, use Assets.addAsset(asset)");
    return undefined;
};


Assets.prototype.addAsset = function (asset) {
    if (!(asset instanceof Asset)) {
        Log.error("Assets.addAsset: can't add passed argument, it is not an instance of Asset");
        return this;
    }
    var name = asset.name;

    if (this.hash[name]) {
        Log.error("Assets.addAsset: Assets already have Asset named " + asset.name);
        return undefined;
    }

    asset.assets = this;
    this.push(asset);
    this.hash[name] = asset;

    return asset;
};


Assets.prototype.addAssets = function () {
    var i, il;

    for (i = 0, il = arguments.length; i < il; i++) this.addAsset(arguments[i]);
};


Assets.prototype.removeAsset = function (asset) {
    var name = typeof(asset) === "string" ? asset : asset.name;
    asset = this.hash[name];

    if (!asset) {
        Log.error("Assets.removeAsset: Assets does not have an Asset named " + name);
        return undefined;
    }

    this.splice(this.indexOf(asset), 1);
    this.hash[name] = null;

    return asset;
};


Assets.prototype.removeAssets = function () {
    var i, il;

    for (i = 0, il = arguments.length; i < il; i++) this.removeAsset(arguments[i]);
};


Assets.prototype.toJSON = function (json, pack) {
    json || (json = {});
    var jsonAssets = json.assets || (json.assets = []),
        jsonAsset,
        i = this.length;

    while (i--) {
        if ((jsonAsset = this[i]).json) jsonAssets[i] = jsonAsset.toJSON(jsonAssets[i], pack);
    }

    return json;
};


Assets.prototype.fromJSON = function (json) {
    var assetsHash = this.hash,
        jsonAssets = json.assets || (json.assets = []),
        asset, jsonAsset,
        i = jsonAssets.length;

    while (i--) {
        if (!(jsonAsset = jsonAssets[i])) continue;

        if ((asset = assetsHash[jsonAsset.name])) {
            asset.fromJSON(jsonAsset);
        } else {
            this.add(Class.fromJSON(jsonAsset));
        }
    }

    return this;
};


module.exports = new Assets;

},{"../../base/class":8,"../../base/log":14,"./asset":20}],23:[function(require,module,exports){
var util = require("../../base/util");
var AudioCtx = require("../../base/audio_ctx");
var Asset = require("./asset");
"use strict";


var isArray = util.isArray,
    defineProperty = Object.defineProperty,
    arrayBufferToBase64 = util.arrayBufferToBase64,
    base64ToArrayBuffer = util.base64ToArrayBuffer;


function AudioClip(opts) {
    opts || (opts = {});

    Asset.call(this, opts);
}

Asset.extend(AudioClip);


defineProperty(AudioClip.prototype, "length", {
    get: function () {
        return this.raw ? this.raw.duration : 0;
    }
});


defineProperty(AudioClip.prototype, "samples", {
    get: function () {
        return this.raw ? this.raw.length : 0;
    }
});


defineProperty(AudioClip.prototype, "frequency", {
    get: function () {
        return this.raw ? this.raw.sampleRate : 44100;
    }
});


defineProperty(AudioClip.prototype, "channels", {
    get: function () {
        return this.raw ? this.raw.numberOfChannels : 0;
    }
});


AudioClip.prototype.parse = function (raw) {
    Asset.prototype.parse.call(this, raw);
    var i;

    if (isArray(raw)) {
        i = raw.length;
        while (i--) {
            if (raw[i]) this.raw = raw[i];
        }
    }

    return this;
};


AudioClip.prototype.getData = function (array, offset) {
    array || (array = []);

    return this.raw ? this.raw.getChannelData(array, offset) : array;
};


AudioClip.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json, pack);

    if ((pack || !this.src) && this.raw) json.raw = arrayBufferToBase64(this.raw);

    return json;
};


AudioClip.prototype.fromJSON = function (json, pack) {
    Asset.prototype.fromJSON.call(this, json, pack);

    if ((pack || !this.src) && this.raw) this.raw = base64ToArrayBuffer(json.raw);

    return this;
};


module.exports = AudioClip;

},{"../../base/audio_ctx":7,"../../base/util":19,"./asset":20}],24:[function(require,module,exports){
var util = require("../../base/util");
var Rect = require("../../math/rect");
var Vec3 = require("../../math/vec3");
var Color = require("../../math/color");
var Asset = require("./asset");
var Assets = require("./assets");
var Enums = require("../enums");
"use strict";


var merge = util.merge;


function Material(opts) {
    opts || (opts = {});

    Asset.call(this, opts);

    this.blending = opts.blending != undefined ? opts.blending : Enums.Blending.Default;
    this.side = opts.side != undefined ? opts.side : Enums.Side.Front;

    this.wireframe = opts.wireframe != undefined ? opts.wireframe : false;
    this.wireframeLineWidth = opts.wireframeLineWidth != undefined ? opts.wireframeLineWidth : 1.0;

    this.shader = opts.shader != undefined ? opts.shader : undefined;

    this.uniforms = merge(opts.uniforms || {}, {
        diffuseColor: new Color(1.0, 1.0, 1.0),
        shininess: 8.0,
        normalScale: 1.0
    });

    this.receiveShadow = opts.receiveShadow != undefined ? !!opts.receiveShadow : true;
    this.castShadow = opts.castShadow != undefined ? !!opts.castShadow : true;

    this.needsUpdate = true;
}

Asset.extend(Material);


Material.prototype.copy = function (other) {
    Asset.prototype.copy.call(this, other);

    this.blending = other.blending;
    this.side = other.side;

    this.wireframe = other.wireframe;
    this.wireframeLineWidth = other.wireframeLineWidth;

    this.shader = other.shader;

    this.uniforms = copy(other.uniforms);

    this.receiveShadow = other.receiveShadow;
    this.castShadow = other.castShadow;

    return this;
};


Material.prototype.parse = function (raw) {
    Asset.prototype.parse.call(this, raw);

    this.fromJSON(raw);

    return this;
};


Material.prototype.clear = function () {
    Asset.prototype.clear.call(this);

    return this;
};


Material.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json, pack);

    json.blending = this.blending;
    json.side = this.side;

    json.wireframe = this.wireframe;
    json.wireframeLineWidth = this.wireframeLineWidth;

    json.shader = this.shader != undefined ? this.shader.name : undefined;

    toJSON(this.uniforms, json.uniforms || (json.uniforms = {}));

    json.receiveShadow = this.receiveShadow;
    json.castShadow = this.castShadow;

    return json;
};


Material.prototype.fromJSON = function (json) {
    Asset.prototype.fromJSON.call(this, json);

    this.blending = json.blending;
    this.side = json.side;

    this.wireframe = json.wireframe;
    this.wireframeLineWidth = json.wireframeLineWidth;

    this.shader = json.shader != undefined ? Assets.get(json.shader) : undefined;

    fromJSON(this.uniforms, json.uniforms);

    this.receiveShadow = json.receiveShadow;
    this.castShadow = json.castShadow;

    return this;
};


function toJSON(obj, json) {
    var value, key;

    for (key in obj) {
        value = obj[key];

        if (typeof(value) !== "object") {
            json[key] = value;
        } else if (value.toJSON) {
            json[key] = value.toJSON(json[key]);
        } else {
            json[key] = value;
        }
    }

    return json;
}


function fromJSON(obj, json) {
    var classes = Class._classes,
        mathClasses = Mathf._classes,
        value, key;

    for (key in json) {
        value = json[key];

        if (typeof(value) !== "object") {
            obj[key] = value;
        } else if (mathClasses[value._className]) {
            obj[key] = Mathf.fromJSON(value);
        } else if (classes[value._className]) {
            obj[key] = Class.fromJSON(value);
        } else {
            obj[key] = value;
        }
    }
}


function copy(obj) {
    var out = {},
        classes = Class._classes,
        mathClasses = Mathf._classes,
        value, key;

    for (key in obj) {
        value = obj[key];

        if (typeof(value) !== "object") {
            out[key] = value;
        } else if (mathClasses[value._className]) {
            out[key] = new mathClasses[value._className]().copy(value);
        } else if (classes[value._className]) {
            out[key] = new classes[value._className]().copy(value);
        } else {
            out[key] = value;
        }
    }

    return out;
}


module.exports = Material;

},{"../../base/util":19,"../../math/color":102,"../../math/rect":109,"../../math/vec3":112,"../enums":73,"./asset":20,"./assets":22}],25:[function(require,module,exports){
var Asset = require("./asset");
var MeshBone = require("./mesh_bone");
var Vec2 = require("../../math/vec2");
var Vec3 = require("../../math/vec3");
var Vec4 = require("../../math/vec4");
var Color = require("../../math/color");
"use strict";


function Mesh(opts) {
    opts || (opts = {});

    Asset.call(this, opts);

    this.vertices = opts.vertices != undefined ? opts.vertices : [];

    this.normals = opts.normals != undefined ? opts.normals : [];

    this.tangents = opts.tangents != undefined ? opts.tangents : [];

    this.indices = opts.indices != undefined ? opts.indices : [];

    this.colors = opts.colors != undefined ? opts.colors : [];

    this.uvs = opts.uvs != undefined ? opts.uvs : [];
    this.uvs2 = opts.uvs2 != undefined ? opts.uvs2 : [];

    this.bones = opts.bones != undefined ? opts.bones : [];
    this.boneIndices = opts.boneIndices != undefined ? opts.boneIndices : [];
    this.boneWeights = opts.boneWeights != undefined ? opts.boneWeights : [];

    this.dynamic = opts.dynamic != undefined ? !!opts.dynamic : false;
    this.useBones = opts.useBones != undefined ? !!opts.useBones : this.bones.length > 0 ? true : false;

    this.animations = {};

    this.aabb = new AABB3;
    if (opts.vertices) this.aabb.fromPoints(this.vertices);

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    this.tangentsNeedUpdate = true;
    this.indicesNeedUpdate = true;
    this.colorsNeedUpdate = true;
    this.uvsNeedUpdate = true;
    this.uvs2NeedUpdate = true;

    this.boneIndicesNeedUpdate = true;
    this.boneWeightsNeedUpdate = true;

    this._webglBuffersInitted = undefined;
    this._webglUsed = 0;

    this._webglVertexBuffer = undefined;
    this._webglNormalBuffer = undefined;
    this._webglTangentBuffer = undefined;
    this._webglColorBuffer = undefined;
    this._webglUvBuffer = undefined;
    this._webglUv2Buffer = undefined;

    this._webglMeshBoneIndexBuffer = undefined;
    this._webglMeshBoneWeightBuffer = undefined;

    this._webglIndexBuffer = undefined;
    this._webglLineBuffer = undefined;

    this._webglVertexArray = undefined;
    this._webglNormalArray = undefined;
    this._webglTangentArray = undefined;
    this._webglColorArray = undefined;
    this._webglUvArray = undefined;
    this._webglUv2Array = undefined;

    this._webglMeshBoneIndexArray = undefined;
    this._webglMeshBoneWeightArray = undefined;

    this._webglIndexArray = undefined;
    this._webglLineArray = undefined;

    this._webglVertexCount = undefined;
    this._webglLineCount = undefined;

    if (opts.json) this.fromJSON(opts.json);
}

Asset.extend(Mesh);


Mesh.prototype.copy = function (other) {
    Asset.prototype.copy.call(this, other);
    var vertices = this.vertices,
        otherVertices = other.vertices,
        normals = this.normals,
        otherNormals = other.normals,
        tangents = this.tangents,
        otherTangents = other.tangents,
        indices = this.indices,
        otherIndices = other.indices,
        colors = this.colors,
        otherColors = other.colors,
        uvs = this.uvs,
        otherUvs = other.uvs,
        uvs2 = this.uvs2,
        otherUv2s = other.uvs2,
        bones = this.bones,
        otherMeshBones = other.bones,
        boneIndices = this.boneIndices,
        otherMeshBoneIndices = other.boneIndices,
        boneWeights = this.boneWeights,
        otherMeshBoneWeights = other.boneWeights,
        i;

    vertices.length = otherVertices.length;
    normals.length = otherNormals.length;
    tangents.length = otherTangents.length;
    indices.length = otherIndices.length;
    colors.length = otherColors.length;
    uvs.length = otherUvs.length;
    uvs2.length = otherUv2s.length;

    bones.length = otherMeshBones.length;
    boneIndices.length = otherMeshBoneIndices.length;
    boneWeights.length = otherMeshBoneWeights.length;

    for (i = otherVertices.length; i--;) vertices[i] = (vertices[i] || new Vec3).copy(otherVertices[i]);
    for (i = otherNormals.length; i--;) normals[i] = (normals[i] || new Vec3).copy(otherNormals[i]);
    for (i = otherTangents.length; i--;) tangents[i] = (tangents[i] || new Vec4).copy(otherTangents[i]);
    for (i = otherIndices.length; i--;) indices[i] = otherIndices[i];
    for (i = otherColors.length; i--;) colors[i] = (colors[i] || new Color).copy(otherColors[i]);
    for (i = otherUvs.length; i--;) uvs[i] = (uvs[i] || new Vec2).copy(otherUvs[i]);
    for (i = otherUv2s.length; i--;) uvs2[i] = (uvs2[i] || new Vec2).copy(otherUv2s[i]);
    for (i = otherMeshBones.length; i--;) bones[i] = (bones[i] || new MeshBone).copy(otherMeshBones[i]);
    for (i = otherMeshBoneIndices.length; i--;) boneIndices[i] = otherMeshBoneIndices[i];
    for (i = otherMeshBoneWeights.length; i--;) boneWeights[i] = otherMeshBoneWeights[i];

    this.dynamic = other.dynamic;
    this.useBones = other.useBones;

    this.aabb.fromPoints(this.vertices);

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    this.tangentsNeedUpdate = true;
    this.indicesNeedUpdate = true;
    this.colorsNeedUpdate = true;
    this.uvsNeedUpdate = true;
    this.uvs2NeedUpdate = true;
    this.boneIndicesNeedUpdate = true;
    this.boneWeightsNeedUpdate = true;

    return this;
};


Mesh.prototype.clear = function () {
    Asset.prototype.clear.call(this);

    this.vertices.length = 0;
    this.normals.length = 0;
    this.tangents.length = 0;
    this.indices.length = 0;
    this.colors.length = 0;
    this.uvs.length = 0;
    this.uvs2.length = 0;

    this.bones.length = 0;
    this.boneIndices.length = 0;
    this.boneWeights.length = 0;

    this.aabb.clear();

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    this.tangentsNeedUpdate = true;
    this.indicesNeedUpdate = true;
    this.colorsNeedUpdate = true;
    this.uvsNeedUpdate = true;
    this.uvs2NeedUpdate = true;
    this.boneIndicesNeedUpdate = true;
    this.boneWeightsNeedUpdate = true;

    return this;
};


var EMPTY_ARRAY = [];

Mesh.prototype.parse = function (raw) {
    Asset.prototype.parse.call(this, raw);
    var vertices = this.vertices,
        normals = this.normals,
        tangents = this.tangents,
        indices = this.indices,
        colors = this.colors,
        uvs = this.uvs,
        uvs2 = this.uvs2,
        bones = this.bones,
        boneWeights = this.boneWeights,
        boneIndices = this.boneIndices,
        bone, items, item,
        i, il;

    vertices.length = normals.length = tangents.length = indices.length = colors.length = uvs.length = uvs2.length = 0;
    bones.length = boneWeights.length = boneIndices.length = 0;

    items = raw.vertices || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 3) vertices.push(new Vec3(items[i], items[i + 1], items[i + 2]));

    items = raw.normals || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 3) normals.push(new Vec3(items[i], items[i + 1], items[i + 2]));

    items = raw.tangents || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 4) tangents.push(new Vec4(items[i], items[i + 1], items[i + 2], items[i + 3]));

    items = raw.indices || raw.faces || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 3) indices.push(items[i], items[i + 1], items[i + 2]);

    items = raw.colors || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 3) colors.push(new Color(items[i], items[i + 1], items[i + 2]));

    items = raw.uvs || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 2) uvs.push(new Vec2(items[i], items[i + 1]));

    items = raw.uvs2 || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i += 2) uvs2.push(new Vec2(items[i], items[i + 1]));

    items = raw.bones || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i++) {
        item = items[i];

        bone = new MeshBone(item.parent, item.name);

        bone.position.fromArray(item.position);
        bone.rotation.fromArray(item.rotation);
        bone.scale.fromArray(item.scale);
        bone.bindPose.fromArray(item.bindPose);
        bone.skinned = !!item.skinned;

        bones.push(bone);
    }
    if (items.length) this.useBones = true;

    items = raw.boneWeights || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i++) boneWeights.push(items[i]);

    items = raw.boneIndices || EMPTY_ARRAY;
    for (i = 0, il = items.length; i < il; i++) boneIndices.push(items[i]);

    this.animations = raw.animations;

    this.aabb.fromPoints(this.vertices);

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    this.tangentsNeedUpdate = true;
    this.indicesNeedUpdate = true;
    this.colorsNeedUpdate = true;
    this.uvsNeedUpdate = true;
    this.uvs2NeedUpdate = true;
    this.boneIndicesNeedUpdate = true;
    this.boneWeightsNeedUpdate = true;

    return this;
};


Mesh.prototype.transformMat3 = function (m) {
    var vertices = this.vertices,
        normals = this.normals,
        i;

    if (vertices) {
        i = vertices.length;
        while (i--) vertices[i].transformMat3(m);
        this.verticesNeedUpdate = true;
    }
    if (normals) {
        i = normals.length;
        while (i--) normals[i].transformMat3(m);
        this.normalsNeedUpdate = true;
    }

    return this;
};


Mesh.prototype.transformMat4 = function (m) {
    var vertices = this.vertices,
        normals = this.normals,
        i;

    if (vertices) {
        i = vertices.length;
        while (i--) vertices[i].transformMat4(m);
        this.verticesNeedUpdate = true;
    }
    if (normals) {
        i = normals.length;
        while (i--) normals[i].transformMat4Rotation(m);
        this.normalsNeedUpdate = true;
    }

    return this;
};


Mesh.prototype.calculateAABB = function () {

    this.aabb.fromPoints(this.vertices);
    return this;
};


Mesh.prototype.calculateNormals = function () {
    var u = new Vec3,
        v = new Vec3,
        uv = new Vec3,
        faceNormal = new Vec3;

    return function () {
        var vertices = this.vertices,
            normals = this.normals,
            indices = this.indices,
            a, b, c, va, vb, vc, i;

        for (i = vertices.length; i--;)(normals[i] || (normals[i] = new Vec3)).set(0, 0, 0);

        for (i = indices.length; i -= 3;) {
            a = indices[i];
            b = indices[i + 1];
            c = indices[i + 2];

            va = vertices[a];
            vb = vertices[b];
            vc = vertices[c];

            u.vsub(vc, vb);
            v.vsub(va, vb);

            uv.vcross(u, v);

            faceNormal.copy(uv).normalize();

            normals[a].add(faceNormal);
            normals[b].add(faceNormal);
            normals[c].add(faceNormal);
        }

        for (i = indices.length; i -= 3;) {
            normals[indices[i]].normalize();
            normals[indices[i + 1]].normalize();
            normals[indices[i + 2]].normalize();
        }

        this.normalsNeedUpdate = true;

        return this;
    };
}();


Mesh.prototype.calculateTangents = function () {
    var tan1 = [],
        tan2 = [],
        sdir = new Vec3,
        tdir = new Vec3,
        n = new Vec3,
        t = new Vec3,
        tmp1 = new Vec3,
        tmp2 = new Vec3;

    return function () {
        var indices = this.indices,
            vertices = this.vertices,
            normals = this.normals,
            tangents = this.tangents,
            uvs = this.uvs,

            v1, v2, v3,
            w1, w2, w3,

            x1, x2, y1, y2, z1, z2,
            s1, s2, t1, t2,
            a, b, c,

            r, w, i;

        for (i = vertices.length; i--;) {
            (tan1[i] || (tan1[i] = new Vec3)).set(0, 0, 0);
            (tan2[i] || (tan2[i] = new Vec3)).set(0, 0, 0);
            (tangents[i] || (tangents[i] = new Vec4)).set(0, 0, 0, 1);
        }

        for (i = vertices.length; i--;) uvs[i] = uvs[i] || (uvs[i] = new Vec2);

        for (i = indices.length; i -= 3;) {
            a = indices[i];
            b = indices[i + 1];
            c = indices[i + 2];

            v1 = vertices[a];
            v2 = vertices[b];
            v3 = vertices[c];

            w1 = uvs[a];
            w2 = uvs[b];
            w3 = uvs[c];

            x1 = v2.x - v1.x;
            x2 = v3.x - v1.x;
            y1 = v2.y - v1.y;
            y2 = v3.y - v1.y;
            z1 = v2.z - v1.z;
            z2 = v3.z - v1.z;

            s1 = w2.x - w1.x;
            s2 = w3.x - w1.x;
            t1 = w2.y - w1.y;
            t2 = w3.y - w1.y;

            r = s1 * t2 - s2 * t1;
            r = r !== 0 ? 1 / r : 0;

            sdir.set(
                (t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r
            );

            tdir.set(
                (s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r
            );

            tan1[a].add(sdir);
            tan1[b].add(sdir);
            tan1[c].add(sdir);

            tan2[a].add(tdir);
            tan2[b].add(tdir);
            tan2[c].add(tdir);
        }

        for (i = vertices.length; i--;) {
            t.copy(tan1[i]);
            n.copy(normals[i]);

            tmp1.copy(t);
            tmp1.sub(n.smul(n.dot(t))).normalize();

            n.copy(normals[i]);
            tmp2.vcross(n, t);

            w = (tmp2.dot(tan2[i]) < 0) ? -1 : 1;

            tangents[i].set(tmp1.x, tmp1.y, tmp1.z, w);
        }

        this.tangentsNeedUpdate = true;

        return this;
    };
}();


Mesh.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json, pack);
    var vertices = this.vertices,
        jsonVertices = json.vertices || (json.vertices = []),
        normals = this.normals,
        jsonNormals = json.normals || (json.normals = []),
        tangents = this.tangents,
        jsonTangents = json.tangents || (json.tangents = []),
        indices = this.indices,
        jsonIndices = json.indices || (json.indices = []),
        colors = this.colors,
        jsonColors = json.colors || (json.colors = []),
        uvs = this.uvs,
        jsonUvs = json.uvs || (json.uvs = []),
        uvs2 = this.uvs2,
        jsonUv2s = json.uvs2 || (json.uvs2 = []),
        bones = this.bones,
        jsonMeshBones = json.bones || (json.bones = []),
        boneIndices = this.boneIndices,
        jsonMeshBoneIndices = json.boneIndices || (json.boneIndices = []),
        boneWeights = this.boneWeights,
        jsonMeshBoneWeights = json.boneWeights || (json.boneWeights = []),
        i;

    jsonVertices.length = vertices.length;
    jsonNormals.length = normals.length;
    jsonTangents.length = tangents.length;
    jsonIndices.length = indices.length;
    jsonColors.length = colors.length;
    jsonUvs.length = uvs.length;
    jsonUv2s.length = uvs2.length;

    jsonMeshBones.length = bones.length;
    jsonMeshBoneIndices.length = boneIndices.length;
    jsonMeshBoneWeights.length = boneWeights.length;

    for (i = vertices.length; i--;) jsonVertices[i] = vertices[i].toJSON(jsonVertices[i]);
    for (i = normals.length; i--;) jsonNormals[i] = normals[i].toJSON(jsonNormals[i]);
    for (i = tangents.length; i--;) jsonTangents[i] = tangents[i].toJSON(jsonTangents[i]);
    for (i = indices.length; i--;) indices[i] = jsonIndices[i];
    for (i = colors.length; i--;) jsonColors[i] = colors[i].toJSON(jsonColors[i]);
    for (i = uvs.length; i--;) jsonUvs[i] = uvs[i].toJSON(jsonUvs[i]);
    for (i = uvs2.length; i--;) jsonUv2s[i] = uvs2[i].toJSON(jsonUv2s[i]);
    for (i = bones.length; i--;) jsonMeshBones[i] = bones[i].toJSON(jsonMeshBones[i]);
    for (i = boneIndices.length; i--;) boneIndices[i] = jsonMeshBoneIndices[i];
    for (i = boneWeights.length; i--;) boneWeights[i] = jsonMeshBoneWeights[i];

    json.dynamic = this.dynamic;
    json.useBones = this.useBones;

    return json;
};


Mesh.prototype.fromJSON = function (json) {
    Asset.prototype.fromJSON.call(this, json);
    var vertices = this.vertices,
        jsonVertices = json.vertices,
        normals = this.normals,
        jsonNormals = json.normals,
        tangents = this.tangents,
        jsonTangents = json.tangents,
        indices = this.indices,
        jsonIndices = json.indices,
        colors = this.colors,
        jsonColors = json.colors,
        uvs = this.uvs,
        jsonUvs = json.uvs,
        uvs2 = this.uvs2,
        jsonUv2s = json.uvs2,
        bones = this.bones,
        jsonMeshBones = json.bones,
        boneIndices = this.boneIndices,
        jsonMeshBoneIndices = json.boneIndices,
        boneWeights = this.boneWeights,
        jsonMeshBoneWeights = json.boneWeights,
        i;

    vertices.length = jsonVertices.length;
    normals.length = jsonNormals.length;
    tangents.length = jsonTangents.length;
    indices.length = jsonIndices.length;
    colors.length = jsonColors.length;
    uvs.length = jsonUvs.length;
    uvs2.length = jsonUv2s.length;

    bones.length = jsonMeshBones.length;
    boneIndices.length = jsonMeshBoneIndices.length;
    boneWeights.length = jsonMeshBoneWeights.length;

    for (i = jsonVertices.length; i--;) vertices[i] = (vertices[i] || new Vec3).copy(jsonVertices[i]);
    for (i = jsonNormals.length; i--;) normals[i] = (normals[i] || new Vec3).copy.fromJSON(jsonNormals[i]);
    for (i = jsonTangents.length; i--;) tangents[i] = (tangents[i] || new Vec4).fromJSON(jsonTangents[i]);
    for (i = jsonIndices.length; i--;) indices[i] = jsonIndices[i];
    for (i = jsonColors.length; i--;) colors[i] = (colors[i] || new Color).fromJSON(jsonColors[i]);
    for (i = jsonUvs.length; i--;) uvs[i] = (uvs[i] || new Vec2).fromJSON(jsonUvs[i]);
    for (i = jsonUv2s.length; i--;) uvs2[i] = (uvs2[i] || new Vec2).fromJSON(jsonUv2s[i]);
    for (i = jsonMeshBones.length; i--;) bones[i] = (bones[i] || new MeshBone).fromJSON(jsonMeshBones[i]);
    for (i = jsonMeshBoneIndices.length; i--;) boneIndices[i] = jsonMeshBoneIndices[i];
    for (i = jsonMeshBoneWeights.length; i--;) boneWeights[i] = jsonMeshBoneWeights[i];

    this.dynamic = json.dynamic;
    this.useBones = json.useBones;

    this.aabb.fromPoints(this.vertices);

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    this.tangentsNeedUpdate = true;
    this.indicesNeedUpdate = true;
    this.colorsNeedUpdate = true;
    this.uvsNeedUpdate = true;
    this.uvs2NeedUpdate = true;
    this.boneIndicesNeedUpdate = true;
    this.boneWeightsNeedUpdate = true;

    return this;
};


var PI = Math.PI,
    HALF_PI = PI * 0.5,
    TWO_PI = PI * 2,
    sin = Math.sin,
    cos = Math.cos;
Mesh.Sphere = function (opts) {
    opts || (opts = {});
    var radius = opts.radius != undefined ? opts.radius : 0.5,
        segments = (opts.segments != undefined ? floor(max(opts.segments, 3)) : 16) + 1,
        rings = (opts.rings != undefined ? floor(max(opts.rings, 3)) : 8) + 2,

        R = 1 / (rings - 1),
        S = 1 / (segments - 1),
        r, s,
        x, y, z,
        a, b, c, d,

        mesh = new Mesh(opts),
        vertices = mesh.vertices,
        normals = mesh.normals,
        uvs = mesh.uvs,
        colors = mesh.colors,
        indices = mesh.indices;

    for (r = 0; r < rings; r++) {
        for (s = 0; s < segments; s++) {
            z = sin(-HALF_PI + PI * r * R);
            x = cos(TWO_PI * s * S) * sin(PI * r * R);
            y = sin(TWO_PI * s * S) * sin(PI * r * R);

            vertices.push(new Vec3(x, y, z).smul(radius));
            normals.push(new Vec3(x, y, z));
            uvs.push(new Vec2(s * S, r * R));
            colors.push(new Vec3(s * S, r * R, 0));
        }
    }

    for (r = 0; r < rings - 1; r++) {
        for (s = 0; s < segments - 1; s++) {
            a = r * segments + s;
            b = r * segments + (s + 1);
            c = (r + 1) * segments + (s + 1);
            d = (r + 1) * segments + s;

            indices.push(a, b, c);
            indices.push(a, c, d);
        }
    }

    mesh.calculateAABB();
    mesh.load = false;
    if (opts.tangents) mesh.calculateTangents();

    return mesh;
};


Mesh.Cube = function (opts) {
    opts || (opts = {});
    var w = opts.width || 1,
        h = opts.height || 1,
        d = opts.depth || 1,
        hw = w * 0.5,
        hh = h * 0.5,
        hd = d * 0.5,
        ws = (opts.widthSegments || 1),
        hs = (opts.heightSegments || 1),
        ds = (opts.depthSegments || 1),
        mesh = new Mesh(opts);

    buildPlane(mesh, "z", "y", -1, 1, d, ds, h, hs, hw, ws);
    buildPlane(mesh, "z", "y", 1, 1, d, ds, h, hs, -hw, ws);
    buildPlane(mesh, "x", "z", 1, -1, w, ws, d, ds, hh, hs);
    buildPlane(mesh, "x", "z", 1, 1, w, ws, d, ds, -hh, hs);
    buildPlane(mesh, "x", "y", 1, 1, w, ws, h, hs, hd, ds);
    buildPlane(mesh, "x", "y", -1, 1, w, ws, h, hs, -hd, ds);

    mesh.calculateAABB();
    mesh.load = false;
    if (opts.tangents) mesh.calculateTangents();

    return mesh;
};


Mesh.Plane = function (opts) {
    opts || (opts = {});
    var w = opts.width || 1,
        h = opts.height || 1,
        ws = (opts.widthSegments || 1),
        hs = (opts.heightSegments || 1),
        mesh = new Mesh(opts);

    buildPlane(mesh, "x", "y", 1, 1, w, ws, h, hs, 0, 0);

    mesh.calculateAABB();
    mesh.load = false;
    if (opts.tangents) mesh.calculateTangents();

    return mesh;
};


function buildPlane(mesh, u, v, udir, vdir, width, ws, height, hs, depth, ds) {
    var vertices = mesh.vertices,
        normals = mesh.normals,
        indices = mesh.indices,
        uvs = mesh.uvs,
        gridX = ws,
        gridY = hs,
        width_half = width / 2,
        height_half = height / 2,
        offset = vertices.length,
        w, ix, iy;

    if ((u === "x" && v === "z") || (u === "z" && v === "x")) {
        w = "y";
        gridY = ds;
    } else if ((u === "x" && v === "y") || (u === "y" && v === "x")) {
        w = "z";
    } else if ((u === "y" && v === "z") || (u === "z" && v === "y")) {
        w = "x";
        gridX = ds;
    }

    var gridX1 = gridX + 1,
        gridY1 = gridY + 1,
        segment_width = width / gridX,
        segment_height = height / gridY,
        normal = new Vec3(),
        vertexCount = offset;

    normal[w] = depth > 0 ? 1 : -1;

    function addVertex(x, y, z) {
        var vector = new Vec3();
        vector[u] = x;
        vector[v] = y;
        vector[w] = z;
        vertices.push(vector);
    }

    for (iy = 0; iy < gridY; iy++) {
        for (ix = 0; ix < gridX; ix++) {
            addVertex(
                ((ix + 1) * segment_width - width_half) * udir, ((iy + 1) * segment_height - height_half) * vdir,
                depth
            );
            uvs.push(new Vec2((ix + 1) / gridX, 1 - (iy + 1) / gridY));

            addVertex(
                (ix * segment_width - width_half) * udir, ((iy + 1) * segment_height - height_half) * vdir,
                depth
            );
            uvs.push(new Vec2(ix / gridX, 1 - (iy + 1) / gridY));

            addVertex(
                (ix * segment_width - width_half) * udir, (iy * segment_height - height_half) * vdir,
                depth
            );
            uvs.push(new Vec2(ix / gridX, 1 - iy / gridY));

            addVertex(
                ((ix + 1) * segment_width - width_half) * udir, (iy * segment_height - height_half) * vdir,
                depth
            );
            uvs.push(new Vec2((ix + 1) / gridX, 1 - iy / gridY));

            indices.push(
                vertexCount, vertexCount + 1, vertexCount + 2,
                vertexCount, vertexCount + 2, vertexCount + 3
            );
            normals.push(normal.clone(), normal.clone(), normal.clone(), normal.clone());
            vertexCount += 4;
        }
    }
}


Mesh.MeshBone = MeshBone;


module.exports = Mesh;

},{"../../math/color":102,"../../math/vec2":111,"../../math/vec3":112,"../../math/vec4":113,"./asset":20,"./mesh_bone":26}],26:[function(require,module,exports){
var Vec3 = require("../../math/vec3");
var Quat = require("../../math/quat");
var Mat4 = require("../../math/mat4");
"use strict";


var UNKNOWN = 0;


function MeshBone(parentIndex, name) {

    this.parentIndex = parentIndex != undefined ? parentIndex : -1;
    this.name = name != undefined ? name : "MeshBone_" + UNKNOWN++;

    this.skinned = false;
    this.position = new Vec3;
    this.rotation = new Quat;
    this.scale = new Vec3;
    this.bindPose = new Mat4;
}


MeshBone.prototype.clone = function () {

    return new MeshBone().copy(this);
};


MeshBone.prototype.copy = function (other) {

    this.name = other.name;
    this.parentIndex = other.parentIndex;

    this.skinned = other.skinned;
    this.position.copy(other.position);
    this.rotation.copy(other.rotation);
    this.scale.copy(other.scale);
    this.bindPose.copy(other.bindPose);

    return this;
};


MeshBone.prototype.toJSON = function (json) {
    json || (json = {});

    json.name = this.name;
    json.parentIndex = this.parentIndex;

    json.skinned = this.skinned;
    json.position = this.position.toJSON(json.position);
    json.rotation = this.rotation.toJSON(json.rotation);
    json.scale = this.scale.toJSON(json.scale);
    json.bindPose = this.bindPose.toJSON(json.bindPose);

    return json;
};


MeshBone.prototype.fromJSON = function (json) {

    this.name = json.name;
    this.parentIndex = json.parentIndex;

    this.skinned = json.skinned;
    this.position.fromJSON(json.position);
    this.rotation.fromJSON(json.rotation);
    this.scale.fromJSON(json.scale);
    this.bindPose.fromJSON(json.bindPose);

    return this;
};


module.exports = MeshBone;

},{"../../math/mat4":106,"../../math/quat":108,"../../math/vec3":112}],27:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function Diffuse() {

    Shader.call(this, {
        name: "shader_diffuse",
        load: false,

        lights: true,
        specular: false,

        vertex: [
            "varying vec2 vUv;",

            "void main() {",
            "	vUv = uv;",
            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",

            "varying vec2 vUv;",

            "void main() {",
            "	vec3 diffuseLight = PixelLightNoSpec(normalize(vNormal));",

            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	gl_FragColor = vec4(diffuseLight * finalColor.xyz, finalColor.w);",
            "}"
        ].join("\n")
    });
}

Shader.extend(Diffuse);


module.exports = Diffuse;

},{"../shader":35}],28:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function NormalDiffuse() {

    Shader.call(this, {
        name: "shader_normal_diffuse",
        load: false,

        lights: true,
        specular: false,
        OES_standard_derivatives: true,

        vertex: [
            "varying vec2 vUv;",
            "varying vec3 vTangent;",
            "varying vec3 vBinormal;",

            "void main() {",
            "	#ifdef USE_SKINNING",
            "		vec4 boneTangent = boneMatrix * vec4( tangent.xyz, 0.0 );",
            "		vTangent = normalize( normalMatrix * boneTangent.xyz );",
            "	#else",
            "		vTangent = normalize( normalMatrix * tangent.xyz );",
            "	#endif",

            "	vUv = uv;",
            "	vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",

            "uniform sampler2D normalMap;",
            "uniform float normalScale;",

            "varying vec2 vUv;",
            "varying vec3 vTangent;",
            "varying vec3 vBinormal;",

            "void main() {",
            "	vec3 normalTex = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;",
            "	normalTex.xy *= normalScale;",

            "	mat3 tsb = mat3( vTangent, vBinormal, vNormal );",
            "	vec3 normal = normalize(tsb * normalTex);",

            "	vec3 diffuseLight = PixelLightNoSpec(normal);",

            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	gl_FragColor = vec4(diffuseLight * finalColor.xyz, finalColor.w);",
            "}"
        ].join("\n")
    });
}

Shader.extend(NormalDiffuse);


module.exports = NormalDiffuse;

},{"../shader":35}],29:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function NormalSpecular() {

    Shader.call(this, {
        name: "shader_normal_specular",
        load: false,

        fallback: "specular",

        lights: true,
        OES_standard_derivatives: true,

        vertex: [
            "varying vec2 vUv;",
            "varying vec3 vTangent;",
            "varying vec3 vBinormal;",

            "void main() {",
            "	#ifdef USE_SKINNING",
            "		vec4 boneTangent = boneMatrix * vec4( tangent.xyz, 0.0 );",
            "		vTangent = normalize( normalMatrix * boneTangent.xyz );",
            "	#else",
            "		vTangent = normalize( normalMatrix * tangent.xyz );",
            "	#endif",

            "	vUv = uv;",
            "	vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",

            "uniform sampler2D normalMap;",
            "uniform float normalScale;",

            "uniform float shininess;",

            "varying vec2 vUv;",
            "varying vec3 vTangent;",
            "varying vec3 vBinormal;",

            "void main() {",
            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	vec3 normalTex = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;",
            "	normalTex.xy *= normalScale;",

            "	mat3 tsb = mat3( vTangent, vBinormal, vNormal );",
            "	vec3 normal = normalize(tsb * normalTex);",

            "	vec3 diffuseLight, specularLight;",
            "	PixelLight(normal, vec3(finalColor.w), finalColor.w, shininess, diffuseLight, specularLight);",

            "	gl_FragColor = vec4(diffuseLight * finalColor.xyz + specularLight * finalColor.xyz, 1.0);",
            "}"
        ].join("\n")
    });
}

Shader.extend(NormalSpecular);


module.exports = NormalSpecular;

},{"../shader":35}],30:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function ParallexDiffuse() {

    Shader.call(this, {
        name: "shader_parallex_diffuse",
        load: false,

        lights: true,
        specular: false,
        OES_standard_derivatives: true,

        vertex: [
            "varying vec2 vUv;",
            "varying vec3 vTangent;",
            "varying vec3 vBinormal;",

            "void main() {",
            "	#ifdef USE_SKINNING",
            "		vec4 boneTangent = boneMatrix * vec4( tangent.xyz, 0.0 );",
            "		vTangent = normalize( normalMatrix * boneTangent.xyz );",
            "	#else",
            "		vTangent = normalize( normalMatrix * tangent.xyz );",
            "	#endif",

            "	vUv = uv;",
            "	vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",

            "uniform sampler2D normalMap;",
            "uniform float normalScale;",

            "varying vec2 vUv;",
            "varying vec3 vTangent;",
            "varying vec3 vBinormal;",

            "void main() {",
            "	vec3 normalTex = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;",
            "	normalTex.xy *= normalScale;",

            "	mat3 tsb = mat3( vTangent, vBinormal, vNormal );",
            "	vec3 normal = normalize(tsb * normalTex);",

            "	vec3 diffuseLight = PixelLightNoSpec(normal);",

            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	gl_FragColor = vec4(diffuseLight * finalColor.xyz, finalColor.w);",
            "}"
        ].join("\n")
    });
}

Shader.extend(ParallexDiffuse);


module.exports = ParallexDiffuse;

},{"../shader":35}],31:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function Specular() {

    Shader.call(this, {
        name: "shader_specular",
        load: false,

        lights: true,

        vertex: [
            "varying vec2 vUv;",

            "void main() {",
            "	vUv = uv;",
            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",

            "uniform float shininess;",

            "varying vec2 vUv;",

            "void main() {",
            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	vec3 diffuseLight, specularLight;",
            "	PixelLight(normalize(vNormal), vec3(finalColor.w), finalColor.w, shininess, diffuseLight, specularLight);",

            "	gl_FragColor = vec4(diffuseLight * finalColor.xyz + specularLight * finalColor.xyz, 1.0);",
            "}"
        ].join("\n")
    });
}

Shader.extend(Specular);


module.exports = Specular;

},{"../shader":35}],32:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function Unlit() {

    Shader.call(this, {
        name: "shader_unlit",
        load: false,

        vertex: [
            "varying vec2 vUv;",

            "void main() {",
            "	vUv = uv;",
            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",

            "varying vec2 vUv;",

            "void main() {",
            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	gl_FragColor = finalColor;",
            "}"
        ].join("\n")
    });
}

Shader.extend(Unlit);


module.exports = Unlit;

},{"../shader":35}],33:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function ParticleUnlit() {

    Shader.call(this, {
        name: "shader_particle_unlit",

        vertex: [
            "void main() {",
            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform sampler2D diffuseMap;",

            "void main() {",
            "	float c = cos(vAngle);",
            "	float s = sin(vAngle);",

            "	vec2 rotatedUV = vec2(c * (gl_PointCoord.x - 0.5) + s * (gl_PointCoord.y - 0.5) + 0.5,",
            "						  c * (gl_PointCoord.y - 0.5) - s * (gl_PointCoord.x - 0.5) + 0.5);",

            "	vec4 rotatedTexture = texture2D(diffuseMap, rotatedUV);",
            "	gl_FragColor = vec4(vParticleColor * rotatedTexture.xyz, vAlpha * rotatedTexture.w);",
            "}"
        ].join("\n")
    });
}

Shader.extend(ParticleUnlit);


module.exports = ParticleUnlit;

},{"../shader":35}],34:[function(require,module,exports){
var Shader = require("../shader");
"use strict";


function ReflectiveVertexLit() {

    Shader.call(this, {
        name: "shader_reflective_vertex_lit",
        load: false,

        lights: true,
        vertexLit: true,

        vertex: [
            "varying vec2 vUv;",
            "varying vec3 vReflect;",
            "varying vec3 vDiffuseLight;",

            "void main() {",
            "	vec3 worldNormal = normalize(mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz) * objectNormal);",
            "	vec3 cameraToVertex = normalize(worldPosition.xyz - cameraPosition);",

            "	vReflect = reflect(cameraToVertex, worldNormal);",
            "	vUv = uv;",
            "	VertexLight(transformedNormal, worldPosition.xyz, -mvPosition.xyz, vDiffuseLight);",

            "	gl_Position = projectionMatrix * mvPosition;",
            "}"
        ].join("\n"),

        fragment: [
            "uniform vec3 diffuseColor;",
            "uniform sampler2D diffuseMap;",
            "uniform samplerCube envMap;",

            "uniform float reflectivity;",
            "uniform int combine;",

            "varying vec2 vUv;",
            "varying vec3 vReflect;",
            "varying vec3 vDiffuseLight;",

            "void main() {",

            "	vec4 finalColor = texture2D(diffuseMap, vUv);",
            "	finalColor.xyz *= diffuseColor;",

            "	vec3 cubeColor = textureCube(envMap, vReflect).xyz;",

            "	if (combine == 1) {",
            "		finalColor.xyz = mix(finalColor.xyz, cubeColor, reflectivity);",
            "	} else if (combine == 2) {",
            "		finalColor.xyz += cubeColor * reflectivity;",
            "	} else {",
            "		finalColor.xyz = mix(finalColor.xyz, finalColor.xyz * cubeColor, reflectivity);",
            "	}",

            "	gl_FragColor = vec4(vDiffuseLight * finalColor.xyz, finalColor.w);",
            "}"
        ].join("\n")
    });
}

Shader.extend(ReflectiveVertexLit);


module.exports = ReflectiveVertexLit;

},{"../shader":35}],35:[function(require,module,exports){
var Asset = require("../asset");
"use strict";


function Shader(opts) {
    opts || (opts = {});

    Asset.call(this, opts);

    this.fallback = opts.fallback || "";

    this.vertex = opts.vertex || "void main(void) {}";
    this.fragment = opts.fragment || "void main(void) {}";

    this.lights = opts.lights != undefined ? opts.lights : false;
    this.specular = opts.specular != undefined ? opts.specular : true;
    this.vertexLit = opts.vertexLit != undefined ? opts.vertexLit : false;
    this.shadows = opts.shadows != undefined ? opts.shadows : false;
    this.fog = opts.fog != undefined ? opts.fog : false;

    this.OES_standard_derivatives = opts.OES_standard_derivatives != undefined ? opts.OES_standard_derivatives : false;
}

Asset.extend(Shader);


Shader.prototype.copy = function (other) {
    Asset.prototype.copy.call(this, other);

    this.fallback = other.fallback;

    this.vertex = other.vertex;
    this.fragment = other.fragment;

    this.lights = other.lights;
    this.specular = other.specular;
    this.vertexLit = other.vertexLit;
    this.shadows = other.shadows;
    this.fog = other.fog;

    this.OES_standard_derivatives = other.OES_standard_derivatives;

    return this;
};


Shader.prototype.parse = function (raw) {
    Asset.prototype.parse.call(this, raw);

    this.fromJSON(raw);

    return this;
};


Shader.prototype.clear = function () {
    Asset.prototype.clear.call(this);

    this.vertex = "";
    this.fragment = "";

    return this;
};


Shader.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json, pack);

    json.fallback = this.fallback;

    json.vertex = this.vertex;
    json.fragment = this.fragment;

    json.lights = this.lights;
    json.specular = this.specular;
    json.vertexLit = this.vertexLit;
    json.shadows = this.shadows;
    json.fog = this.fog;

    json.OES_standard_derivatives = this.OES_standard_derivatives;

    return json;
};


Shader.prototype.fromJSON = function (json) {
    Asset.prototype.fromJSON.call(this, json);

    this.fallback = json.fallback;

    this.vertex = json.vertex;
    this.fragment = json.fragment;

    this.lights = json.lights;
    this.specular = json.specular;
    this.vertexLit = json.vertexLit;
    this.shadows = json.shadows;
    this.fog = json.fog;

    this.OES_standard_derivatives = json.OES_standard_derivatives;

    return this;
};


module.exports = Shader;

},{"../asset":20}],36:[function(require,module,exports){
var Unlit = require("./normal/unlit");
var VertexLit = require("./normal/specular");
var Diffuse = require("./normal/diffuse");
var Specular = require("./normal/specular");
var NormalDiffuse = require("./normal/normal_diffuse");
var NormalSpecular = require("./normal/normal_specular");
var ParallaxDiffuse = require("./normal/parallax_diffuse");
var ParticleUnlit = require("./particle/unlit");
var ReflectiveVertexLit = require("./reflective/reflective_vertex_lit");
"use strict";


module.exports = {
    Unlit: Unlit,
    VertexLit: VertexLit,
    Diffuse: Diffuse,
    Specular: Specular,
    NormalDiffuse: NormalDiffuse,
    NormalSpecular: NormalSpecular,
    ParallaxDiffuse: ParallaxDiffuse,

    ParticleUnlit: ParticleUnlit,

    ReflectiveVertexLit: ReflectiveVertexLit
};

},{"./normal/diffuse":27,"./normal/normal_diffuse":28,"./normal/normal_specular":29,"./normal/parallax_diffuse":30,"./normal/specular":31,"./normal/unlit":32,"./particle/unlit":33,"./reflective/reflective_vertex_lit":34}],37:[function(require,module,exports){
var Asset = require("./asset");
"use strict";


function SpriteSheet(opts) {
    opts || (opts = {});

    Asset.call(this, opts);
}

Asset.extend(SpriteSheet);


SpriteSheet.prototype.copy = function (other) {
    Asset.prototype.copy.call(this, other);
    var raw = other.raw,
        key;

    for (key in raw) this[key] = raw[key];

    return this;
};


SpriteSheet.prototype.parse = function (raw) {
    Asset.prototype.parse.call(this, raw);

    for (var key in raw) {
        if (!this[key]) {
            this[key] = raw[key];
        } else {
            Log.error("SpriteSheet.parse: invalid animation name " + key + " in file " + this.src);
        }
    }

    return this;
};


SpriteSheet.prototype.clear = function () {
    for (var key in this.raw) this[key] = null;
    Asset.prototype.clear.call(this);

    return this;
};


SpriteSheet.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json);

    if ((pack || !this.src) && this.raw) json.raw = JSON.stringify(this.raw);

    return json;
};


SpriteSheet.prototype.fromJSON = function (json) {
    Asset.prototype.fromJSON.call(this, json);

    if (!json.src && json.raw) this.raw = JSON.parse(json.raw);
    this.parse(this.raw);

    return this;
};


module.exports = SpriteSheet;

},{"./asset":20}],38:[function(require,module,exports){
var Enums = require("../enums");
var Asset = require("./asset");
"use strict";


function Texture(opts) {
    opts || (opts = {});

    Asset.call(this, opts);

    this.width = 0;
    this.height = 0;

    this.invWidth = 0;
    this.invHeight = 0;

    this.generateMipmap = opts.generateMipmap != undefined ? !!opts.generateMipmap : true;
    this.flipY = opts.flipY != undefined ? !!opts.flipY : true;
    this.premultiplyAlpha = opts.premultiplyAlpha != undefined ? !!opts.premultiplyAlpha : false;

    this.anisotropy = opts.anisotropy != undefined ? opts.anisotropy : 1;

    this.filter = opts.filter != undefined ? opts.filter : Enums.FilterMode.Linear;
    this.format = opts.format != undefined ? opts.format : Enums.TextureFormat.RGBA;
    this.wrap = opts.wrap != undefined ? opts.wrap : Enums.TextureWrap.Repeat;

    this._webgl = undefined;
    this._webglUsed = 0;

    this.needsUpdate = true;
}

Asset.extend(Texture);


Texture.prototype.copy = function (other) {
    Asset.prototype.copy.call(this, other);

    this.width = other.width;
    this.height = other.height;

    this.invWidth = other.invWidth;
    this.invHeight = other.invHeight;

    this.generateMipmap = other.generateMipmap;
    this.flipY = other.flipY;
    this.premultiplyAlpha = other.premultiplyAlpha;

    this.anisotropy = other.anisotropy;

    this.filter = other.filter;
    this.format = other.format;
    this.wrap = other.wrap;

    return this;
};


Texture.prototype.parse = function (raw) {
    Asset.prototype.parse.call(this, raw);

    this.width = raw.width;
    this.height = raw.height;

    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    return this;
};


Texture.prototype.setMipmap = function (value) {

    this.generateMipmap = value != undefined ? !!value : !this.generateMipmap;
    this.needsUpdate = true;
};


Texture.prototype.setAnisotropy = function (value) {

    this.anisotropy = value;
    this.needsUpdate = true;
};


Texture.prototype.setFilter = function (value) {

    this.filter = value;
    this.needsUpdate = true;
};


Texture.prototype.setFormat = function (value) {

    this.format = value;
    this.needsUpdate = true;
};


Texture.prototype.setWrap = function (value) {

    this.wrap = value;
    this.needsUpdate = true;
};


Texture.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json);

    if ((pack || !this.src) && this.raw) {
        if (typeof(window) === "undefined") {
            json.raw = this.raw;
        } else {
            var raw = this.raw,
                canvas = document.createElement("canvas"),
                ctx = canvas.getContext("2d");

            canvas.width = raw.width;
            canvas.height = raw.height;
            ctx.drawImage(raw, 0, 0);

            json.raw = canvas.toDataURL();
        }
    }

    json.width = this.width;
    json.height = this.height;

    json.invWidth = this.invWidth;
    json.invHeight = this.invHeight;

    json.generateMipmap = this.generateMipmap;
    json.flipY = this.flipY;
    json.premultiplyAlpha = this.premultiplyAlpha;

    json.anisotropy = this.anisotropy;

    json.filter = this.filter;
    json.format = this.format;
    json.wrap = this.wrap;

    return json;
};


Texture.prototype.fromJSON = function (json) {
    Asset.prototype.fromJSON.call(this, json);

    if (!json.src && json.raw) {
        if (typeof(window) === "undefined") {
            this.raw = json.raw;
        } else {
            var image = new Image;
            image.src = json.raw;
            this.raw = image;
        }
    }

    this.width = json.width;
    this.height = json.height;

    this.invWidth = json.invWidth;
    this.invHeight = json.invHeight;

    this.generateMipmap = json.generateMipmap;
    this.flipY = json.flipY;
    this.premultiplyAlpha = json.premultiplyAlpha;

    this.anisotropy = json.anisotropy;

    this.filter = json.filter;
    this.format = json.format;
    this.wrap = json.wrap;

    return this;
};


module.exports = Texture;

},{"../enums":73,"./asset":20}],39:[function(require,module,exports){
var Enums = require("../enums");
var Asset = require("./asset");
"use strict";


function TextureCube(opts) {
    opts || (opts = {});

    Asset.call(this, opts);

    this.mipmap = opts.mipmap != undefined ? !!opts.mipmap : true;
    this.flipY = opts.flipY != undefined ? !!opts.flipY : true;
    this.premultiplyAlpha = opts.premultiplyAlpha != undefined ? !!opts.premultiplyAlpha : false;

    this.anisotropy = opts.anisotropy != undefined ? opts.anisotropy : 1;

    this.filter = opts.filter != undefined ? opts.filter : Enums.FilterMode.Linear;
    this.format = opts.format != undefined ? opts.format : Enums.TextureFormat.RGBA;
    this.wrap = opts.wrap != undefined ? opts.wrap : Enums.TextureWrap.Repeat;

    this._webgl = undefined;
    this._webglUsed = 0;

    this.needsUpdate = true;
}

Asset.extend(TextureCube);


TextureCube.prototype.copy = function (other) {
    Asset.prototype.copy.call(this, other);

    this.mipmap = other.mipmap;
    this.flipY = other.flipY;
    this.premultiplyAlpha = other.premultiplyAlpha;

    this.anisotropy = other.anisotropy;

    this.filter = other.filter;
    this.format = other.format;
    this.wrap = other.wrap;

    return this;
};


TextureCube.prototype.setMipmap = function (value) {

    this.mipmap = value != undefined ? !!value : !this.mipmap;
    this.needsUpdate = true;
};


TextureCube.prototype.setAnisotropy = function (value) {

    this.anisotropy = value;
    this.needsUpdate = true;
};


TextureCube.prototype.setFilter = function (value) {

    this.filter = value;
    this.needsUpdate = true;
};


TextureCube.prototype.setFormat = function (value) {

    this.format = value;
    this.needsUpdate = true;
};


TextureCube.prototype.setWrap = function (value) {

    this.wrap = value;
    this.needsUpdate = true;
};


TextureCube.prototype.toJSON = function (json, pack) {
    json = Asset.prototype.toJSON.call(this, json);

    if ((pack || !this.src) && this.raw) {
        if (typeof(window) === "undefined") {
            json.raw = this.raw;
        } else {
            var jsonRaw = json.raw || (json.raw = []),
                raw = this.raw,
                i = 0,
                il = raw.length;

            for (; i < il; i++) jsonRaw[i] = imageToDataUrl(raw[i]);
        }
    }

    json.width = this.width;
    json.height = this.height;

    json.invWidth = this.invWidth;
    json.invHeight = this.invHeight;

    json.mipmap = this.mipmap;
    json.flipY = this.flipY;
    json.premultiplyAlpha = this.premultiplyAlpha;

    json.anisotropy = this.anisotropy;

    json.filter = this.filter;
    json.format = this.format;
    json.wrap = this.wrap;

    return json;
};


TextureCube.prototype.fromJSON = function (json) {
    Asset.prototype.fromJSON.call(this, json);

    if (!json.src && json.raw) {
        if (typeof(window) === "undefined") {
            this.raw = json.raw;
        } else {
            var jsonRaw = json.raw,
                raw = this.raw,
                i = 0,
                il = jsonRaw.length;

            for (; i < il; i++) {
                var image = new Image;
                image.src = sonRaw[i];
                raw[i] = image;
            }
        }
    }

    this.width = json.width;
    this.height = json.height;

    this.invWidth = json.invWidth;
    this.invHeight = json.invHeight;

    this.mipmap = json.mipmap;
    this.flipY = json.flipY;
    this.premultiplyAlpha = json.premultiplyAlpha;

    this.anisotropy = json.anisotropy;

    this.filter = json.filter;
    this.format = json.format;
    this.wrap = json.wrap;

    return this;
};


function imageToDataUrl(image) {
    if (typeof(window) === "undefined") return image;
    var canvas = document.createElement("canvas"),
        ctx = canvas.getContext("2d");

    canvas.width = image.width;
    canvas.height = image.height;
    ctx.drawImage(image, 0, 0);

    return canvas.toDataURL();
};


module.exports = TextureCube;

},{"../enums":73,"./asset":20}],40:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function BoneComponentManager() {

    ComponentManager.call(this, 1000000);
}

ComponentManager.extend(BoneComponentManager);


BoneComponentManager.prototype.sortFunction = function (a, b) {

    return a.parentIndex - b.parentIndex;
};


module.exports = BoneComponentManager;

},{"./component_manager":43}],41:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function Camera2DComponentManager() {

    ComponentManager.call(this);
}

ComponentManager.extend(Camera2DComponentManager);


Camera2DComponentManager.prototype.sortFunction = function (a, b) {

    return a._active ? 1 : b._active ? -1 : 0;
};


module.exports = Camera2DComponentManager;

},{"./component_manager":43}],42:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function CameraComponentManager() {

    ComponentManager.call(this);
}

ComponentManager.extend(CameraComponentManager);


CameraComponentManager.prototype.sortFunction = function (a, b) {

    return a._active ? 1 : b._active ? -1 : 0;
};


module.exports = CameraComponentManager;

},{"./component_manager":43}],43:[function(require,module,exports){
var Class = require("../../base/class");
var Component = require("../components/component");
"use strict";


function ComponentManager(order) {

    Class.call(this);

    this.order = order || 0;

    this.scene = undefined;
    this.components = [];
}

Class.extend(ComponentManager);


ComponentManager.prototype.forEach = function (fn, ctx) {
    var components = this.components,
        i = 0,
        il = components.length;

    if (ctx) {
        for (; i < il; i++) fn.call(ctx, components[i], i, components);
    } else {
        for (; i < il; i++) fn(components[i], i, components);
    }
};


ComponentManager.prototype.start = function () {
    var components = this.components,
        i, il;

    for (i = 0, il = components.length; i < il; i++) components[i].start();
    for (i = 0, il = components.length; i < il; i++) components[i].emit("start");
};


ComponentManager.prototype.init = function () {
    var components = this.components,
        i, il;

    for (i = 0, il = components.length; i < il; i++) components[i].init();
    for (i = 0, il = components.length; i < il; i++) components[i].emit("init");
};


ComponentManager.prototype.update = function () {
    var components = this.components,
        i = 0,
        il = components.length,
        component;

    for (; i < il; i++)
        if ((component = components[i])) component.update();
};


ComponentManager.prototype.sort = function () {

    this.components.sort(this.sortFunction);
};


ComponentManager.prototype.sortFunction = function (a, b) {

    return a._id - b._id;
};


ComponentManager.prototype.empty = function () {

    return this.components.length === 0;
};


ComponentManager.prototype.add = function (component) {
    if (!(component instanceof Component)) {
        Log.error(this._className + ".add: can't add argument to " + this._className + ", it's not an instance of Component");
        return;
    }
    var components = this.components,
        index = components.indexOf(component);

    if (index === -1) {
        components.push(component);
    } else {
        Log.error(this._className + ".add: Component is already a member of " + this._className);
    }
};


ComponentManager.prototype.remove = function (component) {
    if (!(component instanceof Component)) {
        Log.error(this._className + ".remove: can't remove argument from " + this._className + ", it's not an instance of Component");
        return;
    }
    var components = this.components,
        index = components.indexOf(component);

    if (index !== -1) {
        components.splice(index, 1);
    } else {
        Log.error(this._className + ".remove: Component is not a member of " + this._className);
    }
};


module.exports = ComponentManager;

},{"../../base/class":8,"../components/component":54}],44:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function LightComponentManager() {

    ComponentManager.call(this);
}

ComponentManager.extend(LightComponentManager);


LightComponentManager.prototype.sortFunction = function (a, b) {

    return a.type - b.type;
};


LightComponentManager.prototype.update = function () {

};


module.exports = LightComponentManager;

},{"./component_manager":43}],45:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function MeshAnimationComponentManager() {

    ComponentManager.call(this, -999999);
}

ComponentManager.extend(MeshAnimationComponentManager);


module.exports = MeshAnimationComponentManager;

},{"./component_manager":43}],46:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function MeshFilterComponentManager() {

    ComponentManager.call(this);
}

ComponentManager.extend(MeshFilterComponentManager);


MeshFilterComponentManager.prototype.sortFunction = function (a, b) {

    return a.mesh === b.mesh ? 1 : -1;
};


MeshFilterComponentManager.prototype.update = function () {

};


module.exports = MeshFilterComponentManager;

},{"./component_manager":43}],47:[function(require,module,exports){
var Class = require("../../base/class");
var Mathf = require("../../math/mathf");
var ComponentManager = require("./component_manager");
var Sprite = require("../components/sprite");
"use strict";


var clamp = Mathf.clamp;


function SpriteComponentManager() {

    Class.call(this);

    this.order = 0;

    this.scene = undefined;
    this.layers = [];
}

ComponentManager.extend(SpriteComponentManager);


SpriteComponentManager.prototype.forEach = function (fn, ctx) {
    var layers = this.layers,
        components, i, il, j, jl;

    if (ctx) {
        for (i = 0, il = layers.length; i < il; i++) {
            components = layers[i];
            if (!components) continue;
            for (j = 0, jl = components.length; j < jl; j++) fn.call(ctx, components[j], j, components);
        }
    } else {
        for (i = 0, il = layers.length; i < il; i++) {
            components = layers[i];
            if (!components) continue;
            for (j = 0, jl = components.length; j < jl; j++) fn(components[j], j, components);
        }
    }
};


SpriteComponentManager.prototype.init = function () {
    var layers = this.layers,
        components, i, il, j, jl;

    for (i = 0, il = layers.length; i < il; i++) {
        components = layers[i];
        if (!components) continue;

        for (j = 0, jl = components.length; j < jl; j++) components[j].init();
        for (j = 0, jl = components.length; j < jl; j++) components[j].emit("init");
    }
};


SpriteComponentManager.prototype.start = function () {
    var layers = this.layers,
        components, i, il, j, jl;

    for (i = 0, il = layers.length; i < il; i++) {
        components = layers[i];
        if (!components) continue;

        for (j = 0, jl = components.length; j < jl; j++) components[j].start();
        for (j = 0, jl = components.length; j < jl; j++) components[j].emit("start");
    }
};


SpriteComponentManager.prototype.update = function () {

};


SpriteComponentManager.prototype.sort = function () {
    var layers = this.layers,
        components, i, il;

    for (i = 0, il = layers.length; i < il; i++) {
        components = layers[i];
        if (!components) continue;

        components.sort(this.sortFunction);
    }
};


SpriteComponentManager.prototype.sortFunction = function (a, b) {

    return a.z - b.z;
};


SpriteComponentManager.prototype.empty = function () {
    var layers = this.layers,
        components, i, il,
        empty = true;

    for (i = 0, il = layers.length; i < il; i++) {
        components = layers[i];
        if (!components) continue;

        if (components.length !== 0) empty = false
    }

    return empty;
};


SpriteComponentManager.prototype.add = function (component) {
    if (!(component instanceof Sprite)) {
        Log.error("SpriteComponentManager.add: can't add argument to SpriteComponentManager, it's not an instance of Sprite");
        return;
    }
    var layers = this.layers,
        componentLayer = (component.layer = clamp(component.layer || 0, 0, 20)),
        components = layers[componentLayer] || (layers[componentLayer] = []),
        index = components.indexOf(component);

    if (index === -1) {
        components.push(component);
    } else {
        Log.error(this._className + ".add: Sprite is already a member of SpriteComponentManager");
    }
};


SpriteComponentManager.prototype.remove = function (component) {
    if (!(component instanceof Sprite)) {
        Log.error("SpriteComponentManager.remove: can't remove argument from SpriteComponentManager, it's not an instance of Sprite");
        return;
    }
    var layers = this.layers,
        componentLayer = (component.layer = clamp(component.layer || 0, 0, 20)),
        components = layers[componentLayer] || (layers[componentLayer] = []),
        index = components.indexOf(component);

    if (index !== -1) {
        components.splice(index, 1);
    } else {
        Log.error("SpriteComponentManager.remove: Sprite is not a member of SpriteComponentManager");
    }
};


module.exports = SpriteComponentManager;

},{"../../base/class":8,"../../math/mathf":107,"../components/sprite":69,"./component_manager":43}],48:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function Transform2DComponentManager() {

    ComponentManager.call(this, 999999);
}

ComponentManager.extend(Transform2DComponentManager);


Transform2DComponentManager.prototype.sortFunction = function (a, b) {

    return a.depth - b.depth;
};


module.exports = Transform2DComponentManager;

},{"./component_manager":43}],49:[function(require,module,exports){
var ComponentManager = require("./component_manager");
"use strict";


function TransformComponentManager() {

    ComponentManager.call(this, 999999);
}

ComponentManager.extend(TransformComponentManager);


TransformComponentManager.prototype.sortFunction = function (a, b) {

    return a.depth - b.depth;
};


module.exports = TransformComponentManager;

},{"./component_manager":43}],50:[function(require,module,exports){
var AudioCtx = require("../../base/audio_ctx");
var Time = require("../../base/time");
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var Vec3 = require("../../math/vec3");
var Assets = require("../assets/assets");
var Component = require("./component");
"use strict";


var now = Time.now,
    clamp01 = Mathf.clamp01,
    defineProperty = Object.defineProperty;

function AudioSource(opts) {
    opts || (opts = {});

    Component.call(this, "AudioSource", opts);

    this.clip = opts.clip;

    this._source = undefined;
    this._gain = undefined;
    this._panner = undefined;

    this.dopplerLevel = opts.dopplerLevel != undefined ? opts.dopplerLevel : 1;
    this._loop = opts.loop != undefined ? !!opts.loop : false;

    this.maxDistance = opts.maxDistance != undefined ? opts.maxDistance : 15;
    this.minDistance = opts.minDistance != undefined ? opts.minDistance : 1;

    this.offset = opts.offset != undefined ? opts.offset : new Vec3;

    this.pitch = opts.pitch != undefined ? opts.pitch : 0;

    this.playOnStart = opts.playOnStart != undefined ? !!opts.playOnStart : false;

    this.spread = opts.spread != undefined ? opts.spread : 0;

    this.time = opts.time != undefined ? opts.time : 0;
    this._volume = opts.volume != undefined ? opts.volume : 1;

    this.playing = false;
    this.stopped = false;
    this.paused = false;

    this._startTime = 0;

    var _this = this;
    this._onended = function () {

        _this.playing = false;
        _this.time = 0;
        _this.emit("end");
    };
}

Component.extend(AudioSource);


defineProperty(AudioSource.prototype, "volume", {
    get: function () {
        return this._volume;
    },
    set: function (value) {
        this._volume = clamp01(value);
        if (this._gain) this._gain.gain.value = this._volume;
    }
});


defineProperty(AudioSource.prototype, "loop", {
    get: function () {
        return this._loop;
    },
    set: function (value) {
        this._loop = !!value;
        if (this._source) this._source.loop = this._loop;
    }
});


AudioSource.prototype.copy = function (other) {

    this.clip = other.clip;

    this.dopplerLevel = other.dopplerLevel;
    this.loop = other.loop;

    this.maxDistance = other.maxDistance;
    this.minDistance = other.minDistance;

    this.offset.copy(other.offset);
    this.panLevel = other.panLevel;

    this.pitch = other.pitch;

    this.playOnStart = other.playOnStart;

    this.spread = other.spread;

    this.time = other.time;
    this.volume = other.volume;

    this.playing = false;
    this.stopped = false;
    this.paused = false;

    return this;
};


AudioSource.prototype.clear = function () {
    Component.prototype.clear.call(this);
    if (this.playing) this.stop();

    this.clip = undefined;
    this._source = undefined;
    this._gain = undefined;
    this._panner = undefined;
};


AudioSource.prototype.start = function () {

    if (this.playOnStart) this.play();
};


var VEC2 = new Vec2,
    VEC3 = new Vec3;
AudioSource.prototype.update = function () {
    if (this.dopplerLevel === 0 || !this.playing) return;
    var transform2d, transform, camera, cameraTransform, panner;

    if (!(camera = this.gameObject.scene.game.camera)) return;
    if (!(panner = this._panner)) return;

    transform = this.transform;
    transform2d = this.transform2d;

    cameraTransform = camera.transform || camera.transform2d;

    if (transform2d) {
        VEC2.vadd(transform2d.position, this.offset);
        VEC2.sub(cameraTransform.position);
        VEC2.smul(this.dopplerLevel);

        panner.setPosition(VEC2.x, VEC2.y, camera.orthographicSize * 0.5);
    } else {
        VEC3.vadd(transform.position, this.offset);
        VEC3.sub(cameraTransform.position);
        VEC3.smul(this.dopplerLevel);

        panner.setPosition(VEC3.x, VEC3.y, VEC3.z || 0);
    }
};


AudioSource.prototype.play = function (delay, offset, duration) {
    if (!AudioCtx) return this;
    if (!AudioCtx.UNLOCKED && this._loop) {
        var _this = this,
            listener = function (e) {
                _this.play();
                window.removeEventListener("audiocontextunlock", listener, false);
            };

        window.addEventListener("audiocontextunlock", listener, false);
    }
    if (!this.clip || !this.clip.raw) return this;
    var time = this.time,
        clipLength = this.clip.length,
        maxLength = clipLength - time;

    delay || (delay = 0);
    offset || (offset = time);
    duration || (duration = clipLength);
    duration = duration > maxLength ? maxLength : duration;

    this._refresh();

    this.playing = true;
    this.stopped = false;
    this.paused = false;
    this._startTime = now();

    this.time = offset;
    this._source.start(delay, offset, duration);

    return this;
};


AudioSource.prototype.pause = function () {
    if (!AudioCtx || !this.clip || !this.clip.raw) return this;

    this.playing = false;
    this.stopped = false;
    this.paused = true;
    this.time = now() - this._startTime;

    this._source.stop(this.time);

    return this;
};


AudioSource.prototype.stop = function () {
    if (!AudioCtx || !this.clip || !this.clip.raw) return this;

    this.time = 0;
    this.playing = false;
    this.stopped = true;
    this.paused = false;

    this._source.stop(this.time);

    return this;
};


AudioSource.prototype._refresh = function () {
    var source = this._source = AudioCtx.createBufferSource(),
        gain = this._gain = AudioCtx.createGain(),
        panner;

    if (this.dopplerLevel === 0) {
        gain.connect(AudioCtx.destination);
        source.connect(gain);
    } else {
        panner = this._panner = AudioCtx.createPanner();

        gain.connect(AudioCtx.destination);
        panner.connect(gain);
        source.connect(panner);
    }

    source.buffer = this.clip.raw;
    source.onended = this._onended;

    gain.gain.value = this.volume;
    source.loop = this._loop;

    return this;
};


AudioSource.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.clip = this.clip ? this.clip.name : undefined;

    json.dopplerLevel = this.dopplerLevel;
    json.loop = this.loop;

    json.maxDistance = this.maxDistance;
    json.minDistance = this.minDistance;

    json.offset = this.offset.toJSON(json.offset);
    json.panLevel = this.panLevel;

    json.pitch = this.pitch;

    json.playOnStart = this.playOnStart;

    json.spread = this.spread;

    json.time = this.time;
    json.volume = this.volume;

    return json;
};


AudioSource.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.clip = json.clip ? Assets.get(json.clip) : undefined;

    this.dopplerLevel = json.dopplerLevel;
    this.loop = json.loop;

    this.maxDistance = json.maxDistance;
    this.minDistance = json.minDistance;

    this.offset.fromJSON(json.offset);
    this.panLevel = json.panLevel;

    this.pitch = json.pitch;

    this.playOnStart = json.playOnStart;

    this.spread = json.spread;

    this.time = json.time;
    this.volume = json.volume;

    return this;
};


module.exports = AudioSource;

},{"../../base/audio_ctx":7,"../../base/time":18,"../../math/mathf":107,"../../math/vec2":111,"../../math/vec3":112,"../assets/assets":22,"./component":54}],51:[function(require,module,exports){
var Vec3 = require("../../math/vec2");
var Quat = require("../../math/quat");
var Mat4 = require("../../math/mat4");
var Component = require("./component");
"use strict";


var UNKNOWN = 0;


function Bone(opts) {
    opts || (opts = {});

    Component.call(this, "Bone", opts);

    this.parentIndex = opts.parentIndex != undefined ? opts.parentIndex : -1;
    this.name = opts.name != undefined ? opts.name : "Bone_" + UNKNOWN++;

    this.skinned = opts.skinned != undefined ? opts.skinned : false;
    this.bindPose = opts.bindPose != undefined ? opts.bindPose : new Mat4;
    this.uniform = new Mat4;

    this.inheritPosition = opts.inheritPosition != undefined ? opts.inheritPosition : true;
    this.inheritRotation = opts.inheritRotation != undefined ? opts.inheritRotation : true;
    this.inheritScale = opts.inheritScale != undefined ? opts.inheritScale : true;
}

Component.extend(Bone);


Bone.prototype.copy = function (other) {

    this.name = other.name;
    this.parentIndex = other.parentIndex;

    this.skinned = other.skinned;
    this.bindPose.copy(other.bindPose);

    this.inheritPosition = other.inheritPosition;
    this.inheritRotation = other.inheritRotation;
    this.inheritScale = other.inheritScale;

    return this;
};


var MAT = new Mat4,
    POSITION = new Vec3,
    SCALE = new Vec3,
    ROTATION = new Quat;
Bone.prototype.update = function () {
    if (!this.skinned) return;
    var transform = this.transform,
        uniform = this.uniform,
        parent = transform.parent,
        inheritPosition = this.inheritPosition,
        inheritScale = this.inheritScale,
        inheritRotation = this.inheritRotation;

    uniform.copy(transform.matrix);

    if (parent && this.parentIndex !== -1) {
        MAT.copy(parent.bone.uniform);

        if (!inheritPosition || !inheritScale || !inheritRotation) {
            MAT.decompose(POSITION, SCALE, ROTATION);

            if (!inheritPosition) POSITION.set(0.0, 0.0, 0.0);
            if (!inheritScale) SCALE.set(1.0, 1.0, 1.0);
            if (!inheritRotation) ROTATION.set(0.0, 0.0, 0.0, 1.0);

            MAT.compose(POSITION, SCALE, ROTATION);
        }

        uniform.mmul(MAT, uniform);
    }
};


Bone.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.name = this.name;
    json.parentIndex = this.parentIndex;

    json.skinned = this.skinned;
    json.bindPose = this.bindPose.toJSON(json.bindPose);

    json.inheritPosition = this.inheritPosition;
    json.inheritRotation = this.inheritRotation;
    json.inheritScale = this.inheritScale;

    return json;
};


Bone.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.name = json.name;
    this.parentIndex = json.parentIndex;

    this.skinned = json.skinned;
    this.bindPose.fromJSON(json.bindPose);

    this.inheritPosition = json.inheritPosition;
    this.inheritRotation = json.inheritRotation;
    this.inheritScale = json.inheritScale;

    return this;
};


module.exports = Bone;

},{"../../math/mat4":106,"../../math/quat":108,"../../math/vec2":111,"./component":54}],52:[function(require,module,exports){
var Mathf = require("../../math/mathf");
var Color = require("../../math/color");
var Vec3 = require("../../math/vec3");
var Mat4 = require("../../math/mat4");
var Component = require("./component");
"use strict";


var degsToRads = Mathf.degsToRads,
    clamp = Mathf.clamp,
    EPSILON = Mathf.EPSILON;


function Camera(opts) {
    opts || (opts = {});

    Component.call(this, "Camera", opts);

    this.width = 960;
    this.height = 640;
    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.autoResize = opts.autoResize != undefined ? !!opts.autoResize : true;
    this.background = opts.background != undefined ? opts.background : new Color(0.5, 0.5, 0.5);

    this.aspect = this.width / this.height;
    this.fov = opts.fov != undefined ? opts.fov : 35;

    this.near = opts.near != undefined ? opts.near : 0.0625;
    this.far = opts.far != undefined ? opts.far : 16384;

    this.orthographic = opts.orthographic != undefined ? !!opts.orthographic : false;
    this.orthographicSize = opts.orthographicSize != undefined ? opts.orthographicSize : 2;

    this.minOrthographicSize = opts.minOrthographicSize != undefined ? opts.minOrthographicSize : EPSILON;
    this.maxOrthographicSize = opts.maxOrthographicSize != undefined ? opts.maxOrthographicSize : 1024;

    this.projection = new Mat4;
    this.guiProjection = new Mat4;
    this.view = new Mat4;

    this.needsUpdate = true;
    this._active = false;
}

Component.extend(Camera);


Camera.prototype.copy = function (other) {

    this.width = other.width;
    this.height = other.height;
    this.aspect = other.aspect;

    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.autoResize = other.autoResize;
    this.background.copy(other.background);

    this.far = other.far;
    this.near = other.near;
    this.fov = other.fov;

    this.orthographic = other.orthographic;
    this.orthographicSize = other.orthographicSize;
    this.minOrthographicSize = other.minOrthographicSize;
    this.maxOrthographicSize = other.maxOrthographicSize;

    this.needsUpdate = true;

    return this;
};


Camera.prototype.set = function (width, height) {

    this.width = width;
    this.height = height;

    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.aspect = width / height;
    this.needsUpdate = true;
};


Camera.prototype.setWidth = function (width) {

    this.width = width;
    this.aspect = width / this.height;

    this.invWidth = 1 / this.width;

    this.needsUpdate = true;
};


Camera.prototype.setHeight = function (height) {

    this.height = height;
    this.aspect = this.width / height;

    this.invHeight = 1 / this.height;

    this.needsUpdate = true;
};


Camera.prototype.setFov = function (value) {

    this.fov = value;
    this.needsUpdate = true;
};


Camera.prototype.setNear = function (value) {

    this.near = value;
    this.needsUpdate = true;
};


Camera.prototype.setFar = function (value) {

    this.far = value;
    this.needsUpdate = true;
};


Camera.prototype.setOrthographic = function (value) {

    this.orthographic = !!value;
    this.needsUpdate = true;
};


Camera.prototype.toggleOrthographic = function () {

    this.orthographic = !this.orthographic;
    this.needsUpdate = true;
};


Camera.prototype.setOrthographicSize = function (size) {

    this.orthographicSize = clamp(size, this.minOrthographicSize, this.maxOrthographicSize);
    this.needsUpdate = true;
};


var MAT4 = new Mat4,
    VEC3 = new Vec3;

Camera.prototype.toWorld = function (v, out) {
    out || (out = new Vec3);

    out.x = 2.0 * (v.x * this.invWidth) - 1.0;
    out.y = -2.0 * (v.y * this.invHeight) + 1.0;
    out.transformMat4(MAT4.mmul(this.projection, this.view).inverse());
    out.z = this.near;

    return out;
};


Camera.prototype.toScreen = function (v, out) {
    out || (out = new Vec2);

    VEC3.copy(v);
    VEC3.transformMat4(MAT4.mmul(this.projection, this.view));

    out.x = ((VEC3.x + 1.0) * 0.5) * this.width;
    out.y = ((1.0 - VEC3.y) * 0.5) * this.height;

    return v;
};


Camera.prototype.update = function (force) {
    if (!force && !this._active) return;

    if (this.needsUpdate) {

        if (!this.orthographic) {
            this.projection.perspective(degsToRads(this.fov), this.aspect, this.near, this.far);
        } else {
            this.orthographicSize = clamp(this.orthographicSize, this.minOrthographicSize, this.maxOrthographicSize);

            var orthographicSize = this.orthographicSize,
                right = orthographicSize * this.aspect,
                left = -right,
                top = orthographicSize,
                bottom = -top;

            this.projection.orthographic(left, right, top, bottom, this.near, this.far);
        }

        this.guiProjection.orthographic(0, this.width, 0, this.height, -1, 1);

        this.needsUpdate = false;
    }

    this.view.inverseMat((this.transform || this.transform2d).matrixWorld);
};


Camera.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.width = this.width;
    json.height = this.height;
    json.aspect = this.aspect;

    json.autoResize = this.autoResize;
    json.background = this.background.toJSON(json.background);

    json.far = this.far;
    json.near = this.near;
    json.fov = this.fov;

    json.orthographic = this.orthographic;
    json.orthographicSize = this.orthographicSize;
    json.minOrthographicSize = this.minOrthographicSize;
    json.maxOrthographicSize = this.maxOrthographicSize;

    return json;
};


Camera.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.width = json.width;
    this.height = json.height;
    this.aspect = json.aspect;

    this.autoResize = json.autoResize;
    this.background.fromJSON(json.background);

    this.far = json.far;
    this.near = json.near;
    this.fov = json.fov;

    this.orthographic = json.orthographic;
    this.orthographicSize = json.orthographicSize;
    this.minOrthographicSize = json.minOrthographicSize;
    this.maxOrthographicSize = json.maxOrthographicSize;

    this.needsUpdate = true;

    return this;
};


module.exports = Camera;

},{"../../math/color":102,"../../math/mat4":106,"../../math/mathf":107,"../../math/vec3":112,"./component":54}],53:[function(require,module,exports){
var Mathf = require("../../math/mathf");
var Color = require("../../math/color");
var Vec2 = require("../../math/vec2");
var Mat32 = require("../../math/mat32");
var Mat4 = require("../../math/mat4");
var Component = require("./component");
"use strict";


var clamp = Mathf.clamp,
    EPSILON = Mathf.EPSILON;


function Camera2D(opts) {
    opts || (opts = {});

    Component.call(this, "Camera2D", opts);

    this.width = 960;
    this.height = 640;
    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.autoResize = opts.autoResize != undefined ? !!opts.autoResize : true;
    this.background = opts.background != undefined ? opts.background : new Color(0.5, 0.5, 0.5);

    this.aspect = this.width / this.height;

    this.orthographicSize = opts.orthographicSize != undefined ? opts.orthographicSize : 2;

    this.minOrthographicSize = opts.minOrthographicSize != undefined ? opts.minOrthographicSize : EPSILON;
    this.maxOrthographicSize = opts.maxOrthographicSize != undefined ? opts.maxOrthographicSize : 1024;

    this.projection = new Mat4;
    this._projection = new Mat32;
    this.guiProjection = new Mat4;

    this.view = new Mat4;
    this._view = new Mat32;

    this.needsUpdate = true;
    this._active = false;
}

Component.extend(Camera2D);


Camera2D.prototype.copy = function (other) {

    this.width = other.width;
    this.height = other.height;

    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.autoResize = other.autoResize;
    this.background.copy(other.background);

    this.orthographicSize = other.orthographicSize;
    this.minOrthographicSize = other.minOrthographicSize;
    this.maxOrthographicSize = other.maxOrthographicSize;

    this.needsUpdate = true;

    return this;
};


Camera2D.prototype.set = function (width, height) {

    this.width = width;
    this.height = height;

    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.aspect = width / height;
    this.needsUpdate = true;
};


Camera2D.prototype.setWidth = function (width) {

    this.width = width;
    this.aspect = width / this.height;

    this.invWidth = 1 / this.width;

    this.needsUpdate = true;
};


Camera2D.prototype.setHeight = function (height) {

    this.height = height;
    this.aspect = this.width / height;

    this.invHeight = 1 / this.height;

    this.needsUpdate = true;
};


Camera2D.prototype.setOrthographicSize = function (size) {

    this.orthographicSize = clamp(size, this.minOrthographicSize, this.maxOrthographicSize);
    this.needsUpdate = true;
};


var MAT32 = new Mat32,
    VEC2 = new Vec2;
Camera2D.prototype.toWorld = function (v, out) {
    out || (out = new Vec2);

    out.x = 2 * (v.x * this.invWidth) - 1;
    out.y = -2 * (v.y * this.invHeight) + 1;
    out.transformMat32(MAT32.mmul(this._projection, this._view).inverse());

    return out;
};


Camera2D.prototype.toScreen = function (v, out) {
    out || (out = new Vec2);

    VEC2.copy(v).transformMat32(MAT32.mmul(this._projection, this._view));

    out.x = ((VEC2.x + 1) * 0.5) * this.width;
    out.y = ((1 - VEC2.y) * 0.5) * this.height;

    return out;
};


Camera2D.prototype.update = function () {
    if (!this._active) return;

    if (this.needsUpdate) {
        var orthographicSize = this.orthographicSize,
            right = orthographicSize * this.aspect,
            left = -right,
            top = orthographicSize,
            bottom = -top;

        this.projection.orthographic(left, right, top, bottom, -1, 1);
        this._projection.fromMat4(this.projection);
        this.needsUpdate = false;

        this.guiProjection.orthographic(0, this.width, 0, this.height, -1, 1);
    }

    this.view.inverseMat((this.transform || this.transform2d).matrixWorld);
    this._view.fromMat4(this.view);
};


Camera2D.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.width = this.width;
    json.height = this.height;

    json.autoResize = this.autoResize;
    json.background = this.background.toJSON(json.background);

    json.orthographicSize = this.orthographicSize;
    json.minOrthographicSize = this.minOrthographicSize;
    json.maxOrthographicSize = this.maxOrthographicSize;

    return json;
};


Camera2D.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.width = json.width;
    this.height = json.height;

    this.autoResize = json.autoResize;
    this.background.fromJSON(json.background);

    this.orthographicSize = json.orthographicSize;
    this.minOrthographicSize = json.minOrthographicSize;
    this.maxOrthographicSize = json.maxOrthographicSize;

    this.needsUpdate = true;

    return this;
};


module.exports = Camera2D;

},{"../../math/color":102,"../../math/mat32":105,"../../math/mat4":106,"../../math/mathf":107,"../../math/vec2":111,"./component":54}],54:[function(require,module,exports){
var Class = require("../../base/class");
var util = require("../../base/util");
var Log = require("../../base/log");
"use strict";


var camelize = util.camelize;


function Component(type, opts) {
    opts || (opts = {});
    if (!type) Log.error("Component defined without a type, use Component.call(this, \"ComponentName\", { sync: Boolean, json: Boolean })");

    Class.call(this);

    this._type = type || "UnknownComponent";
    this._name = camelize(this._type, true);

    this.sync = opts.sync != undefined ? !!opts.sync : false;
    this.json = opts.json != undefined ? !!opts.json : true;

    this.gameObject = undefined;
}

Class.extend(Component);


Component.prototype.copy = function (other) {

    this.sync = other.sync;
    this.json = other.json;

    return this;
};


Component.prototype.init = function () {

    return this;
};


Component.prototype.start = function () {

    return this;
};


Component.prototype.update = function () {

};


Component.prototype.clear = function () {

    this.off();

    return this;
};


Component.prototype.destroy = function () {
    if (!this.gameObject) {
        Log.error("Component.destroy: can't destroy Component if it's not added to a GameObject");
        return this;
    }

    this.gameObject.removeComponent(this);
    this.emit("destroy");

    this.clear();

    return this;
};


Component.prototype.remove = function () {
    if (!this.gameObject) {
        Log.error("Component.remove: can't remove Component if it's not added to a GameObject");
        return this;
    }

    this.gameObject.removeComponent(this, true);
    return this;
};


Component.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json._type = this._type;
    json.sync = this.sync;
    json.json = this.json;

    return json;
};


Component.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.sync = json.sync;
    this.json = json.json;

    return this;
};


module.exports = Component;

},{"../../base/class":8,"../../base/log":14,"../../base/util":19}],55:[function(require,module,exports){
var Component = require("./component");
"use strict";


function GUIElement(type, opts) {
    opts || (opts = {});

    Component.call(this, type || "GUIElement", opts);
}

Component.extend(GUIElement);


module.exports = GUIElement;

},{"./component":54}],56:[function(require,module,exports){
var Rect = require("../../math/rect");
var Color = require("../../math/color");
var Enums = require("../enums");
var Assets = require("../assets/assets");
var GUIElement = require("./gui_element");
"use strict";


var FontStyle = Enums.FontStyle,
    TextAnchor = Enums.TextAnchor;


function GUIText(opts) {
    opts || (opts = {});

    GUIElement.call(this, "GUIText", opts);

    this.text = opts.text != undefined ? opts.text : "";

    this.font = opts.font || "Arial";
    this.fontSize = opts.fontSize || 16;
    this.fontStyle = opts.fontStyle || FontStyle.Normal;
    this.lineHeight = opts.lineHeight || 24;
    this.lineSpacing = opts.lineSpacing || 0;

    this.color = opts.color != undefined ? opts.color : new Color(1, 1, 1);
    this.offset = opts.offset != undefined ? opts.offset : new Vec2;

    this.alignment = opts.alignment || TextAnchor.MiddleLeft;
}

GUIElement.extend(GUIText);


GUIText.prototype.copy = function (other) {

    this.text = other.text;

    this.font = other.font;
    this.fontSize = other.fontSize;
    this.fontStyle = other.fontStyle;
    this.lineHeight = other.lineHeight;
    this.lineSpacing = other.lineSpacing;

    this.color.copy(other.color);
    this.offset.copy(other.offset);

    this.alignment = other.alignment;

    return this;
};


GUIText.prototype.toJSON = function (json) {
    json = GUIElement.prototype.toJSON.call(this, json);

    json.text = this.text;

    json.font = this.font;
    json.fontSize = this.fontSize;
    json.fontStyle = this.fontStyle;
    json.lineHeight = this.lineHeight;
    json.lineSpacing = this.lineSpacing;

    json.color = this.color.toJSON(json.color);
    json.offset = this.offset.toJSON(json.offset);

    json.alignment = this.alignment;

    return json;
};


GUIText.prototype.fromJSON = function (json) {
    GUIElement.prototype.fromJSON.call(this, json);

    this.text = json.text;

    this.font = json.font;
    this.fontSize = json.fontSize;
    this.fontStyle = json.fontStyle;
    this.lineHeight = json.lineHeight;
    this.lineSpacing = json.lineSpacing;

    this.color.fromJSON(json.color);
    this.offset.fromJSON(json.offset);

    this.alignment = this.alignment;

    return this;
};


module.exports = GUIText;

},{"../../math/color":102,"../../math/rect":109,"../assets/assets":22,"../enums":73,"./gui_element":55}],57:[function(require,module,exports){
var Rect = require("../../math/rect");
var Color = require("../../math/color");
var Assets = require("../assets/assets");
var GUIElement = require("./gui_element");
"use strict";


function GUITexture(opts) {
    opts || (opts = {});

    GUIElement.call(this, "GUITexture", opts);

    this.texture = opts.texture;
    this.color = opts.color != undefined ? opts.color : new Color(1, 1, 1);
    this.position = opts.position != undefined ? opts.position : new Rect;

    this.x = opts.x || 0;
    this.y = opts.y || 0;
    this.w = opts.w || 1;
    this.h = opts.h || 1;

    this.alpha = opts.alpha != undefined ? opts.alpha : 1;
}

GUIElement.extend(GUITexture);


GUITexture.prototype.copy = function (other) {

    this.texture = other.texture;
    this.color.copy(other.color);
    this.position.copy(other.position);

    this.x = other.x;
    this.y = other.y;
    this.w = other.w;
    this.h = other.h;

    this.alpha = other.alpha;

    return this;
};


GUITexture.prototype.clear = function () {
    GUIElement.prototype.clear.call(this);

    this.texture = undefined;

    return this;
};


GUITexture.prototype.toJSON = function (json) {
    json = GUIElement.prototype.toJSON.call(this, json);

    json.texture = this.texture ? this.texture.name : undefined;
    json.color = this.color.toJSON(json.color);
    json.position = this.position.toJSON(json.position);

    json.x = this.x;
    json.y = this.y;
    json.w = this.w;
    json.h = this.h;

    json.alpha = this.alpha;

    return json;
};


GUITexture.prototype.fromJSON = function (json) {
    GUIElement.prototype.fromJSON.call(this, json);

    this.texture = json.texture ? Assets.get(json.texture) : undefined;
    this.color.fromJSON(json.color);
    this.position.fromJSON(json.position);

    this.x = json.x;
    this.y = json.y;
    this.w = json.w;
    this.h = json.h;

    this.alpha = json.alpha;

    return this;
};


module.exports = GUITexture;

},{"../../math/color":102,"../../math/rect":109,"../assets/assets":22,"./gui_element":55}],58:[function(require,module,exports){
var Enums = require("../enums");
var Vec3 = require("../../math/vec3");
var Color = require("../../math/color");
var Component = require("./component");
"use strict";


var cos = Math.cos,
    defineProperty = Object.defineProperty;


function Light(opts) {
    opts || (opts = {});

    Component.call(this, "Light", opts);

    this.type = opts.type != undefined ? opts.type : Enums.LightType.Point;

    this.visible = opts.visible != undefined ? !!opts.visible : true;
    this.onlyShadow = opts.onlyShadow != undefined ? !!opts.onlyShadow : false;
    this.castShadow = opts.castShadow != undefined ? !!opts.castShadow : true;

    this.color = opts.color != undefined ? opts.color : new Color(1, 1, 1);
    this.energy = opts.energy != undefined ? opts.energy : 1;
    this.distance = opts.distance != undefined ? opts.distance : 0;

    this._angleCos = 0;
    this._angle = 0;
    this.angle = opts.angle != undefined ? opts.angle : Math.PI * 0.0625;
    this.exponent = opts.exponent != undefined ? opts.exponent : 10;

    this.target = opts.target != undefined ? opts.target : new Vec3;
}

Component.extend(Light);


defineProperty(Light.prototype, "angle", {
    get: function () {
        return this._angle;
    },
    set: function (value) {
        this._angle = value;
        this._angleCos = cos(value);
    }
});


Light.prototype.copy = function (other) {

    this.type = other.type;

    this.visible = other.visible;
    this.onlyShadow = other.onlyShadow;
    this.castShadow = other.castShadow;

    this.color.copy(other.color);
    this.energy = other.energy;
    this.distance = other.distance;
    this.angle = other.angle;

    return this;
};


Light.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.type = this.type;

    json.visible = this.visible;
    json.onlyShadow = this.onlyShadow;
    json.castShadow = this.castShadow;

    json.color = this.color.toJSON(json.color);
    json.energy = this.energy;
    json.distance = this.distance;
    json.angle = this.angle;

    return json;
};


Light.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.type = json.type;

    this.visible = json.visible;
    this.onlyShadow = json.onlyShadow;
    this.castShadow = json.castShadow;

    this.color.fromJSON(json.color);
    this.energy = json.energy;
    this.distance = json.distance;
    this.angle = json.angle;

    return this;
};


module.exports = Light;

},{"../../math/color":102,"../../math/vec3":112,"../enums":73,"./component":54}],59:[function(require,module,exports){
var Time = require("../../base/time");
var Mathf = require("../../math/mathf");
var Mat4 = require("../../math/mat4");
var Vec3 = require("../../math/vec3");
var Quat = require("../../math/quat");
var Assets = require("../assets/assets");
var Component = require("./component");
var Enums = require("../enums");
"use strict";


var clamp01 = Mathf.clamp01,
    abs = Math.abs,
    WrapMode = Enums.WrapMode;


function MeshAnimation(opts) {
    opts || (opts = {});

    Component.call(this, "MeshAnimation", opts);

    this.current = opts.current != undefined ? opts.current : "idle";
    this.mode = opts.mode != undefined ? opts.mode : WrapMode.Loop;

    this.rate = opts.rate != undefined ? opts.rate : 1 / 24;

    this._time = 0;
    this._frame = 0;
    this._lastFrame = 0;
    this._order = 1;

    this.playing = this.sheet ? true : false;
}

Component.extend(MeshAnimation);


MeshAnimation.prototype.copy = function (other) {

    this.current = other.current;
    this.mode = other.mode;

    this.rate = other.rate;

    this._time = other._time;
    this._frame = other._frame;
    this._lastFrame = other._lastFrame;
    this._order = other._order;

    this.playing = other.playing;

    return this;
};


MeshAnimation.prototype.play = function (name, mode, rate) {
    var meshFilter = this.meshFilter;
    if ((this.playing && this.current === name) || !meshFilter || !meshFilter.mesh.animations[name]) return this;

    this.current = name;
    this.rate = rate != undefined ? rate : (rate = this.rate);
    this.mode = mode || (mode = this.mode);
    this._frame = 0;
    this._lastFrame = 0;
    this._order = 1;
    this._time = 0;

    this.playing = true;
    this.emit("play", name, mode, rate);

    return this;
};


MeshAnimation.prototype.stop = function () {

    if (this.playing) this.emit("stop");
    this.playing = false;
    this._frame = 0;
    this._lastFrame = 0;
    this._order = 1;
    this._time = 0;

    return this;
};


var POSITION = new Vec3,
    LAST_POSITION = new Vec3,
    ROTATION = new Quat,
    LAST_ROTATION = new Quat,
    SCALE = new Vec3,
    LAST_SCALE = new Vec3,
    MAT4 = new Mat4;

MeshAnimation.prototype.update = function () {
    if (!this.playing) return;
    var meshFilter = this.meshFilter,
        meshBones, mesh, bonesLength, alpha = 0.0,
        boneCurrent, boneTransform, uniform, parentIndex, boneFrame, lastBoneFrame, pos, rot, scl,
        current, dt, count, length, order, frame, lastFrame, mode, frameState, lastFrameState, i;

    if (!meshFilter) return;
    meshBones = meshFilter._bones;

    mesh = meshFilter.mesh;
    if (!mesh) return;

    if (!(bonesLength = meshBones.length)) return;
    i = bonesLength;

    current = mesh.animations[this.current];
    if (!current) return;

    dt = Time.delta;
    order = this._order;
    frame = this._frame;
    lastFrame = this._lastFrame;
    mode = this.mode;

    if (!this.rate || this.rate === Infinity || this.rate < 0) {
        frame = abs(frame) % current.length;
    } else {
        this._time += dt;
        count = this._time / this.rate;
        alpha = count;

        if (count >= 1) {
            lastFrame = frame;
            alpha = 0.0;

            this._time = 0;
            length = current.length;
            frame += (order * (count | 0));

            if (mode === WrapMode.Loop) {
                frame = frame % length;
            } else if (mode === WrapMode.Once) {
                if (order > 0) {
                    if (frame >= length) {
                        frame = length - 1;
                        this.stop();
                    }
                } else {
                    if (frame < 0) {
                        frame = 0;
                        this.stop();
                    }
                }
            } else if (mode === WrapMode.PingPong) {
                if (order > 0) {
                    if (frame >= length) {
                        this._order = -1;
                        frame = length - 1;
                    }
                } else {
                    if (frame < 0) {
                        this._order = 1;
                        frame = 0;
                    }
                }
            } else if (mode === WrapMode.Clamp) {
                if (order > 0) {
                    if (frame >= length) frame = length - 1;
                } else {
                    if (frame < 0) frame = 0;
                }
            }
        }
    }

    alpha = clamp01(alpha);
    frameState = current[frame];
    lastFrameState = current[lastFrame] || frameState;

    while (i--) {
        boneCurrent = meshBones[i];

        boneTransform = boneCurrent.transform;
        uniform = boneCurrent.uniform;
        parentIndex = boneCurrent.parentIndex;
        pos = boneTransform.position;
        rot = boneTransform.rotation;
        scl = boneTransform.scale;

        boneFrame = frameState[i];
        lastBoneFrame = lastFrameState[i];

        LAST_POSITION.x = lastBoneFrame[0];
        LAST_POSITION.y = lastBoneFrame[1];
        LAST_POSITION.z = lastBoneFrame[2];

        LAST_ROTATION.x = lastBoneFrame[3];
        LAST_ROTATION.y = lastBoneFrame[4];
        LAST_ROTATION.z = lastBoneFrame[5];
        LAST_ROTATION.w = lastBoneFrame[6];

        LAST_SCALE.x = lastBoneFrame[7];
        LAST_SCALE.y = lastBoneFrame[8];
        LAST_SCALE.z = lastBoneFrame[9];

        POSITION.x = boneFrame[0];
        POSITION.y = boneFrame[1];
        POSITION.z = boneFrame[2];

        ROTATION.x = boneFrame[3];
        ROTATION.y = boneFrame[4];
        ROTATION.z = boneFrame[5];
        ROTATION.w = boneFrame[6];

        SCALE.x = boneFrame[7];
        SCALE.y = boneFrame[8];
        SCALE.z = boneFrame[9];

        pos.vlerp(LAST_POSITION, POSITION, alpha);
        rot.qlerp(LAST_ROTATION, ROTATION, alpha);
        scl.vlerp(LAST_SCALE, SCALE, alpha);
    }

    this._frame = frame;
    this._lastFrame = lastFrame;
};


MeshAnimation.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.current = this.current;
    json.mode = this.mode;

    json.rate = this.rate;

    json._time = this._time;
    json._frame = this._frame;
    json._order = this._order;

    json.playing = this.playing;

    return json;
};


MeshAnimation.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.current = json.current;
    this.mode = json.mode;

    this.rate = json.rate;

    this._time = json._time;
    this._frame = json._frame;
    this._order = json._order;

    this.playing = json.playing;

    return this;
};


module.exports = MeshAnimation;

},{"../../base/time":18,"../../math/mat4":106,"../../math/mathf":107,"../../math/quat":108,"../../math/vec3":112,"../assets/assets":22,"../enums":73,"./component":54}],60:[function(require,module,exports){
var Assets = require("../assets/assets");
var GameObject = require("../game_object");
var Component = require("./component");
var Bone = require("./bone");
"use strict";


/**
 * @class MeshFilter
 * @extends Component
 * @brief base class for handling meshes
 * @param Object options
 */
function MeshFilter(opts) {
    opts || (opts = {});

    Component.call(this, "MeshFilter", opts);

    /**
     * @property Mesh mesh
     * @memberof MeshFilter
     */
    this.mesh = opts.mesh != undefined ? opts.mesh : undefined;

    /**
     * @property Material material
     * @memberof MeshFilter
     */
    this.material = opts.material != undefined ? opts.material : undefined;


    this._bones = [];
    this._webglMeshInitted = false;
}

Component.extend(MeshFilter);


MeshFilter.prototype.copy = function (other) {

    this.mesh = other.mesh;
    this.material = other.material;

    this._bones.length = 0;
    this._webglMeshInitted = false;

    return this;
};


MeshFilter.prototype.init = function () {
    var transform = this.transform,
        bones = this._bones,
        meshBones = this.mesh.bones,
        subGameObject, meshBone, bone, parent,
        i = meshBones.length;

    if (!i) return;

    while (i--) {
        meshBone = meshBones[i];

        subGameObject = new GameObject().addComponents(
            new Bone({
                name: meshBone.name,
                parentIndex: meshBone.parentIndex,

                skinned: meshBone.skinned,
                bindPose: meshBone.bindPose
            }),
            new Transform({
                position: meshBone.position.clone(),
                rotation: meshBone.rotation.clone(),
                scale: meshBone.scale.clone()
            })
        );
        subGameObject.name = meshBone.name;
        bones[i] = subGameObject.bone;
    }

    transform.addChild(bones[0].transform);

    i = meshBones.length;
    while (i--) {
        bone = bones[i];
        parent = bones[bone.parentIndex];
        if (!parent) continue;

        parent.transform.addChild(bone.transform);
    }
};


MeshFilter.prototype.clear = function () {
    Component.prototype.clear.call(this);

    this.mesh = undefined;
    this.material = undefined;

    this._bones.length = 0;
    this._webglMeshInitted = false;

    return this;
};


MeshFilter.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.mesh = this.mesh ? this.mesh.name : undefined;
    json.material = this.material ? this.material.name : undefined;

    return json;
};


MeshFilter.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.mesh = json.mesh ? Assets.get(json.mesh) : undefined;
    this.material = json.material ? Assets.get(json.material) : undefined;

    this._bones.length = 0;
    this._webglMeshInitted = false;

    return this;
};


module.exports = MeshFilter;

},{"../assets/assets":22,"../game_object":77,"./bone":51,"./component":54}],61:[function(require,module,exports){
var Device = require("../../base/device");
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var Vec3 = require("../../math/vec3");
var Input = require("../input/input");
var Component = require("./component");
"use strict";


var pow = Math.pow,
    sqrt = Math.sqrt,
    sin = Math.sin,
    cos = Math.cos,
    tan = Math.tan,
    atan2 = Math.atan2,
    min = Math.min,
    max = Math.max,
    PI = Math.PI,
    MIN_POLOR = 0,
    MAX_POLOR = PI,

    degsToRads = Mathf.degsToRads,
    EPSILON = Mathf.EPSILON,

    NONE = 1,
    ROTATE = 2,
    PAN = 3;


function OrbitControl(opts) {
    opts || (opts = {});

    Component.call(this, "OrbitControl", opts);

    this.speed = opts.speed > EPSILON ? opts.speed : 1;
    this.zoomSpeed = opts.zoomSpeed > EPSILON ? opts.zoomSpeed : 2;

    this.allowZoom = opts.allowZoom != undefined ? !!opts.allowZoom : true;
    this.allowPan = opts.allowPan != undefined ? !!opts.allowPan : true;
    this.allowRotate = opts.allowRotate != undefined ? !!opts.allowRotate : true;

    this.target = opts.target || new Vec3;

    this._offset = new Vec3;
    this._pan = new Vec3;
    this._scale = 1;
    this._thetaDelta = 0;
    this._phiDelta = 0;
    this._state = NONE;
}

Component.extend(OrbitControl);


OrbitControl.prototype.copy = function () {

    return this;
};


OrbitControl.prototype.start = function () {

    if (Device.mobile) {
        Input.on("touchstart", this.onTouchStart, this);
        Input.on("touchend", this.onTouchEnd, this);
        Input.on("touchmove", this.onTouchMove, this);
    } else {
        Input.on("mouseup", this.onMouseUp, this);
        Input.on("mousedown", this.onMouseDown, this);
        Input.on("mousemove", this.onMouseMove, this);
        Input.on("mousewheel", this.onMouseWheel, this);
    }

    this.updateOrbit();

    return this;
};


OrbitControl.prototype.clear = function () {
    Component.prototype.clear.call(this);

    if (Device.mobile) {
        Input.on("touchstart", this.onTouchStart, this);
        Input.on("touchend", this.onTouchEnd, this);
        Input.on("touchmove", this.onTouchMove, this);
    } else {
        Input.off("mouseup", this.onMouseUp, this);
        Input.off("mousedown", this.onMouseDown, this);
        Input.off("mousemove", this.onMouseMove, this);
        Input.off("mousewheel", this.onMouseWheel, this);
    }

    return this;
};


OrbitControl.prototype.onTouchStart = function () {
    var length = Input.touches.length;

    if (length === 1) {
        this._state = ROTATE;
    } else if (length === 2 && this.allowPan) {
        this._state = PAN;
    } else {
        this._state = NONE;
    }
};


var LEFT_MOUSE = "mouse0",
    MIDDLE_MOUSE = "mouse1";
OrbitControl.prototype.onMouseDown = function (button) {

    if (button === LEFT_MOUSE && this.allowRotate) {
        this._state = ROTATE;
    } else if (button === MIDDLE_MOUSE && this.allowPan) {
        this._state = PAN;
    } else {
        this._state = NONE;
    }
};


OrbitControl.prototype.onTouchEnd = OrbitControl.prototype.onMouseUp = function () {

    this._state = NONE;
};


OrbitControl.prototype.onTouchMove = function () {
    var update = false,
        touch = Input.touches[0],
        delta = touch.delta,
        camera;

    if (this._state === ROTATE) {
        update = true;
        camera = this.camera;

        this._thetaDelta += 2 * PI * delta.x * camera.invWidth * this.speed;
        this._phiDelta -= 2 * PI * delta.y * camera.invHeight * this.speed;
    } else if (this._state === PAN) {
        update = true;

        this.pan(delta);
    }

    update && this.updateOrbit();
};


OrbitControl.prototype.onMouseMove = function () {
    var update = false,
        mouseDelta = Input.mouseDelta,
        camera;

    if (this._state === ROTATE) {
        update = true;
        camera = this.camera;

        this._thetaDelta += 2 * PI * mouseDelta.x * camera.invWidth * this.speed;
        this._phiDelta -= 2 * PI * mouseDelta.y * camera.invHeight * this.speed;
    } else if (this._state === PAN) {
        update = true;

        this.pan(mouseDelta);
    }

    update && this.updateOrbit();
};


OrbitControl.prototype.onMouseWheel = function (mouseWheel) {
    if (!this.allowZoom) return;
    var update = false;

    if (mouseWheel > 0) {
        update = true;
        this._scale *= pow(0.95, this.zoomSpeed);
    } else {
        update = true;
        this._scale /= pow(0.95, this.zoomSpeed);
    }

    update && this.updateOrbit();
};


OrbitControl.prototype.clear = function () {
    Component.prototype.clear.call(this);

    return this;
};


var panOffset = new Vec3;
OrbitControl.prototype.pan = function (delta) {
    var pan = this._pan,
        camera = this.camera,
        transform = this.transform,
        te = transform.matrixWorld.elements,
        position = transform.position,
        targetDistance;

    panOffset.vsub(position, this.target);
    targetDistance = panOffset.length();

    if (!camera.orthographic) {
        targetDistance *= tan(degsToRads(camera.fov * 0.5));

        panOffset.set(te[0], te[1], te[2]).smul(-2 * delta.x * targetDistance * camera.invWidth);
        pan.add(panOffset);

        panOffset.set(te[4], te[5], te[6]).smul(2 * delta.y * targetDistance * camera.invHeight);
        pan.add(panOffset);
    } else {
        targetDistance *= camera.orthographicSize * 0.5;

        panOffset.set(te[0], te[1], te[2]).smul(-2 * delta.x * targetDistance * camera.invWidth);
        pan.add(panOffset);

        panOffset.set(te[4], te[5], te[6]).smul(2 * delta.y * targetDistance * camera.invHeight);
        pan.add(panOffset);
    }
};


OrbitControl.prototype.updateOrbit = function () {
    var transform = this.transform,
        position = transform.position,
        target = this.target,
        offset = this._offset,
        pan = this._pan,
        theta, phi, radius;

    offset.vsub(position, target);
    theta = atan2(offset.x, offset.y);
    phi = atan2(sqrt(offset.x * offset.x + offset.y * offset.y), offset.z);

    theta += this._thetaDelta;
    phi += this._phiDelta;

    phi = max(MIN_POLOR, min(MAX_POLOR, phi));
    phi = max(EPSILON, min(PI - EPSILON, phi));

    radius = offset.length() * this._scale;

    target.add(pan);

    offset.x = radius * sin(phi) * sin(theta);
    offset.y = radius * sin(phi) * cos(theta);
    offset.z = radius * cos(phi);

    position.vadd(target, offset);
    transform.lookAt(target);

    this._scale = 1;
    this._thetaDelta = 0;
    this._phiDelta = 0;
    pan.set(0, 0, 0);
};


OrbitControl.prototype.setTarget = function (target) {

    this.target.copy(target);
    this.transform.lookAt(this.target);
};


module.exports = OrbitControl;

},{"../../base/device":10,"../../math/mathf":107,"../../math/vec2":111,"../../math/vec3":112,"../input/input":88,"./component":54}],62:[function(require,module,exports){
var ObjectPool = require("../../../base/object_pool");
var Class = require("../../../base/class");
var Mathf = require("../../../math/mathf");
var Vec3 = require("../../../math/vec3");
var Color = require("../../../math/color");
var Enums = require("../../enums");
var Assets = require("../../assets/assets");
var Tween = require("./tween");
var Particle = require("./particle");
"use strict";


var EmitterType = Enums.EmitterType,

    PI = Math.PI,
    TWO_PI = PI * 2,

    random = Math.random,
    randInt = Mathf.randInt,
    randFloat = Mathf.randFloat,
    clampTop = Mathf.clampTop,
    sqrt = Math.sqrt,

    PARTICLE_POOL = Emitter.PARTICLE_POOL = new ObjectPool(Particle);


function Emitter(opts) {
    opts || (opts = {});

    Class.call(this);

    this.sort = opts.sort != undefined ? opts.sort : true;

    this.positionType = opts.positionType != undefined ? opts.positionType : EmitterType.Box;
    this.velocityType = opts.velocityType != undefined ? opts.velocityType : EmitterType.Box;

    this.material = opts.material != undefined ? opts.material : undefined;

    this.positionSpread = opts.positionSpread != undefined ? opts.positionSpread : new Vec3(0.5, 0.5, 0.5);
    this.positionRadius = opts.positionRadius != undefined ? opts.positionRadius : 0.5;

    this.speed = opts.speed != undefined ? opts.speed : 0;
    this.speedSpread = opts.speedSpread != undefined ? opts.speedSpread : 0;

    this.particleSystem = undefined;

    this.worldSpace = opts.worldSpace != undefined ? opts.worldSpace : true;

    this.position = opts.position != undefined ? opts.position : new Vec3;

    this.minEmission = opts.minEmission != undefined ? opts.minEmission : 1;
    this.maxEmission = opts.maxEmission != undefined ? opts.maxEmission : 2;

    this.minLife = opts.minLife != undefined ? opts.minLife : 1;
    this.maxLife = opts.maxLife != undefined ? opts.maxLife : 2;

    this.minSize = opts.minSize != undefined ? opts.minSize : 0.1;
    this.maxSize = opts.maxSize != undefined ? opts.maxSize : 0.5;

    this.sizeTween = new Tween(opts.sizeTween);
    this.alphaTween = new Tween(opts.alphaTween);
    this.colorTween = new Tween(opts.colorTween);

    this.velocity = opts.velocity != undefined ? opts.velocity : new Vec3;
    this.velocitySpread = opts.velocitySpread != undefined ? opts.velocitySpread : new Vec3;

    this.acceleration = opts.acceleration != undefined ? opts.acceleration : new Vec3;
    this.accelerationSpread = opts.accelerationSpread != undefined ? opts.accelerationSpread : new Vec3;

    this.angularVelocity = opts.angularVelocity != undefined ? opts.angularVelocity : 0;
    this.angularVelocitySpread = opts.angularVelocitySpread != undefined ? opts.angularVelocitySpread : 0;

    this.angularAcceleration = opts.angularAcceleration != undefined ? opts.angularAcceleration : 0;
    this.angularAccelerationSpread = opts.angularAccelerationSpread != undefined ? opts.angularAccelerationSpread : 0;

    this.randomAngle = opts.randomAngle != undefined ? opts.randomAngle : true;

    this.emissionRate = opts.emissionRate != undefined ? opts.emissionRate : 1 / 60;

    this.color = opts.color != undefined ? opts.color : new Color;
    this.colorSpread = opts.colorSpread != undefined ? opts.colorSpread : new Color;

    this.time = opts.time != undefined ? opts.time : 0;
    this._time = 0;

    this.duration = opts.duration != undefined ? opts.duration : 0;

    this.loop = opts.loop != undefined ? opts.loop : true;

    this.playing = opts.playing != undefined ? opts.playing : true;
    this.emitting = opts.emitting != undefined ? opts.emitting : true;

    this.particles = [];

    this._webglInitted = undefined;

    this._webglVertexBuffer = undefined;
    this._webglParticleBuffer = undefined;
    this._webglParticleColorBuffer = undefined;

    this._webglVertexArray = undefined;
    this._webglParticleArray = undefined;
    this._webglParticleColorArray = undefined;
}

Class.extend(Emitter);


Emitter.prototype.copy = function (other) {

    this.sort = other.sort;

    this.positionType = other.positionType;
    this.velocityType = other.velocityType;

    this.material = other.material;

    this.position.copy(other.position);
    this.positionSpread.copy(other.positionSpread);
    this.positionRadius = other.positionRadius;

    this.speed = other.speed;
    this.speedSpread = other.speedSpread;

    this.worldSpace = other.worldSpace;

    this.minEmission = other.minEmission;
    this.maxEmission = other.maxEmission;

    this.minLife = other.minLife;
    this.maxLife = other.maxLife;

    this.minSize = other.minSize;
    this.maxSize = other.maxSize;

    this.sizeTween.copy(other.sizeTween);
    this.alphaTween.copy(other.alphaTween);
    this.colorTween.copy(other.colorTween);

    this.velocity.copy(other.velocity);
    this.velocitySpread.copy(other.velocitySpread);

    this.acceleration.copy(other.acceleration);
    this.accelerationSpread.copy(other.accelerationSpread);

    this.angularVelocity = other.angularVelocity;
    this.angularVelocitySpread = other.angularVelocitySpread;

    this.angularAcceleration = other.angularAcceleration;
    this.angularAccelerationSpread = other.angularAccelerationSpread;

    this.randomAngle = other.randomAngle;

    this.emissionRate = other.emissionRate;

    this.color.copy(other.color);
    this.colorSpread.copy(other.colorSpread);

    this.time = other.time;
    this._time = other._time;

    this.duration = other.duration;
    this.loop = other.loop;
    this.playing = other.playing;
    this.emitting = other.emitting;

    return this;
};


Emitter.prototype.play = function () {

    this.time = 0;
    this.playing = true;
    this.emitting = true;

    return this;
};


Emitter.prototype.clear = function () {
    var particles = this.particles,
        i = particles.length;

    this.time = 0;
    this._time = 0;
    this.playing = false;
    this.emitting = false;

    while (i--) PARTICLE_POOL.removeObject(particles[i]);
    particles.length = 0;

    return this;
};


var VEC = new Vec3;
Emitter.prototype.spawn = function (count) {
    var transform = this.particleSystem.transform || this.particleSystem.transform2d,
        transformPosition = transform.toWorld(VEC.set(0, 0, 0)),
        transformMatrix = transform.matrixWorld,

        position = this.position,
        positionSpread = this.positionSpread,
        positionRadius = this.positionRadius,

        speed = this.speed,
        speedSpread = this.speedSpread,

        particles = this.particles,
        numParticle2Ds = particles.length,

        worldSpace = this.worldSpace,
        randomAngle = this.randomAngle,

        color = this.color,
        colorSpread = this.colorSpread,
        useRandColor = colorSpread.lengthSq() > 0,

        velocity = this.velocity,
        velocitySpread = this.velocitySpread,

        acceleration = this.acceleration,
        accelerationSpread = this.accelerationSpread,

        angularVelocity = this.angularVelocity,
        angularVelocitySpread = this.angularVelocitySpread,

        angularAcceleration = this.angularAcceleration,
        angularAccelerationSpread = this.angularAccelerationSpread,

        minLife = this.minLife,
        maxLife = this.maxLife,

        minSize = this.minSize,
        maxSize = this.maxSize,

        positionType = this.positionType,
        velocityType = this.velocityType,

        limit = clampTop(numParticle2Ds + count, Emitter.MAX_PARTICLES) - numParticle2Ds,
        posx, posy, posz, vel, acc, pos, col, x, y, z, len, r, dx, dy, dz, spd, particle;

    if (positionType !== EmitterType.Box) {
        posx = randFloat(-positionSpread.x, positionSpread.x);
        posy = randFloat(-positionSpread.y, positionSpread.y);
        posz = randFloat(-positionSpread.z, positionSpread.z);
    }

    while (limit--) {
        particle = PARTICLE_POOL.create();
        pos = particle.position;
        vel = particle.velocity;
        acc = particle.acceleration;
        col = particle.color;

        col.r = color.r;
        col.g = color.g;
        col.b = color.b;

        if (useRandColor) {
            col.r += colorSpread.r * random();
            col.g += colorSpread.g * random();
            col.b += colorSpread.b * random();
            col.cnormalize();
        }

        if (worldSpace) {
            pos.x = position.x + transformPosition.x;
            pos.y = position.y + transformPosition.y;
            pos.z = position.z + transformPosition.z;
        } else {
            pos.x = position.x;
            pos.y = position.y;
            pos.z = position.z;
        }

        if (positionType === EmitterType.Box) {
            pos.x += randFloat(-positionSpread.x, positionSpread.x);
            pos.y += randFloat(-positionSpread.y, positionSpread.y);
            pos.z += randFloat(-positionSpread.z, positionSpread.z);
        } else { //EmitterType.Sphere
            x = randFloat(-1, 1);
            y = randFloat(-1, 1);
            z = randFloat(-1, 1);

            len = x * x + y * y + z * z;
            len = len !== 0 ? 1 / sqrt(len) : len;

            pos.x += posx + x * len * positionRadius;
            pos.y += posy + y * len * positionRadius;
            pos.z += posz + z * len * positionRadius;
        }

        if (velocityType === EmitterType.Box) {
            vel.x = velocity.x + randFloat(-velocitySpread.x, velocitySpread.x);
            vel.y = velocity.y + randFloat(-velocitySpread.y, velocitySpread.y);
            vel.z = velocity.z + randFloat(-velocitySpread.z, velocitySpread.z);
        } else { //EmitterType.Sphere
            if (worldSpace) {
                dx = pos.x - (position.x + transformPosition.x);
                dy = pos.y - (position.y + transformPosition.y);
                dz = pos.z - (position.z + transformPosition.z);
            } else {
                dx = pos.x - position.x;
                dy = pos.y - position.y;
                dz = pos.z - position.z;
            }
            spd = speed + randFloat(-speedSpread, speedSpread);

            r = dx * dx + dy * dy + dz * dz;
            r = r !== 0 ? 1 / sqrt(r) : r;

            vel.x = dx * r * spd;
            vel.y = dy * r * spd;
            vel.z = dz * r * spd;
        }
        vel.transformMat4Rotation(transformMatrix);

        acc.x = acceleration.x + randFloat(-accelerationSpread.x, accelerationSpread.x);
        acc.y = acceleration.y + randFloat(-accelerationSpread.y, accelerationSpread.y);
        acc.z = acceleration.z + randFloat(-accelerationSpread.z, accelerationSpread.z);

        particle.angularVelocity = angularVelocity + randFloat(-angularVelocitySpread, angularVelocitySpread);
        particle.angularAcceleration = angularAcceleration + randFloat(-angularAccelerationSpread, angularAccelerationSpread);

        particle.alpha = 1;
        particle.angle = randomAngle ? random() * TWO_PI : 0;
        particle.lifeTime = 0;
        particle.life = randFloat(minLife, maxLife);
        particle.size = randFloat(minSize, maxSize);

        particles.push(particle);
    }
};


Emitter.prototype.update = function (dt) {
    if (!this.playing) return;
    var particles = this.particles,
        sizeTween = this.sizeTween,
        alphaTween = this.alphaTween,
        colorTween = this.colorTween,
        sizeTweenUpdate = sizeTween.times.length > 0,
        alphaTweenUpdate = alphaTween.times.length > 0,
        colorTweenUpdate = colorTween.times.length > 0,
        particle, life, count,
        i;

    this.time += dt;
    this._time += dt;
    count = this._time / this.emissionRate;

    if (this.emitting && count >= 1) {
        this._time = 0;
        this.spawn(randInt(this.minEmission, this.maxEmission) * (count | 0));

        if (!this.loop && this.time > this.duration) this.emitting = false;
    }

    i = particles.length;
    while (i--) {
        particle = particles[i];
        particle.update(dt);
        life = particle.lifeTime / particle.life;

        if (sizeTweenUpdate) particle.size = sizeTween.update(life);
        if (alphaTweenUpdate) particle.alpha = alphaTween.update(life);
        if (colorTweenUpdate) colorTween.update(life, particle.color);

        if (life > 1) {
            PARTICLE_POOL.removeObject(particle);
            particles.splice(i, 1);
        }
    }

    if (!this.emitting && particles.length === 0) this.playing = false;
};


Emitter.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.type = 1;

    json.sort = this.sort;

    json.positionType = this.positionType;
    json.velocityType = this.velocityType;

    json.material = this.material ? this.material.name : undefined;

    json.position = this.position.toJSON(json.position);
    json.positionSpread = this.positionSpread.toJSON(json.positionSpread);
    json.positionRadius = this.positionRadius;

    json.speed = this.speed;
    json.speedSpread = this.speedSpread;

    json.worldSpace = this.worldSpace;

    json.minEmission = this.minEmission;
    json.maxEmission = this.maxEmission;

    json.minLife = this.minLife;
    json.maxLife = this.maxLife;

    json.minSize = this.minSize;
    json.maxSize = this.maxSize;

    json.sizeTween = this.sizeTween.toJSON(json.sizeTween);
    json.alphaTween = this.alphaTween.toJSON(json.alphaTween);
    json.colorTween = this.colorTween.toJSON(json.colorTween);

    json.velocity = this.velocity.toJSON(json.velocity);
    json.velocitySpread = this.velocitySpread.toJSON(json.velocitySpread);

    json.acceleration = this.acceleration.toJSON(json.acceleration);
    json.accelerationSpread = this.accelerationSpread.toJSON(json.accelerationSpread);

    json.angularVelocity = this.angularVelocity;
    json.angularAcceleration = this.angularAcceleration;

    json.angularVelocitySpread = this.angularVelocitySpread;
    json.randomAngle = this.randomAngle;

    json.emissionRate = this.emissionRate;

    json.color = this.color.toJSON(json.color);
    json.colorSpread = this.colorSpread.toJSON(json.colorSpread);

    json.time = this.time;
    json._time = this._time;

    json.duration = this.duration;
    json.loop = this.loop;
    json.playing = this.playing;
    json.emitting = this.emitting;

    return json;
};


Emitter.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.sort = json.sort;

    this.positionType = json.positionType;
    this.velocityType = json.velocityType;

    this.material = json.material ? Assets.hash[json.material] : undefined;

    this.position.fromJSON(json.position);
    this.positionSpread.fromJSON(json.positionSpread);
    this.positionRadius = json.positionRadius;

    this.speed = json.speed;
    this.speedSpread = json.speedSpread;

    this.worldSpace = json.worldSpace;

    this.minEmission = json.minEmission;
    this.maxEmission = json.maxEmission;

    this.minLife = json.minLife;
    this.maxLife = json.maxLife;

    this.minSize = json.minSize;
    this.maxSize = json.maxSize;

    this.sizeTween.fromJSON(json.sizeTween);
    this.alphaTween.fromJSON(json.alphaTween);
    this.colorTween.fromJSON(json.colorTween);

    this.velocity.fromJSON(json.velocity);
    this.velocitySpread.fromJSON(json.velocitySpread);

    this.acceleration.fromJSON(json.acceleration);
    this.accelerationSpread.fromJSON(json.accelerationSpread);

    this.angularVelocity = json.angularVelocity;
    this.angularAcceleration = json.angularAcceleration;

    this.angularVelocitySpread = json.angularVelocitySpread;
    this.randomAngle = json.randomAngle;

    this.emissionRate = json.emissionRate;

    this.color.fromJSON(json.color);
    this.colorSpread.fromJSON(json.colorSpread);

    this.time = json.time;
    this._time = json._time;

    this.duration = json.duration;
    this.loop = json.loop;
    this.playing = json.playing;
    this.emitting = json.emitting;

    return this;
};


Emitter.MAX_PARTICLES = 1024;


module.exports = Emitter;

},{"../../../base/class":8,"../../../base/object_pool":15,"../../../math/color":102,"../../../math/mathf":107,"../../../math/vec3":112,"../../assets/assets":22,"../../enums":73,"./particle":64,"./tween":67}],63:[function(require,module,exports){
var ObjectPool = require("../../../base/object_pool");
var Class = require("../../../base/class");
var Mathf = require("../../../math/mathf");
var Vec2 = require("../../../math/vec2");
var Color = require("../../../math/color");
var Enums = require("../../enums");
var Assets = require("../../assets/assets");
var Tween = require("./tween");
var Particle2D = require("./particle_2d");
"use strict";


var EmitterType = Enums.EmitterType,

    PI = Math.PI,
    TWO_PI = PI * 2,

    random = Math.random,
    randInt = Mathf.randInt,
    randFloat = Mathf.randFloat,
    clampTop = Mathf.clampTop,
    cos = Math.cos,
    sin = Math.sin,
    sqrt = Math.sqrt,

    PARTICLE_POOL = Emitter2D.PARTICLE_POOL = new ObjectPool(Particle2D);


function Emitter2D(opts) {
    opts || (opts = {});

    Class.call(this);

    this.positionType = opts.positionType != undefined ? opts.positionType : EmitterType.Box;
    this.velocityType = opts.velocityType != undefined ? opts.velocityType : EmitterType.Box;

    this.material = opts.material != undefined ? opts.material : undefined;

    this.positionSpread = opts.positionSpread != undefined ? opts.positionSpread : new Vec2(0.5, 0.5);
    this.positionRadius = opts.positionRadius != undefined ? opts.positionRadius : 0.5;

    this.speed = opts.speed != undefined ? opts.speed : 0;
    this.speedSpread = opts.speedSpread != undefined ? opts.speedSpread : 0;

    this.particleSystem = undefined;

    this.worldSpace = opts.worldSpace != undefined ? opts.worldSpace : true;

    this.position = opts.position != undefined ? opts.position : new Vec2;

    this.minEmission = opts.minEmission != undefined ? opts.minEmission : 1;
    this.maxEmission = opts.maxEmission != undefined ? opts.maxEmission : 2;

    this.minLife = opts.minLife != undefined ? opts.minLife : 1;
    this.maxLife = opts.maxLife != undefined ? opts.maxLife : 2;

    this.minSize = opts.minSize != undefined ? opts.minSize : 0.1;
    this.maxSize = opts.maxSize != undefined ? opts.maxSize : 0.5;

    this.sizeTween = new Tween(opts.sizeTween);
    this.alphaTween = new Tween(opts.alphaTween);
    this.colorTween = new Tween(opts.colorTween);

    this.velocity = opts.velocity != undefined ? opts.velocity : new Vec2;
    this.velocitySpread = opts.velocitySpread != undefined ? opts.velocitySpread : new Vec2;

    this.acceleration = opts.acceleration != undefined ? opts.acceleration : new Vec2;
    this.accelerationSpread = opts.accelerationSpread != undefined ? opts.accelerationSpread : new Vec2;

    this.angularVelocity = opts.angularVelocity != undefined ? opts.angularVelocity : 0;
    this.angularVelocitySpread = opts.angularVelocitySpread != undefined ? opts.angularVelocitySpread : 0;

    this.angularAcceleration = opts.angularAcceleration != undefined ? opts.angularAcceleration : 0;
    this.angularAccelerationSpread = opts.angularAccelerationSpread != undefined ? opts.angularAccelerationSpread : 0;

    this.randomAngle = opts.randomAngle != undefined ? opts.randomAngle : true;

    this.emissionRate = opts.emissionRate != undefined ? opts.emissionRate : 1 / 60;

    this.color = opts.color != undefined ? opts.color : new Color;
    this.colorSpread = opts.colorSpread != undefined ? opts.colorSpread : new Color;

    this.time = opts.time != undefined ? opts.time : 0;
    this._time = 0;

    this.duration = opts.duration != undefined ? opts.duration : 0;

    this.loop = opts.loop != undefined ? opts.loop : true;

    this.playing = opts.playing != undefined ? opts.playing : true;
    this.emitting = opts.emitting != undefined ? opts.emitting : true;

    this.particles = [];

    this._webglInitted = undefined;

    this._webglVertexBuffer = undefined;
    this._webglParticleBuffer = undefined;
    this._webglParticleColorBuffer = undefined;

    this._webglVertexArray = undefined;
    this._webglParticleArray = undefined;
    this._webglParticleColorArray = undefined;
}

Class.extend(Emitter2D);


Emitter2D.prototype.copy = function (other) {

    this.positionType = other.positionType;
    this.velocityType = other.velocityType;

    this.material = other.material;

    this.position.copy(other.position);
    this.positionSpread.copy(other.positionSpread);
    this.positionRadius = other.positionRadius;

    this.speed = other.speed;
    this.speedSpread = other.speedSpread;

    this.worldSpace = other.worldSpace;

    this.minEmission = other.minEmission;
    this.maxEmission = other.maxEmission;

    this.minLife = other.minLife;
    this.maxLife = other.maxLife;

    this.minSize = other.minSize;
    this.maxSize = other.maxSize;

    this.sizeTween.copy(other.sizeTween);
    this.alphaTween.copy(other.alphaTween);
    this.colorTween.copy(other.colorTween);

    this.velocity.copy(other.velocity);
    this.velocitySpread.copy(other.velocitySpread);

    this.acceleration.copy(other.acceleration);
    this.accelerationSpread.copy(other.accelerationSpread);

    this.angularVelocity = other.angularVelocity;
    this.angularVelocitySpread = other.angularVelocitySpread;

    this.angularAcceleration = other.angularAcceleration;
    this.angularAccelerationSpread = other.angularAccelerationSpread;

    this.randomAngle = other.randomAngle;

    this.emissionRate = other.emissionRate;

    this.color.copy(other.color);
    this.colorSpread.copy(other.colorSpread);

    this.time = other.time;
    this._time = other._time;

    this.duration = other.duration;
    this.loop = other.loop;
    this.playing = other.playing;
    this.emitting = other.emitting;

    return this;
};


Emitter2D.prototype.play = function () {

    this.time = 0;
    this.playing = true;
    this.emitting = true;

    return this;
};


Emitter2D.prototype.clear = function () {
    var particles = this.particles,
        i = particles.length;

    this.time = 0;
    this._time = 0;
    this.playing = false;
    this.emitting = false;

    while (i--) PARTICLE_POOL.removeObject(particles[i]);
    particles.length = 0;

    return this;
};


var VEC = new Vec2;
Emitter2D.prototype.spawn = function (count) {
    var transform = this.particleSystem.transform || this.particleSystem.transform2d,
        transformPosition = transform.toWorld(VEC.set(0, 0)),

        position = this.position,
        positionSpread = this.positionSpread,
        positionRadius = this.positionRadius,

        speed = this.speed,
        speedSpread = this.speedSpread,

        particles = this.particles,
        numParticle2Ds = particles.length,

        worldSpace = this.worldSpace,
        randomAngle = this.randomAngle,

        color = this.color,
        colorSpread = this.colorSpread,
        useRandColor = colorSpread.lengthSq() > 0,

        velocity = this.velocity,
        velocitySpread = this.velocitySpread,

        acceleration = this.acceleration,
        accelerationSpread = this.accelerationSpread,

        angularVelocity = this.angularVelocity,
        angularVelocitySpread = this.angularVelocitySpread,

        angularAcceleration = this.angularAcceleration,
        angularAccelerationSpread = this.angularAccelerationSpread,

        minLife = this.minLife,
        maxLife = this.maxLife,

        minSize = this.minSize,
        maxSize = this.maxSize,

        positionType = this.positionType,
        velocityType = this.velocityType,

        limit = clampTop(numParticle2Ds + count, Emitter2D.MAX_PARTICLES) - numParticle2Ds,
        posx, posy, vel, acc, pos, col, angle, u, r, dx, dy, spd, particle;

    if (positionType === EmitterType.Circle || positionType === EmitterType.CircleEdge) {
        posx = randFloat(-positionSpread.x, positionSpread.x);
        posy = randFloat(-positionSpread.y, positionSpread.y);
    }

    while (limit--) {
        particle = PARTICLE_POOL.create();
        pos = particle.position;
        vel = particle.velocity;
        acc = particle.acceleration;
        col = particle.color;

        col.r = color.r;
        col.g = color.g;
        col.b = color.b;

        if (useRandColor) {
            col.r += colorSpread.r * random();
            col.g += colorSpread.g * random();
            col.b += colorSpread.b * random();
            col.cnormalize();
        }

        if (worldSpace) {
            pos.x = position.x + transformPosition.x;
            pos.y = position.y + transformPosition.y;
        } else {
            pos.x = position.x;
            pos.y = position.y;
        }

        if (positionType === EmitterType.Box) {
            pos.x += randFloat(-positionSpread.x, positionSpread.x);
            pos.y += randFloat(-positionSpread.y, positionSpread.y);
        } else { //EmitterType.Circle
            angle = TWO_PI * random();
            u = random() + random();
            r = u > 1 ? 2 - u : u;

            pos.x += posx + r * cos(angle) * positionRadius;
            pos.y += posy + r * sin(angle) * positionRadius;
        }

        if (velocityType === EmitterType.Box) {
            vel.x = velocity.x + randFloat(-velocitySpread.x, velocitySpread.x);
            vel.y = velocity.y + randFloat(-velocitySpread.y, velocitySpread.y);
        } else { //EmitterType.Circle
            if (worldSpace) {
                dx = pos.x - (position.x + transformPosition.x);
                dy = pos.y - (position.y + transformPosition.y);
            } else {
                dx = pos.x - position.x;
                dy = pos.y - position.y;
            }
            spd = speed + randFloat(-speedSpread, speedSpread);

            r = dx * dx + dy * dy;
            r = r !== 0 ? 1 / sqrt(r) : r;

            vel.x = dx * r * spd;
            vel.y = dy * r * spd;
        }

        acc.x = acceleration.x + randFloat(-accelerationSpread.x, accelerationSpread.x);
        acc.y = acceleration.y + randFloat(-accelerationSpread.y, accelerationSpread.y);

        particle.angularVelocity = angularVelocity + randFloat(-angularVelocitySpread, angularVelocitySpread);
        particle.angularAcceleration = angularAcceleration + randFloat(-angularAccelerationSpread, angularAccelerationSpread);

        particle.alpha = 1;
        particle.angle = randomAngle ? random() * TWO_PI : 0;
        particle.lifeTime = 0;
        particle.life = randFloat(minLife, maxLife);
        particle.size = randFloat(minSize, maxSize);

        particles.push(particle);
    }
};


Emitter2D.prototype.update = function (dt) {
    if (!this.playing) return;
    var particles = this.particles,
        sizeTween = this.sizeTween,
        alphaTween = this.alphaTween,
        colorTween = this.colorTween,
        sizeTweenUpdate = sizeTween.times.length > 0,
        alphaTweenUpdate = alphaTween.times.length > 0,
        colorTweenUpdate = colorTween.times.length > 0,
        particle, life, count,
        i;

    this.time += dt;
    this._time += dt;
    count = this._time / this.emissionRate;

    if (this.emitting && count >= 1) {
        this._time = 0;
        this.spawn(randInt(this.minEmission, this.maxEmission) * (count | 0));

        if (!this.loop && this.time > this.duration) this.emitting = false;
    }

    i = particles.length;
    while (i--) {
        particle = particles[i];
        particle.update(dt);
        life = particle.lifeTime / particle.life;

        if (sizeTweenUpdate) particle.size = sizeTween.update(life);
        if (alphaTweenUpdate) particle.alpha = alphaTween.update(life);
        if (colorTweenUpdate) colorTween.update(life, particle.color);

        if (life > 1) {
            PARTICLE_POOL.removeObject(particle);
            particles.splice(i, 1);
            continue;
        }
    }

    if (!this.emitting && particles.length === 0) this.playing = false;
};


Emitter2D.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.type = 1;

    json.positionType = this.positionType;
    json.velocityType = this.velocityType;

    json.material = this.material ? this.material.name : undefined;

    json.position = this.position.toJSON(json.position);
    json.positionSpread = this.positionSpread.toJSON(json.positionSpread);
    json.positionRadius = this.positionRadius;

    json.speed = this.speed;
    json.speedSpread = this.speedSpread;

    json.worldSpace = this.worldSpace;

    json.minEmission = this.minEmission;
    json.maxEmission = this.maxEmission;

    json.minLife = this.minLife;
    json.maxLife = this.maxLife;

    json.minSize = this.minSize;
    json.maxSize = this.maxSize;

    json.sizeTween = this.sizeTween.toJSON(json.sizeTween);
    json.alphaTween = this.alphaTween.toJSON(json.alphaTween);
    json.colorTween = this.colorTween.toJSON(json.colorTween);

    json.velocity = this.velocity.toJSON(json.velocity);
    json.velocitySpread = this.velocitySpread.toJSON(json.velocitySpread);

    json.acceleration = this.acceleration.toJSON(json.acceleration);
    json.accelerationSpread = this.accelerationSpread.toJSON(json.accelerationSpread);

    json.angularVelocity = this.angularVelocity;
    json.angularAcceleration = this.angularAcceleration;

    json.angularVelocitySpread = this.angularVelocitySpread;
    json.randomAngle = this.randomAngle;

    json.emissionRate = this.emissionRate;

    json.color = this.color.toJSON(json.color);
    json.colorSpread = this.colorSpread.toJSON(json.colorSpread);

    json.time = this.time;
    json._time = this._time;

    json.duration = this.duration;
    json.loop = this.loop;
    json.playing = this.playing;
    json.emitting = this.emitting;

    return json;
};


Emitter2D.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.positionType = json.positionType;
    this.velocityType = json.velocityType;

    this.material = json.material ? Assets.get(json.material) : undefined;

    this.position.fromJSON(json.position);
    this.positionSpread.fromJSON(json.positionSpread);
    this.positionRadius = json.positionRadius;

    this.speed = json.speed;
    this.speedSpread = json.speedSpread;

    this.worldSpace = json.worldSpace;

    this.minEmission = json.minEmission;
    this.maxEmission = json.maxEmission;

    this.minLife = json.minLife;
    this.maxLife = json.maxLife;

    this.minSize = json.minSize;
    this.maxSize = json.maxSize;

    this.sizeTween.fromJSON(json.sizeTween);
    this.alphaTween.fromJSON(json.alphaTween);
    this.colorTween.fromJSON(json.colorTween);

    this.velocity.fromJSON(json.velocity);
    this.velocitySpread.fromJSON(json.velocitySpread);

    this.acceleration.fromJSON(json.acceleration);
    this.accelerationSpread.fromJSON(json.accelerationSpread);

    this.angularVelocity = json.angularVelocity;
    this.angularAcceleration = json.angularAcceleration;

    this.angularVelocitySpread = json.angularVelocitySpread;
    this.randomAngle = json.randomAngle;

    this.emissionRate = json.emissionRate;

    this.color.fromJSON(json.color);
    this.colorSpread.fromJSON(json.colorSpread);

    this.time = json.time;
    this._time = json._time;

    this.duration = json.duration;
    this.loop = json.loop;
    this.playing = json.playing;
    this.emitting = json.emitting;

    return this;
};


Emitter2D.MAX_PARTICLES = 1024;


module.exports = Emitter2D;

},{"../../../base/class":8,"../../../base/object_pool":15,"../../../math/color":102,"../../../math/mathf":107,"../../../math/vec2":111,"../../assets/assets":22,"../../enums":73,"./particle_2d":65,"./tween":67}],64:[function(require,module,exports){
var Vec3 = require("../../../math/vec3");
var Color = require("../../../math/color");
"use strict";


function Particle() {

    this.z = 1;
    this.alpha = 1;

    this.lifeTime = 0;
    this.life = 1;

    this.size = 1;

    this.color = new Color;

    this.position = new Vec3;
    this.velocity = new Vec3;
    this.acceleration = new Vec3;

    this.angle = 0;
    this.angularVelocity = 0;
    this.angularAcceleration = 0;
}


Particle.prototype.update = function (dt) {
    var pos = this.position,
        vel = this.velocity,
        acc = this.acceleration;

    pos.x += vel.x * dt;
    pos.y += vel.y * dt;
    pos.z += vel.z * dt;

    vel.x += acc.x * dt;
    vel.y += acc.y * dt;
    vel.z += acc.z * dt;

    this.angle += this.angularVelocity * dt;
    this.angularVelocity += this.angularAcceleration * dt;

    this.lifeTime += dt;
};


module.exports = Particle;

},{"../../../math/color":102,"../../../math/vec3":112}],65:[function(require,module,exports){
var Vec2 = require("../../../math/vec2");
var Color = require("../../../math/color");
"use strict";


function Particle2D() {

    this.alpha = 1;

    this.lifeTime = 0;
    this.life = 1;

    this.size = 1;

    this.color = new Color;

    this.position = new Vec2;
    this.velocity = new Vec2;
    this.acceleration = new Vec2;

    this.angle = 0;
    this.angularVelocity = 0;
    this.angularAcceleration = 0;
}


Particle2D.prototype.update = function (dt) {
    var pos = this.position,
        vel = this.velocity,
        acc = this.acceleration;

    pos.x += vel.x * dt;
    pos.y += vel.y * dt;

    vel.x += acc.x * dt;
    vel.y += acc.y * dt;

    this.angle += this.angularVelocity * dt;
    this.angularVelocity += this.angularAcceleration * dt;

    this.lifeTime += dt;
};


module.exports = Particle2D;

},{"../../../math/color":102,"../../../math/vec2":111}],66:[function(require,module,exports){
var Class = require("../../../base/class");
var Time = require("../../../base/time");
var Log = require("../../../base/log");
var Component = require("../component");
var Emitter = require("./emitter");
var Emitter2D = require("./emitter_2d");
var Tween = require("./tween");
"use strict";


/**
 * @class ParticleSystem
 * @extends Component
 * @brief 2d particle emitter
 * @param Object options
 */
function ParticleSystem(opts) {
    opts || (opts = {});

    Component.call(this, "ParticleSystem", opts);

    /**
     * @property Boolean playing
     * @memberof ParticleSystem
     */
    this.playing = opts.playing != undefined ? opts.playing : true;

    /**
     * @property Array emitters
     * @memberof ParticleSystem
     */
    this.emitters = [];
    this._emitterHash = {};
    this._emitterJSONHash = {};

    if (opts.emitter) this.addEmitter(opts.emitter);
    if (opts.emitters) this.add.apply(this, opts.emitters);
}

ParticleSystem.type = "ParticleSystem";
Component.extend(ParticleSystem);


ParticleSystem.Emitter = Emitter;
ParticleSystem.Emitter2D = Emitter2D;
ParticleSystem.Tween = Tween;


ParticleSystem.prototype.copy = function (other) {
    var emitters = this.emitters,
        otherEmitters = other.emitters,
        i = otherEmitters.length,
        j = emitters.length,
        emitter, otherEmitter;

    while (i-- > j) this.removeEmitter(emitters[i]);

    i = otherEmitters.length;
    while (i--) {
        otherEmitter = otherEmitters[i];

        if ((emitter = emitters[i])) {
            if ((emitter._className === otherEmitter._className)) {
                otherEmitters[i].copy(other);
            } else {
                this.removeEmitter(emitter);
                this.addEmitter(otherEmitter.clone());
            }
        } else {
            this.addEmitter(otherEmitter.clone());
        }
    }
    this.playing = other.playing;

    return this;
};


ParticleSystem.prototype.clear = function () {
    Component.prototype.clear.call(this);
    var emitters = this.emitters,
        i = emitters.length;
    ;

    while (i--) emitters[i].clear();
    return this;
};


ParticleSystem.prototype.addEmitter = function (emitter) {
    var emitters = this.emitters,
        index = emitters.indexOf(emitter);

    if (index === -1) {
        if (emitter.particleSystem) emitter = emitter.clone();

        emitter.particleSystem = this;
        emitters.push(emitter);
        this._emitterHash[emitter._id] = emitter;
        if (emitter._jsonId !== -1) this._emitterHash[emitter._jsonId] = emitter;
    } else {
        Log.error("ParticleSystem.addEmitter: ParticleSystem already has passed Emitter");
    }

    return this;
};


ParticleSystem.prototype.add = function () {
    var i = arguments.length;

    while (i--) this.addEmitter(arguments[i]);
    return this;
};


ParticleSystem.prototype.removeEmitter = function (emitter) {
    var emitters = this.emitters,
        index = emitters.indexOf(emitter);

    if (index !== -1) {
        emitters.splice(index, 1);
        this._emitterHash[emitter._id] = undefined;
        if (emitter._jsonId !== -1) this._emitterHash[emitter._jsonId] = undefined;

        emitter.clear();
        emitter.particleSystem = undefined;
        emitter.transform = undefined;
    } else {
        Log.error("ParticleSystem.removeEmitter: ParticleSystem does not have passed Emitter");
    }

    return this;
};


ParticleSystem.prototype.remove = function () {
    var i = arguments.length;

    while (i--) this.removeEmitter(arguments[i]);
    return this;
};


ParticleSystem.prototype.findEmitterById = function (id) {

    return this._emitterHash[id];
};


ParticleSystem.prototype.findEmitterByJSONId = function (id) {

    return this._emitterJSONHash[id];
};


/**
 * @method play
 * @memberof ParticleSystem
 */
ParticleSystem.prototype.play = function () {
    var emitters = this.emitters,
        i = emitters.length;

    while (i--) emitters[i].play();
    this.playing = true;

    return this;
};


ParticleSystem.prototype.update = function () {
    if (!this.playing) return;

    var dt = Time.delta,
        emitters = this.emitters,
        emitter, playing = false,
        i = emitters.length;

    while (i--) {
        emitter = emitters[i];
        emitter.update(dt);
        if (emitter.playing) playing = true;
    }

    this.playing = playing;
};


ParticleSystem.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);
    var emitters = this.emitters,
        jsonEmitters = json.emitters || (json.emitters = []),
        i = emitters.length;

    while (i--) {
        jsonEmitters[i] = emitters[i].toJSON(jsonEmitters[i]);
    }
    json.playing = this.playing;

    return json;
};


ParticleSystem.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);
    var jsonEmitters = json.emitters,
        emitter, jsonEmitter,
        i = jsonEmitters.length;

    while (i--) {
        jsonEmitter = jsonEmitters[i];

        if ((emitter = this.findEmitterByJSONId(jsonEmitter._id))) {
            emitter.fromJSON(jsonEmitter);
        } else {
            this.addEmitter(Class.fromJSON(jsonEmitter));
        }
    }
    this.playing = json.playing;

    return this;
};


module.exports = ParticleSystem;

},{"../../../base/class":8,"../../../base/log":14,"../../../base/time":18,"../component":54,"./emitter":62,"./emitter_2d":63,"./tween":67}],67:[function(require,module,exports){
var Class = require("../../../base/class");
var Mathf = require("../../../math/mathf");
"use strict";


function Tween(opts) {
    opts || (opts = {});

    this.times = opts.times || [];
    this.values = opts.values || [];
}


Tween.prototype.copy = function (other) {

    this.times = other.times.slice();
    this.values = other.values.slice();

    return this;
};


Tween.prototype.clear = function () {

    this.times.length = 0;
    this.values.length = 0;

    return this;
};


Tween.prototype.update = function (time, out) {
    var times = this.times,
        values = this.values,
        n = times.length,
        i = 0,
        t;

    while (i < n && time > times[i]) i++;

    if (i === 0) return values[0];
    if (i === n) return values[n - 1];

    t = (time - times[i - 1]) / (times[i] - times[i - 1]);

    if (out) return out.copy(values[i - 1]).lerp(values[i], t);
    return values[i - 1] + t * (values[i] - values[i - 1]);
};


Tween.prototype.toJSON = function (json) {
    json || (json = {});
    var times = this.times,
        values = this.values,
        jsonTimes = json.times || (json.times = []),
        jsonValues = json.values || (json.values = []),
        i;

    i = times.length;
    while (i--) jsonTimes[i] = times[i];

    i = values.length;
    while (i--) jsonValues[i] = values[i].toJSON ? values[i].toJSON(jsonValues[i]) : values[i];

    return json;
};


Tween.prototype.fromJSON = function (json) {
    var times = this.times,
        values = this.values,
        jsonTimes = json.times,
        jsonValues = json.values,
        i;

    i = jsonTimes.length;
    while (i--) times[i] = fromJSON(jsonTimes[i]);

    i = jsonValues.length;
    while (i--) values[i] = fromJSON(jsonValues[i]);

    return this;
};


function fromJSON(json) {
    var classes = Class._classes,
        mathClasses = Mathf._classes;

    if (typeof(json) !== "object") {
        return json;
    } else if (mathClasses[json._className]) {
        return Mathf.fromJSON(json);
    } else if (classes[json._className]) {
        return Class.fromJSON(json);
    } else {
        return json;
    }

    return null;
}


module.exports = Tween;

},{"../../../base/class":8,"../../../math/mathf":107}],68:[function(require,module,exports){
var Class = require("../../base/class");
var Vec2 = require("../../math/vec2");
var Vec3 = require("../../math/vec3");
var Component = require("./component");
var Phys2D = require("../../phys2d/phys2d");
"use strict";


function RigidBody2D(opts) {
    opts || (opts = {});

    Component.call(this, "RigidBody2D", opts);

    this.body = new Phys2D.P2Rigidbody(opts);
}

Class.extend(RigidBody2D, Component);


RigidBody2D.prototype.copy = function (other) {

    this.body.off("collide", onCollide, this);
    this.body.off("colliding", onColliding, this);
    this.body = other.body.clone();
    this.body.on("collide", onCollide, this);
    this.body.on("colliding", onColliding, this);

    return this;
};


RigidBody2D.prototype.clear = function () {
    Component.prototype.clear.call(this);

    this.body.off("collide", onCollide, this);
    this.body.off("colliding", onColliding, this);
    this.body.userData = undefined;
};


RigidBody2D.prototype.start = function () {
    var body = this.body,
        gameObject = this.gameObject,
        transform = gameObject.transform,
        transform2d = gameObject.transform2d;

    if (transform) {
        body.position.copy(transform.position);
        body.rotation = transform.rotation.rotationZ();
    } else {
        body.position.copy(transform2d.position);
        body.rotation = transform2d.rotation;
    }

    body.init();
    body.userData = this;
    body.on("collide", onCollide, this);
    body.on("colliding", onColliding, this);
};


var zAxis = new Vec3(0.0, 0.0, 1.0);
RigidBody2D.prototype.update = function () {
    var body = this.body,
        gameObject = this.gameObject,
        transform = gameObject.transform,
        transform2d = gameObject.transform2d;

    if (transform) {
        transform.position.copy(body.position);
        transform.rotation.fromAxisAngle(zAxis, body.rotation);
    } else {
        transform2d.position.copy(body.position);
        transform2d.rotation = body.rotation;
    }
};


RigidBody2D.prototype.applyForce = function (force, worldPoint) {

    this.body.applyForce(force, worldPoint);
};


RigidBody2D.prototype.applyTorque = function (torque) {

    this.body.applyTorque(torque);
};


RigidBody2D.prototype.applyImpulse = function (impulse, worldPoint) {

    this.body.applyImpulse(impulse, worldPoint);
};


RigidBody2D.prototype.applyVelocity = function (velocity) {

    this.body.applyVelocity(velocity);
};


RigidBody2D.prototype.applyAngularVelocity = function (angularVelocity) {

    this.body.applyAngularVelocity(angularVelocity);
};


RigidBody2D.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.body = this.body.toJSON(json.body);

    return json;
};


RigidBody2D.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.body.fromJSON(json.body);

    return this;
};


function onCollide(body, si, sj) {
    if (!body.userData) return;

    this.emit("collide", body.userData, body, si, sj);
};


function onColliding(body, si, sj) {
    if (!body.userData) return;

    this.emit("colliding", body.userData, body, si, sj);
};


module.exports = RigidBody2D;

},{"../../base/class":8,"../../math/vec2":111,"../../math/vec3":112,"../../phys2d/phys2d":131,"./component":54}],69:[function(require,module,exports){
var Enums = require("../enums");
var Component = require("./component");
var Assets = require("../assets/assets");
"use strict";


function Sprite(opts) {
    opts || (opts = {});

    Component.call(this, "Sprite", opts);

    this.visible = opts.visible != undefined ? !!opts.visible : true;
    this.blending = opts.blending != undefined ? opts.blending : Enums.Blending.Default;

    this.layer = opts.layer != undefined ? opts.layer : 0;
    this.z = opts.z != undefined ? opts.z : 0;

    this.alpha = opts.alpha != undefined ? opts.alpha : 1;

    this.material = opts.material != undefined ? opts.material : undefined;

    this.width = opts.width || 1;
    this.height = opts.height || 1;

    this.x = opts.x || 0;
    this.y = opts.y || 0;
    this.w = opts.w || 1;
    this.h = opts.h || 1;

    this._webglInitted = false;
}

Component.extend(Sprite);


Sprite.prototype.copy = function (other) {

    this.visible = other.visible;
    this.blending = other.blending;

    this.layer = other.layer;
    this.z = other.z;

    this.alpha = other.alpha;

    this.material = other.material;

    this.width = other.width;
    this.height = other.height;

    this.x = other.x;
    this.y = other.y;
    this.w = other.w;
    this.h = other.h;

    this._webglInitted = false;

    return this;
};


Sprite.prototype.clear = function () {
    Component.prototype.clear.call(this);

    this.material = undefined;
    this._webglInitted = false;

    return this;
};


Sprite.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.visible = this.visible;
    json.blending = this.blending;

    json.layer = this.layer;
    json.z = this.z;

    json.alpha = this.alpha;

    json.material = this.material ? this.material.name : undefined;

    json.width = this.width;
    json.height = this.height;

    json.x = this.x;
    json.y = this.y;
    json.w = this.w;
    json.h = this.h;

    return json;
};


Sprite.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.visible = json.visible;
    this.blending = json.blending;

    this.layer = json.layer;
    this.z = json.z;

    this.alpha = json.alpha;

    this.material = json.material ? Assets.get(json.material) : undefined;

    this.width = json.width;
    this.height = json.height;

    this.x = json.x;
    this.y = json.y;
    this.w = json.w;
    this.h = json.h;

    this._webglInitted = false;

    return this;
};


module.exports = Sprite;

},{"../assets/assets":22,"../enums":73,"./component":54}],70:[function(require,module,exports){
var Time = require("../../base/time");
var Assets = require("../assets/assets");
var Component = require("./component");
var Enums = require("../enums");
"use strict";


var abs = Math.abs,
    WrapMode = Enums.WrapMode;


/**
 * @class SpriteAnimation
 * @extends Component
 * @brief base class for handling sprite animation sheets
 * @param Object options
 */
function SpriteAnimation(opts) {
    opts || (opts = {});

    Component.call(this, "SpriteAnimation", opts);

    this.sheet = opts.sheet != undefined ? opts.sheet : undefined;

    this.current = opts.current != undefined ? opts.current : "idle";
    this.mode = opts.mode != undefined ? opts.mode : WrapMode.Loop;

    this.rate = opts.rate != undefined ? opts.rate : 1 / 24;

    this._time = 0;
    this._frame = 0;
    this._order = 1;

    this.playing = this.sheet ? true : false;
}

Component.extend(SpriteAnimation);


SpriteAnimation.prototype.copy = function (other) {

    this.sheet = other.sheet;

    this.current = other.current;
    this.mode = other.mode;

    this.rate = other.rate;

    this._time = other._time;
    this._frame = other._frame;
    this._order = other._order;

    this.playing = other.playing;

    return this;
};


SpriteAnimation.prototype.clear = function () {
    Component.prototype.clear.call(this);

    this.sheet = undefined;

    return this;
};


SpriteAnimation.prototype.play = function (name, mode, rate) {
    if (!this.sheet) return this;
    if ((this.playing && this.current === name) || !this.sheet[name]) return this;

    this.current = name;
    this.rate = rate != undefined ? rate : (rate = this.rate);
    this.mode = mode || (mode = this.mode);
    this._frame = 0;
    this._order = 1;
    this._time = 0;

    this.playing = true;
    this.emit("play", name, mode, rate);

    return this;
};


SpriteAnimation.prototype.stop = function () {

    if (this.playing) this.emit("stop");
    this.playing = false;
    this._frame = 0;
    this._order = 1;
    this._time = 0;

    return this;
};


SpriteAnimation.prototype.update = function () {
    if (!this.playing) return;
    var sprite = this.sprite,
        sheet = this.sheet,
        current = sheet[this.current],
        rate, dt, count, length, order, frame, mode, animation;

    if (!sprite || !sheet || !current) return;

    rate = this.rate;
    dt = Time.delta;
    order = this._order;
    frame = this._frame;
    mode = this.mode;

    if (!rate || rate === Infinity || rate < 0) {
        frame = abs(frame) % current.length;
    } else {
        this._time += dt;
        count = this._time / rate;

        if (count >= 1) {
            this._time = 0;
            length = current.length;
            frame += (order * (count | 0));

            if (mode === WrapMode.Loop) {
                frame = frame % length;
            } else if (mode === WrapMode.Once) {
                if (order > 0) {
                    if (frame >= length) {
                        frame = length - 1;
                        this.stop();
                    }
                } else {
                    if (frame < 0) {
                        frame = 0;
                        this.stop();
                    }
                }
            } else if (mode === WrapMode.PingPong) {
                if (order > 0) {
                    if (frame >= length) {
                        this._order = -1;
                        frame = length - 1;
                    }
                } else {
                    if (frame < 0) {
                        this._order = 1;
                        frame = 0;
                    }
                }
            } else if (mode === WrapMode.Clamp) {
                if (order > 0) {
                    if (frame >= length) frame = length - 1;
                } else {
                    if (frame < 0) frame = 0;
                }
            }
        }
    }

    animation = current[frame];
    sprite.x = animation[0];
    sprite.y = animation[1];
    sprite.w = animation[2];
    sprite.h = animation[3];

    this._frame = frame;
};


SpriteAnimation.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);

    json.sheet = this.sheet ? this.sheet.name : undefined;

    json.current = this.current;
    json.mode = this.mode;

    json.rate = this.rate;

    json._time = this._time;
    json._frame = this._frame;
    json._order = this._order;

    json.playing = this.playing;

    return json;
};


SpriteAnimation.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);

    this.sheet = json.sheet ? Assets.get(json.sheet) : undefined;

    this.current = json.current;
    this.mode = json.mode;

    this.rate = json.rate;

    this._time = json._time;
    this._frame = json._frame;
    this._order = json._order;

    this.playing = json.playing;

    return this;
};


module.exports = SpriteAnimation;

},{"../../base/time":18,"../assets/assets":22,"../enums":73,"./component":54}],71:[function(require,module,exports){
var Mathf = require("../../math/mathf");
var Vec3 = require("../../math/vec3");
var Quat = require("../../math/quat");
var Mat3 = require("../../math/mat3");
var Mat4 = require("../../math/mat4");
var Component = require("./component");
var Log = require("../../base/log");
"use strict";


var EPSILON = Mathf.EPSILON;


function Transform(opts) {
    opts || (opts = {});
    opts.sync = opts.sync != undefined ? opts.sync : true;

    Component.call(this, "Transform", opts);

    this.root = this;
    this.depth = 0;

    this.parent = undefined;
    this.children = [];

    this.position = opts.position != undefined ? opts.position : new Vec3;
    this.rotation = opts.rotation != undefined ? opts.rotation : new Quat;
    this.scale = opts.scale != undefined ? opts.scale : new Vec3(1, 1, 1);

    this.matrix = new Mat4;
    this.matrixWorld = new Mat4;

    this.modelView = new Mat4;
    this.normalMatrix = new Mat3;
}

Component.extend(Transform);


Transform.prototype.copy = function (other) {
    var children = other.children,
        i = children.length;

    this.position.copy(other.position);
    this.scale.copy(other.scale);
    this.rotation.copy(other.rotation);

    while (i--) this.addChild(children[i].gameObject.clone().transform);
    if (other.parent) other.parent.addChild(this);

    return this;
};

Transform.prototype.clear = function () {
    Component.prototype.clear.call(this);
    var children = this.children,
        i = children.length;

    while (i--) this.removeChild(children[i]);

    this.position.set(0, 0, 0);
    this.scale.set(1, 1, 1);
    this.rotation.set(0, 0, 0, 1);

    this.root = this;
    this.depth = 0;

    return this;
};


Transform.prototype.translate = function () {
    var vec = new Vec3;

    return function (translation, relativeTo) {
        vec.copy(translation);

        if (relativeTo instanceof Transform) {
            vec.transformQuat(relativeTo.rotation);
        } else if (relativeTo instanceof Quat) {
            vec.transformQuat(relativeTo);
        }

        this.position.add(vec);

        return this;
    };
}();


Transform.prototype.rotate = function () {
    var vec = new Vec3;

    return function (rotation, relativeTo) {
        vec.copy(rotation);

        if (relativeTo instanceof Transform) {
            vec.transformQuat(relativeTo.rotation);
        } else if (relativeTo instanceof Quat) {
            vec.transformQuat(relativeTo);
        }

        this.rotation.rotate(vec.x, vec.y, vec.z);

        return this;
    };
}();


Transform.prototype.lookAt = function () {
    var mat = new Mat4,
        vec = new Vec3,
        dup = new Vec3(0.0, 0.0, 1.0);

    return function (target, up) {
        up = up || dup;

        if (target instanceof Transform) {
            vec.set(0.0, 0.0, 0.0).transformMat4(target.matrixWorld);
        } else {
            vec.copy(target);
        }

        mat.lookAt(this.position, vec, up);
        this.rotation.fromMat4(mat);

        return this;
    };
}();


Transform.prototype.follow = function () {
    var target = new Vec3,
        position = new Vec3,
        delta = new Vec3;

    return function (transform, speed) {
        position.set(0.0, 0.0, 0.0).transformMat4(this.matrixWorld);
        target.set(0.0, 0.0, 0.0).transformMat4(transform.matrixWorld);

        delta.vsub(target, position);

        if (delta.lengthSq() > EPSILON) this.position.add(delta.smul(speed));

        return this;
    };
}();


Transform.prototype.addChild = function (child, others) {
    if (!(child instanceof Transform)) {
        Log.error("Transform.add: can\'t add passed argument, it is not an instance of Transform");
        return this;
    }
    var children = this.children,
        index = children.indexOf(child),
        root, depth, scene;

    if (index === -1) {
        if (child.parent) child.parent.removeChild(child);

        child.parent = this;
        children.push(child);

        root = this;
        depth = 0;

        while (root.parent) {
            root = root.parent;
            depth++;
        }
        child.root = root;
        this.root = root;

        updateDepth(this, depth);
        if (!others) {
            if (this.gameObject && (scene = this.gameObject.scene)) {
                scene.componentManagers.Transform.sort();
            }
        }
    } else {
        Log.error("Transform.add: child is not a member of this Transform");
    }

    return this;
};


Transform.prototype.addChildren = function () {
    var i, il, scene;

    for (i = 0, il = arguments.length; i < il; i++) this.addChild(arguments[i], true);
    if (this.gameObject && (scene = this.gameObject.scene)) {
        scene.componentManagers.Transform.sort();
    }
    return this;
};


Transform.prototype.removeChild = function (child, others) {
    var children = this.children,
        index = children.indexOf(child),
        root, depth, scene;

    if (index !== -1) {
        child.parent = undefined;
        children.splice(index, 1);

        root = this;
        depth = 0;

        while (root.parent) {
            root = root.parent;
            depth++;
        }
        child.root = child;
        this.root = root;

        updateDepth(this, depth);
        if (!others) {
            if (this.gameObject && (scene = this.gameObject.scene)) {
                scene.componentManagers.Transform.sort();
            }
        }
    } else {
        Log.error("Transform.remove: child is not a member of this Transform");
    }

    return this;
};


Transform.prototype.removeChildren = function () {
    var i, il, scene;

    for (i = 0, il = arguments.length; i < il; i++) this.removeChild(arguments[i], true);
    if (this.gameObject && (scene = this.gameObject.scene)) {
        scene.componentManagers.Transform.sort();
    }
    return this;
};


Transform.prototype.detachChildren = function () {
    var children = this.children,
        i = children.length;

    while (i--) this.removeChild(children[i]);
    return this;
};


Transform.prototype.hasChild = function (child) {

    return !!~this.children.indexOf(child);
};


Transform.prototype.find = function (name) {
    var children = this.children,
        child,
        i = children.length;

    while (i--) {
        child = children[i];

        if (child.gameObject.name === name) return child.gameObject;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


Transform.prototype.toWorld = function (v) {

    return v.transformMat4(this.matrixWorld);
};


Transform.prototype.toLocal = function () {
    var mat = new Mat4;

    return function (v) {

        return v.transformMat4(mat.inverseMat(this.matrixWorld));
    };
}();


Transform.prototype.update = function () {
    var matrix = this.matrix,
        parent = this.parent;

    matrix.compose(this.position, this.scale, this.rotation);

    if (parent) {
        this.matrixWorld.mmul(parent.matrixWorld, matrix);
    } else {
        this.matrixWorld.copy(matrix);
    }
};


Transform.prototype.updateMatrices = function (viewMatrix) {

    this.modelView.mmul(viewMatrix, this.matrixWorld);
    this.normalMatrix.inverseMat4(this.modelView).transpose();
};


Transform.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);
    var children = this.children,
        jsonChildren = json.children || (json.children = []),
        i = children.length;

    while (i--) jsonChildren[i] = children[i]._id;

    json.position = this.position.toJSON(json.position);
    json.scale = this.scale.toJSON(json.scale);
    json.rotation = this.rotation.toJSON(json.rotation);

    return json;
};


Transform.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);
    var children = json.children,
        i = children.length,
        child, scene;

    if (this.gameObject && (scene = this.gameObject.scene)) {
        while (i--) {
            child = scene.findComponentByJSONId(children[i]);

            if (!this.hasChild(child)) {
                this.addChild(child);
            }
        }
    } else {
        this.once("start", function () {
            var scene = this.gameObject.scene;

            while (i--) {
                child = scene.findComponentByJSONId(children[i]);

                if (!this.hasChild(child)) {
                    this.addChild(child);
                }
            }
        });
    }

    this.position.fromJSON(json.position);
    this.scale.fromJSON(json.scale);
    this.rotation.fromJSON(json.rotation);

    return this;
};


function updateDepth(transform, depth) {
    var children = transform.children,
        i = children.length;

    transform.depth = depth;

    while (i--) updateDepth(children[i], depth + 1);
}


module.exports = Transform;

},{"../../base/log":14,"../../math/mat3":104,"../../math/mat4":106,"../../math/mathf":107,"../../math/quat":108,"../../math/vec3":112,"./component":54}],72:[function(require,module,exports){
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var Mat32 = require("../../math/mat32");
var Mat3 = require("../../math/mat3");
var Mat4 = require("../../math/mat4");
var Component = require("./component");
var Config = require("../../base/config");
var Log = require("../../base/log");
"use strict";


var EPSILON = Mathf.EPSILON;


function Transform2D(opts) {
    opts || (opts = {});
    opts.sync = opts.sync != undefined ? opts.sync : true;

    Component.call(this, "Transform2D", opts);

    this.root = this;
    this.depth = 0;

    this.parent = undefined;
    this.children = [];

    this.position = opts.position != undefined ? opts.position : new Vec2;
    this.rotation = opts.rotation != undefined ? opts.rotation : 0;
    this.scale = opts.scale != undefined ? opts.scale : new Vec2(1, 1);

    this.matrix = new Mat4;
    this.matrixWorld = new Mat4;

    this.modelView = new Mat4;
    this.normalMatrix = new Mat3;
}

Component.extend(Transform2D);


Transform2D.prototype.copy = function (other) {
    var children = other.children,
        i = children.length;

    this.position.copy(other.position);
    this.scale.copy(other.scale);
    this.rotation = other.rotation;

    while (i--) this.addChild(children[i].gameObject.clone().transform);
    if (other.parent) other.parent.addChild(this);

    return this;
};


Transform2D.prototype.clear = function () {
    Component.prototype.clear.call(this);
    var children = this.children,
        i = children.length;

    while (i--) this.removeChild(children[i]);

    this.position.set(0, 0);
    this.scale.set(1, 1);
    this.rotation = 0;

    this.root = this;
    this.depth = 0;

    return this;
};


Transform2D.prototype.translate = function () {
    var vec = new Vec2;

    return function (translation, relativeTo) {
        vec.copy(translation);

        if (relativeTo instanceof Transform2D) {
            vec.transformAngle(relativeTo.rotation);
        } else if (relativeTo) {
            vec.transformAngle(relativeTo);
        }

        this.position.add(vec);

        return this;
    };
}();


Transform2D.prototype.rotate = function (rotation, relativeTo) {

    if (relativeTo instanceof Transform2D) {
        rotation += relativeTo.rotation;
    } else if (relativeTo) {
        rotation += relativeTo;
    }

    this.rotation += rotation;

    return this;
};


Transform2D.prototype.lookAt = function () {
    var mat = new Mat32,
        vec = new Vec2;

    return function (target) {

        if (target instanceof Transform2D) {
            vec.copy(target.position);
        } else {
            vec.copy(target);
        }

        mat.lookAt(this.position, vec);
        this.rotation = mat.getRotation();

        return this;
    };
}();


Transform2D.prototype.follow = function () {
    var target = new Vec2,
        position = new Vec2,
        delta = new Vec2;

    return function (transform, speed) {
        position.set(0, 0).transformMat4(this.matrixWorld);
        target.set(0, 0).transformMat4(transform.matrixWorld);

        delta.vsub(target, position);

        if (delta.lengthSq() > EPSILON) this.position.add(delta.smul(speed));

        return this;
    };
}();


Transform2D.prototype.addChild = function (child, others) {
    if (!(child instanceof Transform2D)) {
        Log.error("Transform2D.add: can\'t add passed argument, it is not an instance of Transform2D");
        return this;
    }
    var children = this.children,
        index = children.indexOf(child),
        root, depth, scene;

    if (index === -1) {
        if (child.parent) child.parent.remove(child);

        child.parent = this;
        children.push(child);

        root = this;
        depth = 0;

        while (root.parent) {
            root = root.parent;
            depth++;
        }
        child.root = root;
        this.root = root;

        updateDepth(this, depth);
        if (!others) {
            if (this.gameObject && (scene = this.gameObject.scene)) {
                scene.componentManagers.Transform2D.sort();
            }
        }
    } else {
        Log.error("Transform2D.add: child is not a member of this Transform2D");
    }

    return this;
};


Transform2D.prototype.addChildren = function () {
    var i, il, scene;

    for (i = 0, il = arguments.length; i < il; i++) this.addChild(arguments[i], true);
    if (this.gameObject && (scene = this.gameObject.scene)) {
        scene.componentManagers.Transform2D.sort();
    }
    return this;
};


Transform2D.prototype.removeChild = function (child, others) {
    var children = this.children,
        index = children.indexOf(child),
        root, depth, scene;

    if (index !== -1) {
        child.parent = undefined;
        children.splice(index, 1);

        root = this;
        depth = 0;

        while (root.parent) {
            root = root.parent;
            depth++;
        }
        child.root = child;
        this.root = root;

        updateDepth(this, depth);
        if (!others) {
            if (this.gameObject && (scene = this.gameObject.scene)) {
                scene.componentManagers.Transform2D.sort();
            }
        }
    } else {
        Log.error("Transform2D.remove: child is not a member of this Transform2D");
    }

    return this;
};


Transform2D.prototype.removeChildren = function () {
    var i, il, scene;

    for (i = 0, il = arguments.length; i < il; i++) this.removeChild(arguments[i], true);
    if (this.gameObject && (scene = this.gameObject.scene)) {
        scene.componentManagers.Transform2D.sort();
    }
    return this;
};


Transform2D.prototype.detachChildren = function () {
    var i = arguments.length;

    while (i--) this.removeChild(children[i]);
    return this;
};


Transform2D.prototype.hasChild = function (child) {

    return !!~this.children.indexOf(child);
};


Transform2D.prototype.find = function (name) {
    var children = this.children,
        child,
        i = children.length;

    while (i--) {
        child = children[i];

        if (child.gameObject.name === name) return child;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


Transform2D.prototype.toWorld = function (v) {

    return v.transformMat4(this.matrixWorld);
};


Transform2D.prototype.toLocal = function () {
    var mat = new Mat4;

    return function (v) {

        return v.transformMat4(mat.inverseMat(this.matrixWorld));
    };
}();


Transform2D.prototype.update = function () {
    var mat = new Mat32;

    return function () {
        var matrix = this.matrix,
            parent = this.parent;

        matrix.fromMat32(mat.compose(this.position, this.scale, this.rotation));

        if (parent) {
            this.matrixWorld.mmul(parent.matrixWorld, matrix);
        } else {
            this.matrixWorld.copy(matrix);
        }
    };
}();


Transform2D.prototype.updateMatrices = function (viewMatrix) {

    this.modelView.mmul(viewMatrix, this.matrixWorld);
    this.normalMatrix.inverseMat4(this.modelView).transpose();
};


Transform2D.prototype.toJSON = function (json) {
    json = Component.prototype.toJSON.call(this, json);
    var children = this.children,
        jsonChildren = json.children || (json.children = []),
        i = children.length;

    while (i--) jsonChildren[i] = children[i]._id;

    json.position = this.position.toJSON(json.position);
    json.scale = this.scale.toJSON(json.scale);
    json.rotation = this.rotation

    return json;
};


Transform2D.prototype.fromJSON = function (json) {
    Component.prototype.fromJSON.call(this, json);
    var children = json.children,
        i = children.length,
        child, scene;

    if (this.gameObject && (scene = this.gameObject.scene)) {
        while (i--) {
            child = scene.findComponentByJSONId(children[i]);

            if (!this.hasChild(child)) {
                this.addChild(child);
            }
        }
    } else {
        this.once("start", function () {
            var scene = this.gameObject.scene;

            while (i--) {
                child = scene.findComponentByJSONId(children[i]);

                if (!this.hasChild(child)) {
                    this.addChild(child);
                }
            }
        });
    }

    this.position.fromJSON(json.position);
    this.scale.fromJSON(json.scale);
    this.rotation = json.rotation;

    return this;
};


function updateDepth(transform, depth) {
    var children = transform.children,
        i = children.length;

    transform.depth = depth;
    while (i--) updateDepth(children[i], depth + 1);
}


module.exports = Transform2D;

},{"../../base/config":9,"../../base/log":14,"../../math/mat3":104,"../../math/mat32":105,"../../math/mat4":106,"../../math/mathf":107,"../../math/vec2":111,"./component":54}],73:[function(require,module,exports){
var Enum = require("../base/enum");
"use strict";


module.exports = {
    AxisType: new Enum("Button Mouse MouseWheel Touch Joystick"),

    Blending: new Enum("Default None Additive Subtractive Muliply Custom"),
    Side: new Enum("Front Back Both"),

    CullFace: new Enum("None Back Front FrontBack"),

    EmitterType: new Enum("Circle Box Sphere"),

    LightType: new Enum("Point Directional Spot Hemi"),

    TextClipping: new Enum("Overflow Clip"),
    TextAnchor: new Enum("Left Center Right"),

    ShadowMapType: new Enum("BasicShadowMap PCFShadowMap PCFSoftShadowMap"),

    FilterMode: new Enum("None Linear"),
    TextureFormat: new Enum("RGB RGBA Luminance Alpha LuminanceAlpha"),
    TextureWrap: new Enum("Repeat Clamp MirrorRepeat"),

    WrapMode: new Enum("Once Loop PingPong Clamp")
};

},{"../base/enum":12}],74:[function(require,module,exports){
var Class = require("../../base/class");
var Loop = require("./loop");
var Scene = require("../scene");
var GUI = require("../gui/gui");
var Log = require("./../../base/log");
"use strict";


function BaseGame() {

    Class.call(this);

    this._loop = new Loop(this.loop, this);

    this.guis = [];
    this._guiHash = {};
    this._guiJSONHash = {};
    this._guiNameHash = {};

    this.scenes = [];
    this._sceneHash = {};
    this._sceneJSONHash = {};
    this._sceneNameHash = {};
}

Class.extend(BaseGame);


BaseGame.prototype.init = function () {

    this._loop.resume();
    this.emit("init");

    return this;
};


BaseGame.prototype.clear = function () {
    var scenes = this.scenes,
        i = scenes.length;

    while (i--) this.removeScene(scenes[i], true);
    return this;
};


BaseGame.prototype.destroy = function () {

    this.emit("destroy");
    this.clear();

    return this;
};


BaseGame.prototype.addScene = function (scene) {
    if (!(scene instanceof Scene)) {
        Log.error("BaseGame.addScene: can't add argument to BaseGame, it's not an instance of Scene");
        return this;
    }
    var sceneHash = this._sceneHash,
        sceneNameHash = this._sceneNameHash,
        name = scene.name,
        id = scene._id,
        json;

    if (!sceneNameHash[name] && !sceneHash[id]) {
        json = scene.toJSON();

        sceneNameHash[name] = json;
        sceneHash[id] = json;
        this.scenes.push(json);
        if (scene._jsonId !== -1) this._sceneJSONHash[scene._jsonId] = json;

        this.emit("addScene", name);
    } else {
        Log.error("BaseGame.addScene: Scene is already a member of BaseGame");
    }

    return this;
};


BaseGame.prototype.addScenes = function () {
    var i, il;

    for (i = 0, il = arguments.length; i < il; i++) this.addScene(arguments[i]);
    return this;
};


BaseGame.prototype.removeScene = function (scene) {
    if (typeof(scene) === "string") {
        scene = this._sceneNameHash[scene];
    } else if (typeof(scene) === "number") {
        scene = this._sceneHash[scene];
    }
    var scenes = this.scenes,
        sceneHash = this._sceneHash,
        sceneNameHash = this._sceneNameHash,
        name = scene.name,
        id = scene._id,
        json;

    if (sceneNameHash[name] && sceneHash[id]) {
        json = sceneNameHash[name];

        sceneNameHash[name] = undefined;
        sceneHash[id] = undefined;
        scenes.splice(scenes.indexOf(json), 1);
        if (json._jsonId !== -1) this._sceneJSONHash[json._jsonId] = undefined;

        this.emit("removeScene", name);
    } else {
        Log.error("BaseGame.removeScene: Scene not a member of BaseGame");
    }

    return this;
};


BaseGame.prototype.removeScenes = function () {
    var i, il;

    for (i = 0, il = arguments.length; i < il; i++) this.removeScene(arguments[i]);
    return this;
};


BaseGame.prototype.addGUI = function (gui) {
    if (!(gui instanceof GUI)) {
        Log.error("BaseGame.addGUI: can't add argument to BaseGame, it's not an instance of GUI");
        return this;
    }
    var guiHash = this._guiHash,
        guiNameHash = this._guiNameHash,
        name = gui.name,
        id = gui._id,
        json;

    if (!guiNameHash[name] && !guiHash[id]) {
        json = gui.toJSON();

        guiNameHash[name] = json;
        guiHash[id] = json;
        this.guis.push(json);
        if (gui._jsonId !== -1) this._guiJSONHash[gui._jsonId] = json;

        this.emit("addGUI", name);
    } else {
        Log.error("BaseGame.addGUI: GUI is already a member of BaseGame");
    }

    return this;
};


BaseGame.prototype.addGUIs = function () {
    var i = arguments.length;

    while (i--) this.addGUI(arguments[i]);
    return this;
};


BaseGame.prototype.removeGUI = function (gui) {
    if (typeof(gui) === "string") {
        gui = this._guiNameHash[gui];
    } else if (typeof(gui) === "number") {
        gui = this._guiHash[gui];
    }
    var guis = this.guis,
        guiHash = this._guiHash,
        guiNameHash = this._guiNameHash,
        name = gui.name,
        id = gui._id,
        json;

    if (guiNameHash[name] && guiHash[id]) {
        json = guiNameHash[name];

        guiNameHash[name] = undefined;
        guiHash[id] = undefined;
        guis.splice(guis.indexOf(json), 1);
        if (json._jsonId !== -1) this._guiJSONHash[json._jsonId] = undefined;

        this.emit("removeGUI", name);
    } else {
        Log.error("BaseGame.removeGUI: GUI not a member of BaseGame");
    }

    return this;
};


BaseGame.prototype.removeGUIs = function () {
    var i = arguments.length;

    while (i--) this.removeGUI(arguments[i]);
    return this;
};


BaseGame.prototype.findSceneByName = function (name) {

    return this._sceneNameHash[name];
};


BaseGame.prototype.findSceneById = function (id) {

    return this._sceneHash[id];
};


BaseGame.prototype.findSceneByJSONId = function (id) {

    return this._sceneJSONHash[id];
};


BaseGame.prototype.pause = function () {

    this._loop.pause();
    return this;
};


BaseGame.prototype.resume = function () {

    this._loop.resume();
    return this;
};


BaseGame.prototype.loop = function () {

    this.emit("update", Time.sinceStart);
};


BaseGame.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);
    var scenes = this.scenes,
        jsonScenes = json.scenes || (json.scenes = []),
        i = scenes.length;

    while (i--) jsonScenes[i] = scenes[i];

    return json;
};


BaseGame.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);
    var jsonScenes = json.scenes,
        scene, jsonScene,
        i = jsonScenes.length;

    while (i--) {
        jsonScene = jsonScenes[i];

        if ((scene = this.findSceneByJSONId(jsonScene._id))) {
            this.removeScene(scene).addScene(jsonScene);
        } else {
            this.addScene(jsonScene);
        }
    }

    return this;
};


module.exports = BaseGame;

},{"../../base/class":8,"../gui/gui":81,"../scene":97,"./../../base/log":14,"./loop":76}],75:[function(require,module,exports){
var Class = require("../../base/class");
var Device = require("../../base/device");
var Time = require("../../base/time");
var Mathf = require("../../math/mathf");
var Config = require("./../../base/config");
var BaseGame = require("./base_game");
var Canvas = require("../renderer/canvas");
var Renderer = require("../renderer/renderer");
var GameObject = require("../game_object");
var Component = require("../components/component");
var Scene = require("../scene");
var Input = require("../input/input");
var Handler = require("../input/handler");
var Log = require("./../../base/log");
"use strict";


function Game(opts) {
    opts || (opts = {});
    Config.fromJSON(opts);

    BaseGame.call(this);

    this._handler = Handler;
    this.input = Input;

    this.gui = undefined;

    this.scene = undefined;
    this.camera = undefined;

    this.canvas = new Canvas(opts.canvas);
    this.renderer = new Renderer(opts.renderer);
}

BaseGame.extend(Game);


Game.prototype.init = function () {
    var canvas = this.canvas;

    canvas.init();
    this.renderer.init(canvas);
    Handler.setElement(canvas.element);

    this._loop.resume();
    this.emit("init");

    return this;
};


Game.prototype.start = function () {

    this.init();
    this.emit("start");

    return this;
};


Game.prototype.setGUI = function (gui) {
    if (typeof(gui) === "string") {
        gui = this._guiNameHash[gui];
    } else if (typeof(gui) === "number") {
        gui = this.guis[gui];
    }

    if (this._guiNameHash[gui.name] && this._guiHash[gui._id]) {
        if (this.gui) this.gui.destroy();

        gui = Class.fromJSON(gui);
        this.gui = gui;

        gui.game = this;

        gui.init();
        gui.emit("init");

        gui.start();
        gui.emit("start");

        this.emit("setGUI", this.gui);
    } else {
        Log.error("Game.setGUI: GUI is not a member of Game");
    }

    return this;
};


Game.prototype.setScene = function (scene) {
    if (typeof(scene) === "string") {
        scene = this._sceneNameHash[scene];
    } else if (typeof(scene) === "number") {
        scene = this.scenes[scene];
    }

    if (this._sceneNameHash[scene.name] && this._sceneHash[scene._id]) {
        if (this.scene) this.scene.destroy();

        scene = Class.fromJSON(scene);
        this.scene = scene;

        scene.game = this;

        scene.init();
        scene.emit("init");

        scene.start();
        scene.emit("start");

        this.emit("setScene", this.scene);
    } else {
        Log.error("Game.setScene: Scene is not a member of Game");
    }

    return this;
};


Game.prototype.setCamera = function (gameObject) {
    if (!(gameObject instanceof GameObject)) {
        Log.error("Game.setCamera: can't set argument to Game's Active Camera, it's not an instance of GameObject");
        return this;
    }
    var scene = this.scene,
        lastCamera = this.camera,
        index;

    if (!scene) {
        Log.error("Game.setCamera: can't set camera without an active scene, use Game.setScene first");
        return this;
    }

    index = scene.gameObjects.indexOf(gameObject);
    if (index === -1) {
        Log.warn("Game.setCamera: GameObject is not a member of the active Scene, adding it...");
        scene.addGameObject(gameObject);
    }

    this.camera = gameObject.camera || gameObject.camera2d;

    if (this.camera) {
        this.camera._active = true;
        if (lastCamera) lastCamera._active = false;

        this.emit("setCamera", this.camera);
    } else {
        Log.error("Game.setCamera: GameObject does't have a Camera or a Camera2D Component");
    }

    return this;
};


Game.prototype.loop = function () {
    var camera = this.camera,
        scene = this.scene,
        gui = this.gui,
        renderer = this.renderer;

    Time.update();
    Input.update();

    this.emit("update", Time.sinceStart);
    if (renderer && camera) {

        if (scene) {
            scene.update();
            scene.emit("update");
        }
        if (gui) {
            gui.aspect = camera.aspect;
            gui.width = camera.width;
            gui.height = camera.height;
            gui.invWidth = camera.invWidth;
            gui.invHeight = camera.invHeight;

            gui.update();
            gui.emit("update");
        }

        renderer.render(camera, scene, gui);
    }
    this.emit("lateUpdate", Time.sinceStart);
}


module.exports = Game;

},{"../../base/class":8,"../../base/device":10,"../../base/time":18,"../../math/mathf":107,"../components/component":54,"../game_object":77,"../input/handler":87,"../input/input":88,"../renderer/canvas":92,"../renderer/renderer":95,"../scene":97,"./../../base/config":9,"./../../base/log":14,"./base_game":74}],76:[function(require,module,exports){
var requestAnimationFrame = require("../../base/request_animation_frame");
var Log = require("./../../base/log");
"use strict";


function Loop(callback, ctx) {
    ctx || (ctx = this);

    this.paused = true;

    this.callback = callback;
    this.ctx = ctx || this;

    var _this = this;
    this._run = function (ms) {

        if (_this.callback) {
            _this.callback.call(ctx, ms);

            if (!_this.paused) _this._pump();
        }
    }
}


Loop.prototype.resume = function () {
    if (!this.callback) {
        Log.warn("Loop.resume: can't run loop without callback");
        return;
    }

    this.paused = false;
    this._pump();
};


Loop.prototype.pause = function () {

    this.paused = true;
};


Loop.prototype.isRunning = function () {

    return !this.paused;
};


Loop.prototype.isPaused = function () {

    return this.paused;
};


Loop.prototype._pump = function () {

    requestAnimationFrame(this._run);
};


module.exports = Loop;

},{"../../base/request_animation_frame":16,"./../../base/log":14}],77:[function(require,module,exports){
var Class = require("../base/class");
var Component = require("./components/component");
var Log = require("./../base/log");
"use strict";

/**
 * @class GameObject
 * @extends Class
 * @memberof Odin
 * @brief Base class for entities in scenes
 * @param Object options
 */
function GameObject(opts) {
    opts || (opts = {});

    Class.call(this);

    this.name = opts.name != undefined ? opts.name : "GameObject_" + this._id;

    this.scene = undefined;

    this.tags = [];

    this.components = [];
    this._componentType = {};
    this._componentHash = {};
    this._componentJSONHash = {};

    if (opts.tag) this.addTag(opts.tag);
    if (opts.tags) this.addTags.apply(this, opts.tags);

    if (opts.components) this.addComponents.apply(this, opts.components);
}

Class.extend(GameObject);


GameObject.prototype.copy = function (other) {
    var components = this.components,
        otherComponents = other.components,
        tags = other.tags,
        otherComponent, component,
        i = components.length;

    while (i--) {
        component = components[i];
        if (!other.hasComponent(component._className)) this.removeComponent(component);
    }

    i = otherComponents.length;
    while (i--) {
        otherComponent = otherComponents[i];

        if ((component = this.getComponent(otherComponent._type))) {
            component.copy(otherComponent);
        } else {
            this.addComponent(otherComponent.clone());
        }
    }

    i = tags.length;
    while (i--) this.addTag(tags[i]);

    return this;
};


GameObject.prototype.clear = function () {
    var components = this.components,
        tags = this.tags,
        componentLength = components.length,
        i;

    i = componentLength;
    while (i--) components[i].clear();

    i = tags.length;
    while (i--) this.removeTag(tags[i]);

    i = componentLength;
    while (i--) this.removeComponent(components[i]);

    this.off();

    return this;
};


GameObject.prototype.destroy = function () {
    if (!this.scene) {
        Log.error("GameObject.destroy: can't destroy GameObject if it's not added to a Scene");
        return this;
    }

    this.scene.removeGameObject(this);
    this.emit("destroy");

    this.clear();

    return this;
};


GameObject.prototype.remove = function () {
    if (!this.scene) {
        Log.error("GameObject.remove: can't remove GameObject if it's not added to a Scene");
        return this;
    }

    this.scene.removeGameObject(this);
    return this;
};


GameObject.prototype.addTag = function (tag) {
    var tags = this.tags;

    if (tags.indexOf(tag) === -1) tags.push(tag);

    return this;
};


GameObject.prototype.addTags = function () {
    var i = arguments.length;

    while (i--) this.addTag(arguments[i]);
    return this;
};


GameObject.prototype.removeTag = function (tag) {
    var tags = this.tags,
        index = tags.indexOf(tag);

    if (index !== -1) tags.splice(index, 1);

    return this;
};


GameObject.prototype.removeTags = function () {
    var i = arguments.length;

    while (i--) this.removeTag(arguments[i]);
    return this;
};


GameObject.prototype.hasTag = function (tag) {

    return this.tags.indexOf(tag) !== -1;
};


GameObject.prototype.addComponent = function (component, others) {
    if (typeof(component) === "string") component = new Class._classes[component];
    if (!(component instanceof Component)) {
        Log.error("GameObject.addComponent: can't add passed argument, it is not an instance of Component");
        return this;
    }
    var name = component._name,
        components = this.components,
        comp, i, j;


    if (!this[name]) {
        if (component.gameObject) component = component.clone();

        components.push(component);
        this._componentType[component._type] = component;
        this._componentHash[component._id] = component;
        if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = component;

        component.gameObject = this;
        this[name] = component;

        if (!others) {
            i = components.length;
            while (i--) {
                comp = components[i];
                if (!comp) continue;

                j = components.length;
                while (j--) comp[components[j]._name] = components[j];
            }

            component.init();
            component.emit("init");
        }

        this.emit("add" + component._type, component);
        this.emit("addComponent", component);
        component.emit("add", this);

        if (this.scene) this.scene._addComponent(component);
    } else {
        Log.error("GameObject.addComponent: GameObject already has a(n) " + component._type + " Component");
    }

    return this;
};


GameObject.prototype.addComponents = function () {
    var length = arguments.length,
        components = this.components,
        component, name,
        i, j;

    i = length;
    while (i--) this.addComponent(arguments[i], true);

    i = components.length;
    while (i--) {
        component = components[i];
        if (!component) continue;

        j = components.length;
        while (j--) {
            name = components[j]._name;
            component[name] = components[j];
        }
    }

    i = components.length;
    while (i--) {
        component = components[i];
        component.init();
        component.emit("init");
    }

    return this;
};


GameObject.prototype.removeComponent = function (component, clear, others) {
    if (typeof(component) === "string") component = this.getComponent(component);
    if (!(component instanceof Component)) {
        Log.error("GameObject.removeComponent: can't remove passed argument, it is not an instance of Component");
        return this;
    }
    var name = component._name,
        components = this.components,
        comp, i, j;

    if (this[name]) {
        component.emit("remove", this);
        this.emit("remove" + component._type, component);
        this.emit("removeComponent", component);

        if (!others) {
            i = components.length;
            while (i--) {
                comp = components[i];
                if (!comp) continue;

                j = components.length;
                while (j--) {
                    if (name === components[j]._name) comp[name] = undefined;
                }
            }
        }

        components.splice(components.indexOf(component), 1);
        this._componentType[component._type] = undefined;
        this._componentHash[component._id] = undefined;
        if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = undefined;

        component.gameObject = undefined;
        this[name] = undefined;

        if (this.scene) this.scene._removeComponent(component);
        if (clear) component.clear();
    } else {
        Log.error("GameObject.removeComponent: GameObject does not have a(n) " + type + " Component");
    }

    return this;
};


GameObject.prototype.removeComponents = function () {
    var length = arguments.length,
        components = this.components,
        toRemove = arguments,
        component, name,
        i, j;

    i = length;
    while (i--) this.removeComponent(arguments[i], null, true);

    i = components.length;
    while (i--) {
        component = components[i];
        if (!component) continue;

        name = component._name;
        j = toRemove.length;
        while (j--) {
            if (name === toRemove[i]._name) component[name] = undefined;
        }
    }

    return this;
};


GameObject.prototype.getComponent = function (type) {

    return this._componentType[type];
};


GameObject.prototype.hasComponent = function (type) {
    var components = this.components,
        i = components.length;
    ;

    while (i--) {
        if (components[i]._type === type) return true;
    }

    return false;
};


GameObject.prototype.find = function (name) {
    var transform = this.transform || this.transform2d,
        children, child, i;

    if (!transform) return undefined;

    children = transform.children;
    i = children.length;

    while (i--) {
        child = children[i];

        if (child.gameObject.name === name) return child.gameObject;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


GameObject.prototype.findComponentById = function (id) {

    return this._componentHash[id];
};


GameObject.prototype.findComponentByJSONId = function (id) {

    return this._componentJSONHash[id];
};


GameObject.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);
    var components = this.components,
        jsonComponents = json.components || (json.components = []),
        tags = this.tags,
        jsonTags = json.tags || (json.tags = []),
        component,
        i = components.length;

    while (i--) {
        if ((component = components[i]).json) jsonComponents[i] = component.toJSON(jsonComponents[i]);
    }
    i = tags.length;
    while (i--) jsonTags[i] = tags[i];

    json.name = this.name;

    return json;
};


GameObject.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);
    var components = this.components,
        jsonComponents = json.components || (json.components = []),
        component, jsonComponent, tag,
        tags = this.tags,
        jsonTags = json.tags || (json.tags = []),
        i = components.length,
        has, type, j;

    while (i--) {
        component = components[i];
        type = component._type;
        has = false;

        j = jsonComponents.length;
        while (j--) {
            jsonComponent = jsonComponents[i];
            if (type === jsonComponent._type) has = true;
        }

        if (!has) this.removeComponent(component);
    }

    i = jsonComponents.length;
    while (i--) {
        if (!(jsonComponent = jsonComponents[i])) continue;

        if ((component = this.findComponentByJSONId(jsonComponent._id)) || (component = this.getComponent(jsonComponent._type))) {
            component.fromJSON(jsonComponent);
        } else {
            this.addComponent(Class.fromJSON(jsonComponent));
        }
    }

    i = jsonTags.length;
    while (i--) {
        if (tags.indexOf((tag = jsonTags[i])) === -1) tags.push(tag);
    }

    this.name = json.name;

    return this;
};


module.exports = GameObject;

},{"../base/class":8,"./../base/log":14,"./components/component":54}],78:[function(require,module,exports){
var Class = require("../../../base/class");
var GUIComponent = require("../components/gui_component");
"use strict";


function GUIComponentManager(order) {

    Class.call(this);

    this.order = order || 0;

    this.gui = undefined;
    this.components = [];
}

Class.extend(GUIComponentManager);


GUIComponentManager.prototype.forEach = function (fn, ctx) {
    var components = this.components,
        i = 0,
        il = components.length;

    if (ctx) {
        for (; i < il; i++) fn.call(ctx, components[i], i, components);
    } else {
        for (; i < il; i++) fn(components[i], i, components);
    }
};


GUIComponentManager.prototype.start = function () {
    var components = this.components,
        i = 0,
        il = components.length;

    for (; i < il; i++) components[i].start();
};


GUIComponentManager.prototype.init = function () {
    var components = this.components,
        i = 0,
        il = components.length;

    for (; i < il; i++) components[i].init();
};


GUIComponentManager.prototype.update = function () {
    var components = this.components,
        i = 0,
        il = components.length;

    for (; i < il; i++) components[i].update();
};


GUIComponentManager.prototype.sort = function () {

    this.components.sort(this.sortFunction);
};


GUIComponentManager.prototype.sortFunction = function (a, b) {

    return a._id - b._id;
};


GUIComponentManager.prototype.empty = function () {

    return this.components.length === 0;
};


GUIComponentManager.prototype.add = function (component) {
    if (!(component instanceof GUIComponent)) {
        Log.error(this._className + ".add: can't add argument to " + this._className + ", it's not an instance of GUIComponent");
        return;
    }
    var components = this.components,
        index = components.indexOf(component);

    if (index === -1) {
        components.push(component);
    } else {
        Log.error(this._className + ".add: GUIComponent is already a member of " + this._className);
    }
};


GUIComponentManager.prototype.remove = function (component) {
    if (!(component instanceof GUIComponent)) {
        Log.error(this._className + ".remove: can't remove argument from " + this._className + ", it's not an instance of GUIComponent");
        return;
    }
    var components = this.components,
        index = components.indexOf(component);

    if (index !== -1) {
        components.splice(index, 1);
    } else {
        Log.error(this._className + ".remove: GUIComponent is not a member of " + this._className);
    }
};


module.exports = GUIComponentManager;

},{"../../../base/class":8,"../components/gui_component":79}],79:[function(require,module,exports){
var Class = require("../../../base/class");
var util = require("../../../base/util");
var Log = require("../../../base/log");
"use strict";


var camelize = util.camelize;


function GUIComponent(type, opts) {
    opts || (opts = {});
    if (!type) Log.error("GUIComponent defined without a type, use GUIComponent.call(this, \"GUIComponentName\", { sync: Boolean, json: Boolean })");


    Class.call(this);

    this._type = type || "UnknownGUIComponent";
    this._name = camelize(this._type, true);

    this.sync = opts.sync != undefined ? !!opts.sync : false;
    this.json = opts.json != undefined ? !!opts.json : true;

    this.guiObject = undefined;
}

Class.extend(GUIComponent);


GUIComponent.prototype.init = function () {

};


GUIComponent.prototype.start = function () {

};


GUIComponent.prototype.update = function () {

};


GUIComponent.prototype.clear = function () {

    this.off();
};


GUIComponent.prototype.destroy = function () {
    if (!this.guiObject) {
        Log.error("GUIComponent.destroy: can't destroy GUIComponent if it's not added to a GameObject");
        return this;
    }

    this.guiObject.removeGUIComponent(this, true);
    this.emit("destroy");

    this.clear();

    return this;
};


GUIComponent.prototype.remove = function () {
    if (!this.guiObject) {
        Log.error("GUIComponent.destroy: can't destroy GUIComponent if it's not added to a GameObject");
        return this;
    }

    this.guiObject.removeGUIComponent(this, true);
    return this;
};


GUIComponent.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json._type = this._type;
    json.sync = this.sync;
    json.json = this.json;

    return json;
};


GUIComponent.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.sync = json.sync;
    this.json = json.json;

    return this;
};


module.exports = GUIComponent;

},{"../../../base/class":8,"../../../base/log":14,"../../../base/util":19}],80:[function(require,module,exports){
var Mathf = require("../../../math/mathf");
var Rect = require("../../../math/rect");
var Vec2 = require("../../../math/vec2");
var Mat32 = require("../../../math/mat32");
var Mat3 = require("../../../math/mat3");
var Mat4 = require("../../../math/mat4");
var GUIComponent = require("./gui_component");
var Log = require("../../../base/log");
"use strict";


var EPSILON = Mathf.EPSILON;


function GUITransform(opts) {
    opts || (opts = {});
    opts.sync = opts.sync != undefined ? opts.sync : true;

    GUIComponent.call(this, "GUITransform", opts);

    this.root = this;
    this.depth = 0;

    this.parent = undefined;
    this.children = [];

    this.position = opts.position != undefined ? opts.position : new Rect;
    this.rotation = opts.rotation != undefined ? opts.rotation : 0;
    this.scale = opts.scale != undefined ? opts.scale : new Vec2(1, 1);

    this.matrix = new Mat32;
    this.matrixWorld = new Mat32;

    this.modelView = new Mat4;
    this._matricesNeedsUpdate = false;
}

GUIComponent.extend(GUITransform);


GUITransform.prototype.copy = function (other) {
    var children = other.children,
        i = children.length;

    this.position.copy(other.position);
    this.scale.copy(other.scale);
    this.rotation = other.rotation;

    while (i--) this.addChild(children[i].guiObject.clone().guiTransform);
    if (other.parent) other.parent.addChild(this);

    this._matricesNeedsUpdate = true;

    return this;
};


GUITransform.prototype.clear = function () {
    GUIComponent.prototype.clear.call(this);
    var children = this.children,
        i = children.length;

    while (i--) this.removeChild(children[i]);

    this.position.set(0, 0, 0, 0);
    this.scale.set(1, 1);
    this.rotation = 0;

    this.root = this;
    this.depth = 0;

    this._matricesNeedsUpdate = true;

    return this;
};


GUITransform.prototype.translate = function () {
    var vec = new Vec2;

    return function (translation, relativeTo) {
        var position = this.position;

        vec.copy(translation);

        if (relativeTo instanceof GUITransform) {
            vec.transformAngle(relativeTo.rotation);
        } else if (relativeTo) {
            vec.transformAngle(relativeTo);
        }

        position.x += vec.x;
        position.y += vec.y;

        return this;
    };
}();


GUITransform.prototype.rotate = function (rotation, relativeTo) {

    if (relativeTo instanceof GUITransform) {
        rotation += relativeTo.rotation;
    } else if (relativeTo) {
        rotation += relativeTo;
    }

    this.rotation += rotation;

    return this;
};


GUITransform.prototype.lookAt = function () {
    var mat = new Mat32,
        vec = new Vec2,
        vec_2 = new Vec2;

    return function (target) {

        if (target instanceof GUITransform) {
            vec.copy(target.position);
        } else {
            vec.copy(target);
        }

        mat.lookAt(this.position.center(vec_2), vec);
        this.rotation = mat.getRotation();

        return this;
    };
}();


GUITransform.prototype.follow = function () {
    var target = new Vec2,
        pos = new Vec2,
        delta = new Vec2;

    return function (transform, speed) {
        var position = this.position;

        pos.set(0, 0).transformMat32(this.matrixWorld);
        target.set(0, 0).transformMat32(transform.matrixWorld);

        delta.vsub(target, pos);

        if (delta.lengthSq() > EPSILON) {
            position.x += delta.x * speed;
            position.y += delta.y * speed;
        }

        return this;
    };
}();


GUITransform.prototype.addChild = function (child, others) {
    if (!(child instanceof GUITransform)) {
        Log.error("GUITransform.add: can\'t add passed argument, it is not an instance of GUITransform");
        return this;
    }
    var children = this.children,
        index = children.indexOf(child),
        root, depth, gui;

    if (index === -1) {
        if (child.parent) child.parent.remove(child);

        child.parent = this;
        children.push(child);

        root = this;
        depth = 0;

        while (root.parent) {
            root = root.parent;
            depth++;
        }
        child.root = root;
        this.root = root;

        updateDepth(this, depth);
        if (!others) {
            if (this.guiObject && (gui = this.guiObject.gui)) {
                gui.componentManagers.GUITransform.sort(this.sort);
            }
        }
    } else {
        Log.error("GUITransform.add: child is not a member of this GUITransform");
    }

    return this;
};


GUITransform.prototype.addChildren = function () {
    var i, il, gui;

    for (i = 0, il = arguments.length; i < il; i++) this.addChild(arguments[i], true);
    if (this.guiObject && (gui = this.guiObject.gui)) {
        gui.componentManagers.GUITransform.sort(this.sort);
    }
    return this;
};


GUITransform.prototype.removeChild = function (child, others) {
    var children = this.children,
        index = children.indexOf(child),
        root, depth, gui;

    if (index !== -1) {
        child.parent = undefined;
        children.splice(index, 1);

        root = this;
        depth = 0;

        while (root.parent) {
            root = root.parent;
            depth++;
        }
        child.root = child;
        this.root = root;

        updateDepth(this, depth);
        if (!others) {
            if (this.guiObject && (gui = this.guiObject.gui)) {
                gui.componentManagers.GUITransform.sort(this.sort);
            }
        }
    } else {
        Log.error("GUITransform.remove: child is not a member of this GUITransform");
    }

    return this;
};


GUITransform.prototype.removeChildren = function () {
    var i, il, gui;

    for (i = 0, il = arguments.length; i < il; i++) this.removeChild(arguments[i], true);
    if (this.guiObject && (gui = this.guiObject.gui)) {
        gui.componentManagers.GUITransform.sort(this.sort);
    }
    return this;
};


GUITransform.prototype.detachChildren = function () {
    var i = arguments.length;

    while (i--) this.removeChild(children[i]);
    return this;
};


GUITransform.prototype.hasChild = function (child) {

    return !!~this.children.indexOf(child);
};


GUITransform.prototype.find = function (name) {
    var children = this.children,
        child,
        i = children.length;

    while (i--) {
        child = children[i];

        if (child.guiObject.name === name) return child;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


GUITransform.prototype.toWorld = function (v) {

    return v.transformMat32(this.matrixWorld);
};


GUITransform.prototype.toLocal = function () {
    var mat = new Mat32;

    return function (v) {

        return v.transformMat32(mat.inverseMat(this.matrixWorld));
    };
}();


GUITransform.prototype.update = function () {
    var matrix = this.matrix,
        parent = this.parent;

    matrix.compose(this.position, this.scale, this.rotation);

    if (parent) {
        this.matrixWorld.mmul(parent.matrixWorld, matrix);
    } else {
        this.matrixWorld.copy(matrix);
    }

    this._matricesNeedsUpdate = true;
};


GUITransform.prototype.updateMatrices = function () {
    var mat = new Mat4;

    return function (viewMatrix) {
        if (!this._matricesNeedsUpdate) return;

        this.modelView.mmul(viewMatrix, mat.fromMat32(this.matrixWorld));
        this._matricesNeedsUpdate = false;
    };
}();


GUITransform.prototype.toJSON = function (json) {
    json = GUIComponent.prototype.toJSON.call(this, json);
    var children = this.children,
        jsonChildren = json.children || (json.children = []),
        i = children.length;

    while (i--) jsonChildren[i] = children[i]._id;

    json.position = this.position.toJSON(json.position);
    json.scale = this.scale.toJSON(json.scale);
    json.rotation = this.rotation

    return json;
};


GUITransform.prototype.fromJSON = function (json) {
    GUIComponent.prototype.fromJSON.call(this, json);
    var children = json.children,
        i = children.length,
        child, gui;

    if (this.guiObject && (gui = this.guiObject.gui)) {
        while (i--) {
            child = gui.findGUIComponentByJSONId(children[i]);

            if (!this.hasChild(child)) {
                this.addChild(child);
            }
        }
    } else {
        this.once("start", function () {
            var gui = this.guiObject.gui;

            while (i--) {
                child = gui.findGUIComponentByJSONId(children[i]);

                if (!this.hasChild(child)) {
                    this.addChild(child);
                }
            }
        });
    }

    this.position.fromJSON(json.position);
    this.scale.fromJSON(json.scale);
    this.rotation = json.rotation;

    this._matricesNeedsUpdate = true;

    return this;
};


function updateDepth(transform, depth) {
    var children = transform.children,
        i = children.length;

    transform.depth = depth;
    while (i--) updateDepth(children[i], depth + 1);
}


module.exports = GUITransform;

},{"../../../base/log":14,"../../../math/mat3":104,"../../../math/mat32":105,"../../../math/mat4":106,"../../../math/mathf":107,"../../../math/rect":109,"../../../math/vec2":111,"./gui_component":79}],81:[function(require,module,exports){
var Class = require("../../base/class");
var GUIObject = require("./gui_object");
var GUIComponentManager = require("./component_managers/gui_component_manager");
var Log = require("../../base/log");
"use strict";


/**
 * GUIs manage GUIObjects and their GUIComponents
 * @class Odin.GUI
 * @extends Odin.Class
 * @param Object options
 */
function GUI(opts) {
    opts || (opts = {});

    Class.call(this);

    this.game = undefined;

    this.name = opts.name != undefined ? opts.name : "GUI_" + this._id;

    this.width = 960;
    this.height = 640;
    this.aspect = this.width / this.height;
    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.guiObjects = [];
    this._guiObjectHash = {};
    this._guiObjectJSONHash = {};

    this.componentManagers = {};
    this._componentManagerTypes = [];
    this._componentHash = {};
    this._componentJSONHash = {};

    if (opts.guiObjects) this.addGUIObjects.apply(this, opts.guiObjects);
}

Class.extend(GUI);


GUI.prototype.copy = function (other) {
    var otherGUIObjects = other.guiObjects,
        i = otherGUIObjects.length;

    this.clear();
    this.name = other.name + "." + this._id;

    while (i--) this.addGUIObject(otherGUIObjects[i].clone());

    return this;
};


GUI.prototype.init = function () {
    var guiObjects = this.guiObjects,
        i, il;

    for (i = 0, il = guiObjects.length; i < il; i++) guiObjects[i].emit("init");
};


GUI.prototype.start = function () {
    var componentManagerTypes = this._componentManagerTypes,
        guiObjects = this.guiObjects,
        i, il;

    for (i = 0, il = componentManagerTypes.length; i < il; i++) componentManagerTypes[i].start();
    for (i = 0, il = guiObjects.length; i < il; i++) guiObjects[i].emit("start");
};


GUI.prototype.update = function () {
    var componentManagerTypes = this._componentManagerTypes,
        i, il;

    for (i = 0, il = componentManagerTypes.length; i < il; i++) componentManagerTypes[i].update();
};


GUI.prototype.clear = function () {
    var guiObjects = this.guiObjects,
        i = guiObjects.length;

    while (i--) this.removeGUIObject(guiObjects[i], true);

    this.off();

    return this;
};


GUI.prototype.destroy = function () {

    this.emit("destroy");
    this.clear();

    return this;
};


GUI.prototype.addGUIObject = function (guiObject) {
    if (!(guiObject instanceof GUIObject)) {
        Log.error("GUI.addGUIObject: can't add argument to GUI, it's not an instance of GUIObject");
        return this;
    }
    var guiObjects = this.guiObjects,
        index = guiObjects.indexOf(guiObject),
        components, transform, children, child,
        i;

    if (index === -1) {
        if (guiObject.gui) guiObject.gui.removeGUIObject(guiObject);

        guiObjects.push(guiObject);
        this._guiObjectHash[guiObject._id] = guiObject;
        if (guiObject._jsonId !== -1) this._guiObjectJSONHash[guiObject._jsonId] = guiObject;

        guiObject.gui = this;

        components = guiObject.components;
        i = components.length;
        while (i--) this._addGUIComponent(components[i]);

        if ((transform = guiObject.guiTransform)) {
            i = (children = transform.children).length;

            while (i--) {
                if ((child = children[i].guiObject) && !this.hasGUIObject(child)) {
                    this.addGUIObject(child);
                }
            }
        }

        if (this.game) guiObject.emit("init");
        this.emit("addGUIObject", guiObject);
    } else {
        Log.error("GUI.addGUIObject: GUIObject is already a member of GUI");
    }

    return this;
};


GUI.prototype.addGUIObjects = function () {
    var i = 0,
        il = arguments.length;

    for (; i < il; i++) this.addGUIObject(arguments[i]);
    return this;
};


GUI.prototype._addGUIComponent = function (component) {
    if (!component) return;
    var type = component._type,
        componentManagers = this.componentManagers,
        componentManager = componentManagers[type],
        componentManagerTypes = this._componentManagerTypes,
        isNew = !componentManager;

    if (isNew) {
        componentManager = componentManagers[type] = new (Class._classes[type + "GUIComponentManager"] || GUIComponentManager);
        componentManagerTypes.push(componentManager);
        componentManagerTypes.sort(sortGUIComponentManagerTypes);
        componentManager.gui = this;
    }

    componentManager.add(component);
    componentManager.sort();

    this._componentHash[component._id] = component;
    if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = component;

    this.emit("add" + type, component);
    this.emit("addGUIComponent", component);

    if (this.game) {
        component.start();
        component.emit("start");
    }
};


function sortGUIComponentManagerTypes(a, b) {

    return a.order - b.order;
}


GUI.prototype.removeGUIObject = function (guiObject, clear) {
    if (!(guiObject instanceof GUIObject)) {
        Log.error("GUI.removeGUIObject: can't remove argument from GUI, it's not an instance of GUIObject");
        return this;
    }
    var guiObjects = this.guiObjects,
        index = guiObjects.indexOf(guiObject),
        components, transform, children, child,
        i;

    if (index !== -1) {

        guiObjects.splice(index, 1);
        this._guiObjectHash[guiObject._id] = undefined;
        if (guiObject._jsonId !== -1) this._guiObjectJSONHash[guiObject._jsonId] = undefined;

        guiObject.gui = undefined;

        components = guiObject.components;
        i = components.length;
        while (i--) this._removeGUIComponent(components[i], clear);

        if ((transform = guiObject.guiTransform)) {
            i = (children = transform.children).length;

            while (i--) {
                if ((child = children[i].guiObject) && this.hasGUIObject(child)) {
                    this.removeGUIObject(child);
                }
            }
        }

        this.emit("removeGUIObject", guiObject);
        guiObject.emit("remove", guiObject);
        if (clear) guiObject.clear();
    } else {
        Log.error("GUI.removeGUIObject: GUIObject is not a member of GUI");
    }

    return this;
};


GUI.prototype.removeGUIObjects = function () {
    var i = 0,
        il = arguments.length;

    for (; i < il; i++) this.removeGUIObject(arguments[i]);
    return this;
};


GUI.prototype._removeGUIComponent = function (component, clear) {
    if (!component) return;
    var type = component._type,
        componentManagers = this.componentManagers,
        componentManager = componentManagers[type],
        componentManagerTypes = this._componentManagerTypes;

    componentManager.remove(component);
    this._componentHash[component._id] = undefined;
    if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = undefined;

    if (componentManager.empty()) {
        componentManagers[type] = undefined;
        componentManagerTypes.splice(componentManagerTypes.indexOf(componentManager), 1);
        componentManager.gui = undefined;
    }

    this.emit("remove" + type, component);
    this.emit("removeGUIComponent", component);

    if (clear) component.clear();
};


GUI.prototype.hasGUIObject = function (guiObject) {

    return !!~this.guiObjects.indexOf(guiObject);
};


GUI.prototype.findByTag = function (tag, out) {
    out || (out = []);
    var guiObjects = this.guiObjects,
        guiObject, i = guiObjects.length;

    while (i--) {
        if ((guiObject = guiObjects[i]).hasTag(tag)) out.push(guiObject);
    }

    return out;
};


GUI.prototype.findByTagFirst = function (tag) {
    var guiObjects = this.guiObjects,
        guiObject, i = guiObjects.length;

    while (i--) {
        if ((guiObject = guiObjects[i]).hasTag(tag)) return guiObject;
    }

    return undefined;
};


GUI.prototype.findById = function (id) {

    return this._guiObjectHash[id];
};


GUI.prototype.findByJSONId = function (id) {

    return this._guiObjectJSONHash[id];
};


GUI.prototype.findGUIComponentById = function (id) {

    return this._componentHash[id];
};


GUI.prototype.findGUIComponentByJSONId = function (id) {

    return this._componentJSONHash[id];
};


GUI.prototype.find = function (name) {
    var guiObjects = this.guiObjects,
        child, i = guiObjects.length;

    while (i--) {
        child = guiObjects[i];

        if (child.name === name) return child;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


GUI.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);
    var guiObjects = this.guiObjects,
        jsonGUIObjects = json.guiObjects || (json.guiObjects = []),
        guiObject,
        i = guiObjects.length;

    json.name = this.name;

    while (i--) {
        if ((guiObject = guiObjects[i])) jsonGUIObjects[i] = guiObject.toJSON(jsonGUIObjects[i]);
    }

    return json;
};


GUI.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);
    var jsonGUIObjects = json.guiObjects,
        guiObject, jsonGUIObject,
        i = jsonGUIObjects.length;

    this.name = json.name;

    while (i--) {
        if (!(jsonGUIObject = jsonGUIObjects[i])) continue;

        if ((guiObject = this._guiObjectJSONHash[jsonGUIObject._id])) {
            guiObject.fromJSON(jsonGUIObject);
        } else {
            this.addGUIObject(Class.fromJSON(jsonGUIObject));
        }
    }

    return this;
};


module.exports = GUI;

},{"../../base/class":8,"../../base/log":14,"./component_managers/gui_component_manager":78,"./gui_object":82}],82:[function(require,module,exports){
var Class = require("../../base/class");
var GUIComponent = require("./components/gui_component");
var GUITransform = require("./components/gui_transform");
var Log = require("../../base/log");
"use strict";

/**
 * @class GUIObject
 * @extends Class
 * @memberof Odin
 * @brief Base class for entities in scenes
 * @param Object options
 */
function GUIObject(opts) {
    opts || (opts = {});

    Class.call(this);

    this.name = opts.name != undefined ? opts.name : "GUIObject_" + this._id;

    this.scene = undefined;

    this.tags = [];

    this.components = [];
    this._componentType = {};
    this._componentHash = {};
    this._componentJSONHash = {};

    if (opts.tag) this.addTag(opts.tag);
    if (opts.tags) this.addTags.apply(this, opts.tags);

    this.addGUIComponent(new GUITransform);
    if (opts.components) this.addGUIComponents.apply(this, opts.components);
}

Class.extend(GUIObject);


GUIObject.prototype.copy = function (other) {
    var components = this.components,
        otherGUIComponents = other.components,
        tags = other.tags,
        otherGUIComponent, component,
        i = components.length;

    while (i--) {
        component = components[i];
        if (!other.hasGUIComponent(component._className)) this.removeGUIComponent(component);
    }

    i = otherGUIComponents.length;
    while (i--) {
        otherGUIComponent = otherGUIComponents[i];

        if ((component = this.getGUIComponent(otherGUIComponent._type))) {
            component.copy(otherGUIComponent);
        } else {
            this.addGUIComponent(otherGUIComponent.clone());
        }
    }

    i = tags.length;
    while (i--) this.addTag(tags[i]);

    return this;
};


GUIObject.prototype.clear = function () {
    var components = this.components,
        tags = this.tags,
        componentLength = components.length,
        i;

    i = componentLength;
    while (i--) components[i].clear();

    i = tags.length;
    while (i--) this.removeTag(tags[i]);

    i = componentLength;
    while (i--) this.removeGUIComponent(components[i]);

    this.off();

    return this;
};


GUIObject.prototype.destroy = function () {
    if (!this.scene) {
        Log.error("GUIObject.destroy: can't destroy GUIObject if it's not added to a Scene");
        return this;
    }

    this.scene.removeGUIObject(this);
    this.emit("destroy");

    this.clear();

    return this;
};


GUIObject.prototype.remove = function () {
    if (!this.scene) {
        Log.error("GUIObject.remove: can't remove GUIObject if it's not added to a Scene");
        return this;
    }

    this.scene.removeGUIObject(this);
    return this;
};


GUIObject.prototype.addTag = function (tag) {
    var tags = this.tags;

    if (tags.indexOf(tag) === -1) tags.push(tag);

    return this;
};


GUIObject.prototype.addTags = function () {
    var i = arguments.length;

    while (i--) this.addTag(arguments[i]);
    return this;
};


GUIObject.prototype.removeTag = function (tag) {
    var tags = this.tags,
        index = tags.indexOf(tag);

    if (index !== -1) tags.splice(index, 1);

    return this;
};


GUIObject.prototype.removeTags = function () {
    var i = arguments.length;

    while (i--) this.removeTag(arguments[i]);
    return this;
};


GUIObject.prototype.hasTag = function (tag) {

    return this.tags.indexOf(tag) !== -1;
};


GUIObject.prototype.addGUIComponent = function (component, others) {
    if (typeof(component) === "string") component = new Class._classes[component];
    if (!(component instanceof GUIComponent)) {
        Log.error("GUIObject.addGUIComponent: can't add passed argument, it is not an instance of GUIComponent");
        return this;
    }
    var name = component._name,
        components = this.components,
        comp, i, j;


    if (!this[name]) {
        if (component.gameObject) component = component.clone();

        components.push(component);
        this._componentType[component._type] = component;
        this._componentHash[component._id] = component;
        if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = component;

        component.gameObject = this;
        this[name] = component;

        if (!others) {
            i = components.length;
            while (i--) {
                comp = components[i];
                if (!comp) continue;

                j = components.length;
                while (j--) comp[components[j]._name] = components[j];
            }

            component.init();
            component.emit("init");
        }

        this.emit("add" + component._type, component);
        this.emit("addGUIComponent", component);
        component.emit("add", this);

        if (this.scene) this.scene._addGUIComponent(component);
    } else {
        Log.error("GUIObject.addGUIComponent: GUIObject already has a(n) " + component._type + " GUIComponent");
    }

    return this;
};


GUIObject.prototype.addGUIComponents = function () {
    var length = arguments.length,
        components = this.components,
        component, name,
        i, j;

    i = length;
    while (i--) this.addGUIComponent(arguments[i], true);

    i = components.length;
    while (i--) {
        component = components[i];
        if (!component) continue;

        j = components.length;
        while (j--) {
            name = components[j]._name;
            component[name] = components[j];
        }
    }

    i = components.length;
    while (i--) {
        component = components[i];
        component.init();
        component.emit("init");
    }

    return this;
};


GUIObject.prototype.removeGUIComponent = function (component, clear, others) {
    if (typeof(component) === "string") component = this.getGUIComponent(component);
    if (!(component instanceof GUIComponent)) {
        Log.error("GUIObject.removeGUIComponent: can't remove passed argument, it is not an instance of GUIComponent");
        return this;
    }
    var name = component._name,
        components = this.components,
        comp, i, j;

    if (this[name]) {
        component.emit("remove", this);
        this.emit("remove" + component._type, component);
        this.emit("removeGUIComponent", component);

        if (!others) {
            i = components.length;
            while (i--) {
                comp = components[i];
                if (!comp) continue;

                j = components.length;
                while (j--) {
                    if (name === components[j]._name) comp[name] = undefined;
                }
            }
        }

        components.splice(components.indexOf(component), 1);
        this._componentType[component._type] = undefined;
        this._componentHash[component._id] = undefined;
        if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = undefined;

        component.gameObject = undefined;
        this[name] = undefined;

        if (this.scene) this.scene._removeGUIComponent(component);
        if (clear) component.clear();
    } else {
        Log.error("GUIObject.removeGUIComponent: GUIObject does not have a(n) " + type + " GUIComponent");
    }

    return this;
};


GUIObject.prototype.removeGUIComponents = function () {
    var length = arguments.length,
        components = this.components,
        toRemove = arguments,
        component, name,
        i, j;

    i = length;
    while (i--) this.removeGUIComponent(arguments[i], null, true);

    i = components.length;
    while (i--) {
        component = components[i];
        if (!component) continue;

        name = component._name;
        j = toRemove.length;
        while (j--) {
            if (name === toRemove[i]._name) component[name] = undefined;
        }
    }

    return this;
};


GUIObject.prototype.getGUIComponent = function (type) {

    return this._componentType[type];
};


GUIObject.prototype.hasGUIComponent = function (type) {
    var components = this.components,
        i = components.length;
    ;

    while (i--) {
        if (components[i]._type === type) return true;
    }

    return false;
};


GUIObject.prototype.find = function (name) {
    var transform = this.guiTransform,
        children, child, i;

    if (!transform) return undefined;

    children = transform.children;
    i = children.length;

    while (i--) {
        child = children[i];

        if (child.gameObject.name === name) return child.gameObject;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


GUIObject.prototype.findGUIComponentById = function (id) {

    return this._componentHash[id];
};


GUIObject.prototype.findGUIComponentByJSONId = function (id) {

    return this._componentJSONHash[id];
};


GUIObject.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);
    var components = this.components,
        jsonGUIComponents = json.components || (json.components = []),
        tags = this.tags,
        jsonTags = json.tags || (json.tags = []),
        component,
        i = components.length;

    while (i--) {
        if ((component = components[i]).json) jsonGUIComponents[i] = component.toJSON(jsonGUIComponents[i]);
    }
    i = tags.length;
    while (i--) jsonTags[i] = tags[i];

    json.name = this.name;

    return json;
};


GUIObject.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);
    var components = this.components,
        jsonGUIComponents = json.components || (json.components = []),
        component, jsonGUIComponent, tag,
        tags = this.tags,
        jsonTags = json.tags || (json.tags = []),
        i = components.length,
        has, type, j;

    while (i--) {
        component = components[i];
        type = component._type;
        has = false;

        j = jsonGUIComponents.length;
        while (j--) {
            jsonGUIComponent = jsonGUIComponents[i];
            if (type === jsonGUIComponent._type) has = true;
        }

        if (!has) this.removeGUIComponent(component);
    }

    i = jsonGUIComponents.length;
    while (i--) {
        if (!(jsonGUIComponent = jsonGUIComponents[i])) continue;

        if ((component = this.findGUIComponentByJSONId(jsonGUIComponent._id)) || (component = this.getGUIComponent(jsonGUIComponent._type))) {
            component.fromJSON(jsonGUIComponent);
        } else {
            this.addGUIComponent(Class.fromJSON(jsonGUIComponent));
        }
    }

    i = jsonTags.length;
    while (i--) {
        if (tags.indexOf((tag = jsonTags[i])) === -1) tags.push(tag);
    }

    this.name = json.name;

    return this;
};


module.exports = GUIObject;

},{"../../base/class":8,"../../base/log":14,"./components/gui_component":79,"./components/gui_transform":80}],83:[function(require,module,exports){
var Enums = require("../enums");
var Axis = require("./axis");
var Log = require("../../base/log");
"use strict";


var AxisType = Enums.AxisType;


function Axes() {

    Array.call(this);

    this.hash = {};
    this._SYNC = {};

    this.add({
        name: "horizontal",
        posButton: "right",
        negButton: "left",
        altPosButton: "d",
        altNegButton: "a",
        type: AxisType.Button
    });

    this.add({
        name: "vertical",
        posButton: "up",
        negButton: "down",
        altPosButton: "w",
        altNegButton: "s",
        type: AxisType.Button
    });

    this.add({
        name: "fire",
        posButton: "ctrl",
        negButton: "",
        altPosButton: "mouse0",
        altNegButton: "",
        type: AxisType.Button
    });

    this.add({
        name: "jump",
        posButton: "space",
        negButton: "",
        altPosButton: "mouse2",
        altNegButton: "",
        type: AxisType.Button
    });

    this.add({
        name: "mouseX",
        type: AxisType.Mouse,
        axis: "x"
    });

    this.add({
        name: "mouseY",
        type: AxisType.Mouse,
        axis: "y"
    });

    this.add({
        name: "touchX",
        type: AxisType.Touch,
        axis: "x"
    });

    this.add({
        name: "touchY",
        type: AxisType.Touch,
        axis: "y"
    });

    this.add({
        name: "mouseWheel",
        type: AxisType.MouseWheel
    });
}

Axes.prototype = Object.create(Array.prototype);
Axes.prototype.constructor = Axes;


Axes.prototype.add = function (name, opts) {
    if (typeof(name) === "object") {
        opts = name;
        name = opts.name;
    }
    if (this.hash[name]) {
        Log.error("Axes.add: Axes already have Axis named " + name + " use Axes.get(\"" + name + "\") and edit it instead");
        return undefined;
    }
    opts || (opts = {});
    opts.name = name;
    var axis = new Axis(opts);

    this.push(axis);
    this.hash[name] = axis;

    return axis;
};


Axes.prototype.get = function (name) {

    return this.hash[name];
};


Axes.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);
    var jsonAxes = json.axes || (json.axes = []),
        i;

    for (i = this.length; i--;) jsonAxes[i] = this[i].toSYNC(jsonAxes[i]);
    return json;
};


Axes.prototype.fromSYNC = function (json) {
    var axisHash = this.hash,
        jsonAxes = json.axes || (json.axes = []),
        axis, jsonAxis,
        i;

    for (i = jsonAxes.length; i--;) {
        jsonAxis = jsonAxes[i];

        if ((axis = axisHash[jsonAxis.name])) {
            axis.fromSYNC(jsonAxis);
        } else {
            this.add(jsonAxis.name).fromJSON(jsonAxis);
        }
    }

    return this;
};


Axes.prototype.toJSON = function (json) {
    json || (json = {});
    var jsonAxes = json.axes || (json.axes = []),
        i;

    for (i = this.length; i--;) jsonAxes[i] = this[i].toJSON(jsonAxes[i]);
    return json;
};


Axes.prototype.fromJSON = function (json) {
    var axisHash = this.hash,
        jsonAxes = json.axes || (json.axes = []),
        axis, jsonAxis,
        i;

    for (i = jsonAxes.length; i--;) {
        jsonAxis = jsonAxes[i];

        if ((axis = axisHash[jsonAxis.name])) {
            axis.fromJSON(jsonAxis);
        } else {
            this.add(jsonAxis.name).fromJSON(jsonAxis);
        }
    }

    return this;
};


module.exports = Axes;

},{"../../base/log":14,"../enums":73,"./axis":84}],84:[function(require,module,exports){
var Enums = require("../enums");
"use strict";


var AxisType = Enums.AxisType;


function Axis(opts) {
    opts || (opts = {});

    this.name = opts.name != undefined ? opts.name : "unknown";

    this.negButton = opts.negButton != undefined ? opts.negButton : "";
    this.posButton = opts.posButton != undefined ? opts.posButton : "";

    this.altNegButton = opts.altNegButton != undefined ? opts.altNegButton : "";
    this.altPosButton = opts.altPosButton != undefined ? opts.altPosButton : "";

    this.gravity = opts.gravity != undefined ? opts.gravity : 3;
    this.sensitivity = opts.sensitivity != undefined ? opts.sensitivity : 3;

    this.dead = opts.dead != undefined ? opts.dead : 0.001;

    this.type = opts.type != undefined ? opts.type : AxisType.BUTTON;
    this.axis = opts.axis != undefined ? opts.axis : "x";
    this.index = opts.index != undefined ? opts.index : 0;

    this.joyNum = opts.joyNum != undefined ? opts.joyNum : 0;

    this.value = 0;

    this._SYNC = {};
};


Axis.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);

    json.name = this.name;
    json.value = this.value;

    return json;
};


Axis.prototype.fromSYNC = function (json) {

    this.name = json.name;
    this.value = json.value;

    return this;
};


Axis.prototype.toJSON = function (json) {
    json || (json = {});

    json.name = this.name;

    json.negButton = this.negButton;
    json.posButton = this.posButton;

    json.altNegButton = this.altNegButton;
    json.altPosButton = this.altPosButton;

    json.gravity = this.gravity;
    json.sensitivity = this.sensitivity;

    json.dead = this.dead;

    json.type = this.type;
    json.axis = this.axis;
    json.index = this.index;

    json.joyNum = this.joyNum;

    json.value = this.value;

    return json;
};


Axis.prototype.fromJSON = function (json) {

    this.name = json.name;

    this.negButton = json.negButton;
    this.posButton = json.posButton;

    this.altNegButton = json.altNegButton;
    this.altPosButton = json.altPosButton;

    this.gravity = json.gravity;
    this.sensitivity = json.sensitivity;

    this.dead = json.dead;

    this.type = json.type;
    this.axis = json.axis;
    this.index = json.index;

    this.joyNum = json.joyNum;

    this.value = json.value;

    return this;
};


module.exports = Axis;

},{"../enums":73}],85:[function(require,module,exports){
"use strict";


function Button(name) {
    this.name = name;

    this.timeDown = -1;
    this.timeUp = -1;

    this.frameDown = -1;
    this.frameUp = -1;

    this.value = false;
    this._first = true;

    this._SYNC = {};
};


Button.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);

    json.name = this.name;
    json.timeDown = this.timeDown;
    json.timeUp = this.timeUp;
    json.frameDown = this.frameDown;
    json.frameUp = this.frameUp;
    json.value = this.value;

    return json;
};


Button.prototype.fromSYNC = function (json) {

    this.name = json.name;
    this.timeDown = json.timeDown;
    this.timeUp = json.timeUp;
    this.frameDown = json.frameDown;
    this.frameUp = json.frameUp;
    this.value = json.value;

    return this;
};


Button.prototype.toJSON = function (json) {
    json || (json = {});

    json.name = this.name;
    json.timeDown = this.timeDown;
    json.timeUp = this.timeUp;
    json.frameDown = this.frameDown;
    json.frameUp = this.frameUp;
    json.value = this.value;

    return json;
};


Button.prototype.fromJSON = function (json) {

    this.name = json.name;
    this.timeDown = json.timeDown;
    this.timeUp = json.timeUp;
    this.frameDown = json.frameDown;
    this.frameUp = json.frameUp;
    this.value = json.value;

    return this;
};


module.exports = Button;

},{}],86:[function(require,module,exports){
var Time = require("../../base/time");
var Button = require("./button");
var Log = require("../../base/log");
"use strict";


function Buttons() {

    Array.call(this);

    this.hash = {};
    this._SYNC = {};

    this.add("mouse0");
    this.add("mouse1");
    this.add("mouse2");
}

Buttons.prototype = Object.create(Array.prototype);
Buttons.prototype.constructor = Buttons;


Buttons.prototype.add = function (name) {
    if (this.hash[name]) {
        Log.error("Buttons.add: Buttons already have Button name " + name);
        return undefined;
    }
    var button = new Button(name);

    this.push(button);
    this.hash[name] = button;

    return button;
};


Buttons.prototype.get = function (name) {

    return this.hash[name];
};


Buttons.prototype.on = function (name) {
    var button = this.hash[name] || this.add(name);

    if (button._first) {
        button.frameDown = Time.frameCount + 1;
        button.timeDown = Time.stamp();
        button._first = false;
    }
    button.value = true;

    return button;
};


Buttons.prototype.off = function (name) {
    var button = this.hash[name] || this.add(name);

    button.frameUp = Time.frameCount + 1;
    button.timeUp = Time.stamp();
    button.value = false;
    button._first = true;

    return button;
};


Buttons.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);
    var jsonButtons = json.buttons || (json.buttons = []),
        i;

    for (i = this.length; i--;) jsonButtons[i] = this[i].toSYNC(jsonButtons[i]);
    return json;
};


Buttons.prototype.fromSYNC = function (json) {
    var buttonHash = this.hash,
        jsonButtons = json.buttons || (json.buttons = []),
        button, jsonButton,
        i;

    for (i = jsonButtons.length; i--;) {
        jsonButton = jsonButtons[i];

        if ((button = buttonHash[jsonButton.name])) {
            button.fromSYNC(jsonButton);
        } else {
            this.add(jsonButton.name).fromJSON(jsonButton);
        }
    }

    return this;
};


Buttons.prototype.toJSON = function (json) {
    json || (json = {});
    var jsonButtons = json.buttons || (json.buttons = []),
        i;

    for (i = this.length; i--;) jsonButtons[i] = this[i].toJSON(jsonButtons[key]);
    return json;
};


Buttons.prototype.fromJSON = function (json) {
    var buttonHash = this.hash,
        jsonButtons = json.buttons || (json.buttons = []),
        button, jsonButton,
        i;

    for (i = jsonButtons.length; i--;) {
        jsonButton = jsonButtons[i];

        if ((button = buttonHash[jsonButton.name])) {
            button.fromJSON(jsonButton);
        } else {
            this.add(jsonButton.name).fromJSON(jsonButton);
        }
    }

    return this;
};


module.exports = Buttons;

},{"../../base/log":14,"../../base/time":18,"./button":85}],87:[function(require,module,exports){
var EventEmitter = require("../../base/event_emitter");
var Dom = require("../../base/dom");
var ObjectPool = require("../../base/object_pool");
var Vec2 = require("../../math/vec2");
var Input = require("./input");
"use strict";


var min = Math.min,
    max = Math.max,

    addEvent = Dom.addEvent,
    removeEvent = Dom.removeEvent;


function Handler() {

    EventEmitter.call(this);

    this.element = undefined;
}

EventEmitter.extend(Handler);


Handler.prototype.setElement = function (element) {
    if (this.element) this.removeElement();

    this.element = element;

    addEvent(element, "mousedown mouseup mousemove mouseout mousewheel DOMMouseScroll", handleMouse, Input);
    addEvent(top, "keydown keyup", handleKeys, Input);

    addEvent(element, "touchstart touchmove touchend touchcancel", handleTouches, Input);
    addEvent(window, "devicemotion", handleDevicemotion, Input);
};


Handler.prototype.removeElement = function () {
    if (!this.element) return;
    var element = this.element;

    removeEvent(element, "mousedown mouseup mousemove mouseout mousewheel DOMMouseScroll", handleMouse, Input);
    removeEvent(top, "keydown keyup", handleKeys, Input);

    removeEvent(element, "touchstart touchmove touchend touchcancel", handleTouches, Input);
    removeEvent(window, "devicemotion", handleDevicemotion, Input);

    this.element = undefined;
};


function handleDevicemotion(e) {
    var acc = e.accelerationIncludingGravity,
        acceleration;

    if (acc && (acc.x || acc.y || acc.z)) {
        acceleration = this.acceleration;

        acceleration.x = acc.x;
        acceleration.y = acc.y;
        acceleration.z = acc.z;

        this.emit("acceleration");
    }
}


function handleTouches(e) {
    e.preventDefault();
    var type = e.type,
        touches = this.touches,
        targetTouches = e.targetTouches,
        changedTouches = e.changedTouches,
        i, il;

    if (type === "touchstart") {

        for (i = 0, il = targetTouches.length; i < il; i++) this.emit("touchstart", touches.start(i, targetTouches[i]));

    } else if (type === "touchend") {

        for (i = 0, il = changedTouches.length; i < il; i++) this.emit("touchend", touches.end(i));

    } else if (type === "touchcancel") {

        touches.cancel();
        this.emit("touchcancel");

    } else if (type === "touchmove") {

        if (this.touchesMoveNeedsUpdate) {

            for (i = 0, il = changedTouches.length; i < il; i++) this.emit("touchmove", touches.move(i, changedTouches[i]));
            this.touchesMoveNeedsUpdate = false;
        }
    }
}


var mouseFirst = false,
    mouseLast = new Vec2,
    mouseWheel = 0;

function handleMouse(e) {
    e.preventDefault();
    var type = e.type,
        button;

    if (type === "mousedown") {
        button = MOUSE_BUTTONS[e.button];

        this.buttons.on(button);
        updateMousePosition(this, e);
        this.emit("mousedown", button);

    } else if (type === "mouseup") {
        button = MOUSE_BUTTONS[e.button];

        this.buttons.off(button);
        updateMousePosition(this, e);
        this.emit("mouseup", button);

    } else if (type === "mouseout") {
        button = MOUSE_BUTTONS[e.button];

        this.buttons.off(button);
        updateMousePosition(this, e);
        this.emit("mouseout", button);

    } else if (type === "mousewheel" || type === "DOMMouseScroll") {

        mouseWheel = max(-1, min(1, (e.wheelDelta || -e.detail)));
        this.mouseWheel = mouseWheel;
        this.emit("mousewheel", mouseWheel);

    } else if (type === "mousemove") {

        if (this.mouseMoveNeedsUpdate) {

            updateMousePosition(this, e);
            this.mouseMoveNeedsUpdate = false;
            this.emit("mousemove");
        }
    }
}


function updateMousePosition(input, e) {
    var position = input.mousePosition,
        delta = input.mouseDelta,
        element = e.target || e.srcElement,
        offsetX = element.offsetLeft || 0,
        offsetY = element.offsetTop || 0,
        x = (e.pageX || e.clientX) - offsetX,
        y = (e.pageY || e.clientY) - offsetY;

    mouseLast.x = mouseFirst ? position.x : x;
    mouseLast.y = mouseFirst ? position.y : y;

    position.x = x;
    position.y = y;

    delta.x = position.x - mouseLast.x;
    delta.y = position.y - mouseLast.y;

    mouseFirst = true;
}


function handleKeys(e) {
    e.preventDefault();
    var type = e.type,
        key = KEY_CODES[e.keyCode];

    if (type === "keydown") {
        this.buttons.on(key);
        this.emit("keydown", key);
    } else if (type === "keyup") {
        this.buttons.off(key);
        this.emit("keyup", key);
    }
}

var MOUSE_BUTTONS = {
    "0": "mouse0",
    "1": "mouse1",
    "2": "mouse2"
}

var KEY_CODES = {
    8: "backspace",
    9: "tab",
    13: "enter",
    16: "shift",
    17: "ctrl",
    18: "alt",
    19: "pause",
    20: "capslock",
    27: "escape",
    32: "space",
    33: "pageup",
    34: "pagedown",
    35: "end",
    37: "left",
    38: "up",
    39: "right",
    40: "down",
    45: "insert",
    46: "delete",
    112: "f1",
    113: "f2",
    114: "f3",
    115: "f4",
    116: "f5",
    117: "f6",
    118: "f7",
    119: "f8",
    120: "f9",
    121: "f10",
    122: "f11",
    123: "f12",
    144: "numlock",
    145: "scrolllock",
    186: "semicolon",
    187: "equal",
    188: "comma",
    189: "dash",
    190: "period",
    191: "slash",
    192: "graveaccent",
    219: "openbracket",
    220: "backslash",
    221: "closebraket",
    222: "singlequote"
};

for (var i = 48; i <= 90; i++) KEY_CODES[i] = String.fromCharCode(i).toLowerCase();


module.exports = new Handler;

},{"../../base/dom":11,"../../base/event_emitter":13,"../../base/object_pool":15,"../../math/vec2":111,"./input":88}],88:[function(require,module,exports){
var EventEmitter = require("../../base/event_emitter");
var ObjectPool = require("../../base/object_pool");
var Time = require("../../base/time");
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var Vec3 = require("../../math/vec3");
var Enums = require("../enums");
var Buttons = require("./buttons");
var Button = require("./button");
var Axes = require("./axes");
var Axis = require("./axis");
var Touches = require("./touches");
"use strict";


var abs = Math.abs,
    sign = Mathf.sign,
    clamp = Mathf.clamp,

    AxisType = Enums.AxisType,
    MOUSE_BUTTONS = {
        "0": "mouse0",
        "1": "mouse1",
        "2": "mouse2"
    };


function Input() {

    EventEmitter.call(this);

    this.axes = new Axes;
    this.buttons = new Buttons;

    this.mouseWheel = 0;
    this.mousePosition = new Vec2;
    this.mouseDelta = new Vec2;
    this.mouseMoveNeedsUpdate = false;

    this.touches = new Touches;
    this.touchesMoveNeedsUpdate = false;
    this.acceleration = new Vec3;

    this.frameCount = 0;
    this._frameCount = undefined;

    this.time = 0;
    this._time = undefined;

    this._SYNC = {};
}

EventEmitter.extend(Input);


Input.prototype.update = function () {
    var axes = this.axes,
        buttons = this.buttons.hash,
        button, altButton,
        axis, value, type, touch, sensitivity, pos, neg, tmp, dt = Time.delta,
        i;

    this.frameCount = this._frameCount ? this._frameCount : Time.frameCount;
    this.time = this._time ? this._time : Time.stamp();

    this.mouseMoveNeedsUpdate = true;
    this.touchesMoveNeedsUpdate = true;

    for (i = axes.length; i--;) {
        axis = axes[i];
        value = axis.value;
        type = axis.type;
        sensitivity = axis.sensitivity;

        if (type === AxisType.Button) {
            button = buttons[axis.negButton];
            altButton = buttons[axis.altNegButton];
            neg = button && button.value || altButton && altButton.value;

            button = buttons[axis.posButton];
            altButton = buttons[axis.altPosButton];
            pos = button && button.value || altButton && altButton.value;

        } else if (type === AxisType.Mouse) {
            axis.value = this.mouseDelta[axis.axis];
            continue;

        } else if (type === AxisType.Touch) {
            touch = this.touches[axis.index];

            if (touch) {
                axis.value = touch.delta[axis.axis];
            } else {
                continue;
            }
        } else if (type === AxisType.MouseWheel) {
            value += this.mouseWheel;

        } else if (type === AxisType.Joystick) {

        }

        if (neg) value -= sensitivity * dt;
        if (pos) value += sensitivity * dt;

        if (!pos && !neg && value !== 0) {
            tmp = abs(value);
            value -= clamp(sign(value) * axis.gravity * dt, -tmp, tmp);
        }

        value = clamp(value, -1, 1);
        if (abs(value) <= axis.dead) value = 0;

        axis.value = value;
    }

    this.mouseWheel = 0;
};


Input.prototype.axis = function (name) {
    var axis = this.axes.hash[name];
    return axis ? axis.value : 0;
};


Input.prototype.mouseButton = function (id) {
    var button = this.buttons.hash[MOUSE_BUTTONS[id]];

    return button && button.value;
};


Input.prototype.mouseButtonDown = function (id) {
    var button = this.buttons.hash[MOUSE_BUTTONS[id]];

    return button && button.value && (button.frameDown >= this.frameCount);
};


Input.prototype.mouseButtonUp = function (id) {
    var button = this.buttons.hash[MOUSE_BUTTONS[id]];

    return button && (button.frameUp >= this.frameCount)
};


Input.prototype.anyKey = function () {
    var buttons = this.buttons,
        i;

    for (i = buttons.length; i--;) {
        if (buttons[i].value) return true;
    }
    return false;
};


Input.prototype.anyKeyDown = function () {
    var buttons = this.buttons,
        button,
        i;

    for (i = buttons.length; i--;) {
        if ((button = buttons[i]).value && (button.frameDown >= this.frameCount)) return true;
    }
    return false;
};


Input.prototype.key = function (name) {
    var button = this.buttons.hash[name];

    return button && button.value;
};


Input.prototype.keyDown = function (name) {
    var button = this.buttons.hash[name];

    return button && button.value && (button.frameDown >= this.frameCount);
};


Input.prototype.keyUp = function (name) {
    var button = this.buttons.hash[name];

    return button && (button.frameUp >= this.frameCount);
};


Input.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);

    json._frameCount = Time.frameCount;
    json._time = Time.stamp();

    json.buttons = this.buttons.toSYNC(json.buttons);

    json.mousePosition = this.mousePosition.toJSON(json.mousePosition);
    json.mouseDelta = this.mouseDelta.toJSON(json.mouseDelta);

    json.acceleration = this.acceleration.toJSON(json.acceleration);
    json.touches = this.touches.toSYNC(json.touches);

    return json;
};


Input.prototype.fromSYNC = function (json) {

    this._frameCount = json._frameCount;
    this._time = json._time;

    this.buttons.fromSYNC(json.buttons);

    this.mousePosition.fromJSON(json.mousePosition);
    this.mouseDelta.fromJSON(json.mouseDelta);

    this.acceleration.fromJSON(json.acceleration);
    this.touches.fromSYNC(json.touches);

    return this;
};


Input.prototype.toJSON = function (json) {
    json || (json = {});

    json.buttons = this.buttons.toJSON(json.buttons);
    json.axes = this.axes.toJSON(json.axes);

    json.mousePosition = this.mousePosition.toJSON(json.mousePosition);
    json.mouseDelta = this.mouseDelta.toJSON(json.mouseDelta);

    json.acceleration = this.acceleration.toJSON(json.acceleration);
    json.touches = this.touches.toJSON(json.touches);

    return json;
};


Input.prototype.fromJSON = function (json) {

    this.buttons.fromJSON(json.buttons);
    this.axes.fromJSON(json.axes);

    this.mousePosition.fromJSON(json.mousePosition);
    this.mouseDelta.fromJSON(json.mouseDelta);

    this.acceleration.fromJSON(json.acceleration);
    this.touches.fromJSON(json.touches);

    return this;
};


module.exports = new Input;

},{"../../base/event_emitter":13,"../../base/object_pool":15,"../../base/time":18,"../../math/mathf":107,"../../math/vec2":111,"../../math/vec3":112,"../enums":73,"./axes":83,"./axis":84,"./button":85,"./buttons":86,"./touches":90}],89:[function(require,module,exports){
var Vec2 = require("../../math/vec2");
"use strict";


function Touch() {

    this.id = -1;

    this.radiusX = 0;
    this.radiusY = 0;
    this.rotationAngle = 0;
    this.force = 0;

    this.delta = new Vec2;
    this.position = new Vec2;

    this._last = new Vec2;
    this._first = false;

    this._SYNC = {};
};


Touch.prototype.clear = function () {

    this.id = -1;

    this.position.set(0, 0);
    this.delta.set(0, 0);
    this._last.set(0, 0);

    this.radiusX = 0;
    this.radiusY = 0;
    this.rotationAngle = 0;
    this.force = 0;

    this._first = false;

    return this;
};


Touch.prototype.fromEvent = function (e) {
    var position = this.position,
        delta = this.delta,
        last = this._last,
        first = this._first,
        element = e.target || e.srcElement,
        offsetX = element.offsetLeft,
        offsetY = element.offsetTop,
        x = (e.pageX || e.clientX) - offsetX,
        y = (e.pageY || e.clientY) - offsetY;

    last.x = first ? position.x : x;
    last.y = first ? position.y : y;

    position.x = x;
    position.y = y;

    delta.x = position.x - last.x;
    delta.y = position.y - last.y;

    this.radiusX = (e.radiusX || e.webkitRadiusX || e.mozRadiusX || e.oRadiusX || e.msRadiusX || 1);
    this.radiusY = (e.radiusY || e.webkitRadiusY || e.mozRadiusY || e.oRadiusY || e.msRadiusY || 1);
    this.rotationAngle = (e.rotationAngle || e.webkitRotationAngle || e.mozRotationAngle || e.oRotationAngle || e.msRotationAngle || 0);
    this.force = (e.force || e.webkitForce || e.mozForce || e.oForce || e.msForce || 1);

    this._first = true;

    return this;
};


Touch.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);

    json.id = this.id;

    json.delta = this.delta.toJSON(json.delta);
    json.position = this.position.toJSON(json.position);

    json._last = this._last.toJSON(json._last);
    json._first = this._first;

    return json;
};


Touch.prototype.fromSYNC = function (json) {

    this.id = json.id;

    this.delta.fromJSON(json.delta);
    this.position.fromJSON(json.position);

    this._last.fromJSON(json._last);
    this._first = json._first;

    return this;
};


Touch.prototype.toJSON = function (json) {
    json || (json = {});

    json.id = this.id;

    json.delta = this.delta.toJSON(json.delta);
    json.position = this.position.toJSON(json.position);

    json._last = this._last.toJSON(json._last);
    json._first = this._first;

    return json;
};


Touch.prototype.fromJSON = function (json) {
    this.id = json.id;

    this.delta.fromJSON(json.delta);
    this.position.fromJSON(json.position);

    this._last.fromJSON(json._last);
    this._first = json._first;

    return this;
};


module.exports = Touch;

},{"../../math/vec2":111}],90:[function(require,module,exports){
var ObjectPool = require("../../base/object_pool");
var Touch = require("./touch");
"use strict";


var TOUCH_POOL = new ObjectPool(Touch),
    OBJECT_POOL = new ObjectPool(Object);


function Touches() {

    Array.call(this);
    this._SYNC = {};
}

Touches.prototype = Object.create(Array.prototype);
Touches.prototype.constructor = Touches;
Touches.TOUCH_POOL = TOUCH_POOL;


Touches.prototype.start = function (index, targetTouch) {
    var touch = TOUCH_POOL.create();

    touch.clear();
    touch.id = targetTouch.identifier;
    touch.fromEvent(targetTouch);

    this.push(touch);

    return touch;
};


Touches.prototype.end = function (index) {
    var touch = this[index];

    TOUCH_POOL.removeObject(touch);
    this.splice(index, 1);

    return touch;
};


Touches.prototype.cancel = function () {

    TOUCH_POOL.clear();
    this.length = 0;

    return this;
};


Touches.prototype.move = function (index, targetTouch) {
    var touch = this[index];

    touch.fromEvent(targetTouch);

    return touch;
};


Touches.prototype.toSYNC = function (json) {
    json || (json = this._SYNC);
    var jsonTouches = json.touches || (json.touches = []),
        i = this.length;

    jsonTouches.length = 0;
    OBJECT_POOL.clear();

    while (i--) jsonTouches[i] = this[i].toSYNC(OBJECT_POOL.create());

    return json;
};


Touches.prototype.fromSYNC = function (json) {
    var jsonTouches = json.touches,
        i = jsonTouches.length;

    this.length = 0;
    TOUCH_POOL.clear();

    while (i--) this[i] = TOUCH_POOL.create().fromSYNC(jsonTouches[i]);

    return this;
};


Touches.prototype.toJSON = function (json) {
    json || (json = {});
    var jsonTouches = json.touches || (json.touches = []),
        i;

    for (i = this.length; i--;) jsonTouches[i] = this[i].toJSON(jsonTouches[i]);
    return json;
};


Touches.prototype.fromJSON = function (json) {
    var jsonTouches = json.touches,
        touch, i, j, tl;

    for (i = jsonTouches.length, tl = this.length, j = tl; i--;) {
        if (i < tl) {
            this.splice(j--, 1);
            TOUCH_POOL.removeObject(this[j]);
        }

        if ((touch = this[i])) {
            touch.fromJSON(jsonTouches[i]);
        } else {
            this[i] = TOUCH_POOL.create().fromJSON(jsonTouches[i]);
        }
    }

    return this;
};


module.exports = Touches;

},{"../../base/object_pool":15,"./touch":89}],91:[function(require,module,exports){
var Class = require("../base/class");
var ObjectPool = require("../base/object_pool");
"use strict";


function Prefab(object) {

    Class.call(this);

    this.object = object.toJSON();
    this.objectPool = new ObjectPool(object.constructor);
}

Class.extend(Prefab);


Prefab.prototype.create = function () {
    var object = this.objectPool.create();

    object.fromJSON(this.object);
    object.on("remove", onRemove, this);

    return object;
};


Prefab.prototype.setObject = function (object) {

    this.object = object.toJSON();
    this.objectPool = new ObjectPool(object.constructor);

    return this;
};


Prefab.prototype.empty = function () {

    this.objectPool.empty();

    return this;
};


Prefab.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.object = this.object;

    return json;
};


Prefab.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.object = json.object;
    this.objectPool = new ObjectPool(Class._classes[json.object._className]);

    return this;
};


function onRemove(object) {

    this.objectPool.removeObject(object);
    object.off("remove", onRemove, this);
};


module.exports = Prefab;

},{"../base/class":8,"../base/object_pool":15}],92:[function(require,module,exports){
var EventEmitter = require("../../base/event_emitter");
var Device = require("../../base/device");
var Dom = require("../../base/dom");
var Config = require("../../base/config");
"use strict";

var addEvent = Dom.addEvent,
    removeEvent = Dom.removeEvent,
    addMeta = Dom.addMeta,
    floor = Math.floor,

    CANVAS_ID = 0,
    SCALE_REG = /-scale\s *=\s*[.0-9]+/g,
    CANVAS_STYLE = [
        "position: fixed;",
        "top: 50%;",
        "left: 50%;",
        "padding: 0px;",
        "margin: 0px;"
    ].join("\n"),
    VIEWPORT, VIEWPORT_WIDTH, VIEWPORT_HEIGHT, VIEWPORT_SCALE;

addMeta("viewport", "viewport", "initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no");
addMeta("viewport-width", "viewport", "width=device-width");
addMeta("viewport-height", "viewport", "height=device-height");

VIEWPORT = document.getElementById("viewport");
VIEWPORT_WIDTH = document.getElementById("viewport-width");
VIEWPORT_HEIGHT = document.getElementById("viewport-height");
VIEWPORT_SCALE = VIEWPORT.getAttribute("content");

function windowOnResize() {
    VIEWPORT.setAttribute("content", VIEWPORT_SCALE.replace(SCALE_REG, "-scale=" + Device.invPixelRatio));
    VIEWPORT_WIDTH.setAttribute("content", "width=" + window.innerWidth);
    VIEWPORT_HEIGHT.setAttribute("content", "height=" + window.innerHeight);
    window.scrollTo(0, 1);
}

addEvent(window, "resize orientationchange", windowOnResize);
windowOnResize();

/**
 * @class Canvas
 * @extends EventEmitter
 * @brief canvas helper
 * @param {Object} options
 */

function Canvas(opts) {
    opts || (opts = {});

    EventEmitter.call(this);

    /**
     * @property Number canvasId
     * @memberof Canvas
     */
    this.canvasId = ++CANVAS_ID;

    /**
     * @property Boolean fullScreen
     * @memberof Canvas
     */
    this.fullScreen = opts.fullScreen ? opts.fullScreen : (opts.width == undefined && opts.height == undefined) ? true : false;

    /**
     * @property String customCursor
     * @memberof Canvas
     */
    this.customCursor = opts.customCursor != undefined ? opts.customCursor : false;

    /**
     * @property Boolean hideMouse
     * @memberof Canvas
     */
    this.hideMouse = opts.hideMouse != undefined ? opts.hideMouse : false;

    /**
     * @property Number width
     * @memberof Canvas
     */
    this.width = opts.width != undefined ? opts.width : window.innerWidth;

    /**
     * @property Number height
     * @memberof Canvas
     */
    this.height = opts.height != undefined ? opts.height : window.innerHeight;

    /**
     * @property Number aspect
     * @memberof Canvas
     */
    this.aspect = this.width / this.height;

    /**
     * @property Number pixelWidth
     * @memberof Canvas
     */
    this.pixelWidth = this.width;

    /**
     * @property Number pixelHeight
     * @memberof Canvas
     */
    this.pixelHeight = this.height;

    /**
     * @property HTMLCanvasElement element
     * @memberof Canvas
     */
    this.element = undefined;
}

EventEmitter.extend(Canvas);


Canvas.prototype.init = function () {
    if (this.element) this.destroy();
    var element = document.createElement("canvas"),
        style = element.style;

    element.id = "canvas-" + this.canvasId;
    style.cssText = CANVAS_STYLE;
    style.cursor = this.customCursor ? "url(" + this.customCursor + ")" : this.hideMouse ? "none" : "default";
    document.body.appendChild(element);

    if (!Config.debug) {
        element.oncontextmenu = function () {
            return false;
        };
    }

    addEvent(window, "resize orientationchange", this.handleResize, this);

    element.requestPointerLock || (element.requestPointerLock = (
    element.webkitRequestPointerLock ||
    element.mozRequestPointerLock ||
    element.oRequestPointerLock ||
    element.msRequestPointerLock
    ));
    element.exitPointerLock || (element.exitPointerLock = (
    document.webkitExitPointerLock ||
    document.mozExitPointerLock ||
    document.oExitPointerLock ||
    document.msExitPointerLock
    ));
    element.requestFullscreen || (element.requestFullscreen = (
    element.webkitRequestFullscreen ||
    element.mozRequestFullscreen ||
    element.oRequestFullscreen ||
    element.msRequestFullscreen
    ));
    element.exitFullscreen || (element.exitFullscreen = (
    element.webkitExitFullscreen ||
    element.mozExitFullscreen ||
    element.oExitFullscreen ||
    element.msExitFullscreen
    ));

    this.element = element;
    this.handleResize();
};


Canvas.prototype.clear = function () {
    if (!this.element) return this;

    removeEvent(window, "resize orientationchange", this.handleResize, this);
    document.body.removeChild(this.element);
    this.element = undefined;

    return this;
};

/**
 * @method setFullscreen
 * @memberof Canvas
 * @brief sets fullScreen boolean
 * @param Number width
 */
Canvas.prototype.setFullscreen = function (value) {
    if (!this.element || this.fullScreen === value) return this;

    this.fullScreen = !!value;
    this.handleResize();

    return this;
};

/**
 * @method setWidth
 * @memberof Canvas
 * @brief sets width and updates aspect
 * @param Number width
 */
Canvas.prototype.setWidth = function (width) {
    if (!this.element || this.width === width) return this;

    this.width = width;
    this.fullScreen = false;
    this.aspect = this.width / this.height;

    this.handleResize();

    return this;
};

/**
 * @method setHeight
 * @memberof Canvas
 * @brief sets height and updates aspect
 * @param Number height
 */
Canvas.prototype.setHeight = function (height) {
    if (!this.element || this.height === height) return this;

    this.height = height;
    this.fullScreen = false;
    this.aspect = this.width / this.height;

    this.handleResize();

    return this;
};

/**
 * @method style
 * @memberof Canvas
 * @brief sets style of html element
 * @param String key
 * @param String value
 */
Canvas.prototype.style = function (key, value) {
    if (!this.element) return this;

    this.element.style[key] = value;
    return this;
};

/**
 * @method setBackgroundColor
 * @memberof Canvas
 * @brief sets html background color
 * @param String color
 */
Canvas.prototype.setBackgroundColor = function (color) {
    if (!this.element) return this;

    this.element.style.background = color;
    return this;
};


Canvas.prototype.handleResize = function () {
    var w = window.innerWidth,
        h = window.innerHeight,
        aspect = w / h,
        element = this.element,
        style = element.style,
        width, height;

    if (this.fullScreen) {
        width = w;
        height = h;
    } else {
        if (aspect > this.aspect) {
            width = h * this.aspect;
            height = h;
        } else {
            width = w;
            height = w / this.aspect;
        }
    }

    this.pixelWidth = floor(width);
    this.pixelHeight = floor(height);

    element.width = width;
    element.height = height;

    style.marginLeft = -floor((width + 1) * 0.5) + "px";
    style.marginTop = -floor((height + 1) * 0.5) + "px";

    style.width = floor(width) + "px";
    style.height = floor(height) + "px";

    this.emit("resize");
};


module.exports = Canvas;

},{"../../base/config":9,"../../base/device":10,"../../base/dom":11,"../../base/event_emitter":13}],93:[function(require,module,exports){
var Class = require("../../base/class");
var Enums = require("../enums");
"use strict";

/**
 * @class RenderTarget
 * @extends Class
 * @brief WebGL Render Target helper
 */

function RenderTarget(opts) {
    opts || (opts = {});

    Class.call(this);

    this.width = opts.width || 512;
    this.height = opts.height || 512;

    this.invWidth = 1 / this.width;
    this.invHeight = 1 / this.height;

    this.depthOnly = opts.depthOnly != undefined ? !!opts.depthOnly : false;
    this.depthBuffer = opts.depthBuffer != undefined ? !!opts.depthBuffer : true;
    this.stencilBuffer = opts.stencilBuffer != undefined ? !!opts.stencilBuffer : true;

    this.generateMipmap = opts.generateMipmap != undefined ? !!opts.generateMipmap : true;
    this.flipY = opts.flipY != undefined ? !!opts.flipY : true;
    this.premultiplyAlpha = opts.premultiplyAlpha != undefined ? !!opts.premultiplyAlpha : false;

    this.anisotropy = opts.anisotropy != undefined ? opts.anisotropy : 1;

    this.filter = opts.filter != undefined ? opts.filter : Enums.FilterMode.Linear;
    this.format = opts.format != undefined ? opts.format : Enums.TextureFormat.RGBA;
    this.wrap = opts.wrap != undefined ? opts.wrap : Enums.TextureWrap.Repeat;

    this._webglUsed = 0;
    this._webgl = undefined;
    this._webglFramebuffer = undefined;
    this._webglRenderbuffer = undefined;
}

Class.extend(RenderTarget);


RenderTarget.prototype.clone = function () {

    return new RenderTarget().copy(this);
};


RenderTarget.prototype.copy = function (other) {

    this.width = other.width;
    this.height = other.height;

    this.invWidth = other.invWidth;
    this.invHeight = other.invHeight;

    this.generateMipmap = other.generateMipmap;
    this.flipY = other.flipY;
    this.premultiplyAlpha = other.premultiplyAlpha;

    this.anisotropy = other.anisotropy;

    this.filter = other.filter;
    this.format = other.format;
    this.wrap = other.wrap;

    return this;
};


RenderTarget.prototype.setWidth = function (width) {

    this.width = width || this.width;
    this.needsUpdate = true;
};


RenderTarget.prototype.setHeight = function (height) {

    this.height = height || this.height;
    this.needsUpdate = true;
};


RenderTarget.prototype.setMipmap = function (value) {

    this.generateMipmap = value != undefined ? !!value : !this.generateMipmap;
    this.needsUpdate = true;
};


RenderTarget.prototype.setAnisotropy = function (value) {

    this.anisotropy = value;
    this.needsUpdate = true;
};


RenderTarget.prototype.setFilter = function (value) {

    this.filter = value;
    this.needsUpdate = true;
};


RenderTarget.prototype.setFormat = function (value) {

    this.format = value;
    this.needsUpdate = true;
};


RenderTarget.prototype.setWrap = function (value) {

    this.wrap = value;
    this.needsUpdate = true;
};


RenderTarget.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.width = this.width;
    json.height = this.height;

    json.invWidth = this.invWidth;
    json.invHeight = this.invHeight;

    json.generateMipmap = this.generateMipmap;
    json.flipY = this.flipY;
    json.premultiplyAlpha = this.premultiplyAlpha;

    json.anisotropy = this.anisotropy;

    json.filter = this.filter;
    json.format = this.format;
    json.wrap = this.wrap;

    return json;
};


RenderTarget.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.width = json.width;
    this.height = json.height;

    this.invWidth = json.invWidth;
    this.invHeight = json.invHeight;

    this.generateMipmap = json.generateMipmap;
    this.flipY = json.flipY;
    this.premultiplyAlpha = json.premultiplyAlpha;

    this.anisotropy = json.anisotropy;

    this.filter = json.filter;
    this.format = json.format;
    this.wrap = json.wrap;

    return this;
};


module.exports = RenderTarget;

},{"../../base/class":8,"../enums":73}],94:[function(require,module,exports){
var RenderTarget = require("./render_target");
"use strict";

/**
 * @class RenderTargetCube
 * @extends RenderTarget
 * @brief WebGL Render Target helper
 */

function RenderTargetCube(opts) {
    opts || (opts = {});

    RenderTarget.call(this, opts);

    this.activeCubeFace = 0;
}

RenderTarget.extend(RenderTargetCube);


RenderTargetCube.prototype.clone = function () {

    return new RenderTargetCube().copy(this);
};


RenderTargetCube.prototype.copy = function (other) {
    RenderTarget.prototype.copy.call(this, other);

    return this;
};


RenderTargetCube.prototype.toJSON = function (json) {
    json = RenderTarget.prototype.toJSON.call(this, json);

    json.activeCubeFace = this.activeCubeFace;

    return json;
};


RenderTargetCube.prototype.fromJSON = function (json) {
    RenderTarget.prototype.fromJSON.call(this, json);

    this.activeCubeFace = json.activeCubeFace;

    return this;
};


module.exports = RenderTargetCube;

},{"./render_target":93}],95:[function(require,module,exports){
var EventEmitter = require("../../base/event_emitter");
var Device = require("../../base/device");
var Dom = require("../../base/dom");
var util = require("../../base/util");

var Mathf = require("../../math/mathf");
var Color = require("../../math/color");
var Rect = require("../../math/rect");
var RectOffset = require("../../math/rect_offset");
var Vec2 = require("../../math/vec2");
var Vec3 = require("../../math/vec3");
var Vec4 = require("../../math/vec4");
var Quat = require("../../math/quat");
var Mat2 = require("../../math/mat2");
var Mat3 = require("../../math/mat3");
var Mat4 = require("../../math/mat4");

var Enums = require("../enums");
var Log = require("../../base/log");
var Config = require("../../base/config");
var RenderTarget = require("./render_target");
var RenderTargetCube = require("./render_target_cube");
var ShaderChunks = require("./shader_chunks");

var Texture = require("../assets/texture");
var TextureCube = require("../assets/texture_cube");
var MeshFilter = require("../components/mesh_filter");
var Sprite = require("../components/sprite");
var Emitter = require("../components/particle_system/emitter");
var Emitter2D = require("../components/particle_system/emitter_2d");
"use strict";


var Blending = Enums.Blending,
    ShadowMapType = Enums.ShadowMapType,
    CullFace = Enums.CullFace,
    Side = Enums.Side,

    LightType = Enums.LightType,

    FilterMode = Enums.FilterMode,
    TextureFormat = Enums.TextureFormat,
    TextureWrap = Enums.TextureWrap,

    getWebGLContext = Dom.getWebGLContext,
    addEvent = Dom.addEvent,
    removeEvent = Dom.removeEvent,

    createProgram = Dom.createProgram,

    merge = util.merge,

    max = Math.max,
    floor = Math.floor,
    clamp = Mathf.clamp,
    isPowerOfTwo = Mathf.isPowerOfTwo,

    defineProperty = Object.defineProperty,
    EMPTY_ARRAY = [];

/**
 * @class Renderer
 * @extends EventEmitter
 * @param {object} options
 */

function Renderer(opts) {
    opts || (opts = {});

    EventEmitter.call(this);

    this.autoClear = opts.autoClear != undefined ? opts.autoClear : true;
    this.autoClearColor = opts.autoClearColor != undefined ? opts.autoClearColor : true;
    this.autoClearDepth = opts.autoClearDepth != undefined ? opts.autoClearDepth : true;
    this.autoClearStencil = opts.autoClearStencil != undefined ? opts.autoClearStencil : true;

    this.shadowMapEnabled = opts.shadowMapEnabled != undefined ? opts.shadowMapEnabled : true;
    this.shadowMapAutoUpdate = opts.shadowMapAutoUpdate != undefined ? opts.shadowMapAutoUpdate : true;
    this.shadowMapType = opts.shadowMapType != undefined ? opts.shadowMapType : ShadowMapType.PCFShadowMap;
    this.shadowMapCullFace = opts.shadowMapCullFace != undefined ? opts.shadowMapCullFace : CullFace.Front;
    this.shadowMapDebug = opts.shadowMapDebug != undefined ? opts.shadowMapDebug : false;
    this.shadowMapCascade = opts.shadowMapCascade != undefined ? opts.shadowMapCascade : false;

    var _lastCamera = undefined,
        _lastResizeFn = undefined,
        _lastScene = undefined,
        _lastGUI = undefined,

        _mat4 = new Mat4,
        _projScreenMatrix = new Mat4,
        _quat = new Quat,
        _vector2 = new Vec2,
        _vector3 = new Vec3,
        _vector3_2 = new Vec3,
        _vector4 = new Vec4,
        _rect = new Rect,
        _rect_2 = new Rect,
        _rectOffset = new RectOffset,
        _color = new Color,

        _shaders = {},
        _lastBuffers = undefined,
        _spriteBuffers = undefined,

        _textTextures = {},
        _canvas2d = undefined,
        _ctx = undefined;

    /**
     * @method render
     * @memberof Renderer
     * @brief renderers scene from camera's perspective
     * @param Camera camera
     * @param Scene scene
     * @param GUI gui
     * @param RenderTarget renderTarget
     */
    function render(camera, scene, gui, renderTarget) {
        if (!_context || !camera) return;
        var lineWidth, blending, cullFace,
            background = camera.background,
            i, il;

        setRenderTarget(renderTarget);

        if (_lastClearColor.r !== background.r || _lastClearColor.g !== background.g || _lastClearColor.b !== background.b) {
            _lastClearColor.copy(background);
            _gl.clearColor(background.r, background.g, background.b, 1);
            if (!this.autoClear) clearCanvas(true, this.autoClearDepth, this.autoClearStencil);
        }
        if (_lastCamera !== camera) {

            if (camera.autoResize) {
                var w = _canvas.pixelWidth,
                    h = _canvas.pixelHeight;

                camera.set(w, h);
                setViewport(0, 0, w, h);

                if (_lastResizeFn) _canvas.off("resize", _lastResizeFn);

                _lastResizeFn = function () {
                    var w = this.pixelWidth,
                        h = this.pixelHeight;

                    camera.set(w, h);
                    setViewport(0, 0, w, h);
                };

                _canvas.on("resize", _lastResizeFn);
            } else {
                setViewport(0, 0, camera.width, camera.height);
            }

            _lastCamera = camera;
        }
        if (scene && _lastScene !== scene) {
            if (_lastScene) removeSceneEvents(_lastScene);
            addSceneEvents(scene);

            _lastScene = scene;
        }
        if (gui && _lastGUI !== gui) {
            if (_lastGUI) removeGUIEvents(_lastGUI);
            addGUIEvents(gui);

            _lastScene = gui;
        }

        _projScreenMatrix.mmul(camera.projection, camera.view);
        if (this.autoClear) clearCanvas(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);

        lineWidth = _lastLineWidth;
        blending = _lastBlending;
        cullFace = _lastCullFace;

        if (scene) {
            var componentManagers = scene.componentManagers,
                ambient = scene.world.ambient,
                lights = componentManagers.Light,
                meshFilters = componentManagers.MeshFilter,
                sprites = componentManagers.Sprite,
                particleSystems = componentManagers.ParticleSystem;

            lights = lights ? lights.components : EMPTY_ARRAY;

            if (meshFilters) renderMeshFilters(camera, lights, ambient, meshFilters);
            if (sprites) renderSprites(camera, lights, ambient, sprites);
            if (particleSystems) renderParticleSystems(camera, lights, ambient, particleSystems);
        }
        if (gui) {
            var componentManagers = gui.componentManagers,
                guiContents = componentManagers.GUIContent,
                guiContent, transform;

            useDepth && setDepthTest(false);

            guiContents = guiContents ? guiContents.components : EMPTY_ARRAY;

            for (i = 0, il = guiContents.length; i < il; i++) {
                guiContent = guiContents[i];
                transform = guiContent.guiTransform;

                if (!transform) continue;

                transform.updateMatrices(camera.guiProjection);
                renderGUIContent(camera, transform, guiContent);
            }

            useDepth && setDepthTest(true);
        }

        setCullFace(cullFace);
        setBlending(blending);
        setLineWidth(lineWidth);
    };
    this.render = render;


    var _guiBuffers = undefined,
        _guiContentShader = undefined;

    function renderGUIContent(camera, transform, guiContent) {
        if (!_guiBuffers) createGUIBuffers();
        if (!_guiContentShader) createGUIContentShader();

        var force = setProgram(_guiContentShader.program),
            uniforms = _guiContentShader.uniforms,
            attributes = _guiContentShader.attributes,

            texture = guiContent.texture,
            text = guiContent.text,

            style = guiContent.style,
            styleState = style._state,
            state = style[styleState],

            innerRect = _rect.copy(transform.position),
            outerRect = _rect_2;

        if (texture) {

        } else if (text) {
            texture = createTextTexture(guiContent, innerRect, text, style, state);
            outerRect.copy(innerRect);
        } else {
            return;
        }

        if (_lastBuffers !== _guiBuffers) {
            disableAttributes();

            attributes.position.set(_guiBuffers._webglVertexBuffer);
            attributes.uv.set(_guiBuffers._webglUvBuffer);

            _lastBuffers = _guiBuffers;
        }

        style.padding.add(outerRect);
        style.margin.add(outerRect);

        uniforms.mvpMatrix.set(transform.modelView, force);
        uniforms.size.set(_vector2.set(outerRect.width, outerRect.height), force);
        uniforms.crop.set(_vector4.set(0, 0, 1, 1), force);
        uniforms.alpha.set(style.alpha, force);

        _gl.activeTexture(_gl.TEXTURE0);
        _gl.bindTexture(_gl.TEXTURE_2D, texture._webgl);
        _gl.uniform1i(uniforms.texture.location, 0);

        _gl.drawArrays(_gl.TRIANGLE_STRIP, 0, _guiBuffers._webglVertexCount);
    }


    function createTextTexture(guiContent, innerRect, text, style, state) {
        var texture = _textTextures[guiContent._id];
        if (!guiContent._needsUpdate) {
            innerRect.width = texture.width;
            innerRect.height = texture.height;
            return texture;
        }

        var canvas = _canvas2d,
            TEXTURE_2D = _gl.TEXTURE_2D,

            lineHeight = style.lineHeight,
            lineSpacing = style.lineSpacing,
            halfLineSpacing = lineSpacing * 0.5,
            fontHeight = determineFontHeight(style.font),
            ctxStyle = style.fontStyle + " " + style.fontSize + "pt " + style.font,

            maxWidth = innerRect.width,
            maxHeight = innerRect.height,
            width, height,

            lines = wwLastLines,
            line, x = 0,
            y = 0,
            i, il;

        texture = texture || (_textTextures[guiContent._id] = {});

        _ctx.font = ctxStyle;
        lineHeight = lineHeight > fontHeight ? lineHeight : fontHeight;

        if (style.wordWrap && !style.stretchWidth) {
            wordWrap(text, maxWidth, lineHeight, lineSpacing);
            width = wwLastX;
            height = wwLastY;
        } else {
            lines.length = 0;
            lines.push(text);
            width = _ctx.measureText(text).width;
            height = lineHeight + lineSpacing;
        }

        canvas.width = style.fixedWidth || width;
        canvas.height = style.fixedHeight || height;

        _ctx.font = ctxStyle;
        _ctx.fillStyle = state.text.toRGB();
        _ctx.textAlign = "left";
        _ctx.textBaseline = "top";

        for (i = 0, il = lines.length; i < il; i++) {
            line = lines[i];
            y += halfLineSpacing;
            _ctx.fillText(line, x, y);
            y += lineHeight + halfLineSpacing;
        }


        texture.width = innerRect.width = width;
        texture.height = innerRect.height = height;

        texture._webgl = texture._webgl || (texture._webgl = _gl.createTexture());

        _gl.bindTexture(TEXTURE_2D, texture._webgl);

        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, 0);

        _gl.texImage2D(TEXTURE_2D, 0, _gl.RGBA, _gl.RGBA, _gl.UNSIGNED_BYTE, canvas);

        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST);
        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST);

        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);

        _gl.bindTexture(TEXTURE_2D, null);

        guiContent._needsUpdate = false;

        return texture;
    }


    var wwLastLines = [],
        wwLastX = 0,
        wwLastY = 0;

    function wordWrap(text, maxWidth, lineHeight, lineSpacing) {
        wwLastLines.length = 0;
        wwLastX = 0;
        wwLastY = lineHeight + lineSpacing;

        var words = text.split(" "),
            line = "",
            word, testLine, testWidth,
            i = 0,
            il = words.length;

        for (; i < il; i++) {
            word = words[i];
            testLine = line + word + " ";
            testWidth = _ctx.measureText(testLine).width;

            if (testWidth > maxWidth && i > 0) {
                wwLastLines.push(line);
                line = word + " ";
                wwLastY += lineHeight + lineSpacing;

                testWidth = _ctx.measureText(line).width;
                wwLastX = testWidth > wwLastX ? testWidth : wwLastX;
            } else {
                line = testLine;
            }
        }
        wwLastLines.push(line);
    }


    var heightCache = {};

    function determineFontHeight(fontStyle) {
        var result = heightCache[fontStyle];

        if (!result) {
            var body = document.body || document.getElementsByTagName("body")[0],
                dummy = document.createElement("div"),
                dummyText = document.createTextNode("M");

            dummy.appendChild(dummyText);
            dummy.setAttribute("style", "font: " + fontStyle + ";font-size:1em;line-height:1;position:absolute;top:0;left:0;padding:0;margin:0;");
            body.appendChild(dummy);

            result = dummy.offsetHeight;
            heightCache[fontStyle] = result;

            body.removeChild(dummy);
        }

        return result;
    }


    function renderMeshFilters(camera, lights, ambient, meshFilters) {
        var components = meshFilters.components,
            meshFilter, transform, i, il;

        for (i = 0, il = components.length; i < il; i++) {
            meshFilter = components[i];
            transform = meshFilter.transform || meshFilter.transform2d;

            if (!transform) continue;

            transform.updateMatrices(camera.view);
            renderMeshFilter(camera, lights, ambient, transform, meshFilter);
        }
    }

    function renderMeshFilter(camera, lights, ambient, transform, meshFilter) {
        var mesh = meshFilter.mesh,
            material = meshFilter.material,
            side, shader;

        if (!mesh || !material) return;

        setBlending(material.blending);

        side = material.side;
        if (side === Side.Front) {
            setCullFace(CullFace.Back);
        } else if (side === Side.Back) {
            setCullFace(CullFace.Front);
        } else if (side === Side.Both) {
            setCullFace();
        }

        createMeshBuffers(mesh);
        shader = createShader(mesh, material, lights);
        shader.bindMaterial(meshFilter, mesh, material, transform, camera, lights, ambient);

        if (!meshFilter._webglMeshInitted) {
            mesh._webglUsed += 1;
            shader.markAsUsed(material);
            meshFilter._webglMeshInitted = true;
        }

        if (material.wireframe) {
            setLineWidth(material.wireframeLineWidth);
            _gl.drawElements(_gl.LINES, mesh._webglLineCount, _gl.UNSIGNED_SHORT, 0);
        } else {
            _gl.drawElements(_gl.TRIANGLES, mesh._webglIndexCount, _gl.UNSIGNED_SHORT, 0);
        }
    }


    function renderSprites(camera, lights, ambient, sprites) {
        var layers = sprites.layers,
            sprite, transform, components, i, il, j, jl;

        for (i = 0, il = layers.length; i < il; i++) {
            components = layers[i];
            if (!components) continue;

            for (j = 0, jl = components.length; j < jl; j++) {
                sprite = components[j];
                transform = sprite.transform || sprite.transform2d;

                if (!transform) continue;

                transform.updateMatrices(camera.view);
                renderSprite(camera, lights, ambient, transform, sprite);
            }
        }
    }

    function renderSprite(camera, lights, ambient, transform, sprite) {
        var material = sprite.material,
            side, shader;

        if (!material) return;
        if (!_spriteBuffers) createSprite();

        setBlending(material.blending);

        side = material.side;
        if (side === Side.Front) {
            setCullFace(CullFace.Back);
        } else if (side === Side.Back) {
            setCullFace(CullFace.Front);
        } else if (side === Side.Both) {
            setCullFace();
        }

        shader = createShader(sprite, material, lights);

        if (!sprite._webglInitted) {
            shader.markAsUsed(material);
            sprite._webglInitted = true;
        }

        shader.bindMaterial(sprite, sprite, material, transform, camera, lights, ambient);

        if (material.wireframe) {
            setLineWidth(material.wireframeLineWidth);
            _gl.drawArrays(_gl.LINE_STRIP, 0, _spriteBuffers._webglVertexCount);
        } else {
            _gl.drawArrays(_gl.TRIANGLE_STRIP, 0, _spriteBuffers._webglVertexCount);
        }
    }


    function renderParticleSystems(camera, lights, ambient, particleSystems) {
        var components = particleSystems.components,
            particleSystem, transform, i, il;

        for (i = 0, il = components.length; i < il; i++) {
            particleSystem = components[i];
            transform = particleSystem.transform || particleSystem.transform2d;

            if (!transform) continue;

            transform.updateMatrices(camera.view);
            renderParticleSystem(camera, lights, ambient, transform, particleSystem);
        }
    }

    function renderParticleSystem(camera, lights, ambient, transform, particleSystem) {
        var emitters = particleSystem.emitters,
            material = particleSystem.material,
            shader, emitter,
            i = emitters.length;

        setCullFace(CullFace.Back);

        while (i--) {
            emitter = emitters[i];

            if (emitter instanceof Emitter) {
                material = emitter.material;
                if (!material) return;

                setBlending(material.blending);
                setCullFace(CullFace.Back);

                createEmitterBuffers(emitter, transform);
                shader = createShader(emitter, material, lights);
                shader.bindMaterial(particleSystem, emitter, material, transform, camera, lights, ambient);

                if (!emitter._webglInitted) {
                    shader.markAsUsed(material);
                    emitter._webglInitted = true;
                }

                _gl.drawArrays(_gl.POINTS, 0, emitter._webglParticleCount);
            } else if (emitter instanceof Emitter2D) {
                material = emitter.material;
                if (!material) return;

                setBlending(material.blending);
                setCullFace(CullFace.Back);

                createEmitter2DBuffers(emitter, transform);
                shader = createShader(emitter, material, lights);
                shader.bindMaterial(particleSystem, emitter, material, transform, camera, lights, ambient);

                if (!emitter._webglInitted) {
                    shader.markAsUsed(material);
                    emitter._webglInitted = true;
                }

                _gl.drawArrays(_gl.POINTS, 0, emitter._webglParticleCount);
            }
        }
    }

    function addSceneEvents(scene) {
        var componentManagers = scene.componentManagers,
            meshFilters = componentManagers.MeshFilter || EMPTY_ARRAY,
            sprites = componentManagers.Sprite || EMPTY_ARRAY,
            particleSystems = componentManagers.ParticleSystem || EMPTY_ARRAY,
            i;

        meshFilters.forEach(onMeshFilterAdd);
        sprites.forEach(onSpriteAdd);
        particleSystems.forEach(onParticleSystemAdd);

        scene.on("addMeshFilter", onMeshFilterAdd);
        scene.on("addSprite", onSpriteAdd);
        scene.on("addParticleSystem", onParticleSystemAdd);
    }

    function removeSceneEvents(scene) {

        scene.off("addMeshFilter", onMeshFilterAdd);
        scene.off("addSprite", onSpriteAdd);
        scene.off("addParticleSystem", onMeshFilterAdd);
    }

    function onMeshFilterAdd(meshFilter) {

        meshFilter.on("remove", onMeshFilterRemove);
    }

    function onSpriteAdd(sprite) {

        sprite.on("remove", onSpriteRemove);
    }

    function onParticleSystemAdd(particleSystem) {

        particleSystem.on("remove", onParticleSystemRemove);
    }

    function onMeshFilterRemove() {
        var mesh = this.mesh;

        deleteMeshBuffers(mesh);
        deleteShader(mesh);

        this.off("remove", onMeshFilterRemove);
    }

    function onSpriteRemove() {

        deleteShader(this);

        this.off("remove", onSpriteRemove);
    }

    function onParticleSystemRemove() {
        var emitters = this.emitters,
            emitter, i = emitters.length;

        while (i--) {
            emitter = emitters[i];

            deleteEmitterBuffers(emitter);
            deleteShader(emitter);
        }

        this.off("remove", onParticleSystemRemove);
    }

    function deleteMeshBuffers(mesh) {
        if (mesh._webglUsed > 1) {
            mesh._webglUsed -= 1;
            return;
        }

        if (mesh._webglVertexBuffer != undefined) _gl.deleteBuffer(mesh._webglVertexBuffer);
        if (mesh._webglNormalBuffer != undefined) _gl.deleteBuffer(mesh._webglNormalBuffer);
        if (mesh._webglTangentBuffer != undefined) _gl.deleteBuffer(mesh._webglTangentBuffer);
        if (mesh._webglColorBuffer != undefined) _gl.deleteBuffer(mesh._webglColorBuffer);
        if (mesh._webglUvBuffer != undefined) _gl.deleteBuffer(mesh._webglUvBuffer);
        if (mesh._webglUv2Buffer != undefined) _gl.deleteBuffer(mesh._webglUv2Buffer);

        if (mesh._webglBoneIndexBuffer != undefined) _gl.deleteBuffer(mesh._webglBoneIndexBuffer);
        if (mesh._webglBoneWeightBuffer != undefined) _gl.deleteBuffer(mesh._webglBoneWeightBuffer);

        if (mesh._webglIndexBuffer != undefined) _gl.deleteBuffer(mesh._webglIndexBuffer);
        if (mesh._webglLineBuffer != undefined) _gl.deleteBuffer(mesh._webglLineBuffer);

        mesh._webglVertexArray = mesh._webglVertexArray = undefined;
        mesh._webglNormalBuffer = mesh._webglNormalArray = undefined;
        mesh._webglTangentBuffer = mesh._webglTangentArray = undefined;
        mesh._webglColorBuffer = mesh._webglColorArray = undefined;
        mesh._webglUvBuffer = mesh._webglUvArray = undefined;
        mesh._webglUv2Buffer = mesh._webglUv2Array = undefined;

        mesh._webglBoneIndexBuffer = mesh._webglBoneIndexArray = undefined;
        mesh._webglBoneWeightBuffer = mesh._webglBoneWeightArray = undefined;

        mesh._webglIndexBuffer = mesh._webglIndexArray = undefined;
        mesh._webglLineBuffer = mesh._webglLineArray = undefined;

        mesh._webglUsed = 0;
    }

    function deleteEmitterBuffers(emitter) {

        if (emitter._webglVertexBuffer != undefined) _gl.deleteBuffer(emitter._webglVertexBuffer);
        if (emitter._webglParticleBuffer != undefined) _gl.deleteBuffer(emitter._webglParticleBuffer);
        if (emitter._webglParticleColorBuffer != undefined) _gl.deleteBuffer(emitter._webglParticleColorBuffer);

        emitter._webglVertexBuffer = emitter._webglVertexArray = undefined;
        emitter._webglParticleBuffer = emitter._webglParticleArray = undefined;
        emitter._webglParticleColorBuffer = emitter._webglParticleColorArray = undefined;
    }

    function addGUIEvents(gui) {
        var componentManagers = gui.componentManagers,
            guiContents = componentManagers.GUIContent;

        if (guiContents) guiContents.forEach(onGUIContentAdd);
        gui.on("addGUIContent", onGUIContentAdd);
    }

    function removeGUIEvents(gui) {

        gui.off("addGUIContent", onGUIContentAdd);
    }

    function onGUIContentAdd(guiContent) {

        guiContent.on("remove", onGUIContentRemove);
    }

    function onGUIContentRemove() {

        deleteShader(this);

        this.off("remove", onGUIContentRemove);
    }

    function deleteShader(obj) {
        var shader = _shaders[obj._id];
        if (!shader) return;
        var material = obj.material || obj.materials,
            i;

        if (material) {
            i = material.length;

            if (i) {
                while (i--) deleteMaterial(material[i]);
            } else {
                deleteMaterial(material);
            }
        }

        if (shader.used > 1) {
            shader.used--;
            return;
        }

        _shaders[obj._id] = undefined;
        if (shader.program) _gl.deleteProgram(shader.program);
    }

    function deleteMaterial(material) {
        var materialUniforms = material.uniforms,
            key;

        for (key in materialUniforms) deleteTexture(materialUniforms[key]);
    }

    function deleteTexture(obj) {
        if (obj instanceof Texture) {
            if (obj._webglUsed > 1) {
                obj._webglUsed -= 1;
                return;
            }

            _gl.deleteTexture(obj._webgl);
            obj._webgl = undefined;
            obj._webglUsed = 0;
        } else if (obj instanceof TextureCube) {
            if (obj._webglUsed > 1) {
                obj._webglUsed -= 1;
                return;
            }

            var j = obj._webgl.length;
            while (j--) {
                _gl.deleteTexture(obj._webgl[j]);
                obj._webgl[j] = undefined;
                obj._webglUsed = 0;
            }
        }
    }

    function createMeshBuffers(mesh) {
        if (!mesh.dynamic && mesh._webglBuffersInitted) return;
        var DRAW = mesh.dynamic ? _gl.DYNAMIC_DRAW : _gl.STATIC_DRAW,
            ARRAY_BUFFER = _gl.ARRAY_BUFFER,
            ELEMENT_ARRAY_BUFFER = _gl.ELEMENT_ARRAY_BUFFER,
            bufferArray, items, item, i, len, offset, vertexIndex;

        items = mesh.vertices || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.verticesNeedUpdate) {
            bufferArray = mesh._webglVertexArray;
            if (!bufferArray || bufferArray.length !== len * 3) {
                bufferArray = mesh._webglVertexArray = new Float32Array(len * 3);
                mesh._webglVertexCount = len;
            }

            i = len;
            while (i--) {
                item = items[i];
                offset = i * 3;

                bufferArray[offset] = item.x;
                bufferArray[offset + 1] = item.y;
                bufferArray[offset + 2] = item.z;
            }

            mesh._webglVertexBuffer = mesh._webglVertexBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglVertexBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.verticesNeedUpdate = false;
        }

        items = mesh.normals || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.normalsNeedUpdate) {
            bufferArray = mesh._webglNormalArray;
            if (!bufferArray || bufferArray.length !== len * 3) bufferArray = mesh._webglNormalArray = new Float32Array(len * 3);

            i = len;
            while (i--) {
                item = items[i];
                offset = i * 3;

                bufferArray[offset] = item.x;
                bufferArray[offset + 1] = item.y;
                bufferArray[offset + 2] = item.z;
            }

            mesh._webglNormalBuffer = mesh._webglNormalBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglNormalBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.normalsNeedUpdate = false;
        }

        items = mesh.tangents || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.tangentsNeedUpdate) {
            bufferArray = mesh._webglTangentArray;
            if (!bufferArray || bufferArray.length !== len * 4) bufferArray = mesh._webglTangentArray = new Float32Array(len * 4);

            i = len;
            while (i--) {
                item = items[i];
                offset = i * 4;

                bufferArray[offset] = item.x;
                bufferArray[offset + 1] = item.y;
                bufferArray[offset + 2] = item.z;
                bufferArray[offset + 3] = item.w;
            }

            mesh._webglTangentBuffer = mesh._webglTangentBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglTangentBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.tangentsNeedUpdate = false;
        }

        items = mesh.indices || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.indicesNeedUpdate) {
            bufferArray = mesh._webglIndexArray;
            if (!bufferArray || bufferArray.length !== len) {
                bufferArray = mesh._webglIndexArray = new Uint16Array(len);
                mesh._webglIndexCount = len;
            }

            i = len;
            while (i--) bufferArray[i] = items[i];

            mesh._webglIndexBuffer = mesh._webglIndexBuffer || _gl.createBuffer();
            _gl.bindBuffer(ELEMENT_ARRAY_BUFFER, mesh._webglIndexBuffer);
            _gl.bufferData(ELEMENT_ARRAY_BUFFER, bufferArray, DRAW);

            bufferArray = mesh._webglLineArray;
            if (!bufferArray || bufferArray.length !== len * 3) {
                bufferArray = mesh._webglLineArray = new Uint16Array(len * 3);
                mesh._webglLineCount = len * 3;
            }

            i = len;
            vertexIndex = offset = 0;
            while (i--) {

                bufferArray[offset] = items[vertexIndex];
                bufferArray[offset + 1] = items[vertexIndex + 1];

                bufferArray[offset + 2] = items[vertexIndex];
                bufferArray[offset + 3] = items[vertexIndex + 2];

                bufferArray[offset + 4] = items[vertexIndex + 1];
                bufferArray[offset + 5] = items[vertexIndex + 2];

                offset += 6;
                vertexIndex += 3;
            }

            mesh._webglLineBuffer = mesh._webglLineBuffer || _gl.createBuffer();
            _gl.bindBuffer(ELEMENT_ARRAY_BUFFER, mesh._webglLineBuffer);
            _gl.bufferData(ELEMENT_ARRAY_BUFFER, bufferArray, DRAW);

            mesh.indicesNeedUpdate = false;
        }

        items = mesh.colors || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.colorsNeedUpdate) {
            bufferArray = mesh._webglColorArray;
            if (!bufferArray || bufferArray.length !== len * 3) bufferArray = mesh._webglColorArray = new Float32Array(len * 3);

            i = len;
            while (i--) {
                item = items[i];
                offset = i * 3;

                bufferArray[offset] = item.x;
                bufferArray[offset + 1] = item.y;
                bufferArray[offset + 2] = item.z;
            }

            mesh._webglColorBuffer = mesh._webglColorBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglColorBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.colorsNeedUpdate = false;
        }

        items = mesh.uvs || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.uvsNeedUpdate) {
            bufferArray = mesh._webglUvArray;
            if (!bufferArray || bufferArray.length !== len * 2) bufferArray = mesh._webglUvArray = new Float32Array(len * 2);

            i = len;
            while (i--) {
                item = items[i];
                offset = i * 2;

                bufferArray[offset] = item.x;
                bufferArray[offset + 1] = item.y;
            }

            mesh._webglUvBuffer = mesh._webglUvBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglUvBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.uvsNeedUpdate = false;
        }

        items = mesh.uv2s || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.uv2sNeedUpdate) {
            bufferArray = mesh._webglUv2Array;
            if (!bufferArray || bufferArray.length !== len * 2) bufferArray = mesh._webglUv2Array = new Float32Array(len * 2);

            i = len;
            while (i--) {
                item = items[i];
                offset = i * 2;

                bufferArray[offset] = item.x;
                bufferArray[offset + 1] = item.y;
            }

            mesh._webglUv2Buffer = mesh._webglUv2Buffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglUv2Buffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.uvsNeedUpdate = false;
        }

        items = mesh.boneIndices || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.boneIndicesNeedUpdate) {
            bufferArray = mesh._webglBoneIndexArray;
            if (!bufferArray || bufferArray.length !== len) bufferArray = mesh._webglBoneIndexArray = new Float32Array(len);

            i = len;
            while (i--) bufferArray[i] = items[i];

            mesh._webglBoneIndexBuffer = mesh._webglBoneIndexBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglBoneIndexBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.boneIndicesNeedUpdate = false;
        }

        items = mesh.boneWeights || EMPTY_ARRAY;
        len = items.length;
        if (len && mesh.boneWeightsNeedUpdate) {
            bufferArray = mesh._webglBoneWeightArray;
            if (!bufferArray || bufferArray.length !== len) bufferArray = mesh._webglBoneWeightArray = new Float32Array(len);

            i = len;
            while (i--) bufferArray[i] = items[i];

            mesh._webglBoneWeightBuffer = mesh._webglBoneWeightBuffer || _gl.createBuffer();
            _gl.bindBuffer(ARRAY_BUFFER, mesh._webglBoneWeightBuffer);
            _gl.bufferData(ARRAY_BUFFER, bufferArray, DRAW);

            mesh.boneWeightsNeedUpdate = false;
        }

        mesh._webglBuffersInitted = true;
    }


    function createEmitterBuffers(emitter, transform) {
        var MAX = Emitter.MAX_PARTICLES,

            DRAW = _gl.DYNAMIC_DRAW,
            ARRAY_BUFFER = _gl.ARRAY_BUFFER,

            positionArray, dataArray, colorArray,
            positionBuffer, dataBuffer, colorBuffer,

            particles = emitter.particles,
            particle,
            i = 0,
            len = particles.length,
            offset, position, color,
            me, x, y, z,
            m13, m23, m33, m43,
            m14, m24, m34, m44

        if (len) {
            if (emitter.sort) {
                emitter.worldSpace ? _mat4.copy(_projScreenMatrix) : _mat4.mmul(_projScreenMatrix, transform.matrixWorld);
                me = _mat4.elements;
                m13 = me[2];
                m23 = me[6];
                m33 = me[10];
                m43 = me[14];
                m14 = me[3];
                m24 = me[7];
                m34 = me[11];
                m44 = me[15];

                i = len;
                while (i--) {
                    particle = particles[i];
                    position = particle.position;
                    x = position.x;
                    y = position.y;
                    z = position.z;

                    particle.z = (m13 * x + m23 * y + m33 * z + m43) / (m14 * x + m24 * y + m34 * z + m44);
                }

                particles.sort(zSort);
            }

            positionArray = emitter._webglVertexArray || (emitter._webglVertexArray = new Float32Array(MAX * 3));
            dataArray = emitter._webglParticleArray || (emitter._webglParticleArray = new Float32Array(MAX * 3));
            colorArray = emitter._webglParticleColorArray || (emitter._webglParticleColorArray = new Float32Array(MAX * 3));

            i = len;
            while (i--) {
                particle = particles[i];
                position = particle.position;
                color = particle.color;
                offset = i * 3;

                positionArray[offset] = position.x;
                positionArray[offset + 1] = position.y;
                positionArray[offset + 2] = position.z;

                dataArray[offset] = particle.angle;
                dataArray[offset + 1] = particle.size;
                dataArray[offset + 2] = particle.alpha;

                colorArray[offset] = color.r;
                colorArray[offset + 1] = color.g;
                colorArray[offset + 2] = color.b;
            }

            positionBuffer = emitter._webglVertexBuffer || (emitter._webglVertexBuffer = _gl.createBuffer());
            _gl.bindBuffer(ARRAY_BUFFER, positionBuffer);
            _gl.bufferData(ARRAY_BUFFER, positionArray, DRAW);

            dataBuffer = emitter._webglParticleBuffer || (emitter._webglParticleBuffer = _gl.createBuffer());
            _gl.bindBuffer(ARRAY_BUFFER, dataBuffer);
            _gl.bufferData(ARRAY_BUFFER, dataArray, DRAW);

            colorBuffer = emitter._webglParticleColorBuffer || (emitter._webglParticleColorBuffer = _gl.createBuffer());
            _gl.bindBuffer(ARRAY_BUFFER, colorBuffer);
            _gl.bufferData(ARRAY_BUFFER, colorArray, DRAW);
        }

        emitter._webglParticleCount = len;
    }


    function createEmitter2DBuffers(emitter) {
        var MAX = Emitter2D.MAX_PARTICLES,

            DRAW = _gl.DYNAMIC_DRAW,
            ARRAY_BUFFER = _gl.ARRAY_BUFFER,

            positionArray, dataArray, colorArray,
            positionBuffer, dataBuffer, colorBuffer,

            particles = emitter.particles,
            particle,
            i = 0,
            len = particles.length,
            offset, position, color;

        if (len) {
            positionArray = emitter._webglVertexArray || (emitter._webglVertexArray = new Float32Array(MAX * 3));
            dataArray = emitter._webglParticleArray || (emitter._webglParticleArray = new Float32Array(MAX * 3));
            colorArray = emitter._webglParticleColorArray || (emitter._webglParticleColorArray = new Float32Array(MAX * 3));

            i = len;
            while (i--) {
                particle = particles[i];
                position = particle.position;
                color = particle.color;
                offset = i * 3;

                positionArray[offset] = position.x;
                positionArray[offset + 1] = position.y;
                positionArray[offset + 2] = 0.0;

                dataArray[offset] = particle.angle;
                dataArray[offset + 1] = particle.size;
                dataArray[offset + 2] = particle.alpha;

                colorArray[offset] = color.r;
                colorArray[offset + 1] = color.g;
                colorArray[offset + 2] = color.b;
            }

            positionBuffer = emitter._webglVertexBuffer || (emitter._webglVertexBuffer = _gl.createBuffer());
            _gl.bindBuffer(ARRAY_BUFFER, positionBuffer);
            _gl.bufferData(ARRAY_BUFFER, positionArray, DRAW);

            dataBuffer = emitter._webglParticleBuffer || (emitter._webglParticleBuffer = _gl.createBuffer());
            _gl.bindBuffer(ARRAY_BUFFER, dataBuffer);
            _gl.bufferData(ARRAY_BUFFER, dataArray, DRAW);

            colorBuffer = emitter._webglParticleColorBuffer || (emitter._webglParticleColorBuffer = _gl.createBuffer());
            _gl.bindBuffer(ARRAY_BUFFER, colorBuffer);
            _gl.bufferData(ARRAY_BUFFER, colorArray, DRAW);
        }

        emitter._webglParticleCount = len;
    }


    function zSort(a, b) {

        return b.z - a.z;
    }


    function createShader(obj, material, lights) {
        if (!material.needsUpdate && (_shaders[obj._id])) return _shaders[obj._id];

        var shader = material.shader,
            uniforms = material.uniforms,
            OES_standard_derivatives = !!_extensions.OES_standard_derivatives,
            parameters = {};

        parameters.mobile = Device.mobile;

        if (obj instanceof MeshFilter) {
            parameters.mesh = true;
        } else if (obj instanceof Sprite) {
            parameters.sprite = true;
        } else if (obj instanceof Emitter) {
            parameters.emitter = true;
            parameters.worldSpace = obj.worldSpace;
        } else if (obj instanceof Emitter2D) {
            parameters.emitter = true;
            parameters.emitter2d = true;
            parameters.worldSpace = obj.worldSpace;
        }

        parameters.useLights = shader.lights;
        parameters.useShadows = shader.shadows;
        parameters.useFog = shader.fog;
        parameters.useBones = obj.useBones && obj.bones.length > 0;
        parameters.useVertexLit = shader.vertexLit;
        parameters.useSpecular = shader.specular;

        parameters.useNormal = !!uniforms.normalMap;
        parameters.useBump = !!uniforms.bumpMap;

        parameters.positions = true;
        parameters.normals = parameters.useNormal || (obj.normals && obj.normals.length > 0);
        parameters.tangents = parameters.useNormal || (obj.tangents && obj.tangents.length > 0);
        parameters.uvs = parameters.sprite || (obj.uvs && obj.uvs.length > 0);
        parameters.colors = parameters.sprite || (obj.colors && obj.colors.length > 0);

        parameters.OES_standard_derivatives = OES_standard_derivatives && shader.OES_standard_derivatives;

        if (parameters.useBones) parameters.bones = obj.bones.length;
        allocateLights(lights, parameters);
        allocateShadows(lights, parameters);

        parameters.shadowMapEnabled = _this.shadowMapEnabled && material.receiveShadow && parameters.maxShadows > 0;
        parameters.shadowMapType = _this.shadowMapType;
        parameters.shadowMapDebug = _this.shadowMapDebug;
        parameters.shadowMapCascade = _this.shadowMapCascade;

        material.needsUpdate = false;
        return (_shaders[obj._id] = createShaderProgram(shader.vertex, shader.fragment, parameters));
    }


    function allocateLights(lights, parameters) {
        var maxPointLights = 0,
            maxDirectionalLights = 0,
            maxSpotLights = 0,
            maxHemiLights = 0,
            light, type,
            i = lights.length;

        while (i--) {
            light = lights[i];
            if (!light.visible || light.onlyShadow) continue;
            type = light.type;

            if (type === LightType.Point) {
                maxPointLights++;
            } else if (type === LightType.Directional) {
                maxDirectionalLights++;
            } else if (type === LightType.Spot) {
                maxSpotLights++;
            } else if (type === LightType.Hemi) {
                maxHemiLights++;
            }
        }

        parameters.maxPointLights = maxPointLights;
        parameters.maxDirectionalLights = maxDirectionalLights;
        parameters.maxSpotLights = maxSpotLights;
        parameters.maxHemiLights = maxHemiLights;
    }


    function allocateShadows(lights, parameters) {
        var maxShadows = 0,
            light, type,
            i = lights.length;

        while (i--) {
            light = lights[i];
            if (!light.visible || !light.castShadow) continue;
            type = light.type;

            if (type === LightType.Directional) {
                maxShadows++;
            } else if (type === LightType.Spot) {
                maxShadows++;
            }
        }

        parameters.maxShadows = maxShadows;
    }

    function createShaderProgram(vertexShader, fragmentShader, parameters) {
        var chunks = [],
            key, program, code, key;

        chunks.push(vertexShader, fragmentShader);
        for (key in parameters) chunks.push(key, parameters[key]);

        code = chunks.join();

        for (key in _shaders) {
            program = _shaders[key];

            if (program.code === code) {
                program.used++;
                return program;
            }
        }

        program = new Shader(vertexShader, fragmentShader, parameters, code).buildShader();
        return program;
    }


    var HEADER = /([\s\S]*)?(void[\s]+main)/,
        MAIN_FUNCTION = /void[\s]+main([\s]+)?(\((void)?\))([\s]+)?{([^}]*)}/,
        MAIN_SPLITER = /void[\s]+main([\s]+)?(\((void)?\))([\s]+)?{/;

    function Shader(vertex, fragment, parameters, code) {

        this.vertex = vertex;
        this.fragment = fragment;
        this.parameters = parameters;
        this.code = code;
        this.used = 0;

        this.program = undefined;
        this.attributes = undefined;
        this.uniforms = undefined;
        this._customAttributes = undefined;
        this._customUniforms = undefined;
    }

    Shader.prototype.markAsUsed = function (material) {
        this.used += 1;

        if (material) {
            var uniforms = material.uniforms,
                uniform, key;

            for (key in uniforms) {
                uniform = uniforms[key];

                if (uniform instanceof Texture) {
                    uniform._webglUsed += 1;
                } else if (uniform instanceof TextureCube) {
                    uniform._webglUsed += 1;
                }
            }
        }
    }

    Shader.prototype.bindMaterial = function (component, obj, material, transform, camera, lights, ambient) {
        var program = this.program,
            parameters = this.parameters,
            uniforms = this.uniforms,
            attributes = this.attributes,
            force = setProgram(program),
            sprite = parameters.sprite,
            texture, w, h, i, length, particleSizeRatio, bone, boneTransform, bones, uBonesPos, uBonesScl, uBonesRot;

        if (sprite) {
            if (_lastBuffers !== _spriteBuffers) {
                disableAttributes();

                attributes.position.set(_spriteBuffers._webglVertexBuffer);
                attributes.uv.set(_spriteBuffers._webglUvBuffer);

                if (attributes.normal) attributes.normal.set(_spriteBuffers._webglNormalBuffer);
                if (attributes.tangent) attributes.tangent.set(_spriteBuffers._webglTangentBuffer);

                _lastBuffers = _spriteBuffers;
            }
        } else {
            if (_lastBuffers !== obj) {
                disableAttributes();

                if (obj._webglVertexBuffer && attributes.position) attributes.position.set(obj._webglVertexBuffer);
                if (obj._webglNormalBuffer && attributes.normal) attributes.normal.set(obj._webglNormalBuffer);
                if (obj._webglTangentBuffer && attributes.tangent) attributes.tangent.set(obj._webglTangentBuffer);
                if (obj._webglColorBuffer && attributes.color) attributes.color.set(obj._webglColorBuffer);

                if (obj._webglUvBuffer && attributes.uv) attributes.uv.set(obj._webglUvBuffer);
                if (obj._webglUv2Buffer && attributes.uv2) attributes.uv2.set(obj._webglUv2Buffer);

                if (obj._webglBoneIndexBuffer && attributes.boneIndex) attributes.boneIndex.set(obj._webglBoneIndexBuffer);
                if (obj._webglBoneWeightBuffer && attributes.boneWeight) attributes.boneWeight.set(obj._webglBoneWeightBuffer);

                if (obj._webglParticleBuffer && attributes.data) attributes.data.set(obj._webglParticleBuffer);
                if (obj._webglParticleColorBuffer && attributes.particleColor) attributes.particleColor.set(obj._webglParticleColorBuffer);

                if (material.wireframe) {
                    if (obj._webglLineBuffer) _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, obj._webglLineBuffer);
                } else {
                    if (obj._webglIndexBuffer) _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, obj._webglIndexBuffer);
                }

                _lastBuffers = obj;
            }
        }

        if (sprite) {
            texture = material.uniforms.diffuseMap;
            if (!texture) throw "Shader.bind: Sprite material and shader requires diffuseMap";

            w = texture.invWidth;
            h = texture.invHeight;

            uniforms.size.set(_vector2.set(obj.width, obj.height), force);
            uniforms.crop.set(_vector4.set(obj.x * w, obj.y * h, obj.w * w, obj.h * h), force);
        }

        if (parameters.emitter && parameters.worldSpace) {
            if (uniforms.modelMatrix) uniforms.modelMatrix.set(_mat4.identity(), force);
            if (uniforms.modelViewMatrix) uniforms.modelViewMatrix.set(camera.view, force);
        } else {
            if (uniforms.modelMatrix) uniforms.modelMatrix.set(transform.matrixWorld, force);
            if (uniforms.modelViewMatrix) uniforms.modelViewMatrix.set(transform.modelView, force);
        }
        if (uniforms.particleSizeRatio) {
            particleSizeRatio = (_currentWidth < _currentHeight ? _currentWidth : _currentHeight);

            if (parameters.emitter2d || camera.camera2d || camera.orthographic) {
                particleSizeRatio *= 1.0 / (camera.orthographicSize * 2.0);
            } else {
                particleSizeRatio *= 2.0;
            }

            uniforms.particleSizeRatio.set(particleSizeRatio);
        }

        if (uniforms.projectionMatrix) uniforms.projectionMatrix.set(camera.projection, force);
        if (uniforms.viewMatrix) uniforms.viewMatrix.set(camera.view, force);
        if (uniforms.normalMatrix) uniforms.normalMatrix.set(transform.normalMatrix, force);
        if (uniforms.cameraPosition) uniforms.cameraPosition.set(_vector3.positionFromMat4((camera.transform || camera.transform2d).matrixWorld), force);
        if (uniforms.ambient) uniforms.ambient.set(ambient, force);

        if (parameters.useBones) {
            uBonesPos = uniforms.bonesPos;
            uBonesScl = uniforms.bonesScl;
            uBonesRot = uniforms.bonesRot;
            bones = component._bones;
            i = bones.length;
            while (i--) {
                bone = bones[i];
                boneTransform = bone.transform;
                _mat4.mmul(bone.uniform, bone.bindPose).decompose(_vector3, _vector3_2, _quat);

                uBonesPos[i].set(_vector3);
                uBonesScl[i].set(_vector3_2);
                uBonesRot[i].set(_quat);
            }
        }

        if (force && parameters.useLights && (length = lights.length)) {
            var maxPointLights = parameters.maxPointLights,
                maxDirectionalLights = parameters.maxDirectionalLights,
                maxSpotLights = parameters.maxSpotLights,
                maxHemiLights = parameters.maxHemiLights,

                pointLights = 0,
                pointLightColor = uniforms.pointLightColor,
                pointLightPosition = uniforms.pointLightPosition,
                pointLightDistance = uniforms.pointLightDistance,

                directionalLights = 0,
                directionalLightColor = uniforms.directionalLightColor,
                directionalLightDirection = uniforms.directionalLightDirection,

                spotLights = 0,
                spotLightColor = uniforms.spotLightColor,
                spotLightPosition = uniforms.spotLightPosition,
                spotLightDirection = uniforms.spotLightDirection,
                spotLightDistance = uniforms.spotLightDistance,
                spotLightAngleCos = uniforms.spotLightAngleCos,
                spotLightExponent = uniforms.spotLightExponent,

                hemiLights = 0,
                hemiLightColor = uniforms.hemiLightColor,
                hemiLightDirection = uniforms.hemiLightDirection,

                light, type;

            for (i = 0; i < length; i++) {
                light = lights[i];
                if (!light.visible) continue;

                type = light.type;
                _color.copy(light.color).smul(light.energy);

                if (pointLightColor.length && type === LightType.Point) {
                    if (pointLights >= maxPointLights) continue;

                    _vector3.positionFromMat4((light.transform || light.transform2d).matrixWorld);

                    pointLightColor[pointLights].set(_color, force);
                    pointLightPosition[pointLights].set(_vector3, force);
                    pointLightDistance[pointLights].set(light.distance, force);
                    pointLights++;
                } else if (directionalLightColor.length && type === LightType.Directional) {
                    if (directionalLights >= maxDirectionalLights) continue;

                    _vector3.positionFromMat4((light.transform || light.transform2d).matrixWorld).sub(light.target).normalize();
                    if (_vector3.lengthSq() === 0) continue;

                    directionalLightColor[directionalLights].set(_color, force);
                    directionalLightDirection[directionalLights].set(_vector3, force);
                    directionalLights++;

                } else if (spotLightColor.length && type === LightType.Spot) {
                    if (spotLights >= maxSpotLights) continue;

                    _vector3.positionFromMat4((light.transform || light.transform2d).matrixWorld);
                    if (_vector3.lengthSq() === 0) continue;

                    _vector3_2.copy(_vector3).sub(light.target).normalize();
                    if (_vector3_2.lengthSq() === 0) continue;

                    spotLightColor[spotLights].set(_color, force);
                    spotLightPosition[spotLights].set(_vector3, force);
                    spotLightDirection[spotLights].set(_vector3_2, force);
                    spotLightDistance[spotLights].set(light.distance, force);
                    spotLightAngleCos[spotLights].set(light._angleCos, force);
                    spotLightExponent[spotLights].set(light.exponent, force);
                    spotLights++;

                } else if (hemiLightColor.length && type === LightType.Hemi) {
                    if (hemiLights >= maxHemiLights) continue;

                    _vector3.positionFromMat4((light.transform || light.transform2d).matrixWorld).sub(light.target).normalize();
                    if (_vector3.lengthSq() === 0) continue;

                    hemiLightColor[hemiLights].set(_color, force);
                    hemiLightDirection[hemiLights].set(_vector3, force);
                    hemiLights++;
                }
            }
        }

        bindCustomUniforms(this._customUniforms, uniforms, material.name, material.uniforms, force);
        _textureIndex = 0;
    };

    function bindCustomUniforms(customUniforms, uniforms, materialName, materialUniforms, force) {
        var i = customUniforms.length,
            customUniform, uniformValue, length, name, value, j;

        while (i--) {
            customUniform = customUniforms[i];
            name = customUniform;

            uniformValue = uniforms[name];
            value = materialUniforms[name];

            if (!uniformValue) continue;
            if (!value) throw "WebGLRenderer bindShader: material " + materialName + " was not given a uniform named " + name;

            if ((length = uniformValue.length)) {
                j = length;
                while (j--) uniformValue.set(value[j], force);
            } else {
                uniformValue.set(value, force);
            }
        }
    }

    Shader.prototype.buildShader = function () {
        var parameters = this.parameters,
            vertexShader = this.vertex,
            fragmentShader = this.fragment,
            sprite = parameters.sprite,
            emitter = parameters.emitter,
            useLights = parameters.useLights,
            useShadows = parameters.useShadows,
            useFog = parameters.useFog,
            useBones = parameters.useBones,
            useVertexLit = parameters.useVertexLit,
            useSpecular = parameters.useSpecular,
            OES_standard_derivatives = parameters.OES_standard_derivatives,

            definesPrefix = [
                "precision " + _precision + " float;",
                "precision " + _precision + " int;",

                useFog ? "#define USE_FOG" : "",
                useLights ? "#define USE_LIGHTS" : "",
                useShadows ? "#define USE_SHADOWS" : "",
                useBones ? "#define USE_SKINNING" : "",
                sprite ? "#define IS_SPRITE" : "",

                useLights ? "#define MAX_DIR_LIGHTS " + parameters.maxDirectionalLights : "",
                useLights ? "#define MAX_POINT_LIGHTS " + parameters.maxPointLights : "",
                useLights ? "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights : "",
                useLights ? "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights : "",

                useShadows ? "#define MAX_SHADOWS " + parameters.maxShadows : "",
                ""
            ].join("\n"),

            vertexPrefix = [
                definesPrefix,

                "uniform mat4 modelMatrix;",
                "uniform mat4 modelViewMatrix;",
                "uniform mat4 projectionMatrix;",
                "uniform mat4 viewMatrix;",
                "uniform mat3 normalMatrix;",
                "uniform vec3 cameraPosition;",

                parameters.positions ? "attribute vec3 position;" : "",
                parameters.normals ? "attribute vec3 normal;" : "",
                parameters.tangents ? "attribute vec4 tangent;" : "",
                parameters.uvs ? "attribute vec2 uv;" : "",
                parameters.colors ? "attribute vec3 color;" : "",
                emitter ? "attribute vec3 data;" : "",

                useBones ? "attribute vec3 boneIndex;" : "",
                useBones ? "attribute vec3 boneWeight;" : "",
                useBones ? "uniform vec4 bonesRot[" + parameters.bones + "];" : "",
                useBones ? "uniform vec3 bonesScl[" + parameters.bones + "];" : "",
                useBones ? "uniform vec3 bonesPos[" + parameters.bones + "];" : ""
            ].join("\n"),

            fragmentPrefix = [
                OES_standard_derivatives ? "#extension GL_OES_standard_derivatives : enable" : "",
                definesPrefix,

                "uniform mat4 viewMatrix;",
                "uniform vec3 cameraPosition;"
            ].join("\n"),

            glVertexShader = vertexPrefix + "\n" + vertexShader,
            glFragmentShader = fragmentPrefix + "\n" + fragmentShader,

            main = "void main(void) {\n",
            footer = "\n}",

            vertexHeader = glVertexShader.match(HEADER)[1],
            vertexMain = glVertexShader.match(MAIN_FUNCTION)[5],
            fragmentHeader = glFragmentShader.match(HEADER)[1],
            fragmentMain = glFragmentShader.match(MAIN_FUNCTION)[5];

        if (sprite) {
            vertexHeader += ShaderChunks.sprite_header;
            vertexMain += ShaderChunks.sprite_vertex_after;
        }

        if (emitter) {
            vertexHeader += ShaderChunks.particle_header_vertex + ShaderChunks.particle_header;
            fragmentHeader += ShaderChunks.particle_header;
            if (parameters.emitter2d) {
                vertexMain = ShaderChunks.particle_vertex_size_2d + vertexMain;
            } else {
                vertexMain = ShaderChunks.particle_vertex_size + vertexMain;
            }
            vertexMain = ShaderChunks.particle_vertex + vertexMain;
        }

        if (OES_standard_derivatives) {
            if (parameters.useNormal) fragmentHeader += ShaderChunks.perturbNormal2Arb;
            if (parameters.useBump) fragmentHeader += ShaderChunks.dHdxy_fwd + ShaderChunks.perturbNormalArb;
        }

        if (useLights) {
            if (useVertexLit) {
                vertexHeader += ShaderChunks.lights + ShaderChunks.VertexLight;
            } else {
                vertexHeader += ShaderChunks.perPixelVaryingHeader;
                vertexMain = ShaderChunks.perPixelVaryingMain + vertexMain;

                fragmentHeader += ShaderChunks.lights + ShaderChunks.perPixelVaryingHeader;
                if (useSpecular) {
                    fragmentHeader += ShaderChunks.PixelLight;
                } else {
                    fragmentHeader += ShaderChunks.PixelLightNoSpec;
                }
            }

            if (emitter) {
                vertexMain = ShaderChunks.mvPosition_emitter + vertexMain;
                vertexMain = ShaderChunks.worldPosition_emitter + vertexMain;
            } else {
                vertexMain = (sprite ? ShaderChunks.mvPosition_sprite : ShaderChunks.mvPosition) + vertexMain;
                vertexMain = (sprite ? ShaderChunks.worldPosition_sprite : ShaderChunks.worldPosition) + vertexMain;
            }
            if (parameters.normals) vertexMain = ShaderChunks.transformedNormal + vertexMain;
        } else {
            if (emitter) {
                vertexMain = ShaderChunks.mvPosition_emitter + vertexMain;
            } else {
                vertexMain = (sprite ? ShaderChunks.mvPosition_sprite : ShaderChunks.mvPosition) + vertexMain;
            }
        }

        if (useBones) {
            vertexHeader += ShaderChunks.composeMat4;
            vertexHeader += ShaderChunks.getBoneMatrix;
            if (parameters.normals) vertexMain = ShaderChunks.boneNormal + vertexMain;
            vertexMain = ShaderChunks.bone + vertexMain;
        }

        glVertexShader = vertexHeader + main + vertexMain + footer;
        glFragmentShader = fragmentHeader + main + fragmentMain + footer;

        this.program = createProgram(_gl, glVertexShader, glFragmentShader);

        parseUniformsAttributesArrays(vertexShader, fragmentShader, (this._customAttributes = []), (this._customUniforms = []));
        parseUniformsAttributes(this.program, glVertexShader, glFragmentShader, (this.attributes = {}), (this.uniforms = {}));

        return this;
    };


    var useDepth = !opts.disableDepth,

        _this = this,

        _gl = undefined,
        _canvas = undefined,
        _element = undefined,
        _context = false,

        _extensions = undefined,

        _precision = "highp",
        _maxAnisotropy = 0,
        _maxTextures = 0,
        _maxVertexTextures = 0,
        _maxTextureSize = 0,
        _maxCubeTextureSize = 0,
        _maxRenderBufferSize = 0,

        _maxUniforms = 0,
        _maxVaryings = 0,
        _maxAttributes = 0,

        _viewportX = 0,
        _viewportY = 0,
        _viewportWidth = 1,
        _viewportHeight = 1,

        _currentWidth = 1,
        _currentHeight = 1,

        _textureIndex = 0,

        _lastClearColor = new Color,
        _lastClearAlpha = 1,
        _lastBlending = -1,
        _lastCullFace = -1,
        _cullFaceDisabled = true,
        _lastDepthTest = -1,
        _lastDepthWrite = -1,
        _lastLineWidth = -1,

        _currentFramebuffer = null,

        _enabledAttributes = undefined,
        _lastProgram = undefined,

        _attributes = merge(opts.attributes || {}, {
            alpha: true,
            antialias: true,
            depth: true,
            premultipliedAlpha: true,
            preserveDrawingBuffer: false,
            stencil: true
        });

    this.init = function (canvas) {
        if (_canvas) this.clear();

        _canvas = canvas;
        _element = canvas.element;

        _canvas2d = document.createElement("canvas");
        _ctx = _canvas2d.getContext("2d");

        initGL();
        _context = true;
        setDefaultGLState();

        addEvent(_element, "webglcontextlost", handleWebGLContextLost, this);
        addEvent(_element, "webglcontextrestored", handleWebGLContextRestored, this);

        return this;
    };


    this.clear = function () {
        if (!_canvas) return this;

        this.off();

        removeEvent(element, "webglcontextlost", handleWebGLContextLost, this);
        removeEvent(element, "webglcontextrestored", handleWebGLContextRestored, this);

        _gl = undefined
        _canvas = undefined;
        _element = undefined;
        _context = false;

        _extensions = undefined;

        _precision = "highp";
        _maxAnisotropy = 0;
        _maxTextures = 0;
        _maxVertexTextures = 0;
        _maxTextureSize = 0;
        _maxCubeTextureSize = 0;
        _maxRenderBufferSize = 0;

        _maxUniforms = 0;
        _maxVaryings = 0;
        _maxAttributes = 0;

        _viewportX = 0;
        _viewportY = 0;
        _viewportWidth = 1;
        _viewportHeight = 1;

        _textureIndex = 0;

        _lastClearColor.set(0, 0, 0);
        _lastClearAlpha = 1;
        _lastBlending = -1;
        _lastCullFace = -1;
        _cullFaceDisabled = true;
        _lastDepthTest = -1;
        _lastDepthWrite = -1;
        _lastLineWidth = -1;

        _currentFramebuffer = null;

        _enabledAttributes = undefined;
        _lastProgram = undefined;

        _shaders = {};
        _spriteBuffers = undefined;
        _lastBuffers = undefined;
        _lastCamera = undefined;
        _lastResizeFn = undefined;
        _lastScene = undefined;
        _lastGUI = undefined;

        _textTextures = {};
        _canvas2d = undefined;
        _ctx = undefined;

        _guiContentShader = undefined;
        _guiBuffers = undefined;

        return this;
    };

    defineProperty(this, "gl", {
        get: function () {
            return _gl;
        }
    });
    defineProperty(this, "canvas", {
        get: function () {
            return _canvas;
        }
    });
    defineProperty(this, "element", {
        get: function () {
            return _element;
        }
    });
    defineProperty(this, "precision", {
        get: function () {
            return _precision;
        }
    });
    defineProperty(this, "maxAnisotropy", {
        get: function () {
            return _maxAnisotropy;
        }
    });
    defineProperty(this, "maxTextures", {
        get: function () {
            return _maxTextures;
        }
    });
    defineProperty(this, "maxVertexTextures", {
        get: function () {
            return _maxVertexTextures;
        }
    });
    defineProperty(this, "maxTextureSize", {
        get: function () {
            return _maxTextureSize;
        }
    });
    defineProperty(this, "maxCubeTextureSize", {
        get: function () {
            return _maxCubeTextureSize;
        }
    });
    defineProperty(this, "maxRenderBufferSize", {
        get: function () {
            return _maxRenderBufferSize;
        }
    });
    defineProperty(this, "maxUniforms", {
        get: function () {
            return _maxUniforms;
        }
    });
    defineProperty(this, "maxVaryings", {
        get: function () {
            return _maxVaryings;
        }
    });
    defineProperty(this, "maxAttributes", {
        get: function () {
            return _maxAttributes;
        }
    });

    function createBuffer(obj, name, array) {

        obj[name] = obj[name] || _gl.createBuffer();
        _gl.bindBuffer(_gl.ARRAY_BUFFER, obj[name]);
        _gl.bufferData(_gl.ARRAY_BUFFER, array, _gl.STATIC_DRAW);
    }

    function createSprite() {
        _spriteBuffers = {};

        createBuffer(_spriteBuffers, "_webglVertexBuffer", new Float32Array([-0.5, 0.5, 0.0, -0.5, -0.5, 0.0,
            0.5, 0.5, 0.0,
            0.5, -0.5, 0.0
        ]));
        createBuffer(_spriteBuffers, "_webglUvBuffer", new Float32Array([
            0.0, 0.0,
            0.0, 1.0,
            1.0, 0.0,
            1.0, 1.0
        ]));
        createBuffer(_spriteBuffers, "_webglNormalBuffer", new Float32Array([
            0.0, 0.0, 1.0,
            0.0, 0.0, 1.0,
            0.0, 0.0, 1.0,
            0.0, 0.0, 1.0,
        ]));
        createBuffer(_spriteBuffers, "_webglTangentBuffer", new Float32Array([
            0.0, 0.0, 0.0, 1.0,
            0.0, 1.0, 0.0, 1.0,
            1.0, 0.0, 0.0, 1.0,
            1.0, 1.0, 0.0, 1.0,
        ]));
        _spriteBuffers._webglVertexCount = 4;
    }

    function createGUIBuffers() {
        _guiBuffers = {};

        createBuffer(_guiBuffers, "_webglVertexBuffer", new Float32Array([
            0.0, 0.0, 0.0,
            0.0, 1.0, 0.0,
            1.0, 0.0, 0.0,
            1.0, 1.0, 0.0
        ]));
        createBuffer(_guiBuffers, "_webglUvBuffer", new Float32Array([
            0.0, 0.0,
            0.0, 1.0,
            1.0, 0.0,
            1.0, 1.0
        ]));

        _guiBuffers._webglVertexCount = 4;
    }

    function createGUIContentShader() {
        var shader = _guiContentShader = new Shader,
            header = [
                "precision " + _precision + " float;",
                "precision " + _precision + " int;",
                ""
            ].join("\n"),
            vertexShader = header + guiContent_vertex,
            fragmentShader = header + guiContent_fragment;

        shader.program = createProgram(_gl, vertexShader, fragmentShader);
        parseUniformsAttributes(shader.program, vertexShader, fragmentShader, (shader.attributes = {}), (shader.uniforms = {}));
    }

    function setViewport(x, y, width, height) {
        x || (x = 0);
        y || (y = 0);
        width || (width = _canvas.pixelWidth);
        height || (height = _canvas.pixelHeight);

        if (_viewportX !== x || _viewportY !== y || _viewportWidth !== width || _viewportHeight !== height) {
            _viewportX = x;
            _viewportY = y;
            _viewportWidth = width;
            _viewportHeight = height;

            _gl.viewport(x, y, width, height);
        }
    }

    this.setViewport = setViewport;


    function setDepthTest(depthTest) {

        if (_lastDepthTest !== depthTest) {

            if (depthTest) {
                _gl.enable(_gl.DEPTH_TEST);
            } else {
                _gl.disable(_gl.DEPTH_TEST);
            }

            _lastDepthTest = depthTest;
        }
    }

    this.setDepthTest = setDepthTest;


    function setDepthWrite(depthWrite) {

        if (_lastDepthWrite !== depthWrite) {

            _gl.depthMask(depthWrite);
            _lastDepthWrite = depthWrite;
        }
    }

    this.setDepthWrite = setDepthWrite;


    function setLineWidth(width) {

        if (_lastLineWidth !== width) {

            _gl.lineWidth(width);
            _lastLineWidth = width;
        }
    }

    this.setLineWidth = setLineWidth;


    function setCullFace(cullFace) {

        if (_lastCullFace !== cullFace) {
            if (!_lastCullFace || _lastCullFace === CullFace.None) _cullFaceDisabled = true;

            if (cullFace === CullFace.Front) {
                if (_cullFaceDisabled) _gl.enable(_gl.CULL_FACE);
                _gl.cullFace(_gl.FRONT);
            } else if (cullFace === CullFace.Back) {
                if (_cullFaceDisabled) _gl.enable(_gl.CULL_FACE);
                _gl.cullFace(_gl.BACK);
            } else if (cullFace === CullFace.FrontBack) {
                if (_cullFaceDisabled) _gl.enable(_gl.CULL_FACE);
                _gl.cullFace(_gl.FRONT_AND_BACK);
            } else {
                _gl.disable(_gl.CULL_FACE);
                _lastCullFace = CullFace.None;
                return;
            }

            _lastCullFace = cullFace;
        }
    }

    this.setCullFace = setCullFace;


    function setBlending(blending) {

        if (blending !== _lastBlending) {

            if (blending === Blending.None) {
                _gl.disable(_gl.BLEND);
            } else if (blending === Blending.Additive) {
                _gl.enable(_gl.BLEND);
                _gl.blendEquation(_gl.FUNC_ADD);
                _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE);
            } else if (blending === Blending.Subtractive) {
                _gl.enable(_gl.BLEND);
                _gl.blendEquation(_gl.FUNC_ADD);
                _gl.blendFunc(_gl.ZERO, _gl.ONE_MINUS_SRC_COLOR);
            } else if (blending === Blending.Muliply) {
                _gl.enable(_gl.BLEND);
                _gl.blendEquation(_gl.FUNC_ADD);
                _gl.blendFunc(_gl.ZERO, _gl.SRC_COLOR);
            } else if (blending === Blending.Default) {
                _gl.enable(_gl.BLEND);
                _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
                _gl.blendFuncSeparate(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
                _lastBlending = Blending.Default;
                return;
            }

            _lastBlending = blending;
        }
    }

    this.setBlending = setBlending;


    function setScissor(x, y, width, height) {

        _gl.scissor(x, y, width, height);
    };
    this.setScissor = setScissor;


    function setClearColor(color, alpha) {
        alpha || (alpha = 1);

        if (!_lastClearColor.equals(color) || alpha !== _lastClearAlpha) {

            _lastClearColor.copy(color);
            _lastClearAlpha = alpha;

            this.context.clearColor(_lastClearColor.r, _lastClearColor.g, _lastClearColor.b, _lastClearAlpha);
        }
    }

    this.setClearColor = setClearColor;


    function clearCanvas(color, depth, stencil) {
        var bits = 0;

        if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;
        if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;
        if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;

        _gl.clear(bits);
    }

    this.clearCanvas = clearCanvas;


    function clearColor() {

        _gl.clear(_gl.COLOR_BUFFER_BIT);
    }

    this.clearColor = clearColor;


    function clearDepth() {

        _gl.clear(_gl.DEPTH_BUFFER_BIT);
    }

    this.clearDepth = clearDepth;


    function clearStencil() {

        _gl.clear(_gl.STENCIL_BUFFER_BIT);
    }

    this.clearStencil = clearStencil;


    function setProgram(program) {

        if (_lastProgram !== program) {
            _gl.useProgram(program);
            _lastProgram = program;
            return true;
        }
        return false;
    };
    this.setProgram = setProgram;


    function enableAttribute(attribute) {

        if (_enabledAttributes[attribute] === 0) {
            _gl.enableVertexAttribArray(attribute);
            _enabledAttributes[attribute] = 1;
        }
    };
    this.enableAttribute = enableAttribute;


    function disableAttributes() {
        var i = _maxAttributes;

        while (i--) {

            if (_enabledAttributes[i] === 1) {
                _gl.disableVertexAttribArray(i);
                _enabledAttributes[i] = 0;
            }
        }
    };
    this.disableAttributes = disableAttributes;


    function setTexture(location, texture) {
        if (!texture) return;
        var index, glTexture;

        if (_textureIndex >= _maxTextures) {
            Log.warn("Renderer setTexure: using " + _textureIndex + " texture units, GPU only supports " + _maxTextures);
        }

        if ((!texture.needsUpdate || texture instanceof RenderTarget) && (glTexture = texture._webgl)) {
            index = _textureIndex++;

            _gl.activeTexture(_gl.TEXTURE0 + index);
            _gl.bindTexture(_gl.TEXTURE_2D, glTexture);
            _gl.uniform1i(location, index);

            return;
        }

        if (!texture.raw) return;

        glTexture = texture._webgl || (texture._webgl = _gl.createTexture());
        index = _textureIndex++;

        var raw = texture.raw,
            TFA = _extensions.EXT_texture_filter_anisotropic,

            isPOT = isPowerOfTwo(raw.width) && isPowerOfTwo(raw.height),
            anisotropy = clamp(texture.anisotropy || 1, 1, _maxAnisotropy),

            TEXTURE_2D = _gl.TEXTURE_2D,
            generateMipmap = texture.generateMipmap,
            filter = texture.filter,
            format = texture.format,
            wrap = texture.wrap,
            WRAP, MAG_FILTER, MIN_FILTER, FORMAT;

        if (filter === FilterMode.None) {
            MAG_FILTER = _gl.NEAREST;
            if (generateMipmap && isPOT) {
                MIN_FILTER = _gl.LINEAR_MIPMAP_NEAREST;
            } else {
                MIN_FILTER = _gl.NEAREST;
            }
        } else { //FilterMode.Linear
            MAG_FILTER = _gl.LINEAR;
            if (generateMipmap && isPOT) {
                MIN_FILTER = _gl.LINEAR_MIPMAP_LINEAR;
            } else {
                MIN_FILTER = _gl.LINEAR;
            }
        }

        if (format === TextureFormat.RGB) {
            FORMAT = _gl.RGB;
        } else if (format === TextureFormat.RGBA) {
            FORMAT = _gl.RGBA;
        } else if (format === TextureFormat.LuminanceAlpha) {
            FORMAT = _gl.LUMINANCE_ALPHA;
        } else if (format === TextureFormat.Luminance) {
            FORMAT = _gl.LUMINANCE;
        } else if (format === TextureFormat.Alpha) {
            FORMAT = _gl.ALPHA;
        }

        if (wrap === TextureWrap.Clamp) {
            WRAP = _gl.CLAMP_TO_EDGE;
        } else if (wrap === TextureWrap.MirrorRepeat) {
            WRAP = isPOT ? _gl.MIRRORED_REPEAT : _gl.CLAMP_TO_EDGE;
        } else { //TextureWrap.Repeat
            WRAP = isPOT ? _gl.REPEAT : _gl.CLAMP_TO_EDGE;
        }

        _gl.activeTexture(_gl.TEXTURE0 + index);
        _gl.bindTexture(TEXTURE_2D, glTexture);
        _gl.uniform1i(location, index);

        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY ? 1 : 0);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha ? 1 : 0);

        _gl.texImage2D(TEXTURE_2D, 0, FORMAT, FORMAT, _gl.UNSIGNED_BYTE, clampToMaxSize(raw, _maxTextureSize));

        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, MAG_FILTER);
        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, MIN_FILTER);

        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_WRAP_S, WRAP);
        _gl.texParameteri(TEXTURE_2D, _gl.TEXTURE_WRAP_T, WRAP);

        if (TFA) _gl.texParameterf(TEXTURE_2D, TFA.TEXTURE_MAX_ANISOTROPY_EXT, anisotropy);
        if (generateMipmap && isPOT) _gl.generateMipmap(TEXTURE_2D);

        texture.needsUpdate = false;
    }

    function setTextureCube(location, cubeTexture) {
        if (!cubeTexture || !cubeTexture.raw) return;
        var glTexture = cubeTexture._webgl,
            index;

        if (_textureIndex >= _maxTextures) {
            Log.warn("Renderer setTextureCube: using " + _textureIndex + " texture units, GPU only supports " + _maxTextures);
            return;
        }

        if (!cubeTexture.needsUpdate && glTexture) {
            index = _textureIndex++;

            _gl.activeTexture(_gl.TEXTURE0 + index);
            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, glTexture);
            _gl.uniform1i(location, index);

            return;
        }

        glTexture = cubeTexture._webgl || (cubeTexture._webgl = _gl.createTexture());
        index = _textureIndex++;

        var raw = cubeTexture.raw,
            TFA = _extensions.EXT_texture_filter_anisotropic,

            first = raw[0],
            isPOT = isPowerOfTwo(first.width) && isPowerOfTwo(first.height),
            anisotropy = clamp(cubeTexture.anisotropy || 1, 1, _maxAnisotropy),

            TEXTURE_CUBE_MAP = _gl.TEXTURE_CUBE_MAP,
            TEXTURE_CUBE_MAP_POSITIVE_X = _gl.TEXTURE_CUBE_MAP_POSITIVE_X,
            UNSIGNED_BYTE = _gl.UNSIGNED_BYTE,

            generateMipmap = cubeTexture.generateMipmap,
            filter = cubeTexture.filter,
            format = cubeTexture.format,
            wrap = cubeTexture.wrap,
            WRAP, MAG_FILTER, MIN_FILTER, FORMAT;

        if (filter === FilterMode.None) {
            MAG_FILTER = _gl.NEAREST;
            if (generateMipmap && isPOT) {
                MIN_FILTER = _gl.LINEAR_MIPMAP_NEAREST;
            } else {
                MIN_FILTER = _gl.NEAREST;
            }
        } else { //FilterMode.Linear
            MAG_FILTER = _gl.LINEAR;
            if (generateMipmap && isPOT) {
                MIN_FILTER = _gl.LINEAR_MIPMAP_LINEAR;
            } else {
                MIN_FILTER = _gl.LINEAR;
            }
        }

        if (format === TextureFormat.RGB) {
            FORMAT = _gl.RGB;
        } else if (format === TextureFormat.RGBA) {
            FORMAT = _gl.RGBA;
        } else if (format === TextureFormat.LuminanceAlpha) {
            FORMAT = _gl.LUMINANCE_ALPHA;
        } else if (format === TextureFormat.Luminance) {
            FORMAT = _gl.LUMINANCE;
        } else if (format === TextureFormat.Alpha) {
            FORMAT = _gl.ALPHA;
        }

        if (wrap === TextureWrap.Clamp) {
            WRAP = _gl.CLAMP_TO_EDGE;
        } else { //TextureWrap.Repeat
            WRAP = isPOT ? _gl.REPEAT : _gl.CLAMP_TO_EDGE;
        }

        _gl.activeTexture(_gl.TEXTURE0 + index);
        _gl.bindTexture(TEXTURE_CUBE_MAP, glTexture);
        _gl.uniform1i(location, index);

        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, cubeTexture.flipY ? 1 : 0);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, cubeTexture.premultiplyAlpha ? 1 : 0);

        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, FORMAT, FORMAT, UNSIGNED_BYTE, clampToMaxSize(raw[0], _maxCubeTextureSize));
        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, FORMAT, FORMAT, UNSIGNED_BYTE, clampToMaxSize(raw[1], _maxCubeTextureSize));
        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, FORMAT, FORMAT, UNSIGNED_BYTE, clampToMaxSize(raw[2], _maxCubeTextureSize));
        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, FORMAT, FORMAT, UNSIGNED_BYTE, clampToMaxSize(raw[3], _maxCubeTextureSize));
        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, FORMAT, FORMAT, UNSIGNED_BYTE, clampToMaxSize(raw[4], _maxCubeTextureSize));
        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, FORMAT, FORMAT, UNSIGNED_BYTE, clampToMaxSize(raw[5], _maxCubeTextureSize));

        _gl.texParameteri(TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, MAG_FILTER);
        _gl.texParameteri(TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, MIN_FILTER);

        _gl.texParameteri(TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, WRAP);
        _gl.texParameteri(TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, WRAP);

        if (TFA) _gl.texParameterf(TEXTURE_CUBE_MAP, TFA.TEXTURE_MAX_ANISOTROPY_EXT, anisotropy);
        if (generateMipmap && isPOT) _gl.generateMipmap(TEXTURE_CUBE_MAP);

        cubeTexture.needsUpdate = false;
    }


    function clampToMaxSize(image, maxSize) {
        if (image.height <= maxSize && image.width <= maxSize) return image;
        var maxDim = 1 / max(image.width, image.height),
            newWidth = floor(image.width * maxSize * maxDim),
            newHeight = floor(image.height * maxSize * maxDim),
            canvas = document.createElement("canvas"),
            ctx = canvas.getContext("2d");

        canvas.width = newWidth;
        canvas.height = newHeight;
        ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight);

        Log.once("Renderer clampToMaxSize: image height larger than machines max size (max = " + maxSize + ")");

        return canvas;
    }


    function setRenderTarget(renderTarget) {
        var isRenderTarget = !!renderTarget,
            isCube = renderTarget instanceof RenderTargetCube,
            framebuffer = null,
            width, height, vx, vy;

        if (isRenderTarget && !renderTarget._webglFramebuffer) {
            width = renderTarget.width;
            height = renderTarget.height;
            renderTarget._webgl = _gl.createTexture();

            var TFA = _extensions.EXT_texture_filter_anisotropic,
                isPOT = isPowerOfTwo(width) && isPowerOfTwo(height),
                anisotropy = clamp(renderTarget.anisotropy || 1, 1, _maxAnisotropy),

                GL_TEXTURE_TYPE = isCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D,
                UNSIGNED_BYTE = _gl.UNSIGNED_BYTE,
                UNSIGNED_SHORT = _gl.UNSIGNED_SHORT,
                DEPTH_COMPONENT = _gl.DEPTH_COMPONENT,

                generateMipmap = renderTarget.generateMipmap,
                filter = renderTarget.filter,
                format = renderTarget.format,
                wrap = renderTarget.wrap,
                WRAP, MAG_FILTER, MIN_FILTER, FORMAT,
                webglFramebuffer, webglRenderbuffer, depthOnly = renderTarget.depthOnly,
                i;

            if (filter === FilterMode.None) {
                MAG_FILTER = _gl.NEAREST;
                if (generateMipmap && isPOT) {
                    MIN_FILTER = _gl.LINEAR_MIPMAP_NEAREST;
                } else {
                    MIN_FILTER = _gl.NEAREST;
                }
            } else { //FilterMode.Linear
                MAG_FILTER = _gl.LINEAR;
                if (generateMipmap && isPOT) {
                    MIN_FILTER = _gl.LINEAR_MIPMAP_LINEAR;
                } else {
                    MIN_FILTER = _gl.LINEAR;
                }
            }

            if (format === TextureFormat.RGB) {
                FORMAT = _gl.RGB;
            } else if (format === TextureFormat.RGBA) {
                FORMAT = _gl.RGBA;
            } else if (format === TextureFormat.LuminanceAlpha) {
                FORMAT = _gl.LUMINANCE_ALPHA;
            } else if (format === TextureFormat.Luminance) {
                FORMAT = _gl.LUMINANCE;
            } else if (format === TextureFormat.Alpha) {
                FORMAT = _gl.ALPHA;
            }

            if (wrap === TextureWrap.Clamp) {
                WRAP = _gl.CLAMP_TO_EDGE;
            } else if (wrap === TextureWrap.MirrorRepeat) {
                WRAP = isPOT ? _gl.MIRRORED_REPEAT : _gl.CLAMP_TO_EDGE;
            } else { //TextureWrap.Repeat
                WRAP = isPOT ? _gl.REPEAT : _gl.CLAMP_TO_EDGE;
            }

            _gl.bindTexture(GL_TEXTURE_TYPE, renderTarget._webgl);

            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, renderTarget.flipY ? 1 : 0);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, renderTarget.premultiplyAlpha ? 1 : 0);

            if (isCube) {
                webglFramebuffer = renderTarget._webglFramebuffer = [];
                webglRenderbuffer = renderTarget._webglRenderbuffer = [];

                if (renderTarget.depthOnly) {
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_BYTE, null);
                } else {
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                }

                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_MAG_FILTER, MAG_FILTER);
                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_MIN_FILTER, MIN_FILTER);

                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_WRAP_S, WRAP);
                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_WRAP_T, WRAP);

                i = 6;
                while (i--) {
                    webglFramebuffer[i] = _gl.createFramebuffer();
                    webglRenderbuffer[i] = _gl.createRenderbuffer();

                    setupFrameBuffer(webglFramebuffer[i], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
                    setupRenderBuffer(webglRenderbuffer[i], renderTarget);
                }
            } else {
                renderTarget._webglFramebuffer = _gl.createFramebuffer();
                renderTarget._webglRenderbuffer = _gl.createRenderbuffer();

                if (renderTarget.depthOnly) {
                    _gl.texImage2D(GL_TEXTURE_TYPE, 0, DEPTH_COMPONENT, width, height, 0, DEPTH_COMPONENT, UNSIGNED_SHORT, null);
                } else {
                    _gl.texImage2D(GL_TEXTURE_TYPE, 0, FORMAT, width, height, 0, FORMAT, UNSIGNED_BYTE, null);
                }

                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_MAG_FILTER, MAG_FILTER);
                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_MIN_FILTER, MIN_FILTER);

                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_WRAP_S, WRAP);
                _gl.texParameteri(GL_TEXTURE_TYPE, _gl.TEXTURE_WRAP_T, WRAP);

                setupFrameBuffer(renderTarget._webglFramebuffer, renderTarget, GL_TEXTURE_TYPE);
                setupRenderBuffer(renderTarget._webglRenderbuffer, renderTarget);
            }

            if (TFA) _gl.texParameterf(GL_TEXTURE_TYPE, TFA.TEXTURE_MAX_ANISOTROPY_EXT, anisotropy);
            if (generateMipmap && isPOT) _gl.generateMipmap(GL_TEXTURE_TYPE);

            _gl.bindTexture(GL_TEXTURE_TYPE, null);

            _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
            _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);
        }

        if (isRenderTarget) {
            if (isCube) {
                framebuffer = renderTarget._webglFramebuffer[renderTarget.activeCubeFace];
            } else {
                framebuffer = renderTarget._webglFramebuffer;
            }

            vx = 0;
            vy = 0;
            width = renderTarget.width;
            height = renderTarget.height;
        } else {
            vx = _viewportX;
            vy = _viewportY;
            width = _viewportWidth;
            height = _viewportHeight;
        }

        if (framebuffer !== _currentFramebuffer) {
            _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            setViewport(vx, vy, width, height);

            _currentFramebuffer = framebuffer;
        }

        _currentWidth = width;
        _currentHeight = height;
    }

    this.setRenderTarget = setRenderTarget;


    function setupFrameBuffer(framebuffer, renderTarget, textureTarget) {
        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget._webgl, 0);
    }


    function setupRenderBuffer(renderbuffer, renderTarget) {

        _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);

        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {

            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else if (!renderTarget.depthBuffer && renderTarget.stencilBuffer) {

            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {

            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height);
        }
    };


    function handleWebGLContextLost(e) {
        e.preventDefault();
        Log.warn("Renderer: webgl context was lost");

        _context = false;
        this.emit("webglcontextlost", e);
    }


    function handleWebGLContextRestored(e) {
        Log.log("Renderer: webgl context was restored");

        initGL();
        setDefaultGLState();

        _context = true;
        this.emit("webglcontextrestored", e);
    }

    function getGPUInfo() {
        var VERTEX_SHADER = _gl.VERTEX_SHADER,
            FRAGMENT_SHADER = _gl.FRAGMENT_SHADER,
            HIGH_FLOAT = _gl.HIGH_FLOAT,
            MEDIUM_FLOAT = _gl.MEDIUM_FLOAT,

            EXT_texture_filter_anisotropic = _extensions.EXT_texture_filter_anisotropic,

            vsHighpFloat = _gl.getShaderPrecisionFormat(VERTEX_SHADER, HIGH_FLOAT),
            vsMediumpFloat = _gl.getShaderPrecisionFormat(VERTEX_SHADER, MEDIUM_FLOAT),

            fsHighpFloat = _gl.getShaderPrecisionFormat(FRAGMENT_SHADER, HIGH_FLOAT),
            fsMediumpFloat = _gl.getShaderPrecisionFormat(FRAGMENT_SHADER, MEDIUM_FLOAT),

            highpAvailable = vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0,
            mediumpAvailable = vsMediumpFloat.precision > 0 && fsMediumpFloat.precision > 0,

            precision = "highp";

        if (!highpAvailable || Device.mobile) {
            if (mediumpAvailable) {
                precision = "mediump";
            } else {
                precision = "lowp";
            }
        }

        _precision = precision;
        _maxAnisotropy = EXT_texture_filter_anisotropic ? _gl.getParameter(EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;
        _maxTextures = _gl.getParameter(_gl.MAX_TEXTURE_IMAGE_UNITS);
        _maxVertexTextures = _gl.getParameter(_gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        _maxTextureSize = _gl.getParameter(_gl.MAX_TEXTURE_SIZE);
        _maxCubeTextureSize = _gl.getParameter(_gl.MAX_CUBE_MAP_TEXTURE_SIZE);
        _maxRenderBufferSize = _gl.getParameter(_gl.MAX_RENDERBUFFER_SIZE);

        _maxUniforms = max(_gl.getParameter(_gl.MAX_FRAGMENT_UNIFORM_VECTORS), _gl.getParameter(_gl.MAX_VERTEX_UNIFORM_VECTORS)) * 4;
        _maxVaryings = _gl.getParameter(_gl.MAX_VARYING_VECTORS) * 4;
        _maxAttributes = _gl.getParameter(_gl.MAX_VERTEX_ATTRIBS);
    }


    function getExtensions() {
        _extensions = {};

        getExtension("EXT_texture_filter_anisotropic");

        getExtension("WEBGL_compressed_texture_s3tc");
        _extensions.WEBGL_compressed_texture_s3tc_formats = _extensions.WEBGL_compressed_texture_s3tc ? _gl.getParameter(_gl.COMPRESSED_TEXTURE_FORMATS) : null;

        getExtension("OES_standard_derivatives");
    }


    var getExtension_prefixes = ["WEBKIT", "MOZ", "O", "MS", "webkit", "moz", "o", "ms"],
        getExtension_length = getExtension_prefixes.length;

    function getExtension(name) {
        var extension = _extensions[name] || (_extensions[name] = _gl.getExtension(name));

        if (extension == undefined) {
            var i = getExtension_length;

            while (i--) {
                if ((extension = _gl.getExtension(getExtension_prefixes[i] + "_" + name))) return (_extensions[name] = extension);
            }
        }

        return extension;
    }

    this.getExtension = getExtension;


    function initGL() {
        _gl = getWebGLContext(_element, _attributes);

        _gl.getShaderPrecisionFormat || (_gl.getShaderPrecisionFormat = function () {
            return {
                rangeMin: 1,
                rangeMax: 1,
                precision: 1
            };
        });

        getExtensions();
        getGPUInfo();

        _enabledAttributes = new Uint8Array(_maxAttributes);
    }


    function setDefaultGLState() {

        _gl.clearColor(0, 0, 0, 1);
        useDepth && _gl.clearDepth(1);
        _gl.clearStencil(0);

        useDepth && setDepthTest(true);
        useDepth && _gl.depthFunc(_gl.LEQUAL);

        _gl.frontFace(_gl.CCW);

        setCullFace(CullFace.Back);
        setBlending(Blending.Default);
        setLineWidth(1);

        setViewport();
    }


    var SHADER_SPLITER = /[\n;]+/,
        ATTRIBURE = /attribute\s+([a-z]+\s+)?([A-Za-z0-9]+)\s+([a-zA-Z_0-9]+)\s*(\[\s*(.+)\s*\])?/,
        UNIFORM = /uniform\s+([a-z]+\s+)?([A-Za-z0-9]+)\s+([a-zA-Z_0-9]+)\s*(\[\s*(.+)\s*\])?/,
        DEFINE = /#define\s+([a-zA-Z_0-9]+)?\s+([0-9]+)?/;

    function parseUniformsAttributesArrays(vertexShader, fragmentShader, attributes, uniforms) {
        var src = vertexShader + fragmentShader,
            lines = src.split(SHADER_SPLITER),
            matchAttributes, matchUniforms,
            i = lines.length,
            line;

        while (i--) {
            line = lines[i];
            matchAttributes = line.match(ATTRIBURE);
            matchUniforms = line.match(UNIFORM);

            if (matchAttributes) {
                attributes.push(matchAttributes[3]);
            } else if (matchUniforms) {
                uniforms.push(matchUniforms[3]);
            }
        }
    }

    this.parseUniformsAttributesArrays = parseUniformsAttributesArrays;

    function parseUniformsAttributes(program, vertexShader, fragmentShader, attributes, uniforms) {
        var src = vertexShader + fragmentShader,
            lines = src.split(SHADER_SPLITER),
            defines = {}, matchAttributes, matchUniforms, matchDefines,
            uniformArray, name, type, location, length, line,
            i, j;

        i = lines.length;
        while (i--) {
            matchDefines = lines[i].match(DEFINE);
            if (matchDefines) defines[matchDefines[1]] = Number(matchDefines[2]);
        }

        i = lines.length;
        while (i--) {
            line = lines[i];
            matchAttributes = line.match(ATTRIBURE);
            matchUniforms = line.match(UNIFORM);

            if (matchAttributes) {
                name = matchAttributes[3];
                attributes[name] = createAttribute(matchAttributes[2], _gl.getAttribLocation(program, name));
            } else if (matchUniforms) {
                type = matchUniforms[2];
                name = matchUniforms[3];
                length = matchUniforms[5];

                if (length) {
                    length = defines[length.trim()] || length;
                    uniformArray = uniforms[name] = [];

                    j = length;
                    while (j--) uniformArray[j] = createUniform(type, _gl.getUniformLocation(program, name + "[" + j + "]"));
                } else {
                    location = _gl.getUniformLocation(program, name);
                    if (location) uniforms[name] = createUniform(type, location);
                }
            }
        }
    }

    this.parseUniformsAttributes = parseUniformsAttributes;


    function createAttribute(type, location) {
        if (location < 0) return null;

        if (type === "int") {
            return new Attribute1i(location);
        } else if (type === "float") {
            return new Attribute1f(location);
        } else if (type === "vec2") {
            return new Attribute2f(location);
        } else if (type === "vec3") {
            return new Attribute3f(location);
        } else if (type === "vec4") {
            return new Attribute4f(location);
        }

        return null;
    };


    function Attribute1i(location) {
        this.location = location;
    }

    Attribute1i.prototype.set = function (value) {
        var location = this.location;

        if (location > -1) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, value);
            enableAttribute(location);
            _gl.vertexAttribPointer(location, 1, _gl.FLOAT, false, 0, 0);
        }
    };

    function Attribute1f(location) {
        this.location = location;
    }

    Attribute1f.prototype.set = function (value) {
        var location = this.location;

        if (location > -1) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, value);
            enableAttribute(location);
            _gl.vertexAttribPointer(location, 1, _gl.FLOAT, false, 0, 0);
        }
    };

    function Attribute2f(location) {
        this.location = location;
    }

    Attribute2f.prototype.set = function (value) {
        var location = this.location;

        if (location > -1) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, value);
            enableAttribute(location);
            _gl.vertexAttribPointer(location, 2, _gl.FLOAT, false, 0, 0);
        }
    };

    function Attribute3f(location) {
        this.location = location;
    }

    Attribute3f.prototype.set = function (value) {
        var location = this.location;

        if (location > -1) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, value);
            enableAttribute(location);
            _gl.vertexAttribPointer(location, 3, _gl.FLOAT, false, 0, 0);
        }
    };

    function Attribute4f(location) {
        this.location = location;
    }

    Attribute4f.prototype.set = function (value) {
        var location = this.location;

        if (location > -1) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, value);
            enableAttribute(location);
            _gl.vertexAttribPointer(location, 4, _gl.FLOAT, false, 0, 0);
        }
    };


    function createUniform(type, location) {
        if (!location) return null;

        if (type === "int") {
            return new Uniform1i(location);
        } else if (type === "float") {
            return new Uniform1f(location);
        } else if (type === "vec2") {
            return new Uniform2f(location);
        } else if (type === "vec3") {
            return new Uniform3f(location);
        } else if (type === "vec4") {
            return new Uniform4f(location);
        } else if (type === "mat2") {
            return new UniformMatrix2fv(location);
        } else if (type === "mat3") {
            return new UniformMatrix3fv(location);
        } else if (type === "mat4") {
            return new UniformMatrix4fv(location);
        } else if (type === "sampler2D") {
            return new UniformTexture(location);
        } else if (type === "samplerCube") {
            return new UniformTextureCube(location);
        }

        return null;
    }

    function Uniform1f(location) {
        this.location = location;
        this.value = undefined;
    }

    Uniform1f.prototype.set = function (value, force) {
        if (force || this.value !== value) {
            _gl.uniform1f(this.location, value);
            this.value = value;
        }
    };

    function Uniform1i(location) {
        this.location = location;
        this.value = undefined;
    }

    Uniform1i.prototype.set = function (value, force) {
        if (force || this.value !== value) {
            _gl.uniform1i(this.location, value);
            this.value = value;
        }
    };

    function Uniform2f(location) {
        this.location = location;
        this.value = new Vec2(NaN, NaN);
    }

    Uniform2f.prototype.set = function (value, force) {
        if (force || this.value.notEquals(value)) {
            _gl.uniform2f(this.location, value.x, value.y);
            this.value.copy(value);
        }
    };

    function Uniform3f(location) {
        this.location = location;
        this.value = new Vec3(NaN, NaN, NaN);
    }

    Uniform3f.prototype.set = function (value, force) {
        if (force || this.value.notEquals(value)) {
            _gl.uniform3f(this.location, value.x, value.y, value.z);
            this.value.copy(value);
        }
    };

    function Uniform4f(location) {
        this.location = location;
        this.value = new Vec4(NaN, NaN, NaN, NaN);
    }

    Uniform4f.prototype.set = function (value, force) {
        if (force || this.value.notEquals(value)) {
            _gl.uniform4f(this.location, value.x, value.y, value.z, value.w);
            this.value.copy(value);
        }
    };

    function UniformMatrix2fv(location) {
        this.location = location;
        this.value = new Mat2(
            NaN, NaN,
            NaN, NaN
        );
    }

    UniformMatrix2fv.prototype.set = function (value, force) {
        if (force || this.value.notEquals(value)) {
            _gl.uniformMatrix2fv(this.location, false, value.elements);
            this.value.copy(value);
        }
    };

    function UniformMatrix3fv(location) {
        this.location = location;
        this.value = new Mat3(
            NaN, NaN, NaN,
            NaN, NaN, NaN,
            NaN, NaN, NaN
        );
    }

    UniformMatrix3fv.prototype.set = function (value, force) {
        if (force || this.value.notEquals(value)) {
            _gl.uniformMatrix3fv(this.location, false, value.elements);
            this.value.copy(value);
        }
    };

    function UniformMatrix4fv(location) {
        this.location = location;
        this.value = new Mat4(
            NaN, NaN, NaN, NaN,
            NaN, NaN, NaN, NaN,
            NaN, NaN, NaN, NaN,
            NaN, NaN, NaN, NaN
        );
    }

    UniformMatrix4fv.prototype.set = function (value, force) {
        if (force || this.value.notEquals(value)) {
            _gl.uniformMatrix4fv(this.location, false, value.elements);
            this.value.copy(value);
        }
    };

    function UniformTexture(location) {
        this.location = location;
    }

    UniformTexture.prototype.set = function (value) {
        setTexture(this.location, value);
    };

    function UniformTextureCube(location) {
        this.location = location;
    }

    UniformTextureCube.prototype.set = function (value) {
        setTextureCube(this.location, value);
    };
}

EventEmitter.extend(Renderer);


var guiContent_vertex = [
    "attribute vec3 position;",
    "attribute vec2 uv;",

    "uniform mat4 mvpMatrix;",
    "uniform vec2 size;",
    "uniform vec4 crop;",

    "varying vec2 vUv;",

    "void main() {",
    "	vUv.x = uv.x * crop.z + crop.x;",
    "	vUv.y = uv.y * crop.w + crop.y;",
    "	gl_Position = mvpMatrix * vec4(position.xy * size, position.z, 1.0);",
    "}"
].join("\n");

var guiContent_fragment = [
    "uniform sampler2D texture;",
    "uniform float alpha;",

    "varying vec2 vUv;",

    "void main() {",
    "	vec4 finalColor = texture2D(texture, vUv);",
    "	gl_FragColor = vec4(finalColor.xyz, finalColor.w * alpha);",
    "}"
].join("\n");


module.exports = Renderer;

},{"../../base/config":9,"../../base/device":10,"../../base/dom":11,"../../base/event_emitter":13,"../../base/log":14,"../../base/util":19,"../../math/color":102,"../../math/mat2":103,"../../math/mat3":104,"../../math/mat4":106,"../../math/mathf":107,"../../math/quat":108,"../../math/rect":109,"../../math/rect_offset":110,"../../math/vec2":111,"../../math/vec3":112,"../../math/vec4":113,"../assets/texture":38,"../assets/texture_cube":39,"../components/mesh_filter":60,"../components/particle_system/emitter":62,"../components/particle_system/emitter_2d":63,"../components/sprite":69,"../enums":73,"./render_target":93,"./render_target_cube":94,"./shader_chunks":96}],96:[function(require,module,exports){
"use strict";


var ShaderChunks = {
    dHdxy_fwd: [
        "vec2 dHdxy_fwd(sampler2D map, vec2 uv, float scale) {",

        "	vec2 dSTdx = dFdx(uv);",
        "	vec2 dSTdy = dFdy(uv);",

        "	float Hll = scale * texture2D(map, uv).x;",
        "	float dBx = scale * texture2D(map, uv + dSTdx).x - Hll;",
        "	float dBy = scale * texture2D(map, uv + dSTdy).x - Hll;",

        "	return vec2(dBx, dBy);",
        "}",
        ""
    ].join("\n"),

    perturbNormalArb: [
        "vec3 perturbNormalArb(vec3 surf_pos, vec3 surf_norm, vec2 dHdxy) {",

        "	vec3 vSigmaX = dFdx(surf_pos);",
        "	vec3 vSigmaY = dFdy(surf_pos);",
        "	vec3 vN = surf_norm;",

        "	vec3 R1 = cross(vSigmaY, vN);",
        "	vec3 R2 = cross(vN, vSigmaX);",

        "	float fDet = dot(vSigmaX, R1);",
        "	vec3 vGrad = sign(fDet) * (dHdxy.x * R1 + dHdxy.y * R2);",

        "	return normalize(abs(fDet) * surf_norm - vGrad);",
        "}",
        ""
    ].join("\n"),

    perturbNormal2Arb: [
        "vec3 perturbNormal2Arb(sampler2D map, vec2 uv, vec3 eye_pos, vec3 surf_norm, float scale) {",

        "	vec3 q0 = dFdx(eye_pos.xyz);",
        "	vec3 q1 = dFdy(eye_pos.xyz);",
        "	vec2 st0 = dFdx(uv.st);",
        "	vec2 st1 = dFdy(uv.st);",

        "	vec3 S = normalize(q0 * st1.t - q1 * st0.t);",
        "	vec3 T = normalize(-q0 * st1.s + q1 * st0.s);",
        "	vec3 N = normalize(surf_norm);",

        "	vec3 mapN = texture2D(map, uv).xyz * 2.0 - 1.0;",
        "	mapN.xy = scale * mapN.xy;",
        "	mat3 tsn = mat3(S, T, N);",

        "	return normalize(tsn * mapN);",
        "}",
        ""
    ].join("\n"),

    composeMat4: [
        "mat4 composeMat4(vec3 position, vec3 scale, vec4 rotation) {",
        "	mat4 mat;",
        "	float x = rotation.x, y = rotation.y, z = rotation.z, w = rotation.w,",

        "		x2 = x + x, y2 = y + y, z2 = z + z,",
        "		xx = x * x2, xy = x * y2, xz = x * z2,",
        "		yy = y * y2, yz = y * z2, zz = z * z2,",
        "		wx = w * x2, wy = w * y2, wz = w * z2,",

        "		sx = scale.x, sy = scale.y, sz = scale.z;",

        "	mat[0][0] = (1.0 - (yy + zz)) * sx;",
        "	mat[1][0] = (xy - wz) * sy;",
        "	mat[2][0] = (xz + wy) * sz;",

        "	mat[0][1] = (xy + wz) * sx;",
        "	mat[1][1] = (1.0 - (xx + zz)) * sy;",
        "	mat[2][1] = (yz - wx) * sz;",

        "	mat[0][2] = (xz - wy) * sx;",
        "	mat[1][2] = (yz + wx) * sy;",
        "	mat[2][2] = (1.0 - (xx + yy)) * sz;",

        "	mat[0][3] = 0.0;",
        "	mat[1][3] = 0.0;",
        "	mat[2][3] = 0.0;",

        "	mat[3][0] = position.x;",
        "	mat[3][1] = position.y;",
        "	mat[3][2] = position.z;",
        "	mat[3][3] = 1.0;",

        "	return mat;",
        "}",
        ""
    ].join("\n"),

    getBoneMatrix: [
        "#ifdef USE_SKINNING",
        "mat4 getBoneMatrix() {",
        "	mat4 result = boneWeight.x * composeMat4(bonesPos[int(boneIndex.x)], bonesScl[int(boneIndex.x)], bonesRot[int(boneIndex.x)]);",
        "	result = result + boneWeight.y * composeMat4(bonesPos[int(boneIndex.y)], bonesScl[int(boneIndex.y)], bonesRot[int(boneIndex.y)]);",
        "	result = result + boneWeight.z * composeMat4(bonesPos[int(boneIndex.z)], bonesScl[int(boneIndex.z)], bonesRot[int(boneIndex.z)]);",
        "	return result;",
        "}",
        "#endif",
        ""
    ].join("\n"),

    bone: [
        "	#ifdef USE_SKINNING",
        "		mat4 boneMatrix = getBoneMatrix();",

        "		#ifdef USE_MORPHTARGETS",
        "			vec4 boneVertex = vec4( morphed, 1.0 );",
        "		#else",
        "			vec4 boneVertex = vec4( position, 1.0 );",
        "		#endif",

        "		vec4 bone = boneMatrix * boneVertex;",
        "	#endif",
        ""
    ].join("\n"),

    boneNormal: [
        "	#ifdef USE_SKINNING",
        "		#ifdef USE_MORPHNORMALS",
        "			vec4 boneNormal = boneMatrix * vec4( morphedNormal, 0.0 );",
        "		#else",
        "			vec4 boneNormal = boneMatrix * vec4( normal, 0.0 );",
        "		#endif",
        "	#endif",
        ""
    ].join("\n"),

    transformedNormal: [
        "	#ifdef USE_SKINNING",
        "	vec3 objectNormal = boneNormal.xyz;",
        "	#endif",

        "	#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )",
        "	vec3 objectNormal = morphedNormal;",
        "	#endif",

        "	#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )",
        "	vec3 objectNormal = normal;",
        "	#endif",

        "	vec3 transformedNormal = normalMatrix * objectNormal;",
        ""
    ].join("\n"),

    worldPosition: [
        "	#ifdef USE_SKINNING",
        "	vec4 worldPosition = modelMatrix * bone;",
        "	#endif",

        "	#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",
        "	vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );",
        "	#endif",

        "	#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",
        "	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
        "	#endif",
        ""
    ].join("\n"),

    worldPosition_sprite: [
        "	vec4 worldPosition = modelMatrix * vec4( position.xy * size, position.z, 1.0 );",
        ""
    ].join("\n"),

    worldPosition_emitter: [
        "	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
        ""
    ].join("\n"),

    mvPosition: [
        "	#ifdef USE_SKINNING",
        "	vec4 mvPosition = modelViewMatrix * bone;",
        "	#endif",

        "	#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )",
        "	vec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );",
        "	#endif",

        "	#if !defined( USE_SKINNING ) && !defined( USE_MORPHTARGETS )",
        "	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
        "	#endif",
        ""
    ].join("\n"),

    mvPosition_sprite: [
        "	vec4 mvPosition = modelViewMatrix * vec4( position.xy * size, position.z, 1.0 );",
        ""
    ].join("\n"),

    mvPosition_emitter: [
        "	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
        ""
    ].join("\n"),

    particle_header_vertex: [
        "attribute vec3 particleColor;",
        "uniform float particleSizeRatio;",
        ""
    ].join("\n"),

    particle_header: [
        "varying float vAngle;",
        "varying float vAlpha;",
        "varying float vSize;",
        "varying vec3 vParticleColor;",
        ""
    ].join("\n"),

    particle_vertex: [
        "	vAngle = data.x;",
        "	vAlpha = data.z;",
        "	vSize = data.y;",
        "	vParticleColor = particleColor;",
        ""
    ].join("\n"),

    particle_vertex_size: [
        "	gl_PointSize = vSize * (particleSizeRatio / length(mvPosition.xyz));\n",
        ""
    ].join("\n"),

    particle_vertex_size_2d: [
        "	gl_PointSize = vSize * particleSizeRatio;\n",
        ""
    ].join("\n"),

    sprite_header: [
        "uniform vec2 size;",
        "uniform vec4 crop;",
        ""
    ].join("\n"),

    sprite_vertex_after: [
        "	vUv.x = vUv.x * crop.z + crop.x;",
        "	vUv.y = vUv.y * crop.w + crop.y;",
        ""
    ].join("\n"),

    lights: [
        "uniform vec3 ambient;",

        "#if MAX_DIR_LIGHTS > 0",

        "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
        "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

        "#endif",

        "#if MAX_HEMI_LIGHTS > 0",

        "uniform vec3 hemiLightColor[ MAX_HEMI_LIGHTS ];",
        "uniform vec3 hemiLightDirection[ MAX_HEMI_LIGHTS ];",

        "#endif",

        "#if MAX_POINT_LIGHTS > 0",

        "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
        "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
        "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

        "#endif",

        "#if MAX_SPOT_LIGHTS > 0",

        "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
        "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
        "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
        "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",
        "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
        "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

        "#endif",
        ""
    ].join("\n"),

    VertexLight: [
        "void VertexLight(vec3 normal, vec3 worldPosition, vec3 viewPosition, inout vec3 diffuseLight) {",

        "	#if MAX_DIR_LIGHTS > 0",
        "		for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

        "			vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
        "			vec3 dirVector = normalize( lDirection.xyz );",

        "			float dotProduct = dot( normal, dirVector );",
        "			vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "			diffuseLight += directionalLightColor[ i ] * directionalLightWeighting;",
        "		}",
        "	#endif",

        "	#if MAX_POINT_LIGHTS > 0",
        "		for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

        "			vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
        "			vec3 lVector = lPosition.xyz + viewPosition;",

        "			float lDistance = 1.0;",
        "			if ( pointLightDistance[ i ] > 0.0 ) {",
        "				lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",
        "			}",

        "			lVector = normalize( lVector );",
        "			float dotProduct = dot( normal, lVector );",

        "			vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "			diffuseLight += pointLightColor[ i ] * pointLightWeighting * lDistance;",
        "		}",
        "	#endif",

        "	#if MAX_SPOT_LIGHTS > 0",
        "		for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

        "			vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
        "			vec3 lVector = lPosition.xyz + viewPosition;",

        "			float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition ) );",

        "			if ( spotEffect > spotLightAngleCos[ i ] ) {",

        "				spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

        "				float lDistance = 1.0;",
        "				if ( spotLightDistance[ i ] > 0.0 ) {",
        "					lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",
        "				}",

        "				lVector = normalize( lVector );",

        "				float dotProduct = dot( normal, lVector );",
        "				vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "				diffuseLight += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;",
        "			}",

        "		}",
        "	#endif",

        "	#if MAX_HEMI_LIGHTS > 0",
        "		for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

        "			vec4 lDirection = viewMatrix * vec4( hemiLightDirection[ i ], 0.0 );",
        "			vec3 lVector = normalize( lDirection.xyz );",

        "			float dotProduct = dot( normal, lVector );",
        "			float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

        "			diffuseLight += hemiLightColor[ i ] * hemiDiffuseWeight;",
        "		}",
        "	#endif",

        "	diffuseLight += ambient;",
        "}",
        ""
    ].join("\n"),

    perPixelVaryingHeader: [
        "varying vec3 vWorldPosition;",
        "varying vec3 vViewPosition;",
        "varying vec3 vNormal;",
        ""
    ].join("\n"),

    perPixelVaryingMain: [
        "	vWorldPosition = worldPosition.xyz;",
        "	vViewPosition = -mvPosition.xyz;",
        "	vNormal = transformedNormal;",
    ].join("\n"),

    PixelLight: [
        "void PixelLight(vec3 normal, vec3 specularColor, float specularStrength, float shininess, inout vec3 diffuseLight, inout vec3 specularLight) {",
        "	#if MAX_DIR_LIGHTS > 0",
        "		for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

        "			vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
        "			vec3 dirVector = normalize( lDirection.xyz );",

        "			float dotProduct = dot( normal, dirVector );",
        "			vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "			diffuseLight += directionalLightColor[ i ] * directionalLightWeighting;",

        "			vec3 dirHalfVector = normalize( dirVector + vViewPosition );",
        "			float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
        "			float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );",
        "			float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

        "			vec3 schlick = specularColor + vec3( 1.0 - specularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );",
        "			specularLight += schlick * directionalLightColor[ i ] * dirSpecularWeight * directionalLightWeighting * specularNormalization;",
        "		}",
        "	#endif",

        "	#if MAX_POINT_LIGHTS > 0",
        "		for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

        "			vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
        "			vec3 lVector = lPosition.xyz + vViewPosition;",

        "			float lDistance = 1.0;",
        "			if ( pointLightDistance[ i ] > 0.0 ) {",
        "				lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",
        "			}",

        "			lVector = normalize( lVector );",
        "			float dotProduct = dot( normal, lVector );",

        "			vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "			diffuseLight += pointLightColor[ i ] * pointLightWeighting * lDistance;",

        "			vec3 pointHalfVector = normalize( lVector + vViewPosition );",
        "			float pointDiffuseWeight = max( dotProduct, 0.0 );",
        "			float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
        "			float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

        "			float specularNormalization = ( shininess + 2.0001 ) / 8.0;",
        "			vec3 schlick = specularColor + vec3( 1.0 - specularColor ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );",
        "			specularLight += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;",
        "		}",
        "	#endif",

        "	#if MAX_SPOT_LIGHTS > 0",
        "		for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

        "			vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
        "			vec3 lVector = lPosition.xyz + vViewPosition;",

        "			float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

        "			if ( spotEffect > spotLightAngleCos[ i ] ) {",

        "				spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

        "				float lDistance = 1.0;",
        "				if ( spotLightDistance[ i ] > 0.0 ) {",
        "					lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",
        "				}",

        "				lVector = normalize( lVector );",

        "				float dotProduct = dot( normal, lVector );",
        "				vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "				diffuseLight += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;",

        "				vec3 spotHalfVector = normalize( lVector + vViewPosition );",
        "				float spotDiffuseWeight = max( dotProduct, 0.0 );",
        "				float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
        "				float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

        "				float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

        "				vec3 schlick = specularColor + vec3( 1.0 - specularColor ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );",
        "				specularLight += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;",
        "			}",

        "		}",
        "	#endif",

        "	#if MAX_HEMI_LIGHTS > 0",
        "		for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

        "			vec4 lDirection = viewMatrix * vec4( hemiLightDirection[ i ], 0.0 );",
        "			vec3 lVector = normalize( lDirection.xyz );",

        "			float dotProduct = dot( normal, lVector );",

        "			float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",
        "			float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;",

        "			diffuseLight += hemiLightColor[ i ] * hemiDiffuseWeight;",

        "			vec3 hemiHalfVector = normalize( lVector + vViewPosition );",
        "			float hemiDotNormalHalf = max( dot( normal, hemiHalfVector ), 0.0 );",
        "			float hemiSpecularWeight = specularStrength * max( pow( hemiDotNormalHalf, shininess ), 0.0 );",

        "			float specularNormalization = ( shininess + 2.0001 ) / 8.0;",
        "			vec3 schlick = specularColor + vec3( 1.0 - specularColor ) * pow( 1.0 - dot( lVector, hemiHalfVector ), 5.0 );",
        "			specularLight += schlick * hemiLightColor[ i ] * hemiSpecularWeight * hemiDiffuseWeight * specularNormalization;",
        "		}",
        "	#endif",

        "	diffuseLight += ambient;",
        "}",
        ""
    ].join("\n"),

    PixelLightNoSpec: [
        "vec3 PixelLightNoSpec(vec3 normal) {",
        "	vec3 diffuseLight;",

        "	#if MAX_DIR_LIGHTS > 0",
        "		for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

        "			vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
        "			vec3 dirVector = normalize( lDirection.xyz );",

        "			float dotProduct = dot( normal, dirVector );",
        "			vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "			diffuseLight += directionalLightColor[ i ] * directionalLightWeighting;",
        "		}",
        "	#endif",

        "	#if MAX_POINT_LIGHTS > 0",
        "		for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

        "			vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
        "			vec3 lVector = lPosition.xyz + vViewPosition;",

        "			float lDistance = 1.0;",
        "			if ( pointLightDistance[ i ] > 0.0 ) {",
        "				lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",
        "			}",

        "			lVector = normalize( lVector );",
        "			float dotProduct = dot( normal, lVector );",

        "			vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "			diffuseLight += pointLightColor[ i ] * pointLightWeighting * lDistance;",
        "		}",
        "	#endif",

        "	#if MAX_SPOT_LIGHTS > 0",
        "		for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

        "			vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
        "			vec3 lVector = lPosition.xyz + vViewPosition;",

        "			float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

        "			if ( spotEffect > spotLightAngleCos[ i ] ) {",

        "				spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

        "				float lDistance = 1.0;",
        "				if ( spotLightDistance[ i ] > 0.0 ) {",
        "					lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",
        "				}",

        "				lVector = normalize( lVector );",

        "				float dotProduct = dot( normal, lVector );",
        "				vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );",

        "				diffuseLight += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;",
        "			}",

        "		}",
        "	#endif",

        "	#if MAX_HEMI_LIGHTS > 0",
        "		for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

        "			vec4 lDirection = viewMatrix * vec4( hemiLightDirection[ i ], 0.0 );",
        "			vec3 lVector = normalize( lDirection.xyz );",

        "			float dotProduct = dot( normal, lVector );",

        "			float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",
        "			float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;",

        "			diffuseLight += hemiLightColor[ i ] * hemiDiffuseWeight;",
        "		}",
        "	#endif",

        "	diffuseLight += ambient;",

        "	return diffuseLight;",
        "}",
        ""
    ].join("\n")
};


module.exports = ShaderChunks;

},{}],97:[function(require,module,exports){
var Class = require("../base/class");
var GameObject = require("./game_object");
var ComponentManager = require("./component_managers/component_manager");
var World = require("./world/world");
var Log = require("./../base/log");
"use strict";


/**
 * Scenes manage GameObjects and their Components
 * @class Odin.Scene
 * @extends Odin.Class
 * @param Object options
 */
function Scene(opts) {
    opts || (opts = {});

    Class.call(this);

    this.game = undefined;

    this.name = opts.name != undefined ? opts.name : "Scene_" + this._id;

    this.world = undefined;

    this.gameObjects = [];
    this._gameObjectHash = {};
    this._gameObjectJSONHash = {};

    this.componentManagers = {};
    this._componentManagerTypes = [];
    this._componentHash = {};
    this._componentJSONHash = {};

    this.setWorld(opts.world instanceof World ? opts.world : new World(opts.world));
    if (opts.gameObjects) this.addGameObjects.apply(this, opts.gameObjects);
}

Class.extend(Scene);


Scene.prototype.copy = function (other) {
    var otherGameObjects = other.gameObjects,
        i = otherGameObjects.length;

    this.clear();
    this.name = other.name + "." + this._id;

    while (i--) this.addGameObject(otherGameObjects[i].clone());

    return this;
};


Scene.prototype.init = function () {
    var gameObjects = this.gameObjects,
        i, il;

    this.world && this.world.init();

    for (i = 0, il = gameObjects.length; i < il; i++) gameObjects[i].emit("init");
};


Scene.prototype.start = function () {
    var componentManagerTypes = this._componentManagerTypes,
        gameObjects = this.gameObjects,
        i, il;

    this.world && this.world.start();

    for (i = 0, il = componentManagerTypes.length; i < il; i++) componentManagerTypes[i].start();
    for (i = 0, il = gameObjects.length; i < il; i++) gameObjects[i].emit("start");
};


Scene.prototype.update = function () {
    var componentManagerTypes = this._componentManagerTypes,
        componentManagerType, i, il;

    this.world && this.world.update();

    for (i = 0, il = componentManagerTypes.length; i < il; i++) {
        if ((componentManagerType = componentManagerTypes[i])) componentManagerType.update();
    }
};


Scene.prototype.clear = function () {
    var gameObjects = this.gameObjects,
        i = gameObjects.length;

    this.removeWorld();
    while (i--) this.removeGameObject(gameObjects[i], true);

    this.off();

    return this;
};


Scene.prototype.destroy = function () {

    this.emit("destroy");
    this.clear();

    return this;
};


Scene.prototype.setWorld = function (world) {
    if (this.world) this.removeWorld();

    world.scene = this;
    this.world = world;

    if (this.game) world.init();

    return this;
};


Scene.prototype.removeWorld = function () {
    if (!this.world) return this;
    var world = this.world;

    world.scene = undefined;
    this.world = undefined;

    return this;
};


Scene.prototype.addGameObject = function (gameObject) {
    if (!(gameObject instanceof GameObject)) {
        Log.error("Scene.addGameObject: can't add argument to Scene, it's not an instance of GameObject");
        return this;
    }
    var gameObjects = this.gameObjects,
        index = gameObjects.indexOf(gameObject),
        components, transform, children, child,
        i;

    if (index === -1) {
        if (gameObject.scene) gameObject.scene.removeGameObject(gameObject);

        gameObjects.push(gameObject);
        this._gameObjectHash[gameObject._id] = gameObject;
        if (gameObject._jsonId !== -1) this._gameObjectJSONHash[gameObject._jsonId] = gameObject;

        gameObject.scene = this;

        components = gameObject.components;
        i = components.length;
        while (i--) this._addComponent(components[i]);

        if ((transform = gameObject.transform || gameObject.transform2d)) {
            i = (children = transform.children).length;

            while (i--) {
                if ((child = children[i].gameObject) && !this.hasGameObject(child)) {
                    this.addGameObject(child);
                }
            }
        }

        if (this.game) gameObject.emit("init");
        this.emit("addGameObject", gameObject);
    } else {
        Log.error("Scene.addGameObject: GameObject is already a member of Scene");
    }

    return this;
};


Scene.prototype.addGameObjects = function () {
    var i = 0,
        il = arguments.length;

    for (; i < il; i++) this.addGameObject(arguments[i]);
    return this;
};


Scene.prototype._addComponent = function (component) {
    if (!component) return;
    var type = component._type,
        componentManagers = this.componentManagers,
        componentManager = componentManagers[type],
        componentManagerTypes = this._componentManagerTypes,
        isNew = !componentManager;

    if (isNew) {
        componentManager = componentManagers[type] = new (Class._classes[type + "ComponentManager"] || ComponentManager);
        componentManagerTypes.push(componentManager);
        componentManagerTypes.sort(sortComponentManagerTypes);
        componentManager.scene = this;
    }

    componentManager.add(component);
    componentManager.sort();

    this._componentHash[component._id] = component;
    if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = component;

    this.emit("add" + type, component);
    this.emit("addComponent", component);

    if (this.game) {
        component.start();
        component.emit("start");
    }
};


function sortComponentManagerTypes(a, b) {

    return a.order - b.order;
}


Scene.prototype.removeGameObject = function (gameObject, clear) {
    if (!(gameObject instanceof GameObject)) {
        Log.error("Scene.removeGameObject: can't remove argument from Scene, it's not an instance of GameObject");
        return this;
    }
    var gameObjects = this.gameObjects,
        index = gameObjects.indexOf(gameObject),
        components, transform, children, child,
        i;

    if (index !== -1) {

        gameObjects.splice(index, 1);
        this._gameObjectHash[gameObject._id] = undefined;
        if (gameObject._jsonId !== -1) this._gameObjectJSONHash[gameObject._jsonId] = undefined;

        gameObject.scene = undefined;

        components = gameObject.components;
        i = components.length;
        while (i--) this._removeComponent(components[i], clear);

        if ((transform = gameObject.transform || gameObject.transform2d)) {
            i = (children = transform.children).length;

            while (i--) {
                if ((child = children[i].gameObject) && this.hasGameObject(child)) {
                    this.removeGameObject(child);
                }
            }
        }

        this.emit("removeGameObject", gameObject);
        gameObject.emit("remove", gameObject);
        if (clear) gameObject.clear();
    } else {
        Log.error("Scene.removeGameObject: GameObject is not a member of Scene");
    }

    return this;
};


Scene.prototype.removeGameObjects = function () {
    var i = 0,
        il = arguments.length;

    for (; i < il; i++) this.removeGameObject(arguments[i]);
    return this;
};


Scene.prototype._removeComponent = function (component, clear) {
    if (!component) return;
    var type = component._type,
        componentManagers = this.componentManagers,
        componentManager = componentManagers[type],
        componentManagerTypes = this._componentManagerTypes;

    componentManager.remove(component);
    this._componentHash[component._id] = undefined;
    if (component._jsonId !== -1) this._componentJSONHash[component._jsonId] = undefined;

    if (componentManager.empty()) {
        componentManagers[type] = undefined;
        componentManagerTypes.splice(componentManagerTypes.indexOf(componentManager), 1);
        componentManager.scene = undefined;
    }

    this.emit("remove" + type, component);
    this.emit("removeComponent", component);

    if (clear) component.clear();
};


Scene.prototype.hasGameObject = function (gameObject) {

    return !!~this.gameObjects.indexOf(gameObject);
};


Scene.prototype.findByTag = function (tag, out) {
    out || (out = []);
    var gameObjects = this.gameObjects,
        gameObject, i = gameObjects.length;

    while (i--) {
        if ((gameObject = gameObjects[i]).hasTag(tag)) out.push(gameObject);
    }

    return out;
};


Scene.prototype.findByTagFirst = function (tag) {
    var gameObjects = this.gameObjects,
        gameObject, i = gameObjects.length;

    while (i--) {
        if ((gameObject = gameObjects[i]).hasTag(tag)) return gameObject;
    }

    return undefined;
};


Scene.prototype.findById = function (id) {

    return this._gameObjectHash[id];
};


Scene.prototype.findByJSONId = function (id) {

    return this._gameObjectJSONHash[id];
};


Scene.prototype.findComponentById = function (id) {

    return this._componentHash[id];
};


Scene.prototype.findComponentByJSONId = function (id) {

    return this._componentJSONHash[id];
};


Scene.prototype.find = function (name) {
    var gameObjects = this.gameObjects,
        child, i = gameObjects.length;

    while (i--) {
        child = gameObjects[i];

        if (child.name === name) return child;
        if ((child = child.find(name))) return child;
    }

    return undefined;
};


Scene.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);
    var gameObjects = this.gameObjects,
        jsonGameObjects = json.gameObjects || (json.gameObjects = []),
        gameObject,
        i = gameObjects.length;

    json.name = this.name;
    json.world = this.world.toJSON(json.world);

    while (i--) {
        if ((gameObject = gameObjects[i])) jsonGameObjects[i] = gameObject.toJSON(jsonGameObjects[i]);
    }

    return json;
};


Scene.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);
    var jsonGameObjects = json.gameObjects,
        gameObject, jsonGameObject,
        i = jsonGameObjects.length;

    this.name = json.name;

    if (this.world._className === json.world._className) {
        this.world.fromJSON(json.world);
    } else {
        this.setWorld(Class.fromJSON(json.world));
    }

    while (i--) {
        if (!(jsonGameObject = jsonGameObjects[i])) continue;

        if ((gameObject = this._gameObjectJSONHash[jsonGameObject._id])) {
            gameObject.fromJSON(jsonGameObject);
        } else {
            this.addGameObject(Class.fromJSON(jsonGameObject));
        }
    }

    return this;
};


module.exports = Scene;

},{"../base/class":8,"./../base/log":14,"./component_managers/component_manager":43,"./game_object":77,"./world/world":98}],98:[function(require,module,exports){
var Class = require("../../base/class");
var Color = require("../../math/color");
"use strict";


function World(opts) {
    opts || (opts = {});

    Class.call(this);

    this.scene = undefined;

    this.ambient = opts.ambient != undefined ? opts.ambient : new Color;
}

Class.extend(World);


World.prototype.init = function () {

};


World.prototype.start = function () {

};


World.prototype.update = function () {

};


World.prototype.clear = function () {

    return this;
};


World.prototype.destroy = function () {
    if (!this.scene) {
        Log.error("World.destroy: can't destroy World if it's not set to a Scene");
        return this;
    }

    this.scene.removeWorld();
    this.emit("destroy");

    this.clear();

    return this;
};


World.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.ambient = this.ambient.toJSON(json.ambient);

    return json;
};


World.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.ambient.fromJSON(json.ambient);

    return this;
};


module.exports = World;

},{"../../base/class":8,"../../math/color":102}],99:[function(require,module,exports){
var util = require("../../base/util");
var Time = require("../../base/time");
var Color = require("../../math/color");
var World = require("./world");
var Phys2D = require("../../phys2d/phys2d");
"use strict";


function World2D(opts) {
    opts || (opts = {});

    World.call(this, opts);

    this.space = new Phys2D.P2Space(opts.space);
}

World.extend(World2D);


World2D.prototype.init = function () {
    var space = this.space,
        scene = this.scene,
        RigidBodies = scene.componentManagers.RigidBody2D;

    function addBody(component) {

        space.addBody(component.body);
    }

    if (RigidBodies) RigidBodies.forEach(addBody);
    scene.on("addRigidBody2D", addBody);

    scene.on("removeRigidBody2D", function (component) {
        space.removeBody(component.body);
    });
};


World2D.prototype.update = function () {

    this.space.step(Time.delta);
};


World2D.prototype.clear = function () {
    World.prototype.clear.call(this);

    return this;
};


World2D.prototype.toSYNC = function (json) {
    json = World.prototype.toSYNC.call(this, json);

    return json;
};


World2D.prototype.fromSYNC = function (json) {
    World.prototype.fromSYNC.call(this, json);

    return this;
};


World2D.prototype.toJSON = function (json) {
    json = World.prototype.toJSON.call(this, json);

    json.space = this.space.toJSON(json.space);

    return json;
};


World2D.prototype.fromJSON = function (json) {
    World.prototype.fromJSON.call(this, json);

    this.space.fromJSON(json.space);

    return this;
};


module.exports = World2D;

},{"../../base/time":18,"../../base/util":19,"../../math/color":102,"../../phys2d/phys2d":131,"./world":98}],100:[function(require,module,exports){
var Mathf = require("./mathf");
var Vec2 = require("./vec2");
"use strict";


/**
 * @class AABB2
 * 2d axis aligned bounding box
 * @param Vec2 min
 * @param Vec2 max
 */
function AABB2(min, max) {

    /**
     * @property Vec2 min
     * @memberof Odin.AABB2
     */
    this.min = min || new Vec2(Infinity, Infinity);

    /**
     * @property Vec2 max
     * @memberof Odin.AABB2
     */
    this.max = max || new Vec2(-Infinity, -Infinity);
}

/**
 * @method clone
 * @memberof Odin.AABB2
 * returns new copy of this
 * @return AABB2
 */
AABB2.prototype.clone = function () {

    return new AABB2(this.min.clone(), this.max.clone());
};

/**
 * @method copy
 * @memberof Odin.AABB2
 * copies other AABB
 * @param AABB2 other
 * @return this
 */
AABB2.prototype.copy = function (other) {

    this.min.copy(other.min);
    this.max.copy(other.max);

    return this;
};

/**
 * @method set
 * @memberof Odin.AABB2
 * set min and max vectors
 * @param Vec2 min
 * @param Vec2 max
 * @return this
 */
AABB2.prototype.set = function (min, max) {

    this.min.copy(min);
    this.max.copy(max);

    return this;
};

/**
 * @method expandPoint
 * @memberof Odin.AABB2
 * @param Vec2 v
 * @return this
 */
AABB2.prototype.expandPoint = function (v) {

    this.min.min(v);
    this.max.max(v);

    return this;
};

/**
 * @method expandVec
 * @memberof Odin.AABB2
 * @param Vec2 v
 * @return this
 */
AABB2.prototype.expandVec = function (v) {

    this.min.sub(v);
    this.max.add(v);

    return this;
};

/**
 * @method expandScalar
 * @memberof Odin.AABB2
 * @param Number s
 * @return this
 */
AABB2.prototype.expandScalar = function (s) {

    this.min.ssub(s);
    this.max.sadd(s);

    return this;
};

/**
 * @method union
 * @memberof Odin.AABB2
 * joins this and another aabb
 * @param AABB2 aabb
 * @return this
 */
AABB2.prototype.union = function (other) {

    this.min.min(other.min);
    this.max.max(other.max);

    return this;
};

/**
 * @method clear
 * @memberof Odin.AABB2
 * clears aabb
 * @return this
 */
AABB2.prototype.clear = function () {

    this.min.set(Infinity, Infinity);
    this.max.set(-Infinity, -Infinity);

    return this;
};

/**
 * @method contains
 * @memberof Odin.AABB2
 * checks if AABB contains point
 * @param Vec2 point
 * @return Boolean
 */
AABB2.prototype.contains = function (point) {
    var min = this.min,
        max = this.max,
        px = point.x,
        py = point.y;

    return !(
    px < min.x || px > max.x ||
    py < min.y || py > max.y
    );
};

/**
 * @method intersects
 * @memberof Odin.AABB2
 * checks if AABB intersects AABB
 * @param AABB2 other
 * @return Boolean
 */
AABB2.prototype.intersects = function (other) {
    var aMin = this.min,
        aMax = this.max,
        bMin = other.min,
        bMax = other.max;

    return !(
    bMax.x < aMin.x || bMin.x > aMax.x ||
    bMax.y < aMin.y || bMin.y > aMax.y
    );
};

/**
 * @method fromPoints
 * @memberof Odin.AABB2
 * set min and max from array of vectors
 * @param Array points
 * @return this
 */
AABB2.prototype.fromPoints = function (points) {
    var v, i = points.length,
        minx = Infinity,
        miny = Infinity,
        maxx = -Infinity,
        maxy = -Infinity,
        min = this.min,
        max = this.max,
        x, y;

    while (i--) {
        v = points[i];
        x = v.x;
        y = v.y;

        minx = minx > x ? x : minx;
        miny = miny > y ? y : miny;

        maxx = maxx < x ? x : maxx;
        maxy = maxy < y ? y : maxy;
    }

    min.x = minx;
    min.y = miny;
    max.x = maxx;
    max.y = maxy;

    return this;
};

/**
 * @method fromCenterSize
 * @memberof Odin.AABB2
 * sets this from a center point and a size vector
 * @param Vec2 center
 * @param Vec2 size
 * @return this
 */
AABB2.prototype.fromCenterSize = function (center, size) {
    var min = this.min,
        max = this.max,
        x = center.x,
        y = center.y,
        hx = size.x * 0.5,
        hy = size.y * 0.5;

    min.x = x - hx;
    min.y = y - hy;

    max.x = x + hx;
    max.y = y + hy;

    return this;
};

/**
 * @memberof Odin.AABB2
 * @param Odin.AABB2 other
 * @return this
 */
AABB2.prototype.equals = function (other) {

    return !(!this.min.equals(other.min) || !this.max.equals(other.max));
};

/**
 * @memberof Odin.AABB2
 * @param Odin.AABB2 other
 * @return this
 */
AABB2.prototype.equals = function (other) {

    return (this.min.notEquals(other.min) || this.max.notEquals(other.max));
};

/**
 * @method fromJSON
 * @memberof Odin.AABB2
 * sets values from json object
 * @param Object json
 * @return this
 */
AABB2.prototype.fromJSON = function (json) {

    this.min.fromJSON(json.min);
    this.max.fromJSON(json.max);

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.AABB2
 * returns json object
 * @return Object
 */
AABB2.prototype.toJSON = function (json) {
    json || (json = {});

    json.min = this.min.toJSON(json.min);
    json.max = this.max.toJSON(json.max);

    return json;
};

/**
 * @method toString
 * @memberof Odin.AABB2
 * converts AABB to string "AABB2( min: Vec2( -1, -1 ), max: Vec2( 1, 1 ) )"
 * @return String
 */
AABB2.prototype.toString = function () {
    var min = this.min,
        max = this.max;

    return "AABB2( min: " + min + ", max: " + max + " )";
};


module.exports = AABB2;

},{"./mathf":107,"./vec2":111}],101:[function(require,module,exports){
var Mathf = require("./mathf");
var Vec3 = require("./vec3");
"use strict";


/**
 * @class AABB3
 * 2d axis aligned bounding box
 * @param Vec3 min
 * @param Vec3 max
 */
function AABB3(min, max) {

    /**
     * @property Vec3 min
     * @memberof Odin.AABB3
     */
    this.min = min || new Vec3(Infinity, Infinity, Infinity);

    /**
     * @property Vec3 max
     * @memberof Odin.AABB3
     */
    this.max = max || new Vec3(-Infinity, -Infinity, -Infinity);
}

/**
 * @method clone
 * @memberof Odin.AABB3
 * returns new copy of this
 * @return AABB3
 */
AABB3.prototype.clone = function () {

    return new AABB3(this.min.clone(), this.max.clone());
};

/**
 * @method copy
 * @memberof Odin.AABB3
 * copies other AABB
 * @param AABB3 other
 * @return this
 */
AABB3.prototype.copy = function (other) {

    this.min.copy(other.min);
    this.max.copy(other.max);

    return this;
};

/**
 * @method set
 * @memberof Odin.AABB3
 * set min and max vectors
 * @param Vec3 min
 * @param Vec3 max
 * @return this
 */
AABB3.prototype.set = function (min, max) {

    this.min.copy(min);
    this.max.copy(max);

    return this;
};

/**
 * @method expandPoint
 * @memberof Odin.AABB3
 * @param Vec3 v
 * @return this
 */
AABB3.prototype.expandPoint = function (v) {

    this.min.min(v);
    this.max.max(v);

    return this;
};

/**
 * @method expandVec
 * @memberof Odin.AABB3
 * @param Vec3 v
 * @return this
 */
AABB3.prototype.expandVec = function (v) {

    this.min.sub(v);
    this.max.add(v);

    return this;
};

/**
 * @method expandScalar
 * @memberof Odin.AABB3
 * @param Number s
 * @return this
 */
AABB3.prototype.expandScalar = function (s) {

    this.min.ssub(s);
    this.max.sadd(s);

    return this;
};

/**
 * @method union
 * @memberof Odin.AABB3
 * joins this and another aabb
 * @param AABB3 aabb
 * @return this
 */
AABB3.prototype.union = function (other) {

    this.min.min(other.min);
    this.max.max(other.max);

    return this;
};

/**
 * @method clear
 * @memberof Odin.AABB3
 * clears aabb
 * @return this
 */
AABB3.prototype.clear = function () {

    this.min.set(Infinity, Infinity, Infinity);
    this.max.set(-Infinity, -Infinity, -Infinity);

    return this;
};

/**
 * @method contains
 * @memberof Odin.AABB3
 * checks if AABB contains point
 * @param Vec3 point
 * @return Boolean
 */
AABB3.prototype.contains = function (point) {
    var min = this.min,
        max = this.max,
        px = point.x,
        py = point.y,
        pz = point.z;

    return !(
    px < min.x || px > max.x ||
    py < min.y || py > max.y ||
    pz < min.z || pz > max.z
    );
};

/**
 * @method intersects
 * @memberof Odin.AABB3
 * checks if AABB intersects AABB
 * @param AABB3 other
 * @return Boolean
 */
AABB3.prototype.intersects = function (other) {
    var aMin = this.min,
        aMax = this.max,
        bMin = other.min,
        bMax = other.max;

    return !(
    bMax.x < aMin.x || bMin.x > aMax.x ||
    bMax.y < aMin.y || bMin.y > aMax.y ||
    bMax.z < aMin.z || bMin.z > aMax.z
    );
};

/**
 * @method fromPoints
 * @memberof Odin.AABB3
 * set min and max from array of vectors
 * @param Array points
 * @return this
 */
AABB3.prototype.fromPoints = function (points) {
    var v, i = points.length,
        minx = Infinity,
        miny = Infinity,
        minz = Infinity,
        maxx = -Infinity,
        maxy = -Infinity,
        maxz = -Infinity,
        min = this.min,
        max = this.max,
        x, y, z;

    while (i--) {
        v = points[i];
        x = v.x;
        y = v.y;
        z = v.z;

        minx = minx > x ? x : minx;
        miny = miny > y ? y : miny;
        minz = minz > z ? z : minz;

        maxx = maxx < x ? x : maxx;
        maxy = maxy < y ? y : maxy;
        maxz = maxz < z ? z : maxz;
    }

    min.x = minx;
    min.y = miny;
    min.z = minz;
    max.x = maxx;
    max.y = maxy;
    max.z = maxz;

    return this;
};

/**
 * @method fromCenterSize
 * @memberof Odin.AABB3
 * sets this from a center point and a size vector
 * @param Vec3 center
 * @param Vec3 size
 * @return this
 */
AABB3.prototype.fromCenterSize = function (center, size) {
    var min = this.min,
        max = this.max,
        x = center.x,
        y = center.y,
        z = center.z,
        hx = size.x * 0.5,
        hy = size.y * 0.5,
        hz = size.z * 0.5;

    min.x = x - hx;
    min.y = y - hy;
    min.z = z - hz;

    max.x = x + hx;
    max.y = y + hy;
    max.z = z + hz;

    return this;
};

/**
 * @memberof Odin.AABB3
 * @param Odin.AABB3 other
 * @return this
 */
AABB3.prototype.equals = function (other) {

    return !(!this.min.equals(other.min) || !this.max.equals(other.max));
};

/**
 * @memberof Odin.AABB3
 * @param Odin.AABB3 other
 * @return this
 */
AABB3.prototype.notEquals = function (other) {

    return (this.min.notEquals(other.min) || this.max.notEquals(other.max));
};

/**
 * @method fromJSON
 * @memberof Odin.AABB3
 * sets values from json object
 * @param Object json
 * @return this
 */
AABB3.prototype.fromJSON = function (json) {

    this.min.fromJSON(json.min);
    this.max.fromJSON(json.max);

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.AABB3
 * returns json object
 * @return Object
 */
AABB3.prototype.toJSON = function (json) {
    json || (json = {});

    json.min = this.min.toJSON(json.min);
    json.max = this.max.toJSON(json.max);

    return json;
};

/**
 * @method toString
 * @memberof Odin.AABB3
 * converts AABB to string "AABB3( min: Vec3( -1, -1 ), max: Vec3( 1, 1 ) )"
 * @return String
 */
AABB3.prototype.toString = function () {
    var min = this.min,
        max = this.max;

    return "AABB3( min: " + min + ", max: " + max + " )";
};


module.exports = AABB3;

},{"./mathf":107,"./vec3":112}],102:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var sqrt = Math.sqrt,
    floor = Math.floor,
    clamp01 = Mathf.clamp01,
    defineProperty = Object.defineProperty;

/**
 * @class Color
 * rgb color, values 0.0 - 1
 * @param Number r
 * @param Number g
 * @param Number b
 */
function Color(r, g, b) {

    /**
     * @property Number r
     * @memberof Odin.Color
     */
    this.r = 0.0;

    /**
     * @property Number g
     * @memberof Odin.Color
     */
    this.g = 0.0;

    /**
     * @property Number b
     * @memberof Odin.Color
     */
    this.b = 0.0;

    this._r = 0.0;
    this._g = 0.0;
    this._b = 0.0;
    this._hex = "#000000";
    this._rgb = "rgb(0,0,0)";

    this.set(r, g, b);
}

Mathf._classes["Color"] = Color;

defineProperty(Color.prototype, "x", {
    get: function () {
        return this.r;
    },
    set: function (value) {
        this.r = value;
    }
});
defineProperty(Color.prototype, "y", {
    get: function () {
        return this.g;
    },
    set: function (value) {
        this.g = value;
    }
});
defineProperty(Color.prototype, "z", {
    get: function () {
        return this.b;
    },
    set: function (value) {
        this.b = value;
    }
});

/**
 * @method clone
 * @memberof Odin.Color
 * returns new instance of this
 * @return Color
 */
Color.prototype.clone = function () {

    return new Color(this.r, this.g, this.b);
};

/**
 * @method copy
 * @memberof Odin.Color
 * copies other
 * @param Color other
 * @return this
 */
Color.prototype.copy = function (other) {

    this.r = other.r;
    this.g = other.g;
    this.b = other.b;

    return this;
};

/**
 * @method set
 * @memberof Odin.Color
 * sets values of this
 * @param Number r
 * @param Number g
 * @param Number b
 * @return this
 */
Color.prototype.set = function (r, g, b) {
    var type = typeof(r);

    if (type === "number") {
        this.r = r;
        this.g = g;
        this.b = b;
    } else if (type === "string") {
        this.setStyle(r);
    } else if (r instanceof Color) {
        this.r = r.r;
        this.g = r.g;
        this.b = r.b;
    }

    return this;
};

/**
 * @method setRGB
 * @memberof Odin.Color
 * sets rgb values of this
 * @param Number r
 * @param Number g
 * @param Number b
 * @return this
 */
Color.prototype.setRGB = function (r, g, b) {

    this.r = r;
    this.g = g;
    this.b = b;

    return this;
};

/**
 * @method setStyle
 * @memberof Odin.Color
 * sets values of this from string
 * @param String style
 * @return this
 */
Color.prototype.setStyle = function () {
    var rgb255 = /^rgb\((\d+),(\d+),(\d+)\)$/i,
        rgb100 = /^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i,
        hex6 = /^\#([0.0-9a-f]{6})$/i,
        hex3 = /^\#([0.0-9a-f])([0.0-9a-f])([0.0-9a-f])$/i,
        hex3to6 = /#(.)(.)(.)/,
        hex3to6String = "#$1$1$2$2$3$3",
        colorName = /^(\w+)$/i,
        inv255 = 1.0 / 255.0,
        inv100 = 1.0 / 100.0;

    return function (style) {

        if (rgb255.test(style)) {
            var color = rgb255.exec(style);

            this.r = min(255, Number(color[1])) * inv255;
            this.g = min(255, Number(color[2])) * inv255;
            this.b = min(255, Number(color[3])) * inv255;

            return this;
        }

        if (rgb100.test(style)) {
            var color = rgb100.exec(style);

            this.r = min(100, Number(color[1])) * inv100;
            this.g = min(100, Number(color[2])) * inv100;
            this.b = min(100, Number(color[3])) * inv100;

            return this;
        }

        if (hex6.test(style)) {

            this.r = parseInt(style.substr(1, 2), 16) * inv255;
            this.g = parseInt(style.substr(3, 2), 16) * inv255;
            this.b = parseInt(style.substr(5, 2), 16) * inv255;

            return this;
        }

        if (hex3.test(style)) {
            style = style.replace(hex3to6, hex3to6String);

            this.r = parseInt(style.substr(1, 2), 16) * inv255;
            this.g = parseInt(style.substr(3, 2), 16) * inv255;
            this.b = parseInt(style.substr(5, 2), 16) * inv255;

            return this;
        }

        if (colorName.test(style)) {
            style = colorNames[style];

            this.r = parseInt(style.substr(1, 2), 16) * inv255;
            this.g = parseInt(style.substr(3, 2), 16) * inv255;
            this.b = parseInt(style.substr(5, 2), 16) * inv255;

            return this;
        }

        return this;
    };
}();

/**
 * @method toHEX
 * @memberof Odin.Color
 * returns this color in HEX format
 * @return Color
 */
Color.prototype.toHEX = function () {

    if (this.r !== this._r || this.g !== this._g || this.b !== this._b) {
        var hexR = singleToHEX(this.r),
            hexG = singleToHEX(this.g),
            hexB = singleToHEX(this.b);

        this._r = this.r;
        this._g = this.g;
        this._b = this.b;
        this._hex = "#" + hexR + hexG + hexB;
        this._rgb = "rgb(" + floor(clamp01(this.r) * 256) + "," + floor(clamp01(this.g) * 256) + "," + floor(clamp01(this.b) * 256) + ")";
    }

    return this._hex;
};

/**
 * @method toRGB
 * @memberof Odin.Color
 * returns this color in RGB format
 * @return Color
 */
Color.prototype.toRGB = function () {

    if (this.r !== this._r || this.g !== this._g || this.b !== this._b) {
        var r = floor(clamp01(this.r) * 256),
            g = floor(clamp01(this.g) * 256),
            b = floor(clamp01(this.b) * 256);

        this._r = this.r;
        this._g = this.g;
        this._b = this.b;
        this._rgb = "rgb(" + r + "," + g + "," + b + ")";
        this._hex = "#" + singleToHEX(this.r) + singleToHEX(this.g) + singleToHEX(this.b);
    }

    return this._rgb;
};

/**
 * @method add
 * @memberof Odin.Color
 * adds other's values to this
 * @param Color other
 * @return this
 */
Color.prototype.add = function (other) {

    this.r += other.r;
    this.g += other.g;
    this.b += other.b;

    return this;
};

/**
 * @method cadd
 * @memberof Odin.Color
 * adds a and b together saves it in this
 * @param Color a
 * @param Color b
 * @return this
 */
Color.prototype.cadd = function (a, b) {

    this.r = a.r + b.r;
    this.g = a.g + b.g;
    this.b = a.b + b.b;

    return this;
};

/**
 * @method sadd
 * @memberof Odin.Color
 * adds scalar value to this
 * @param Number s
 * @return this
 */
Color.prototype.sadd = function (s) {

    this.r += s;
    this.g += s;
    this.b += s;

    return this;
};

/**
 * @method sub
 * @memberof Odin.Color
 * subtracts other's values from this
 * @param Color other
 * @return this
 */
Color.prototype.sub = function (other) {

    this.r -= other.r;
    this.g -= other.g;
    this.b -= other.b;

    return this;
};

/**
 * @method csub
 * @memberof Odin.Color
 * subtracts b from a saves it in this
 * @param Color a
 * @param Color b
 * @return this
 */
Color.prototype.csub = function (a, b) {

    this.r = a.r - b.r;
    this.g = a.g - b.g;
    this.b = a.b - b.b;

    return this;
};

/**
 * @method ssub
 * @memberof Odin.Color
 * subtracts this by a scalar value
 * @param Number s
 * @return this
 */
Color.prototype.ssub = function (s) {

    this.r -= s;
    this.g -= s;
    this.b -= s;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Color
 * muliples this's values by other's
 * @param Color other
 * @return this
 */
Color.prototype.mul = function (other) {

    this.r *= other.r;
    this.g *= other.g;
    this.b *= other.b;

    return this;
};

/**
 * @method cmul
 * @memberof Odin.Color
 * muliples a and b saves it in this
 * @param Color a
 * @param Color b
 * @return this
 */
Color.prototype.cmul = function (a, b) {

    this.r = a.r * b.r;
    this.g = a.g * b.g;
    this.b = a.b * b.b;

    return this;
};

/**
 * @method smul
 * @memberof Odin.Color
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Color.prototype.smul = function (s) {

    this.r *= s;
    this.g *= s;
    this.b *= s;

    return this;
};

/**
 * @method div
 * @memberof Odin.Color
 * divides this's values by other's
 * @param Color other
 * @return this
 */
Color.prototype.div = function (other) {
    var x = other.r,
        y = other.g,
        z = other.b;

    this.r *= x !== 0.0 ? 1.0 / x : 0.0;
    this.g *= y !== 0.0 ? 1.0 / y : 0.0;
    this.b *= z !== 0.0 ? 1.0 / z : 0.0;

    return this;
};

/**
 * @method cdiv
 * @memberof Odin.Color
 * divides b from a saves it in this
 * @param Color a
 * @param Color b
 * @return this
 */
Color.prototype.cdiv = function (a, b) {
    var x = b.r,
        y = b.g,
        z = b.b;

    this.r = x !== 0.0 ? a.r / x : 0.0;
    this.g = y !== 0.0 ? a.g / y : 0.0;
    this.b = z !== 0.0 ? a.b / z : 0.0;

    return this;
};

/**
 * @method sdiv
 * @memberof Odin.Color
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Color.prototype.sdiv = function (s) {
    s = s === 0.0 ? 0.0 : 1.0 / s;

    this.r *= s;
    this.g *= s;
    this.b *= s;

    return this;
};

/**
 * @method length
 * @memberof Odin.Color
 * returns length of this
 * @return this
 */
Color.prototype.length = function () {
    var r = this.r,
        g = this.g,
        b = this.b,
        l = r * r + g * g + b * b;

    return l > 0.0 ? 1.0 / sqrt(l) : 0.0;
};

/**
 * @method lengthSq
 * @memberof Odin.Color
 * returns length squared of this
 * @return this
 */
Color.prototype.lengthSq = function () {
    var r = this.r,
        g = this.g,
        b = this.b;

    return r * r + g * g + b * b;
};

/**
 * @method normalize
 * @memberof Odin.Color
 * returns this with a length of 1
 * @return this
 */
Color.prototype.normalize = function () {
    var r = this.r,
        g = this.g,
        b = this.b,
        l = r * r + g * g + b * b;

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.r *= l;
    this.g *= l;
    this.b *= l;

    return this;
};

/**
 * @method cnormalize
 * @memberof Odin.Color
 * ensures that each value is no larger than 1
 * @return this
 */
Color.prototype.cnormalize = function () {
    var r = this.r,
        g = this.g,
        b = this.b;

    this.r = r > 1.0 ? 1.0 : r;
    this.g = g > 1.0 ? 1.0 : g;
    this.b = b > 1.0 ? 1.0 : b;

    return this;
};

/**
 * @method lerp
 * @memberof Odin.Color
 * linear interpolation between this and other by x
 * @param Color other
 * @param Number x
 * @return Color
 */
Color.prototype.lerp = function (other, x) {

    this.r += (other.r - this.r) * x;
    this.g += (other.g - this.g) * x;
    this.b += (other.b - this.b) * x;

    return this;
};

/**
 * @method clerp
 * @memberof Odin.Color
 * linear interpolation between a and b by x
 * @param Color a
 * @param Color b
 * @param Number x
 * @return Color
 */
Color.prototype.clerp = function (a, b, x) {
    var ax = a.r,
        ay = a.g,
        az = a.b;

    this.r = ax + (b.r - ax) * x;
    this.g = ay + (b.g - ay) * x;
    this.b = az + (b.b - az) * x;

    return this;
};

/**
 * @method min
 * @memberof Odin.Color
 * returns min values from this and other vector
 * @param Color other
 * @return Color
 */
Color.prototype.min = function (other) {
    var ar = this.r,
        ag = this.g,
        ab = this.b,
        br = other.r,
        bg = other.g,
        bb = other.b;

    this.r = br < ar ? br : ar;
    this.g = bg < ag ? bg : ag;
    this.b = bb < ab ? bb : ab;

    return this;
};

/**
 * @method max
 * @memberof Odin.Color
 * returns max values from this and other vector
 * @param Color other
 * @return Color
 */
Color.prototype.max = function (other) {
    var ar = this.r,
        ag = this.g,
        ab = this.b,
        br = other.r,
        bg = other.g,
        bb = other.b;

    this.r = br > ar ? br : ar;
    this.g = bg > ag ? bg : ag;
    this.b = bb > ab ? bb : ab;

    return this;
};

/**
 * @method fromVec2
 * @memberof Odin.Color
 * sets values from Vec2
 * @param Vec2 v
 * @return this
 */
Color.prototype.fromVec2 = function (v) {

    this.r = v.x;
    this.g = v.y;
    this.b = 0.0;

    return this;
};

/**
 * @method fromVec3
 * @memberof Odin.Color
 * sets values from Vec3
 * @param Vec3 v
 * @return this
 */
Color.prototype.fromVec3 = function (v) {

    this.r = v.x;
    this.g = v.y;
    this.b = v.z;

    return this;
};

/**
 * @method fromVec4
 * @memberof Odin.Color
 * sets values from Vec4
 * @param Vec4 v
 * @return this
 */
Color.prototype.fromVec4 = Color.prototype.fromVec3;

/**
 * @memberof Odin.Color
 * @param Odin.Color other
 * @return this
 */
Color.prototype.equals = function (other) {

    return !(
    this.r !== other.r ||
    this.g !== other.g ||
    this.b !== other.b
    );
};

/**
 * @memberof Odin.Color
 * @param Odin.Color other
 * @return this
 */
Color.prototype.notEquals = function (other) {

    return (
    this.r !== other.r ||
    this.g !== other.g ||
    this.b !== other.b
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Color
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Color.prototype.fromJSON = function (json) {

    this.r = json.r;
    this.g = json.g;
    this.b = json.b;

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.Color
 * returns json object of this
 * @return Object
 */
Color.prototype.toJSON = function (json) {
    json || (json = {});

    json._className = "Color";
    json.r = this.r;
    json.g = this.g;
    json.b = this.b;

    return json;
};

/**
 * @method fromArray
 * @memberof Odin.Color
 * sets values from Array object
 * @param Array array
 * @return this
 */
Color.prototype.fromArray = function (array) {

    this.r = array[0];
    this.g = array[1];
    this.b = array[2];

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Color
 * returns array object of this
 * @return Array
 */
Color.prototype.toArray = function (array) {
    array || (array = []);

    array[0] = this.r;
    array[1] = this.g;
    array[2] = this.b;

    return array;
};

/**
 * @method toString
 * @memberof Odin.Color
 * returns string of this
 * @return String
 */
Color.prototype.toString = function () {

    return "Color( " + this.r + ", " + this.g + ", " + this.b + " )";
};


function singleToHEX(value) {
    var str = (~~(clamp01(value) * 255)).toString(16);
    return str.length === 1 ? "0" + str : str;
}


var colorNames = Color.colorNames = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgrey: "#d3d3d3",
    lightgreen: "#90ee90",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370d8",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#d87093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
};


module.exports = Color;

},{"./mathf":107}],103:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var cos = Math.cos,
    sin = Math.sin,
    atan2 = Math.atan2;

/**
 * @class Mat2
 * 2x2 matrix
 * @param Number m11
 * @param Number m12
 * @param Number m21
 * @param Number m22
 */
function Mat2(m11, m12, m21, m22) {
    var te = new Float32Array(4);

    /**
     * @property Float32Array elements
     * @memberof Odin.Mat2
     */
    this.elements = te;

    te[0] = m11 != undefined ? m11 : 1.0;
    te[2] = m12 || 0.0;
    te[1] = m21 || 0.0;
    te[3] = m22 != undefined ? m22 : 1.0;
}

Mathf._classes["Mat2"] = Mat2;

/**
 * @method clone
 * @memberof Odin.Mat2
 * returns new instance of this
 * @return Mat2
 */
Mat2.prototype.clone = function () {
    var te = this.elements;

    return new Mat2(
        te[0], te[1],
        te[2], te[3]
    );
};

/**
 * @method copy
 * @memberof Odin.Mat2
 * copies other
 * @param Mat2 other
 * @return this
 */
Mat2.prototype.copy = function (other) {
    var te = this.elements,
        me = other.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];

    return this;
};

/**
 * @method set
 * @memberof Odin.Mat2
 * sets values of this
 * @param Number m11
 * @param Number m12
 * @param Number m21
 * @param Number m22
 * @return this
 */
Mat2.prototype.set = function (m11, m12, m21, m22) {
    var te = this.elements;

    te[0] = m11;
    te[2] = m12;
    te[1] = m21;
    te[3] = m22;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Mat2
 * muliples this's values by other's
 * @param Mat2 other
 * @return this
 */
Mat2.prototype.mul = function (other) {
    var ae = this.elements,
        be = other.elements,

        a11 = ae[0],
        a12 = ae[2],
        a21 = ae[1],
        a22 = ae[3],

        b11 = be[0],
        b12 = be[2],
        b21 = be[1],
        b22 = be[3];

    ae[0] = a11 * b11 + a21 * b12;
    ae[1] = a12 * b11 + a22 * b12;

    ae[2] = a11 * b21 + a21 * b22;
    ae[3] = a12 * b21 + a22 * b22;

    return this;
};

/**
 * @method mmul
 * @memberof Odin.Mat2
 * muliples a and b saves it in this
 * @param Mat2 a
 * @param Mat2 b
 * @return this
 */
Mat2.prototype.mmul = function (a, b) {
    var te = this.elements,
        ae = a.elements,
        be = b.elements,

        a11 = ae[0],
        a12 = ae[2],
        a21 = ae[1],
        a22 = ae[3],

        b11 = be[0],
        b12 = be[2],
        b21 = be[1],
        b22 = be[3];

    te[0] = a11 * b11 + a21 * b12;
    te[1] = a12 * b11 + a22 * b12;

    te[2] = a11 * b21 + a21 * b22;
    te[3] = a12 * b21 + a22 * b22;

    return this;
};

/**
 * @method smul
 * @memberof Odin.Mat2
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Mat2.prototype.smul = function (s) {
    var te = this.elements;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;

    return this;
};

/**
 * @method sdiv
 * @memberof Odin.Mat2
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Mat2.prototype.sdiv = function (s) {
    var te = this.elements;

    s = s !== 0.0 ? 1.0 / s : 1.0;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;

    return this;
};

/**
 * @method identity
 * @memberof Odin.Mat2
 * identity matrix
 * @return this
 */
Mat2.prototype.identity = function () {
    var te = this.elements;

    te[0] = 1;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 1;

    return this;
};

/**
 * @method zero
 * @memberof Odin.Mat2
 * zero matrix
 * @return this
 */
Mat2.prototype.zero = function () {
    var te = this.elements;

    te[0] = 0.0;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;

    return this;
};

/**
 * @method determinant
 * @memberof Odin.Mat2
 * returns the determinant of this
 * @return this
 */
Mat2.prototype.determinant = function () {
    var te = this.elements;

    return te[0] * te[3] - te[2] * te[1];
};

/**
 * @method inverse
 * @memberof Odin.Mat2
 * returns the inverse of this
 * @return this
 */
Mat2.prototype.inverse = function () {
    var te = this.elements,

        m11 = te[0],
        m12 = te[2],
        m21 = te[1],
        m22 = te[3],

        det = m11 * m22 - m12 * m21;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m22 * det;
    te[1] = -m12 * det;
    te[2] = -m21 * det;
    te[3] = m11 * det;

    return this;
};

/**
 * @method inverseMat
 * @memberof Odin.Mat2
 * returns the inverse of other
 * @param Mat2 other
 * @return this
 */
Mat2.prototype.inverseMat = function (other) {
    var te = this.elements,
        me = other.elements,

        m11 = me[0],
        m12 = me[2],
        m21 = me[1],
        m22 = me[3],

        det = m11 * m22 - m12 * m21;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m22 * det;
    te[1] = -m12 * det;
    te[2] = -m21 * det;
    te[3] = m11 * det;

    return this;
};

/**
 * @method transpose
 * @memberof Odin.Mat2
 * transposes this matrix
 * @return this
 */
Mat2.prototype.transpose = function () {
    var te = this.elements,
        tmp;

    tmp = te[1];
    te[1] = te[2];
    te[2] = tmp;

    return this;
};

/**
 * @method setTrace
 * @memberof Odin.Mat2
 * sets the diagonal of matrix
 * @param Number x
 * @param Number y
 * @return this
 */
Mat2.prototype.setTrace = function (x, y) {
    var te = this.elements;

    te[0] = x;
    te[3] = y;

    return this;
};

/**
 * @method setRotation
 * @memberof Odin.Mat2
 * sets the rotation in radians this
 * @param Number angle
 * @return this
 */
Mat2.prototype.setRotation = function (angle) {
    var te = this.elements,
        c = cos(angle),
        s = sin(angle);

    te[0] = c;
    te[1] = s;
    te[2] = -s;
    te[3] = c;

    return this;
};

/**
 * @method getRotation
 * @memberof Odin.Mat2
 * returns the rotation in radians of this
 * @return Number
 */
Mat2.prototype.getRotation = function () {
    var te = this.elements;

    return atan2(te[1], te[0]);
};

/**
 * @method rotate
 * @memberof Odin.Mat2
 * rotates this by angle in radians
 * @param Number angle
 * @return this
 */
Mat2.prototype.rotate = function (angle) {
    var te = this.elements,

        m11 = te[0],
        m12 = te[2],
        m21 = te[1],
        m22 = te[3],

        s = sin(angle),
        c = sin(angle);

    te[0] = m11 * c + m12 * s;
    te[1] = m11 * -s + m12 * c;
    te[2] = m21 * c + m22 * s;
    te[3] = m21 * -s + m22 * c;

    return this;
};

/**
 * @method fromMat3
 * @memberof Odin.Mat2
 * sets this from Mat3
 * @param Mat3 m
 * @return this
 */
Mat2.prototype.fromMat3 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[3];
    te[3] = me[4];

    return this;
};

/**
 * @method fromMat4
 * @memberof Odin.Mat2
 * sets this from Mat4
 * @param Mat4 m
 * @return this
 */
Mat2.prototype.fromMat4 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[4];
    te[3] = me[5];

    return this;
};

/**
 * @memberof Odin.Mat2
 * @param Odin.Mat2 other
 * @return this
 */
Mat2.prototype.equals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return !(
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3]
    );
};

/**
 * @memberof Odin.Mat2
 * @param Odin.Mat2 other
 * @return this
 */
Mat2.prototype.notEquals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return (
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3]
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Mat2
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Mat2.prototype.fromJSON = function (json) {
    var te = this.elements,
        me = json.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.Mat2
 * returns json object of this
 * @return Object
 */
Mat2.prototype.toJSON = function (json) {
    json || (json = {});
    var te = this.elements,
        je = json.elements || (json.elements = []);

    json._className = "Mat2";
    je[0] = te[0];
    je[1] = te[1];
    je[2] = te[2];
    je[3] = te[3];

    return json;
};

/**
 * @method fromArray
 * @memberof Odin.Mat2
 * sets values from Array object
 * @param Object json
 * @return this
 */
Mat2.prototype.fromArray = function (array) {
    var te = this.elements;

    te[0] = array[0];
    te[1] = array[1];
    te[2] = array[2];
    te[3] = array[3];

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Mat2
 * returns array object of this
 * @return Object
 */
Mat2.prototype.toArray = function (array) {
    array || (array = []);
    var te = this.elements;

    array[0] = te[0];
    array[1] = te[1];
    array[2] = te[2];
    array[3] = te[3];

    return array;
};

/**
 * @method toString
 * @memberof Odin.Mat2
 * returns string of this
 * @return String
 */
Mat2.prototype.toString = function () {
    var te = this.elements;

    return (
    "Mat2[ " + te[0] + ", " + te[2] + "]\n" +
    "     [ " + te[1] + ", " + te[3] + "]"
    );
};


module.exports = Mat2;

},{"./mathf":107}],104:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var cos = Math.cos,
    sin = Math.sin;

/**
 * @class Mat3
 * 3x3 matrix
 * @param Number m11
 * @param Number m12
 * @param Number m13
 * @param Number m21
 * @param Number m22
 * @param Number m23
 * @param Number m31
 * @param Number m32
 * @param Number m33
 */
function Mat3(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    var te = new Float32Array(9);

    /**
     * @property Float32Array elements
     * @memberof Odin.Mat3
     */
    this.elements = te;

    te[0] = m11 != undefined ? m11 : 1.0;
    te[3] = m12 || 0.0;
    te[6] = m13 || 0.0;
    te[1] = m21 || 0.0;
    te[4] = m22 != undefined ? m22 : 1.0;
    te[7] = m23 || 0.0;
    te[2] = m31 || 0.0;
    te[5] = m32 || 0.0;
    te[8] = m33 != undefined ? m33 : 1.0;
}

Mathf._classes["Mat3"] = Mat3;

/**
 * @method clone
 * @memberof Odin.Mat3
 * returns new instance of this
 * @return Mat3
 */
Mat3.prototype.clone = function () {
    var te = this.elements;

    return new Mat3(
        te[0], te[3], te[6],
        te[1], te[4], te[7],
        te[2], te[5], te[8]
    );
};

/**
 * @method copy
 * @memberof Odin.Mat3
 * copies other
 * @param Mat3 other
 * @return this
 */
Mat3.prototype.copy = function (other) {
    var te = this.elements,
        me = other.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];

    return this;
};

/**
 * @method set
 * @memberof Odin.Mat3
 * sets values of this
 * @param Number m11
 * @param Number m12
 * @param Number m13
 * @param Number m21
 * @param Number m22
 * @param Number m23
 * @param Number m31
 * @param Number m32
 * @param Number m33
 * @return this
 */
Mat3.prototype.set = function (m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    var te = this.elements;

    te[0] = m11;
    te[3] = m12;
    te[6] = m13;
    te[1] = m21;
    te[4] = m22;
    te[7] = m23;
    te[2] = m31;
    te[5] = m32;
    te[8] = m33;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Mat3
 * muliples this's values by other's
 * @param Mat3 other
 * @return this
 */
Mat3.prototype.mul = function (other) {
    var ae = this.elements,
        be = other.elements,

        a11 = ae[0],
        a12 = ae[3],
        a13 = ae[6],
        a21 = ae[1],
        a22 = ae[4],
        a23 = ae[7],
        a31 = ae[2],
        a32 = ae[5],
        a33 = ae[8],

        b11 = be[0],
        b12 = be[3],
        b13 = be[6],
        b21 = be[1],
        b22 = be[4],
        b23 = be[7],
        b31 = be[2],
        b32 = be[5],
        b33 = be[8];

    ae[0] = a11 * b11 + a21 * b12 + a31 * b13;
    ae[3] = a12 * b11 + a22 * b12 + a32 * b13;
    ae[6] = a13 * b11 + a23 * b12 + a33 * b13;

    ae[1] = a11 * b21 + a21 * b22 + a31 * b23;
    ae[4] = a12 * b21 + a22 * b22 + a32 * b23;
    ae[7] = a13 * b21 + a23 * b22 + a33 * b23;

    ae[2] = a11 * b31 + a21 * b32 + a31 * b33;
    ae[5] = a12 * b31 + a22 * b32 + a32 * b33;
    ae[8] = a13 * b31 + a23 * b32 + a33 * b33;

    return this;
};

/**
 * @method mmul
 * @memberof Odin.Mat3
 * muliples a and b saves it in this
 * @param Mat3 a
 * @param Mat3 b
 * @return this
 */
Mat3.prototype.mmul = function (a, b) {
    var te = this.elements,
        ae = a.elements,
        be = b.elements,

        a11 = ae[0],
        a12 = ae[3],
        a13 = ae[6],
        a21 = ae[1],
        a22 = ae[4],
        a23 = ae[7],
        a31 = ae[2],
        a32 = ae[5],
        a33 = ae[8],

        b11 = be[0],
        b12 = be[3],
        b13 = be[6],
        b21 = be[1],
        b22 = be[4],
        b23 = be[7],
        b31 = be[2],
        b32 = be[5],
        b33 = be[8];

    te[0] = a11 * b11 + a21 * b12 + a31 * b13;
    te[3] = a12 * b11 + a22 * b12 + a32 * b13;
    te[6] = a13 * b11 + a23 * b12 + a33 * b13;

    te[1] = a11 * b21 + a21 * b22 + a31 * b23;
    te[4] = a12 * b21 + a22 * b22 + a32 * b23;
    te[7] = a13 * b21 + a23 * b22 + a33 * b23;

    te[2] = a11 * b31 + a21 * b32 + a31 * b33;
    te[5] = a12 * b31 + a22 * b32 + a32 * b33;
    te[8] = a13 * b31 + a23 * b32 + a33 * b33;

    return this;
};

/**
 * @method smul
 * @memberof Odin.Mat3
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Mat3.prototype.smul = function (s) {
    var te = this.elements;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;
    te[4] *= s;
    te[5] *= s;
    te[6] *= s;
    te[7] *= s;
    te[8] *= s;

    return this;
};

/**
 * @method sdiv
 * @memberof Odin.Mat3
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Mat3.prototype.sdiv = function (s) {
    var te = this.elements;

    s = s === 0.0 ? 0.0 : 1.0 / s;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;
    te[4] *= s;
    te[5] *= s;
    te[6] *= s;
    te[7] *= s;
    te[8] *= s;

    return this;
};

/**
 * @method identity
 * @memberof Odin.Mat3
 * identity matrix
 * @return this
 */
Mat3.prototype.identity = function () {
    var te = this.elements;

    te[0] = 1;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = 1;
    te[5] = 0.0;
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 1;

    return this;
};

/**
 * @method zero
 * @memberof Odin.Mat3
 * zero matrix
 * @return this
 */
Mat3.prototype.zero = function () {
    var te = this.elements;

    te[0] = 0.0;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = 0.0;
    te[5] = 0.0;
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 0.0;

    return this;
};

/**
 * @method determinant
 * @memberof Odin.Mat3
 * returns the determinant of this
 * @return this
 */
Mat3.prototype.determinant = function () {
    var te = this.elements,

        a = te[0],
        b = te[1],
        c = te[2],
        d = te[3],
        e = te[4],
        f = te[5],
        g = te[6],
        h = te[7],
        i = te[8];

    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
};

/**
 * @method inverse
 * @memberof Odin.Mat3
 * returns the inverse of this
 * @return this
 */
Mat3.prototype.inverse = function () {
    var te = this.elements,
        m11 = te[0],
        m12 = te[3],
        m13 = te[6],
        m21 = te[1],
        m22 = te[4],
        m23 = te[7],
        m31 = te[2],
        m32 = te[5],
        m33 = te[8],

        m0 = m22 * m33 - m23 * m32,
        m3 = m13 * m32 - m12 * m33,
        m6 = m12 * m23 - m13 * m22,

        det = m11 * m0 + m21 * m3 + m31 * m6;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m0 * det;
    te[1] = (m23 * m31 - m21 * m33) * det;
    te[2] = (m21 * m32 - m22 * m31) * det;

    te[3] = m3 * det;
    te[4] = (m11 * m33 - m13 * m31) * det;
    te[5] = (m12 * m31 - m11 * m32) * det;

    te[6] = m6 * det;
    te[7] = (m13 * m21 - m11 * m23) * det;
    te[8] = (m11 * m22 - m12 * m21) * det;

    return this;
};

/**
 * @method inverseMat
 * @memberof Odin.Mat3
 * returns the inverse of other
 * @param Mat3 other
 * @return this
 */
Mat3.prototype.inverseMat = function (other) {
    var te = this.elements,
        me = other.elements,
        m11 = me[0],
        m12 = me[3],
        m13 = me[6],
        m21 = me[1],
        m22 = me[4],
        m23 = me[7],
        m31 = me[2],
        m32 = me[5],
        m33 = me[8],

        m0 = m22 * m33 - m23 * m32,
        m3 = m13 * m32 - m12 * m33,
        m6 = m12 * m23 - m13 * m22,

        det = m11 * m0 + m21 * m3 + m31 * m6;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m0 * det;
    te[1] = (m23 * m31 - m21 * m33) * det;
    te[2] = (m21 * m32 - m22 * m31) * det;

    te[3] = m3 * det;
    te[4] = (m11 * m33 - m13 * m31) * det;
    te[5] = (m12 * m31 - m11 * m32) * det;

    te[6] = m6 * det;
    te[7] = (m13 * m21 - m11 * m23) * det;
    te[8] = (m11 * m22 - m12 * m21) * det;

    return this;
};

/**
 * @method inverseMat4
 * @memberof Odin.Mat3
 * returns the inverse of a Mat4
 * @param Mat4 other
 * @return this
 */
Mat3.prototype.inverseMat4 = function (other) {
    var te = this.elements,
        me = other.elements,
        m11 = me[0],
        m12 = me[4],
        m13 = me[8],
        m21 = me[1],
        m22 = me[5],
        m23 = me[9],
        m31 = me[2],
        m32 = me[6],
        m33 = me[10],

        m0 = m22 * m33 - m23 * m32,
        m3 = m13 * m32 - m12 * m33,
        m6 = m12 * m23 - m13 * m22,

        det = m11 * m0 + m21 * m3 + m31 * m6;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m0 * det;
    te[1] = (m23 * m31 - m21 * m33) * det;
    te[2] = (m21 * m32 - m22 * m31) * det;

    te[3] = m3 * det;
    te[4] = (m11 * m33 - m13 * m31) * det;
    te[5] = (m12 * m31 - m11 * m32) * det;

    te[6] = m6 * det;
    te[7] = (m13 * m21 - m11 * m23) * det;
    te[8] = (m11 * m22 - m12 * m21) * det;

    return this;
};

/**
 * @method transpose
 * @memberof Odin.Mat3
 * transposes this matrix
 * @return this
 */
Mat3.prototype.transpose = function () {
    var te = this.elements,
        tmp;

    tmp = te[1];
    te[1] = te[3];
    te[3] = tmp;
    tmp = te[2];
    te[2] = te[6];
    te[6] = tmp;
    tmp = te[5];
    te[5] = te[7];
    te[7] = tmp;

    return this;
};

/**
 * @method setTrace
 * @memberof Odin.Mat3
 * sets the diagonal of matrix
 * @param Vec3 v
 * @return this
 */
Mat3.prototype.setTrace = function (v) {
    var te = this.elements;

    te[0] = v.x;
    te[4] = v.y;
    te[8] = v.z;

    return this;
};

/**
 * @method scale
 * @memberof Odin.Mat3
 * scales this by vector
 * @param Vec3 v
 * @return this
 */
Mat3.prototype.scale = function (v) {
    var te = this.elements,
        x = v.x,
        y = v.y,
        z = v.z;

    te[0] *= x;
    te[3] *= y;
    te[6] *= z;
    te[1] *= x;
    te[4] *= y;
    te[7] *= z;
    te[2] *= x;
    te[5] *= y;
    te[8] *= z;

    return this;
};

/**
 * @method makeScale
 * @memberof Odin.Mat3
 * makes this a scale matrix
 * @param Number x
 * @param Number y
 * @param Number z
 * @return this
 */
Mat3.prototype.makeScale = function (x, y, z) {

    return this.set(
        x, 0.0, 0.0,
        0.0, y, 0.0,
        0.0, 0.0, z
    );
};

/**
 * @method makeRotationX
 * @memberof Odin.Mat3
 * makes this a rotation matrix along x axis
 * @param Number angle
 * @return this
 */
Mat3.prototype.makeRotationX = function (angle) {
    var c = cos(angle),
        s = sin(angle);

    return this.set(
        1, 0.0, 0.0,
        0.0, c, -s,
        0.0, s, c
    );
};

/**
 * @method makeRotationY
 * @memberof Odin.Mat3
 * makes this a rotation matrix along y axis
 * @param Number angle
 * @return this
 */
Mat3.prototype.makeRotationY = function (angle) {
    var c = cos(angle),
        s = sin(angle);

    return this.set(
        c, 0.0, s,
        0.0, 1, 0.0, -s, 0.0, c
    );
};

/**
 * @method makeRotationZ
 * @memberof Odin.Mat3
 * makes this a rotation matrix along z axis
 * @param Number angle
 * @return this
 */
Mat3.prototype.makeRotationZ = function (angle) {
    var c = cos(angle),
        s = sin(angle);

    return this.set(
        c, -s, 0.0,
        s, c, 0.0,
        0.0, 0.0, 1
    );
};

/**
 * @method fromMat2
 * @memberof Odin.Mat3
 * sets this from Mat2
 * @param Mat2 m
 * @return this
 */
Mat3.prototype.fromMat2 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = 0.0;
    te[3] = me[2];
    te[4] = me[3];
    te[5] = 0.0;
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 1;

    return this;
};

/**
 * @method fromMat4
 * @memberof Odin.Mat3
 * sets this from Mat4
 * @param Mat2 m
 * @return this
 */
Mat3.prototype.fromMat4 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[4];
    te[4] = me[5];
    te[5] = me[6];
    te[6] = me[8];
    te[7] = me[9];
    te[8] = me[10];

    return this;
};

/**
 * @method fromQuat
 * @memberof Odin.Mat3
 * sets rotation of this from quaterian
 * @param Quat q
 * @return this
 */
Mat3.prototype.fromQuat = function (q) {
    var te = this.elements,
        x = q.x,
        y = q.y,
        z = q.z,
        w = q.w,
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    te[0] = 1 - (yy + zz);
    te[1] = xy + wz;
    te[2] = xz - wy;

    te[3] = xy - wz;
    te[4] = 1 - (xx + zz);
    te[5] = yz + wx;

    te[6] = xz + wy;
    te[7] = yz - wx;
    te[8] = 1 - (xx + yy);

    return this;
};

/**
 * @memberof Odin.Mat3
 * @param Odin.Mat3 other
 * @return this
 */
Mat3.prototype.equals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return !(
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3] ||
    ae[4] !== be[4] ||
    ae[5] !== be[5] ||
    ae[6] !== be[6] ||
    ae[7] !== be[7] ||
    ae[8] !== be[8]
    );
};

/**
 * @memberof Odin.Mat3
 * @param Odin.Mat3 other
 * @return this
 */
Mat3.prototype.notEquals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return (
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3] ||
    ae[4] !== be[4] ||
    ae[5] !== be[5] ||
    ae[6] !== be[6] ||
    ae[7] !== be[7] ||
    ae[8] !== be[8]
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Mat3
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Mat3.prototype.fromJSON = function (json) {
    var te = this.elements,
        me = json.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.Mat3
 * returns json object of this
 * @param Array array
 * @return Object
 */
Mat3.prototype.toJSON = function (json) {
    json || (json = {});
    var te = this.elements,
        je = json.elements || (json.elements = []);

    json._className = "Mat3";
    je[0] = te[0];
    je[1] = te[1];
    je[2] = te[2];
    je[3] = te[3];
    je[4] = te[4];
    je[5] = te[5];
    je[6] = te[6];
    je[7] = te[7];
    je[8] = te[8];

    return json;
};

/**
 * @method fromArray
 * @memberof Odin.Mat3
 * sets values from Array object
 * @param Object json
 * @return this
 */
Mat3.prototype.fromArray = function (array) {
    var te = this.elements;

    te[0] = array[0];
    te[1] = array[1];
    te[2] = array[2];
    te[3] = array[3];
    te[4] = array[4];
    te[5] = array[5];
    te[6] = array[6];
    te[7] = array[7];
    te[8] = array[8];

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Mat3
 * returns array object of this
 * @return Object
 */
Mat3.prototype.toArray = function (array) {
    array || (array = []);
    var te = this.elements;

    array[0] = te[0];
    array[1] = te[1];
    array[2] = te[2];
    array[3] = te[3];
    array[4] = te[4];
    array[5] = te[5];
    array[6] = te[6];
    array[7] = te[7];
    array[8] = te[8];

    return array;
};

/**
 * @method toString
 * @memberof Odin.Mat3
 * returns string of this
 * @return String
 */
Mat3.prototype.toString = function () {
    var te = this.elements;

    return (
    "Mat3[" + te[0] + ", " + te[3] + ", " + te[6] + "]\n" +
    "     [" + te[1] + ", " + te[4] + ", " + te[7] + "]\n" +
    "     [" + te[2] + ", " + te[5] + ", " + te[8] + "]"
    );
};


module.exports = Mat3;

},{"./mathf":107}],105:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var sqrt = Math.sqrt,
    cos = Math.cos,
    sin = Math.sin,
    atan2 = Math.atan2;

/**
 * @class Mat32
 * 3x2 matrix
 * @param Number m11
 * @param Number m12
 * @param Number m13
 * @param Number m21
 * @param Number m22
 * @param Number m23
 */
function Mat32(m11, m12, m13, m21, m22, m23) {
    var te = new Float32Array(6);

    /**
     * @property Float32Array elements
     * @memberof Odin.Mat32
     */
    this.elements = te;

    te[0] = m11 != undefined ? m11 : 1.0;
    te[2] = m12 || 0.0;
    te[4] = m13 || 0.0;
    te[1] = m21 || 0.0;
    te[3] = m22 != undefined ? m22 : 1.0;
    te[5] = m23 || 0.0;
}

Mathf._classes["Mat32"] = Mat32;

/**
 * @method clone
 * @memberof Odin.Mat32
 * returns new instance of this
 * @return Mat32
 */
Mat32.prototype.clone = function () {
    var te = this.elements;

    return new Mat32(
        te[0], te[1], te[2],
        te[3], te[4], te[5]
    );
};

/**
 * @method copy
 * @memberof Odin.Mat32
 * copies other
 * @param Mat32 other
 * @return this
 */
Mat32.prototype.copy = function (other) {
    var te = this.elements,
        me = other.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];

    return this;
};

/**
 * @method set
 * @memberof Odin.Mat32
 * sets values of this
 * @param Number m11
 * @param Number m12
 * @param Number m13
 * @param Number m21
 * @param Number m22
 * @param Number m23
 * @return this
 */
Mat32.prototype.set = function (m11, m12, m13, m21, m22, m23) {
    var te = this.elements;

    te[0] = m11;
    te[2] = m12;
    te[4] = m13;
    te[1] = m21;
    te[3] = m22;
    te[5] = m23;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Mat32
 * muliples this's values by other's
 * @param Mat32 other
 * @return this
 */
Mat32.prototype.mul = function (other) {
    var ae = this.elements,
        be = other.elements,

        a11 = ae[0],
        a12 = ae[2],
        a13 = ae[4],
        a21 = ae[1],
        a22 = ae[3],
        a23 = ae[5],

        b11 = be[0],
        b12 = be[2],
        b13 = be[4],
        b21 = be[1],
        b22 = be[3],
        b23 = be[5];

    ae[0] = a11 * b11 + a21 * b12;
    ae[2] = a12 * b11 + a22 * b12;

    ae[1] = a11 * b21 + a21 * b22;
    ae[3] = a12 * b21 + a22 * b22;

    ae[4] = a11 * b13 + a12 * b23 + a13;
    ae[5] = a21 * b13 + a22 * b23 + a23;

    return this;
};

/**
 * @method mmul
 * @memberof Odin.Mat32
 * muliples a and b saves it in this
 * @param Mat32 a
 * @param Mat32 b
 * @return this
 */
Mat32.prototype.mmul = function (a, b) {
    var te = this.elements,
        ae = a.elements,
        be = b.elements,

        a11 = ae[0],
        a12 = ae[2],
        a13 = ae[4],
        a21 = ae[1],
        a22 = ae[3],
        a23 = ae[5],

        b11 = be[0],
        b12 = be[2],
        b13 = be[4],
        b21 = be[1],
        b22 = be[3],
        b23 = be[5];

    te[0] = a11 * b11 + a21 * b12;
    te[2] = a12 * b11 + a22 * b12;

    te[1] = a11 * b21 + a21 * b22;
    te[3] = a12 * b21 + a22 * b22;

    te[4] = a11 * b13 + a12 * b23 + a13;
    te[5] = a21 * b13 + a22 * b23 + a23;

    return this;
};

/**
 * @method smul
 * @memberof Odin.Mat32
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Mat32.prototype.smul = function (s) {
    var te = this.elements;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;
    te[4] *= s;
    te[5] *= s;

    return this;
};

/**
 * @method sdiv
 * @memberof Odin.Mat32
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Mat32.prototype.sdiv = function (s) {
    var te = this.elements;

    s = s !== 0.0 ? 1.0 / s : 1.0;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;
    te[4] *= s;
    te[5] *= s;

    return this;
};

/**
 * @method identity
 * @memberof Odin.Mat32
 * identity matrix
 * @return this
 */
Mat32.prototype.identity = function () {
    var te = this.elements;

    te[0] = 1;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 1;
    te[4] = 0.0;
    te[5] = 0.0;

    return this;
};

/**
 * @method zero
 * @memberof Odin.Mat32
 * zero matrix
 * @return this
 */
Mat32.prototype.zero = function () {
    var te = this.elements;

    te[0] = 0.0;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = 0.0;
    te[5] = 0.0;

    return this;
};

/**
 * @method determinant
 * @memberof Odin.Mat32
 * returns the determinant of this
 * @return this
 */
Mat32.prototype.determinant = function () {
    var te = this.elements;

    return te[0] * te[3] - te[2] * te[1];
};

/**
 * @method inverse
 * @memberof Odin.Mat32
 * returns the inverse of this
 * @return this
 */
Mat32.prototype.inverse = function () {
    var te = this.elements,

        m11 = te[0],
        m12 = te[2],
        m13 = te[4],
        m21 = te[1],
        m22 = te[3],
        m23 = te[5],

        det = m11 * m22 - m12 * m21;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m22 * det;
    te[1] = -m12 * det;
    te[2] = -m21 * det;
    te[3] = m11 * det;

    te[4] = (m21 * m23 - m22 * m13) * det;
    te[5] = -(m11 * m23 - m12 * m13) * det;

    return this;
};

/**
 * @method inverseMat
 * @memberof Odin.Mat32
 * returns the inverse of other
 * @param Mat32 other
 * @return this
 */
Mat32.prototype.inverseMat = function (other) {
    var te = this.elements,
        me = other.elements,

        m11 = me[0],
        m12 = me[2],
        m13 = me[4],
        m21 = me[1],
        m22 = me[3],
        m23 = me[5],

        det = m11 * m22 - m12 * m21;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = m22 * det;
    te[1] = -m12 * det;
    te[2] = -m21 * det;
    te[3] = m11 * det;

    te[4] = (m21 * m23 - m22 * m13) * det;
    te[5] = -(m11 * m23 - m12 * m13) * det;

    return this;
};

/**
 * @method transpose
 * @memberof Odin.Mat32
 * transposes this matrix
 * @return this
 */
Mat32.prototype.transpose = function () {
    var te = this.elements,
        tmp;

    tmp = te[1];
    te[1] = te[2];
    te[2] = tmp;

    return this;
};

/**
 * @method setTrace
 * @memberof Odin.Mat32
 * sets the diagonal of matrix
 * @param Number x
 * @param Number y
 * @return this
 */
Mat32.prototype.setTrace = function (x, y) {
    var te = this.elements;

    te[0] = x;
    te[3] = y;

    return this;
};

/**
 * @method lookAt
 * @memberof Odin.Mat32
 * makes matrix look from eye to target
 * @param Vec2 eye
 * @param Vec2 target
 * @return this
 */
Mat32.prototype.lookAt = function (eye, target) {
    var te = this.elements,
        x = target.x - eye.x,
        y = target.y - eye.y,
        a = atan2(y, x) - HALF_PI,
        c = cos(a),
        s = sin(a);

    te[0] = c;
    te[1] = s;
    te[2] = -s;
    te[3] = c;

    return this;
};

/**
 * @method compose
 * @memberof Odin.Mat32
 * sets matrix from position, scale, and an angle in radians
 * @param Vec2 position
 * @param Vec2 scale
 * @param Number angle
 * @return this
 */
Mat32.prototype.compose = function (position, scale, angle) {
    var te = this.elements,
        sx = scale.x,
        sy = scale.y,
        c = cos(angle),
        s = sin(angle);

    te[0] = c * sx;
    te[1] = s * sx;
    te[2] = -s * sy;
    te[3] = c * sy;

    te[4] = position.x;
    te[5] = position.y;

    return this;
};

/**
 * @method decompose
 * @memberof Odin.Mat32
 * gets matrix position, scale, and returns its angle in radians
 * @param Vec2 position
 * @param Vec2 scale
 * @return Number
 */
Mat32.prototype.decompose = function (position, scale) {
    var te = this.elements,
        m11 = te[0],
        m12 = te[1],
        sx = scale.set(m11, m12).length(),
        sy = scale.set(te[2], te[3]).length();

    position.x = te[4];
    position.y = te[5];

    scale.x = sx;
    scale.y = sy;

    return atan2(m12, m11);
};

/**
 * @method setRotation
 * @memberof Odin.Mat32
 * sets the rotation in radians this
 * @param Number angle
 * @return this
 */
Mat32.prototype.setRotation = function (angle) {
    var te = this.elements,
        c = cos(angle),
        s = sin(angle);

    te[0] = c;
    te[1] = s;
    te[2] = -s;
    te[3] = c;

    return this;
};

/**
 * @method getRotation
 * @memberof Odin.Mat32
 * returns the rotation in radians of this
 * @return Number
 */
Mat32.prototype.getRotation = function () {
    var te = this.elements;

    return atan2(te[1], te[0]);
};

/**
 * @method setPosition
 * @memberof Odin.Mat32
 * sets the position of this
 * @param Vec2 v
 * @return this
 */
Mat32.prototype.setPosition = function (v) {
    var te = this.elements;

    te[4] = v.x;
    te[5] = v.y;

    return this;
};

/**
 * @method getPosition
 * @memberof Odin.Mat32
 * gets the position of this
 * @param Vec2 v
 * @return Vec2
 */
Mat32.prototype.getPosition = function (v) {
    var te = this.elements;

    v.x = te[4];
    v.y = te[5];

    return v;
};

/**
 * @method extractPosition
 * @memberof Odin.Mat32
 * gets position from other saves it in this
 * @param Mat32 other
 * @return this
 */
Mat32.prototype.extractPosition = function (other) {
    var te = this.elements,
        me = other.elements;

    te[4] = me[4];
    te[5] = me[5];

    return this;
};

/**
 * @method extractRotation
 * @memberof Odin.Mat32
 * gets rotation from other saves it in this
 * @param Mat32 other
 * @return this
 */
Mat32.prototype.extractRotation = function (other) {
    var te = this.elements,
        me = other.elements,

        m11 = me[0],
        m12 = me[2],
        m21 = me[1],
        m22 = me[3],

        x = m11 * m11 + m21 * m21,
        y = m12 * m12 + m22 * m22,

        sx = x > 0.0 ? 1.0 / sqrt(x) : 0.0,
        sy = y > 0.0 ? 1.0 / sqrt(y) : 0.0;

    te[0] = m11 * sx;
    te[1] = m21 * sx;

    te[2] = m12 * sy;
    te[3] = m22 * sy;

    return this;
};

/**
 * @method translate
 * @memberof Odin.Mat32
 * translates matrix by vector
 * @param Vec2 v
 * @return this
 */
Mat32.prototype.translate = function (v) {
    var te = this.elements,
        x = v.x,
        y = v.y;

    te[4] = te[0] * x + te[2] * y + te[4];
    te[5] = te[1] * x + te[3] * y + te[5];

    return this;
};

/**
 * @method rotate
 * @memberof Odin.Mat32
 * rotates this by angle in radians
 * @param Number angle
 * @return this
 */
Mat32.prototype.rotate = function (angle) {
    var te = this.elements,

        m11 = te[0],
        m12 = te[2],
        m21 = te[1],
        m22 = te[3],

        s = sin(angle),
        c = sin(angle);

    te[0] = m11 * c + m12 * s;
    te[1] = m11 * -s + m12 * c;
    te[2] = m21 * c + m22 * s;
    te[3] = m21 * -s + m22 * c;

    return this;
};

/**
 * @method scale
 * @memberof Odin.Mat32
 * scales matrix by vector
 * @param Vec2 v
 * @return this
 */
Mat32.prototype.scale = function (v) {
    var te = this.elements,
        x = v.x,
        y = v.y;

    te[0] *= x;
    te[1] *= x;
    te[4] *= x;

    te[2] *= y;
    te[3] *= y;
    te[5] *= y;

    return this;
};

/**
 * @method orthographic
 * @memberof Odin.Mat32
 * makes orthographic matrix
 * @param Number left
 * @param Number right
 * @param Number bottom
 * @param Number top
 * @return Mat32
 */
Mat32.prototype.orthographic = function (left, right, top, bottom) {
    var te = this.elements,
        w = right - left,
        h = top - bottom,

        x = (right + left) / w,
        y = (top + bottom) / h;

    te[0] = 2 / w;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 2 / h;
    te[4] = -x;
    te[5] = -y;

    return this;
};

/**
 * @method fromMat3
 * @memberof Odin.Mat32
 * sets this from Mat3
 * @param Mat3 m
 * @return this
 */
Mat32.prototype.fromMat3 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[3];
    te[3] = me[4];
    te[4] = 0.0;
    te[5] = 0.0;

    return this;
};

/**
 * @method fromMat4
 * @memberof Odin.Mat32
 * sets this from Mat4
 * @param Mat4 m
 * @return this
 */
Mat32.prototype.fromMat4 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[4];
    te[3] = me[5];
    te[4] = me[12];
    te[5] = me[13];

    return this;
};

/**
 * @memberof Odin.Mat32
 * @param Odin.Mat32 other
 * @return this
 */
Mat32.prototype.equals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return !(
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3] ||
    ae[4] !== be[4] ||
    ae[5] !== be[5]
    );
};

/**
 * @memberof Odin.Mat32
 * @param Odin.Mat32 other
 * @return this
 */
Mat32.prototype.notEquals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return (
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3] ||
    ae[4] !== be[4] ||
    ae[5] !== be[5]
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Mat32
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Mat32.prototype.fromJSON = function (json) {
    var te = this.elements,
        me = json.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.Mat32
 * returns json object of this
 * @return Object
 */
Mat32.prototype.toJSON = function (json) {
    json || (json = {});
    var te = this.elements,
        je = json.elements || (json.elements = []);

    json._className = "Mat32";
    je[0] = te[0];
    je[1] = te[1];
    je[2] = te[2];
    je[3] = te[3];
    je[4] = te[4];
    je[5] = te[5];

    return json;
};

/**
 * @method fromArray
 * @memberof Odin.Mat32
 * sets values from Array object
 * @param Object json
 * @return this
 */
Mat32.prototype.fromArray = function (array) {
    var te = this.elements;

    te[0] = array[0];
    te[1] = array[1];
    te[2] = array[2];
    te[3] = array[3];
    te[4] = array[4];
    te[5] = array[5];

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Mat32
 * returns array object of this
 * @return Object
 */
Mat32.prototype.toArray = function (array) {
    array || (array = []);
    var te = this.elements;

    array[0] = te[0];
    array[1] = te[1];
    array[2] = te[2];
    array[3] = te[3];
    array[4] = te[4];
    array[5] = te[5];

    return array;
};

/**
 * @method toString
 * @memberof Odin.Mat32
 * returns string of this
 * @return String
 */
Mat32.prototype.toString = function () {
    var te = this.elements;

    return (
    "Mat32[ " + te[0] + ", " + te[2] + ", " + te[4] + "]\n" +
    "     [ " + te[1] + ", " + te[3] + ", " + te[5] + "]"
    );
};


module.exports = Mat32;

},{"./mathf":107}],106:[function(require,module,exports){
var Mathf = require("./mathf");
var Vec3 = require("./vec3");
"use strict";


var sqrt = Math.sqrt,
    cos = Math.cos,
    sin = Math.sin,
    tan = Math.tan;

/**
 * @class Mat4
 * 4x4 matrix
 * @param Number m11
 * @param Number m12
 * @param Number m13
 * @param Number m14
 * @param Number m21
 * @param Number m22
 * @param Number m23
 * @param Number m24
 * @param Number m31
 * @param Number m32
 * @param Number m33
 * @param Number m34
 * @param Number m41
 * @param Number m42
 * @param Number m43
 * @param Number m44
 */
function Mat4(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
    var te = new Float32Array(16);

    /**
     * @property Float32Array elements
     * @memberof Xian.Mat4
     */
    this.elements = te;

    te[0] = m11 != undefined ? m11 : 1.0;
    te[4] = m12 || 0.0;
    te[8] = m13 || 0.0;
    te[12] = m14 || 0.0;
    te[1] = m21 || 0.0;
    te[5] = m22 != undefined ? m22 : 1.0;
    te[9] = m23 || 0.0;
    te[13] = m24 || 0.0;
    te[2] = m31 || 0.0;
    te[6] = m32 || 0.0;
    te[10] = m33 != undefined ? m33 : 1.0;
    te[14] = m34 || 0.0;
    te[3] = m41 || 0.0;
    te[7] = m42 || 0.0;
    te[11] = m43 || 0.0;
    te[15] = m44 != undefined ? m44 : 1.0;
}

Mathf._classes["Mat4"] = Mat4;

/**
 * @method clone
 * @memberof Xian.Mat4
 * returns new instance of this
 * @return Mat4
 */
Mat4.prototype.clone = function () {
    var te = this.elements;

    return new Mat4(
        te[0], te[4], te[8], te[12],
        te[1], te[5], te[9], te[13],
        te[2], te[6], te[10], te[14],
        te[3], te[7], te[11], te[15]
    );
};

/**
 * @method copy
 * @memberof Xian.Mat4
 * copies other
 * @param Mat4 other
 * @return this
 */
Mat4.prototype.copy = function (other) {
    var te = this.elements,
        me = other.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];

    return this;
};

/**
 * @method set
 * @memberof Xian.Mat4
 * sets values of this
 * @param Number m11
 * @param Number m12
 * @param Number m13
 * @param Number m14
 * @param Number m21
 * @param Number m22
 * @param Number m23
 * @param Number m24
 * @param Number m31
 * @param Number m32
 * @param Number m33
 * @param Number m34
 * @param Number m41
 * @param Number m42
 * @param Number m43
 * @param Number m44
 * @return this
 */
Mat4.prototype.set = function (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
    var te = this.elements;

    te[0] = m11;
    te[4] = m12;
    te[8] = m13;
    te[12] = m14;
    te[1] = m21;
    te[5] = m22;
    te[9] = m23;
    te[13] = m24;
    te[2] = m31;
    te[6] = m32;
    te[10] = m33;
    te[14] = m34;
    te[3] = m41;
    te[7] = m42;
    te[11] = m43;
    te[15] = m44;

    return this;
};

/**
 * @method mul
 * @memberof Xian.Mat4
 * muliples this's values by other's
 * @param Mat4 other
 * @return this
 */
Mat4.prototype.mul = function (other) {
    var ae = this.elements,
        be = other.elements,

        a11 = ae[0],
        a12 = ae[4],
        a13 = ae[8],
        a14 = ae[12],
        a21 = ae[1],
        a22 = ae[5],
        a23 = ae[9],
        a24 = ae[13],
        a31 = ae[2],
        a32 = ae[6],
        a33 = ae[10],
        a34 = ae[14],
        a41 = ae[3],
        a42 = ae[7],
        a43 = ae[11],
        a44 = ae[15],

        b11 = be[0],
        b12 = be[4],
        b13 = be[8],
        b14 = be[12],
        b21 = be[1],
        b22 = be[5],
        b23 = be[9],
        b24 = be[13],
        b31 = be[2],
        b32 = be[6],
        b33 = be[10],
        b34 = be[14],
        b41 = be[3],
        b42 = be[7],
        b43 = be[11],
        b44 = be[15];

    ae[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    ae[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    ae[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    ae[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

    ae[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    ae[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    ae[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    ae[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

    ae[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    ae[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    ae[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    ae[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

    ae[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    ae[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    ae[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    ae[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return this;
};

/**
 * @method mmul
 * @memberof Xian.Mat4
 * muliples a and b saves it in this
 * @param Mat4 a
 * @param Mat4 b
 * @return this
 */
Mat4.prototype.mmul = function (a, b) {
    var te = this.elements,
        ae = a.elements,
        be = b.elements,

        a11 = ae[0],
        a12 = ae[4],
        a13 = ae[8],
        a14 = ae[12],
        a21 = ae[1],
        a22 = ae[5],
        a23 = ae[9],
        a24 = ae[13],
        a31 = ae[2],
        a32 = ae[6],
        a33 = ae[10],
        a34 = ae[14],
        a41 = ae[3],
        a42 = ae[7],
        a43 = ae[11],
        a44 = ae[15],

        b11 = be[0],
        b12 = be[4],
        b13 = be[8],
        b14 = be[12],
        b21 = be[1],
        b22 = be[5],
        b23 = be[9],
        b24 = be[13],
        b31 = be[2],
        b32 = be[6],
        b33 = be[10],
        b34 = be[14],
        b41 = be[3],
        b42 = be[7],
        b43 = be[11],
        b44 = be[15];

    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return this;
};

/**
 * @method smul
 * @memberof Xian.Mat4
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Mat4.prototype.smul = function (s) {
    var te = this.elements;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;
    te[4] *= s;
    te[5] *= s;
    te[6] *= s;
    te[7] *= s;
    te[8] *= s;
    te[9] *= s;
    te[10] *= s;
    te[11] *= s;
    te[12] *= s;
    te[13] *= s;
    te[14] *= s;
    te[15] *= s;

    return this;
};

/**
 * @method sdiv
 * @memberof Xian.Mat4
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Mat4.prototype.sdiv = function (s) {
    var te = this.elements;

    s = s !== 0.0 ? 1.0 / s : 1.0;

    te[0] *= s;
    te[1] *= s;
    te[2] *= s;
    te[3] *= s;
    te[4] *= s;
    te[5] *= s;
    te[6] *= s;
    te[7] *= s;
    te[8] *= s;
    te[9] *= s;
    te[10] *= s;
    te[11] *= s;
    te[12] *= s;
    te[13] *= s;
    te[14] *= s;
    te[15] *= s;

    return this;
};

/**
 * @method identity
 * @memberof Xian.Mat4
 * identity matrix
 * @return this
 */
Mat4.prototype.identity = function () {
    var te = this.elements;

    te[0] = 1;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = 0.0;
    te[5] = 1;
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 0.0;
    te[9] = 0.0;
    te[10] = 1;
    te[11] = 0.0;
    te[12] = 0.0;
    te[13] = 0.0;
    te[14] = 0.0;
    te[15] = 1;

    return this;
};

/**
 * @method zero
 * @memberof Xian.Mat4
 * zero matrix
 * @return this
 */
Mat4.prototype.zero = function () {
    var te = this.elements;

    te[0] = 0.0;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = 0.0;
    te[5] = 0.0;
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 0.0;
    te[9] = 0.0;
    te[10] = 0.0;
    te[11] = 0.0;
    te[12] = 0.0;
    te[13] = 0.0;
    te[14] = 0.0;
    te[15] = 0.0;

    return this;
};

/**
 * @method determinant
 * @memberof Xian.Mat4
 * returns the determinant of this
 * @return this
 */
Mat4.prototype.determinant = function () {
    var m11 = ae[0],
        m12 = ae[4],
        m13 = ae[8],
        m14 = ae[12],
        m21 = ae[1],
        m22 = ae[5],
        m23 = ae[9],
        m24 = ae[13],
        m31 = ae[2],
        m32 = ae[6],
        m33 = ae[10],
        m34 = ae[14],
        m41 = ae[3],
        m42 = ae[7],
        m43 = ae[11],
        m44 = ae[15];

    return (
    m41 * (m14 * m23 * m32 - m13 * m24 * m32 - m14 * m22 * m33 + m12 * m24 * m33 + m13 * m22 * m34 - m12 * m23 * m34) +
    m42 * (m11 * m23 * m34 - m11 * m24 * m33 + m14 * m21 * m33 - m13 * m21 * m34 + m13 * m24 * m31 - m14 * m23 * m31) +
    m43 * (m11 * m24 * m32 - m11 * m22 * m34 - m14 * m21 * m32 + m12 * m21 * m34 + m14 * m22 * m31 - m12 * m24 * m31) +
    m44 * (-m13 * m22 * m31 - m11 * m23 * m32 + m11 * m22 * m33 + m13 * m21 * m32 - m12 * m21 * m33 + m12 * m23 * m31)
    );
};

/**
 * @method inverse
 * @memberof Xian.Mat4
 * returns the inverse of this
 * @return this
 */
Mat4.prototype.inverse = function () {
    var te = this.elements,

        m11 = te[0],
        m12 = te[4],
        m13 = te[8],
        m14 = te[12],
        m21 = te[1],
        m22 = te[5],
        m23 = te[9],
        m24 = te[13],
        m31 = te[2],
        m32 = te[6],
        m33 = te[10],
        m34 = te[14],
        m41 = te[3],
        m42 = te[7],
        m43 = te[11],
        m44 = te[15],

        me0 = m23 * m34 * m42 - m24 * m33 * m42 + m24 * m32 * m43 - m22 * m34 * m43 - m23 * m32 * m44 + m22 * m33 * m44,
        me4 = m14 * m33 * m42 - m13 * m34 * m42 - m14 * m32 * m43 + m12 * m34 * m43 + m13 * m32 * m44 - m12 * m33 * m44,
        me8 = m13 * m24 * m42 - m14 * m23 * m42 + m14 * m22 * m43 - m12 * m24 * m43 - m13 * m22 * m44 + m12 * m23 * m44,
        me12 = m14 * m23 * m32 - m13 * m24 * m32 - m14 * m22 * m33 + m12 * m24 * m33 + m13 * m22 * m34 - m12 * m23 * m34,

        det = m11 * me0 + m21 * me4 + m31 * me8 + m41 * me12;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = me0 * det;
    te[4] = me4 * det;
    te[8] = me8 * det;
    te[12] = me12 * det;
    te[1] = (m24 * m33 * m41 - m23 * m34 * m41 - m24 * m31 * m43 + m21 * m34 * m43 + m23 * m31 * m44 - m21 * m33 * m44) * det;
    te[5] = (m13 * m34 * m41 - m14 * m33 * m41 + m14 * m31 * m43 - m11 * m34 * m43 - m13 * m31 * m44 + m11 * m33 * m44) * det;
    te[9] = (m14 * m23 * m41 - m13 * m24 * m41 - m14 * m21 * m43 + m11 * m24 * m43 + m13 * m21 * m44 - m11 * m23 * m44) * det;
    te[13] = (m13 * m24 * m31 - m14 * m23 * m31 + m14 * m21 * m33 - m11 * m24 * m33 - m13 * m21 * m34 + m11 * m23 * m34) * det;
    te[2] = (m22 * m34 * m41 - m24 * m32 * m41 + m24 * m31 * m42 - m21 * m34 * m42 - m22 * m31 * m44 + m21 * m32 * m44) * det;
    te[6] = (m14 * m32 * m41 - m12 * m34 * m41 - m14 * m31 * m42 + m11 * m34 * m42 + m12 * m31 * m44 - m11 * m32 * m44) * det;
    te[10] = (m12 * m24 * m41 - m14 * m22 * m41 + m14 * m21 * m42 - m11 * m24 * m42 - m12 * m21 * m44 + m11 * m22 * m44) * det;
    te[14] = (m14 * m22 * m31 - m12 * m24 * m31 - m14 * m21 * m32 + m11 * m24 * m32 + m12 * m21 * m34 - m11 * m22 * m34) * det;
    te[3] = (m23 * m32 * m41 - m22 * m33 * m41 - m23 * m31 * m42 + m21 * m33 * m42 + m22 * m31 * m43 - m21 * m32 * m43) * det;
    te[7] = (m12 * m33 * m41 - m13 * m32 * m41 + m13 * m31 * m42 - m11 * m33 * m42 - m12 * m31 * m43 + m11 * m32 * m43) * det;
    te[11] = (m13 * m22 * m41 - m12 * m23 * m41 - m13 * m21 * m42 + m11 * m23 * m42 + m12 * m21 * m43 - m11 * m22 * m43) * det;
    te[15] = (m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) * det;

    return this;
};

/**
 * @method inverseMat
 * @memberof Xian.Mat4
 * returns the inverse of other
 * @param Mat4 other
 * @return this
 */
Mat4.prototype.inverseMat = function (other) {
    var te = this.elements,
        me = other.elements,

        m11 = me[0],
        m12 = me[4],
        m13 = me[8],
        m14 = me[12],
        m21 = me[1],
        m22 = me[5],
        m23 = me[9],
        m24 = me[13],
        m31 = me[2],
        m32 = me[6],
        m33 = me[10],
        m34 = me[14],
        m41 = me[3],
        m42 = me[7],
        m43 = me[11],
        m44 = me[15],

        me0 = m23 * m34 * m42 - m24 * m33 * m42 + m24 * m32 * m43 - m22 * m34 * m43 - m23 * m32 * m44 + m22 * m33 * m44,
        me4 = m14 * m33 * m42 - m13 * m34 * m42 - m14 * m32 * m43 + m12 * m34 * m43 + m13 * m32 * m44 - m12 * m33 * m44,
        me8 = m13 * m24 * m42 - m14 * m23 * m42 + m14 * m22 * m43 - m12 * m24 * m43 - m13 * m22 * m44 + m12 * m23 * m44,
        me12 = m14 * m23 * m32 - m13 * m24 * m32 - m14 * m22 * m33 + m12 * m24 * m33 + m13 * m22 * m34 - m12 * m23 * m34,

        det = m11 * me0 + m21 * me4 + m31 * me8 + m41 * me12;

    if (det === 0.0) {
        return this.identity();
    }
    det = 1.0 / det;

    te[0] = me0 * det;
    te[4] = me4 * det;
    te[8] = me8 * det;
    te[12] = me12 * det;
    te[1] = (m24 * m33 * m41 - m23 * m34 * m41 - m24 * m31 * m43 + m21 * m34 * m43 + m23 * m31 * m44 - m21 * m33 * m44) * det;
    te[5] = (m13 * m34 * m41 - m14 * m33 * m41 + m14 * m31 * m43 - m11 * m34 * m43 - m13 * m31 * m44 + m11 * m33 * m44) * det;
    te[9] = (m14 * m23 * m41 - m13 * m24 * m41 - m14 * m21 * m43 + m11 * m24 * m43 + m13 * m21 * m44 - m11 * m23 * m44) * det;
    te[13] = (m13 * m24 * m31 - m14 * m23 * m31 + m14 * m21 * m33 - m11 * m24 * m33 - m13 * m21 * m34 + m11 * m23 * m34) * det;
    te[2] = (m22 * m34 * m41 - m24 * m32 * m41 + m24 * m31 * m42 - m21 * m34 * m42 - m22 * m31 * m44 + m21 * m32 * m44) * det;
    te[6] = (m14 * m32 * m41 - m12 * m34 * m41 - m14 * m31 * m42 + m11 * m34 * m42 + m12 * m31 * m44 - m11 * m32 * m44) * det;
    te[10] = (m12 * m24 * m41 - m14 * m22 * m41 + m14 * m21 * m42 - m11 * m24 * m42 - m12 * m21 * m44 + m11 * m22 * m44) * det;
    te[14] = (m14 * m22 * m31 - m12 * m24 * m31 - m14 * m21 * m32 + m11 * m24 * m32 + m12 * m21 * m34 - m11 * m22 * m34) * det;
    te[3] = (m23 * m32 * m41 - m22 * m33 * m41 - m23 * m31 * m42 + m21 * m33 * m42 + m22 * m31 * m43 - m21 * m32 * m43) * det;
    te[7] = (m12 * m33 * m41 - m13 * m32 * m41 + m13 * m31 * m42 - m11 * m33 * m42 - m12 * m31 * m43 + m11 * m32 * m43) * det;
    te[11] = (m13 * m22 * m41 - m12 * m23 * m41 - m13 * m21 * m42 + m11 * m23 * m42 + m12 * m21 * m43 - m11 * m22 * m43) * det;
    te[15] = (m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) * det;

    return this;
};

/**
 * @method transpose
 * @memberof Xian.Mat4
 * transposes this matrix
 * @return this
 */
Mat4.prototype.transpose = function () {
    var te = this.elements,
        tmp;

    tmp = te[1];
    te[1] = te[4];
    te[4] = tmp;
    tmp = te[2];
    te[2] = te[8];
    te[8] = tmp;
    tmp = te[6];
    te[6] = te[9];
    te[9] = tmp;

    tmp = te[3];
    te[3] = te[12];
    te[12] = tmp;
    tmp = te[7];
    te[7] = te[13];
    te[13] = tmp;
    tmp = te[11];
    te[11] = te[14];
    te[14] = tmp;

    return this;
};

/**
 * @method setTrace
 * @memberof Xian.Mat4
 * sets the diagonal of matrix
 * @param Vec4 v
 * @return this
 */
Mat4.prototype.setTrace = function (v) {
    var te = this.elements,
        w = v.w;

    te[0] = v.x;
    te[5] = v.y;
    te[10] = v.z;
    te[15] = w != undefined ? w : 1.0;

    return this;
};

/**
 * @method lookAt
 * @memberof Xian.Mat4
 * makes matrix look from eye at target along up vector
 * @param Vec3 eye
 * @param Vec3 target
 * @param Vec3 up
 * @return this
 */
Mat4.prototype.lookAt = function () {
    var dup = new Vec3(0.0, 0.0, 1.0),
        x = new Vec3,
        y = new Vec3,
        z = new Vec3;

    return function (eye, target, up) {
        up || (up = dup);
        var te = this.elements;

        z.vsub(eye, target).normalize();
        if (z.length() === 0.0) z.z = 1.0;

        x.vcross(up, z).normalize();

        if (x.length() === 0.0) {
            z.x += 0.000001;
            x.vcross(up, z).normalize();
        }

        y.vcross(z, x);


        te[0] = x.x;
        te[4] = y.x;
        te[8] = z.x;
        te[1] = x.y;
        te[5] = y.y;
        te[9] = z.y;
        te[2] = x.z;
        te[6] = y.z;
        te[10] = z.z;

        return this;
    };
}();

/**
 * @method compose
 * @memberof Xian.Mat4
 * sets matrix from position, scale, and quaternion
 * @param Vec3 position
 * @param Vec3 scale
 * @param Quat rotation
 * @return this
 */
Mat4.prototype.compose = function (position, scale, rotation) {
    var te = this.elements,
        x = rotation.x,
        y = rotation.y,
        z = rotation.z,
        w = rotation.w,
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,

        sx = scale.x,
        sy = scale.y,
        sz = scale.z;

    te[0] = (1.0 - (yy + zz)) * sx;
    te[4] = (xy - wz) * sy;
    te[8] = (xz + wy) * sz;

    te[1] = (xy + wz) * sx;
    te[5] = (1.0 - (xx + zz)) * sy;
    te[9] = (yz - wx) * sz;

    te[2] = (xz - wy) * sx;
    te[6] = (yz + wx) * sy;
    te[10] = (1.0 - (xx + yy)) * sz;

    te[3] = 0.0;
    te[7] = 0.0;
    te[11] = 0.0;

    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1.0;

    return this;
};

/**
 * @method decompose
 * @memberof Xian.Mat4
 * gets matrix position, scale, quaternion
 * @param Vec3 position
 * @param Vec3 scale
 * @param Quat quaternion
 * @return this
 */
Mat4.prototype.decompose = function (position, scale, quaternion) {
    var te = this.elements,

        m11 = te[0],
        m12 = te[4],
        m13 = te[8],
        m21 = te[1],
        m22 = te[5],
        m23 = te[9],
        m31 = te[2],
        m32 = te[6],
        m33 = te[10],
        trace, x = 0.0,
        y = 0.0,
        z = 0.0,
        w = 1,
        s,

        sx = scale.set(m11, m21, m31).length(),
        sy = scale.set(m12, m22, m32).length(),
        sz = scale.set(m13, m23, m33).length(),

        invSx = 1 / sx,
        invSy = 1 / sy,
        invSz = 1 / sz;

    scale.x = sx;
    scale.y = sy;
    scale.z = sz;

    position.x = te[12];
    position.y = te[13];
    position.z = te[14];

    m11 *= invSx;
    m12 *= invSy;
    m13 *= invSz;
    m21 *= invSx;
    m22 *= invSy;
    m23 *= invSz;
    m31 *= invSx;
    m32 *= invSy;
    m33 *= invSz;

    trace = m11 + m22 + m33;

    if (trace > 0.0) {
        s = 0.5 / sqrt(trace + 1.0);

        w = 0.25 / s;
        x = (m32 - m23) * s;
        y = (m13 - m31) * s;
        z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
        s = 2.0 * sqrt(1.0 + m11 - m22 - m33);

        w = (m32 - m23) / s;
        x = 0.25 * s;
        y = (m12 + m21) / s;
        z = (m13 + m31) / s;
    } else if (m22 > m33) {
        s = 2.0 * sqrt(1.0 + m22 - m11 - m33);

        w = (m13 - m31) / s;
        x = (m12 + m21) / s;
        y = 0.25 * s;
        z = (m23 + m32) / s;
    } else {
        s = 2.0 * sqrt(1.0 + m33 - m11 - m22);

        w = (m21 - m12) / s;
        x = (m13 + m31) / s;
        y = (m23 + m32) / s;
        z = 0.25 * s;
    }

    quaternion.x = x;
    quaternion.y = y;
    quaternion.w = w;
    quaternion.z = z;

    return this;
};

/**
 * @method setPosition
 * @memberof Xian.Mat4
 * sets position of matrix
 * @param Vec3 v
 * @return this
 */
Mat4.prototype.setPosition = function (v) {
    var te = this.elements,
        z = v.z;

    te[12] = v.x;
    te[13] = v.y;
    te[14] = z != undefined ? z : 0.0;

    return this;
};

/**
 * @method extractPosition
 * @memberof Xian.Mat4
 * gets position from other saves it in this
 * @param Mat4 other
 * @return this
 */
Mat4.prototype.extractPosition = function (other) {
    var te = this.elements,
        me = other.elements;

    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];

    return this;
};

/**
 * @method extractRotation
 * @memberof Xian.Mat4
 * gets rotation from other saves it in this
 * @param Mat4 other
 * @return this
 */
Mat4.prototype.extractRotation = function () {
    var vec = new Vec3();

    return function (other) {
        var te = this.elements,
            me = other.elements,

            lx = vec.set(me[0], me[1], me[2]).lengthSq(),
            ly = vec.set(me[4], me[5], me[6]).lengthSq(),
            lz = vec.set(me[8], me[9], me[10]).lengthSq(),

            scaleX = lx > 0.0 ? 1.0 / sqrt(lx) : 0.0,
            scaleY = ly > 0.0 ? 1.0 / sqrt(ly) : 0.0,
            scaleZ = lz > 0.0 ? 1.0 / sqrt(lz) : 0.0;

        te[0] = me[0] * scaleX;
        te[1] = me[1] * scaleX;
        te[2] = me[2] * scaleX;

        te[4] = me[4] * scaleY;
        te[5] = me[5] * scaleY;
        te[6] = me[6] * scaleY;

        te[8] = me[8] * scaleZ;
        te[9] = me[9] * scaleZ;
        te[10] = me[10] * scaleZ;

        return this;
    };
}();

/**
 * @method extractRotationScale
 * @memberof Xian.Mat4
 * gets rotation with scale from other saves it in this
 * @param Mat4 other
 * @return this
 */
Mat4.prototype.extractRotationScale = function (other) {
    var te = this.elements,
        me = other.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];

    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];

    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];

    return this;
};

/**
 * @method translate
 * @memberof Xian.Mat4
 * translates matrix by vector
 * @param Vec3 v
 * @return this
 */
Mat4.prototype.translate = function (v) {
    var te = this.elements,
        x = v.x,
        y = v.y,
        z = v.z || 0.0;

    te[12] = te[0] * x + te[4] * y + te[8] * z + te[12];
    te[13] = te[1] * x + te[5] * y + te[9] * z + te[13];
    te[14] = te[2] * x + te[6] * y + te[10] * z + te[14];
    te[15] = te[3] * x + te[7] * y + te[11] * z + te[15];

    return this;
};

/**
 * @method scale
 * @memberof Xian.Mat4
 * scales matrix by vector
 * @param Vec3 v
 * @return this
 */
Mat4.prototype.scale = function (v) {
    var te = this.elements,
        x = v.x,
        y = v.y,
        z = v.z;

    te[0] *= x;
    te[4] *= y;
    te[8] *= z;
    te[1] *= x;
    te[5] *= y;
    te[9] *= z;
    te[2] *= x;
    te[6] *= y;
    te[10] *= z;
    te[3] *= x;
    te[7] *= y;
    te[11] *= z;

    return this;
};

/**
 * @method rotateX
 * @memberof Xian.Mat4
 * rotates matrix along x axis by angle
 * @param Number angle
 * @return this
 */
Mat4.prototype.rotateX = function (angle) {
    var te = this.elements,
        m12 = te[4],
        m22 = te[5],
        m32 = te[6],
        m42 = te[7],
        m13 = te[8],
        m23 = te[9],
        m33 = te[10],
        m43 = te[11],
        c = cos(angle),
        s = sin(angle);

    te[4] = c * m12 + s * m13;
    te[5] = c * m22 + s * m23;
    te[6] = c * m32 + s * m33;
    te[7] = c * m42 + s * m43;

    te[8] = c * m13 - s * m12;
    te[9] = c * m23 - s * m22;
    te[10] = c * m33 - s * m32;
    te[11] = c * m43 - s * m42;

    return this;
};

/**
 * @method rotateY
 * @memberof Xian.Mat4
 * rotates matrix along y axis by angle
 * @param Number angle
 * @return this
 */
Mat4.prototype.rotateY = function (angle) {
    var te = this.elements,
        m11 = te[0],
        m21 = te[1],
        m31 = te[2],
        m41 = te[3],
        m13 = te[8],
        m23 = te[9],
        m33 = te[10],
        m43 = te[11],
        c = cos(angle),
        s = sin(angle);

    te[0] = c * m11 - s * m13;
    te[1] = c * m21 - s * m23;
    te[2] = c * m31 - s * m33;
    te[3] = c * m41 - s * m43;

    te[8] = c * m13 + s * m11;
    te[9] = c * m23 + s * m21;
    te[10] = c * m33 + s * m31;
    te[11] = c * m43 + s * m41;

    return this;
};

/**
 * @method rotateZ
 * @memberof Xian.Mat4
 * rotates matrix along z axis by angle
 * @param Number angle
 * @return this
 */
Mat4.prototype.rotateZ = function (angle) {
    var te = this.elements,
        m11 = te[0],
        m21 = te[1],
        m31 = te[2],
        m41 = te[3],
        m12 = te[4],
        m22 = te[5],
        m32 = te[6],
        m42 = te[7],
        c = cos(angle),
        s = sin(angle);

    te[0] = c * m11 + s * m12;
    te[1] = c * m21 + s * m22;
    te[2] = c * m31 + s * m32;
    te[3] = c * m41 + s * m42;

    te[4] = c * m12 - s * m11;
    te[5] = c * m22 - s * m21;
    te[6] = c * m32 - s * m31;
    te[7] = c * m42 - s * m41;

    return this;
};

/**
 * @method makeTranslation
 * @memberof Xian.Mat4
 * makes this a translation matrix
 * @param Number x
 * @param Number y
 * @param Number z
 * @return this
 */
Mat4.prototype.makeTranslation = function (x, y, z) {

    return this.set(
        1, 0.0, 0.0, x,
        0.0, 1, 0.0, y,
        0.0, 0.0, 1, z,
        0.0, 0.0, 0.0, 1
    );
};

/**
 * @method makeScale
 * @memberof Xian.Mat4
 * makes this a scale matrix
 * @param Number x
 * @param Number y
 * @param Number z
 * @return this
 */
Mat4.prototype.makeScale = function (x, y, z) {

    return this.set(
        x, 0.0, 0.0, 0.0,
        0.0, y, 0.0, 0.0,
        0.0, 0.0, z, 0.0,
        0.0, 0.0, 0.0, 1
    );
};

/**
 * @method makeRotationX
 * @memberof Xian.Mat4
 * makes this a rotation matrix along x axis
 * @param Number angle
 * @return this
 */
Mat4.prototype.makeRotationX = function (angle) {
    var c = cos(angle),
        s = sin(angle);

    return this.set(
        1, 0.0, 0.0, 0.0,
        0.0, c, -s, 0.0,
        0.0, s, c, 0.0,
        0.0, 0.0, 0.0, 1
    );
};

/**
 * @method makeRotationY
 * @memberof Xian.Mat4
 * makes this a rotation matrix along y axis
 * @param Number angle
 * @return this
 */
Mat4.prototype.makeRotationY = function (angle) {
    var c = cos(angle),
        s = sin(angle);

    return this.set(
        c, 0.0, s, 0.0,
        0.0, 1, 0.0, 0.0, -s, 0.0, c, 0.0,
        0.0, 0.0, 0.0, 1
    );
};

/**
 * @method makeRotationZ
 * @memberof Xian.Mat4
 * makes this a rotation matrix along z axis
 * @param Number angle
 * @return this
 */
Mat4.prototype.makeRotationZ = function (angle) {
    var c = cos(angle),
        s = sin(angle);

    return this.set(
        c, -s, 0.0, 0.0,
        s, c, 0.0, 0.0,
        0.0, 0.0, 1, 0.0,
        0.0, 0.0, 0.0, 1
    );
};

/**
 * @method frustum
 * @memberof Xian.Mat4
 * makes frustum matrix
 * @param Number left
 * @param Number right
 * @param Number bottom
 * @param Number top
 * @param Number near
 * @param Number far
 * @return this
 */
Mat4.prototype.frustum = function (left, right, top, bottom, near, far) {
    var te = this.elements,
        x = 2 * near / (right - left),
        y = 2 * near / (top - bottom),

        a = (right + left) / (right - left),
        b = (top + bottom) / (top - bottom),
        c = -(far + near) / (far - near),
        d = -2 * far * near / (far - near);

    te[0] = x;
    te[4] = 0.0;
    te[8] = a;
    te[12] = 0.0;
    te[1] = 0.0;
    te[5] = y;
    te[9] = b;
    te[13] = 0.0;
    te[2] = 0.0;
    te[6] = 0.0;
    te[10] = c;
    te[14] = d;
    te[3] = 0.0;
    te[7] = 0.0;
    te[11] = -1;
    te[15] = 0.0;

    return this;
};

/**
 * @method perspective
 * @memberof Xian.Mat4
 * makes perspective matrix
 * @param Number fov
 * @param Number aspect
 * @param Number near
 * @param Number far
 * @return this
 */
Mat4.prototype.perspective = function (fov, aspect, near, far) {
    var ymax = near * tan(fov * 0.5),
        ymin = -ymax,
        xmin = ymin * aspect,
        xmax = ymax * aspect;

    return this.frustum(xmin, xmax, ymax, ymin, near, far);
};

/**
 * @method orthographic
 * @memberof Xian.Mat4
 * makes orthographic matrix
 * @param Number left
 * @param Number right
 * @param Number bottom
 * @param Number top
 * @param Number near
 * @param Number far
 * @return this
 */
Mat4.prototype.orthographic = function (left, right, top, bottom, near, far) {
    var te = this.elements,
        w = right - left,
        h = top - bottom,
        p = far - near,

        x = (right + left) / w,
        y = (top + bottom) / h,
        z = (far + near) / p;

    te[0] = 2 / w;
    te[1] = 0.0;
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = 0.0;
    te[5] = 2 / h;
    te[6] = 0.0;
    te[7] = 0.0
    te[8] = 0.0;
    te[9] = 0.0;
    te[10] = -2 / p;
    te[11] = 0.0;
    te[12] = -x;
    te[13] = -y;
    te[14] = -z;
    te[15] = 1;

    return this;
};

/**
 * @method fromMat2
 * @memberof Xian.Mat4
 * sets this from Mat2
 * @param Mat2 m
 * @return this
 */
Mat4.prototype.fromMat2 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = me[2];
    te[5] = me[3];
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 0.0;
    te[9] = 0.0;
    te[10] = 1;
    te[11] = 0.0;
    te[12] = 0.0;
    te[13] = 0.0;
    te[14] = 0.0;
    te[15] = 1;

    return this;
};

/**
 * @method fromMat32
 * @memberof Xian.Mat4
 * sets this from Mat32
 * @param Mat32 m
 * @return this
 */
Mat4.prototype.fromMat32 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = 0.0;
    te[3] = 0.0;
    te[4] = me[2];
    te[5] = me[3];
    te[6] = 0.0;
    te[7] = 0.0;
    te[8] = 0.0;
    te[9] = 0.0;
    te[10] = 1;
    te[11] = 0.0;
    te[12] = me[4];
    te[13] = me[5];
    te[14] = 0.0;
    te[15] = 1;

    return this;
};

/**
 * @method fromMat3
 * @memberof Xian.Mat4
 * sets this from Mat3
 * @param Mat3 m
 * @return this
 */
Mat4.prototype.fromMat3 = function (m) {
    var te = this.elements,
        me = m.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = 0.0;
    te[4] = me[3];
    te[5] = me[4];
    te[6] = me[5];
    te[7] = 0.0;
    te[8] = me[6];
    te[9] = me[7];
    te[10] = me[8];
    te[11] = 0.0;
    te[12] = 0.0;
    te[13] = 0.0;
    te[14] = 0.0;
    te[15] = 1;

    return this;
};

/**
 * @method fromQuat
 * @memberof Xian.Mat4
 * sets rotation of this from quaterian
 * @param Quat q
 * @return this
 */
Mat4.prototype.fromQuat = function (q) {
    var te = this.elements,
        x = q.x,
        y = q.y,
        z = q.z,
        w = q.w,
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    te[0] = 1 - (yy + zz);
    te[4] = xy - wz;
    te[8] = xz + wy;

    te[1] = xy + wz;
    te[5] = 1 - (xx + zz);
    te[9] = yz - wx;

    te[2] = xz - wy;
    te[6] = yz + wx;
    te[10] = 1 - (xx + yy);

    te[3] = 0.0;
    te[7] = 0.0;
    te[11] = 0.0;

    te[12] = 0.0;
    te[13] = 0.0;
    te[14] = 0.0;
    te[15] = 1;

    return this;
};

/**
 * @memberof Xian.Mat4
 * @param Xian.Mat4 other
 * @return this
 */
Mat4.prototype.equals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return !(
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3] ||
    ae[4] !== be[4] ||
    ae[5] !== be[5] ||
    ae[6] !== be[6] ||
    ae[7] !== be[7] ||
    ae[8] !== be[8] ||
    ae[9] !== be[9] ||
    ae[10] !== be[10] ||
    ae[11] !== be[11] ||
    ae[12] !== be[12] ||
    ae[13] !== be[13] ||
    ae[14] !== be[14] ||
    ae[15] !== be[15]
    );
};

/**
 * @memberof Xian.Mat4
 * @param Xian.Mat4 other
 * @return this
 */
Mat4.prototype.notEquals = function (other) {
    var ae = this.elements,
        be = other.elements;

    return (
    ae[0] !== be[0] ||
    ae[1] !== be[1] ||
    ae[2] !== be[2] ||
    ae[3] !== be[3] ||
    ae[4] !== be[4] ||
    ae[5] !== be[5] ||
    ae[6] !== be[6] ||
    ae[7] !== be[7] ||
    ae[8] !== be[8] ||
    ae[9] !== be[9] ||
    ae[10] !== be[10] ||
    ae[11] !== be[11] ||
    ae[12] !== be[12] ||
    ae[13] !== be[13] ||
    ae[14] !== be[14] ||
    ae[15] !== be[15]
    );
};

/**
 * @method fromJSON
 * @memberof Xian.Mat4
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Mat4.prototype.fromJSON = function (json) {
    var te = this.elements,
        me = json.elements;

    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];

    return this;
};

/**
 * @method toJSON
 * @memberof Xian.Mat4
 * returns json object of this
 * @return Object
 */
Mat4.prototype.toJSON = function (json) {
    json || (json = {});
    var te = this.elements,
        je = json.elements || (json.elements = []);

    json._className = "Mat4";
    je[0] = te[0];
    je[1] = te[1];
    je[2] = te[2];
    je[3] = te[3];
    je[4] = te[4];
    je[5] = te[5];
    je[6] = te[6];
    je[7] = te[7];
    je[8] = te[8];
    je[9] = te[9];
    je[10] = te[10];
    je[11] = te[11];
    je[12] = te[12];
    je[13] = te[13];
    je[14] = te[14];
    je[15] = te[15];

    return json;
};

/**
 * @method fromArray
 * @memberof Xian.Mat4
 * sets values from Array object
 * @param Object json
 * @return this
 */
Mat4.prototype.fromArray = function (array) {
    var te = this.elements;

    te[0] = array[0];
    te[1] = array[1];
    te[2] = array[2];
    te[3] = array[3];
    te[4] = array[4];
    te[5] = array[5];
    te[6] = array[6];
    te[7] = array[7];
    te[8] = array[8];
    te[9] = array[9];
    te[10] = array[10];
    te[11] = array[11];
    te[12] = array[12];
    te[13] = array[13];
    te[14] = array[14];
    te[15] = array[15];

    return this;
};

/**
 * @method toArray
 * @memberof Xian.Mat4
 * returns array object of this
 * @return Object
 */
Mat4.prototype.toArray = function (array) {
    array || (array = []);
    var te = this.elements;

    array[0] = te[0];
    array[1] = te[1];
    array[2] = te[2];
    array[3] = te[3];
    array[4] = te[4];
    array[5] = te[5];
    array[6] = te[6];
    array[7] = te[7];
    array[8] = te[8];
    array[9] = te[9];
    array[10] = te[10];
    array[11] = te[11];
    array[12] = te[12];
    array[13] = te[13];
    array[14] = te[14];
    array[15] = te[15];

    return array;
};

/**
 * @method toString
 * @memberof Xian.Mat4
 * returns string of this
 * @return String
 */
Mat4.prototype.toString = function () {
    var te = this.elements;

    return (
    "Mat4[" + te[0] + ", " + te[4] + ", " + te[8] + ", " + te[12] + "]\n" +
    "     [" + te[1] + ", " + te[5] + ", " + te[9] + ", " + te[13] + "]\n" +
    "     [" + te[2] + ", " + te[6] + ", " + te[10] + ", " + te[14] + "]\n" +
    "     [" + te[3] + ", " + te[7] + ", " + te[11] + ", " + te[15] + "]"
    );
};


module.exports = Mat4;

},{"./mathf":107,"./vec3":112}],107:[function(require,module,exports){
"use strict";


var random = Math.random,
    abs = Math.abs,
    cos = Math.cos,
    pow = Math.pow,
    floor = Math.floor,
    ceil = Math.ceil,
    atan2 = Math.atan2,
    EPSILON = 0.000001,
    PI = 3.1415926535897932384626433832795028841968,
    TWO_PI = PI * 2,
    HALF_PI = PI * 0.5,
    TO_RADS = PI / 180.0,
    TO_DEGS = 180.0 / PI,
    keys = Object.keys,
    modulo, clamp01, standardRadian, standardAngle, radsToDegs;


/**
 * @class Mathf
 * collection of common math functions
 */
function Mathf() {

    /**
     * @property Number PI
     * The infamous 3.14159265358979323846264338327950.028841968
     * @memberof Odin.Mathf
     */
    this.PI = PI;

    /**
     * @property Number TWO_PI
     * 2 * PI
     * @memberof Odin.Mathf
     */
    this.TWO_PI = TWO_PI;

    /**
     * @property Number HALF_PI
     * PI / 2
     * @memberof Odin.Mathf
     */
    this.HALF_PI = HALF_PI;

    /**
     * @property Number EPSILON
     * A small number value
     * @memberof Odin.Mathf
     */
    this.EPSILON = EPSILON;

    /**
     * @property Number TO_RADS
     * Degrees to radians conversion constant
     * @memberof Odin.Mathf
     */
    this.TO_RADS = TO_RADS;

    /**
     * @property Number TO_DEGS
     * Radians to degrees conversion constant
     * @memberof Odin.Mathf
     */
    this.TO_DEGS = TO_DEGS;
}

Mathf.prototype._classes = {};

Mathf.prototype.acos = Math.acos;
Mathf.prototype.asin = Math.asin;
Mathf.prototype.atan = Math.atan;
Mathf.prototype.atan2 = Math.atan2;

Mathf.prototype.cos = Math.cos;
Mathf.prototype.sin = Math.sin;
Mathf.prototype.tan = Math.tan;

Mathf.prototype.abs = Math.abs;
Mathf.prototype.ceil = Math.ceil;
Mathf.prototype.exp = Math.exp;
Mathf.prototype.floor = Math.floor;
Mathf.prototype.log = Math.log;
Mathf.prototype.max = Math.max;
Mathf.prototype.min = Math.min;
Mathf.prototype.pow = Math.pow;
Mathf.prototype.random = Math.random;
Mathf.prototype.round = Math.round;
Mathf.prototype.sqrt = Math.sqrt;

/**
 * @method equals
 * @memberof Odin.Mathf
 * returns if a = b within some value, defaults to Mathf.EPSILON
 * @param Number a
 * @param Number b
 * @param Number e
 * @return Boolean
 */
Mathf.prototype.equals = function (a, b, e) {

    return abs(a - b) < (e || EPSILON);
};

/**
 * @method modulo
 * @memberof Odin.Mathf
 * returns remainder of a / b
 * @param Number a
 * @param Number b
 * @return Number
 */
Mathf.prototype.modulo = modulo = function (a, b) {
    var r = a % b;

    return (r * b < 0.0) ? r + b : r;
};

/**
 * @method standardRadian
 * @memberof Odin.Mathf
 * convertes x to radian where 0.0 <= x < 2PI
 * @param Number x
 * @return Number
 */
Mathf.prototype.standardRadian = standardRadian = function (x) {

    return modulo(x, TWO_PI);
};

/**
 * @method standardAngle
 * @memberof Odin.Mathf
 * convertes x to angle where 0.0 <= x < 360.0
 * @param Number x
 * @return Number
 */
Mathf.prototype.standardAngle = standardAngle = function (x) {

    return modulo(x, 360.0);
};

/**
 * @method sign
 * @memberof Odin.Mathf
 * gets sign of x
 * @param Number x
 * @return Number
 */
Mathf.prototype.sign = function (x) {

    return x < 0 ? -1 : 1;
};

/**
 * @method clamp
 * @memberof Odin.Mathf
 * clamp x between min and max
 * @param Number x
 * @param Number min
 * @param Number max
 * @return Number
 */
Mathf.prototype.clamp = function (x, min, max) {

    return x < min ? min : x > max ? max : x;
};

/**
 * @method clampBottom
 * @memberof Odin.Mathf
 * clamp x between min and Infinity
 * @param Number x
 * @param Number min
 * @return Number
 */
Mathf.prototype.clampBottom = function (x, min) {

    return x < min ? min : x;
};

/**
 * @method clampTop
 * @memberof Odin.Mathf
 * clamp x between -Infinity and max
 * @param Number x
 * @param Number max
 * @return Number
 */
Mathf.prototype.clampTop = function (x, max) {

    return x > max ? max : x;
};

/**
 * @method clamp01
 * @memberof Odin.Mathf
 * clamp x between 0.0 and 1
 * @param Number x
 * @return Number
 */
Mathf.prototype.clamp01 = clamp01 = function (x) {

    return x < 0.0 ? 0.0 : x > 1 ? 1 : x;
};

/**
 * @method truncate
 * @memberof Odin.Mathf
 * truncate x to have n number of decial places
 * @param Number x
 * @param Number n
 * @return Number
 */
Mathf.prototype.truncate = function (x, n) {
    var p = pow(10.0, n),
        num = x * p;

    return (num < 0.0 ? ceil(num) : floor(num)) / p;
};

/**
 * @method lerp
 * @memberof Odin.Mathf
 * linear interpolation between a and b by x
 * @param Number a
 * @param Number b
 * @param Number x
 * @return Number
 */
Mathf.prototype.lerp = function (a, b, x) {

    return a + (b - a) * x;
};

/**
 * @method lerpAngle
 * @memberof Odin.Mathf
 * linear interpolation between a and b by x insures 0.0 <= x < 2PI
 * @param Number a
 * @param Number b
 * @param Number x
 * @return Number
 */
Mathf.prototype.lerpAngle = function (a, b, x) {

    return standardRadian(a + (b - a) * x);
};

/**
 * @method cosLerp
 * @memberof Odin.Mathf
 * cosine interpolation between a and b by x
 * @param Number a
 * @param Number b
 * @param Number x
 * @return Number
 */
Mathf.prototype.lerpCos = function (a, b, x) {
    var ft = x * PI,
        f = (1.0 - cos(ft)) * 0.5;

    return a * (1.0 - f) + b * f;
};

/**
 * @method lerpCubic
 * @memberof Odin.Mathf
 * cubic interpolation between v1 and v2 by x
 * @param Number v0
 * @param Number v1
 * @param Number v2
 * @param Number v3
 * @param Number x
 * @return Number
 */
Mathf.prototype.lerpCubic = function (v0, v1, v2, v3, x) {
    v0 || (v0 = v1);
    v3 || (v3 = v2);
    var P = (v3 - v2) - (v0 - v1),
        Q = (v0 - v1) - P,
        R = v2 - v0,
        S = v1,

        Px = P * x,
        Qx = Q * x,
        Rx = R * x;

    return (Px * Px * Px) + (Qx * Qx) + Rx + S;
};

/**
 * smooth step, if input is between min and max this returns a value proportionately between 0.0 and 1
 * @method smoothStep
 * @memberof Odin.Mathf
 * @param Number x
 * @param Number min
 * @param Number max
 * @return Number
 */
Mathf.prototype.smoothStep = function (x, min, max) {
    if (x <= min) return 0.0;
    if (x >= max) return 1;

    x = (x - min) / (max - min);

    return x * x * (3 - 2 * x);
};

/**
 * @method smootherStep
 * @memberof Odin.Mathf
 * smoother step, if input is between min and max this returns a value proportionately between 0.0 and 1
 * @param Number x
 * @param Number min
 * @param Number max
 * @return Number
 */
Mathf.prototype.smootherStep = function (x, min, max) {
    if (x <= min) return 0.0;
    if (x >= max) return 1;

    x = (x - min) / (max - min);

    return x * x * x * (x * (x * 6 - 15) + 10.0);
};

/**
 * @method pingPong
 * @memberof Odin.Mathf
 * PingPongs the value x, so that it is never larger than length and never smaller than 0.0.
 * @param Number x
 * @param Number length
 * @return Number
 */
Mathf.prototype.pingPong = function (x, length) {
    length || (length = 1);

    return length - abs(x % (2 * length) - length);
};

/**
 * @method degsToRads
 * @memberof Odin.Mathf
 * convertes degrees to radians
 * @param Number x
 * @return Number
 */
Mathf.prototype.degsToRads = function (x) {

    return standardRadian(x * TO_RADS);
};

/**
 * @method radsToDegs
 * @memberof Odin.Mathf
 * convertes radians to degrees
 * @param Number x
 * @return Number
 */
Mathf.prototype.radsToDegs = radsToDegs = function (x) {

    return standardAngle(x * TO_DEGS);
};

/**
 * @method randInt
 * @memberof Odin.Mathf
 * returns random number between min and max
 * @param Number min
 * @param Number max
 * @return Number
 */
Mathf.prototype.randInt = function (min, max) {

    return floor(min + (random() * (max + 1 - min)));
};

/**
 * @method randFloat
 * @memberof Odin.Mathf
 * returns random number between min and max
 * @param Number min
 * @param Number max
 * @return Number
 */
Mathf.prototype.randFloat = function (min, max) {

    return min + (random() * (max - min));
};

/**
 * @method randSign
 * @memberof Odin.Mathf
 * returns either -1 or 1
 * @param Number min
 * @param Number max
 * @return Number
 */
Mathf.prototype.randSign = function () {

    return random() < 0.5 ? 1 : -1;
};

/**
 * @method randChoice
 * @memberof Odin.Mathf
 * returns random item from array
 * @param Array array
 * @return Number
 */
Mathf.prototype.randChoice = function (array) {

    return array[(random() * array.length) | 0.0];
};

/**
 * @method shuffle
 * @memberof Odin.Mathf
 * shuffles array
 * @param Array array
 * @return Array
 */
Mathf.prototype.shuffle = function (array) {

    for (var j, x, i = array.length; i; j = (random() * i) | 0.0, x = array[--i], array[i] = array[j], array[j] = x);
    return array;
};

/**
 * @method randArg
 * @memberof Odin.Mathf
 * returns random argument from arguments
 * @return Number
 */
Mathf.prototype.randArg = function () {

    return arguments[(random() * arguments.length) | 0.0];
};

/**
 * @method randChoiceObject
 * @memberof Odin.Mathf
 * returns random key from object
 * @param Object obj
 * @return Number
 */
Mathf.prototype.randChoiceObject = function (obj) {
    var array = keys(obj);

    return array[(random() * array.length) | 0.0];
};

/**
 * @method isPowerOfTwo
 * @memberof Odin.Mathf
 * checks if x is a power of 2
 * @param Number x
 * @return Number
 */
Mathf.prototype.isPowerOfTwo = function (x) {

    return (x & -x) === x;
};

/**
 * @method floorPowerOfTwo
 * @memberof Odin.Mathf
 * returns number's floor power of 2
 * @param Number x
 * @return Number
 */
Mathf.prototype.floorPowerOfTwo = function (x) {
    var i = 2,
        prev;

    while (i < x) {
        prev = i;
        i *= 2;
    }

    return prev;
};

/**
 * @method ceilPowerOfTwo
 * @memberof Odin.Mathf
 * returns number's ceil power of 2
 * @param Number x
 * @return Number
 */
Mathf.prototype.ceilPowerOfTwo = function (x) {
    var i = 2;

    while (i < x) {
        i *= 2;
    }

    return i;
};

/**
 * @method fromJSON
 * @memberof Odin.Mathf
 * returns Math class based on json _className
 * @param Object json
 * @return MATH_CLASS
 */
Mathf.prototype.fromJSON = function (json) {

    return new this._classes[json._className]().fromJSON(json);
};


/**
 * @method directionAngle
 * @memberof Odin.Mathf
 * returns direction string of an angle in radians
 * @param Number x
 * @param Number y
 * @return String
 */

var n225 = 0.39269908169872414,
    n675 = 1.1780972450961724,
    n1125 = 1.9634954084936207,
    n1575 = 2.748893571891069,
    n2025 = 3.5342917352885173,
    n2475 = 4.319689898685966,
    n2925 = 5.105088062083414,
    n3375 = 5.8904862254808625,

    RIGHT = "right",
    UP_RIGHT = "up_right",
    UP = "up",
    UP_LEFT = "up_left",
    LEFT = "left",
    DOWN_LEFT = "down_left",
    DOWN = "down",
    DOWN_RIGHT = "down_right";

Mathf.prototype.directionAngle = function (a) {
    a = standardRadian(a);

    if (a >= n3375 && a < n225) return RIGHT;
    if (a >= n225 && a < n675) return UP_RIGHT;
    if (a >= n675 && a < n1125) return UP;
    if (a >= n1125 && a < n1575) return UP_LEFT;
    if (a >= n1575 && a < n2025) return LEFT;
    if (a >= n2025 && a < n2475) return DOWN_LEFT;
    if (a >= n2475 && a < n2925) return DOWN;
    if (a >= n2925 && a < n3375) return DOWN_RIGHT;

    return RIGHT;
};

/**
 * @method direction
 * @memberof Odin.Mathf
 * returns direction string from an x and a y coordinate
 * @param Number x
 * @param Number y
 * @return String
 */
Mathf.prototype.direction = function (x, y) {
    var a = standardRadian(atan2(y, x));

    if (a >= n3375 && a < n225) return RIGHT;
    if (a >= n225 && a < n675) return UP_RIGHT;
    if (a >= n675 && a < n1125) return UP;
    if (a >= n1125 && a < n1575) return UP_LEFT;
    if (a >= n1575 && a < n2025) return LEFT;
    if (a >= n2025 && a < n2475) return DOWN_LEFT;
    if (a >= n2475 && a < n2925) return DOWN;
    if (a >= n2925 && a < n3375) return DOWN_RIGHT;

    return RIGHT;
};


module.exports = new Mathf;

},{}],108:[function(require,module,exports){
var Mathf = require("./mathf");
var Vec3 = require("./vec3");
"use strict";


var abs = Math.abs,
    sqrt = Math.sqrt,
    acos = Math.acos,
    sin = Math.sin,
    cos = Math.cos,
    EPSILON = Mathf.EPSILON;

/**
 * @class Quat
 * quaternion
 * @param Number x
 * @param Number y
 * @param Number z
 * @param Number w
 */
function Quat(x, y, z, w) {

    /**
     * @property Number x
     * @memberof Odin.Quat
     */
    this.x = x || 0.0;

    /**
     * @property Number y
     * @memberof Odin.Quat
     */
    this.y = y || 0.0;

    /**
     * @property Number z
     * @memberof Odin.Quat
     */
    this.z = z || 0.0;

    /**
     * @property Number w
     * @memberof Odin.Quat
     */
    this.w = w != undefined ? w : 1.0;
}

Mathf._classes["Quat"] = Quat;

/**
 * @method clone
 * @memberof Odin.Quat
 * returns new instance of this
 * @return Quat
 */
Quat.prototype.clone = function () {

    return new Quat(this.x, this.y, this.z, this.w);
};

/**
 * @method copy
 * @memberof Odin.Quat
 * copies other
 * @param Quat other
 * @return this
 */
Quat.prototype.copy = function (other) {

    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;

    return this;
};

/**
 * @method set
 * @memberof Odin.Quat
 * sets values of this
 * @param Number x
 * @param Number y
 * @param Number z
 * @param Number w
 * @return this
 */
Quat.prototype.set = function (x, y, z, w) {

    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Quat
 * muliples this's values by other's
 * @param Quat other
 * @return this
 */
Quat.prototype.mul = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        aw = this.w,
        bx = other.x,
        by = other.y,
        bz = other.z,
        bw = other.w;

    this.x = ax * bw + aw * bx + ay * bz - az * by;
    this.y = ay * bw + aw * by + az * bx - ax * bz;
    this.z = az * bw + aw * bz + ax * by - ay * bx;
    this.w = aw * bw - ax * bx - ay * by - az * bz;

    return this;
};

/**
 * @method qmul
 * @memberof Odin.Quat
 * muliples a and b saves it in this
 * @param Quat a
 * @param Quat b
 * @return this
 */
Quat.prototype.qmul = function (a, b) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        aw = a.w,
        bx = b.x,
        by = b.y,
        bz = b.z,
        bw = b.w;

    this.x = ax * bw + aw * bx + ay * bz - az * by;
    this.y = ay * bw + aw * by + az * bx - ax * bz;
    this.z = az * bw + aw * bz + ax * by - ay * bx;
    this.w = aw * bw - ax * bx - ay * by - az * bz;

    return this;
};

/**
 * @method div
 * @memberof Odin.Quat
 * divides this's values by other's
 * @param Quat other
 * @return this
 */
Quat.prototype.div = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        aw = this.w,
        bx = -other.x,
        by = -other.y,
        bz = -other.z,
        bw = other.w;

    this.x = ax * bw + aw * bx + ay * bz - az * by;
    this.y = ay * bw + aw * by + az * bx - ax * bz;
    this.z = az * bw + aw * bz + ax * by - ay * bx;
    this.w = aw * bw - ax * bx - ay * by - az * bz;

    return this;
};

/**
 * @method qdiv
 * @memberof Odin.Quat
 * divides b from a saves it in this
 * @param Quat a
 * @param Quat b
 * @return this
 */
Quat.prototype.qdiv = function (a, b) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        aw = a.w,
        bx = -b.x,
        by = -b.y,
        bz = -b.z,
        bw = b.w;

    this.x = ax * bw + aw * bx + ay * bz - az * by;
    this.y = ay * bw + aw * by + az * bx - ax * bz;
    this.z = az * bw + aw * bz + ax * by - ay * bx;
    this.w = aw * bw - ax * bx - ay * by - az * bz;

    return this;
};

/**
 * @method length
 * @memberof Odin.Quat
 * returns the length of this
 * @return Number
 */
Quat.prototype.length = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        lsq = x * x + y * y + z * z + w * w;

    return lsq > 0.0 ? sqrt(lsq) : 0.0;
};

/**
 * @method lengthSq
 * @memberof Odin.Quat
 * returns the squared length of this
 * @return Number
 */
Quat.prototype.lengthSq = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w;

    return x * x + y * y + z * z + w * w;
};

/**
 * @method normalize
 * @memberof Odin.Quat
 * returns this with a length of 1
 * @return this
 */
Quat.prototype.normalize = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        l = x * x + y * y + z * z + w * w;

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l;
    this.y *= l;
    this.z *= l;
    this.w *= l;

    return this;
};

/**
 * @method inverse
 * @memberof Odin.Quat
 * returns the inverse of this
 * @return this
 */
Quat.prototype.inverse = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        d = x * x + y * y + z * z + w * w,
        invD = d > 0.0 ? 1.0 / d : 0.0;

    this.x *= -invD;
    this.y *= -invD;
    this.z *= -invD;
    this.w *= invD;

    return this;
};

/**
 * @method inverseQuat
 * @memberof Odin.Quat
 * returns the inverse of other
 * @param Quat other
 * @return this
 */
Quat.prototype.inverseQuat = function (other) {
    var x = other.x,
        y = other.y,
        z = other.z,
        w = other.w,
        d = x * x + y * y + z * z + w * w,
        invD = d > 0.0 ? 1.0 / d : 0.0;

    this.x = -x * invD;
    this.y = -y * invD;
    this.z = -z * invD;
    this.w = w * invD;

    return this;
};

/**
 * @method conjugate
 * @memberof Odin.Quat
 * this faster than inverse, if quat is normalized and produces the same result
 * @return this
 */
Quat.prototype.conjugate = function () {

    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;

    return this;
};

/**
 * @method calculateW
 * @memberof Odin.Quat
 * calculates w component of quat
 * @return this
 */
Quat.prototype.calculateW = function () {
    var x = this.x,
        y = this.y,
        z = this.z;

    this.w = -sqrt(abs(1 - x * x - y * y - z * z));

    return this;
};

/**
 * @method lerp
 * @memberof Odin.Quat
 * linear interpolation between this and other by x
 * @param Quat other
 * @param Number x
 * @return this
 */
Quat.prototype.lerp = function (other, x) {

    this.x += (other.x - this.x) * x;
    this.y += (other.y - this.y) * x;
    this.z += (other.z - this.z) * x;
    this.w += (other.w - this.w) * x;

    return this;
};

/**
 * @method qlerp
 * @memberof Odin.Quat
 * linear interpolation between a and b by x
 * @param Quat a
 * @param Quat b
 * @param Number x
 * @return this
 */
Quat.prototype.qlerp = function (a, b, x) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        aw = a.w;

    this.x = ax + (b.x - ax) * x;
    this.y = ay + (b.y - ay) * x;
    this.z = az + (b.z - az) * x;
    this.w = aw + (b.w - aw) * x;

    return this;
};

/**
 * @method nlerp
 * @memberof Odin.Quat
 * faster but less accurate than slerp
 * @param Quat other
 * @param Number x
 * @return this
 */
Quat.prototype.nlerp = function (other, x) {

    this.x += (other.x - this.x) * x;
    this.y += (other.y - this.y) * x;
    this.z += (other.z - this.z) * x;
    this.w += (other.w - this.w) * x;

    return this.normalize();
};

/**
 * @method qnlerp
 * @memberof Odin.Quat
 * faster but less accurate than qslerp
 * @param Quat a
 * @param Quat b
 * @param Number x
 * @return this
 */
Quat.prototype.qnlerp = function (a, b, x) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        aw = a.w;

    this.x = ax + (b.x - ax) * x;
    this.y = ay + (b.y - ay) * x;
    this.z = az + (b.z - az) * x;
    this.w = aw + (b.w - aw) * x;

    return this.normalize();
};

/**
 * @method slerp
 * @memberof Odin.Quat
 * spherical linear Interpolation of this and other by x
 * @param Quat other
 * @param Number x
 * @return this
 */
Quat.prototype.slerp = function (other, x) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        aw = this.w,
        bx = other.x,
        by = other.y,
        bz = other.z,
        bw = other.w,

        omega, sinom, scale0, scale1,
        cosom = ax * bx + ay * by + az * bz + aw * bw;

    if (cosom < 0.0) {
        cosom *= -1;
        bx *= -1;
        by *= -1;
        bz *= -1;
        bw *= -1;
    }

    if (1 - cosom > EPSILON) {
        omega = acos(cosom);
        sinom = 1 / sin(omega);
        scale0 = sin((1 - x) * omega) * sinom;
        scale1 = sin(x * omega) * sinom;
    } else {
        scale0 = 1 - x;
        scale1 = x;
    }

    this.x = scale0 * ax + scale1 * bx;
    this.y = scale0 * ay + scale1 * by;
    this.z = scale0 * az + scale1 * bz;
    this.w = scale0 * aw + scale1 * bw;

    return this;
};

/**
 * @method qslerp
 * @memberof Odin.Quat
 * spherical linear Interpolation between a and b by x
 * @param Quat a
 * @param Quat b
 * @param Number x
 * @return this
 */
Quat.prototype.qslerp = function (a, b, x) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        aw = a.w,
        bx = b.x,
        by = b.y,
        bz = b.z,
        bw = b.w,

        omega, sinom, scale0, scale1,
        cosom = ax * bx + ay * by + az * bz + aw * bw;

    if (cosom < 0.0) {
        cosom *= -1;
        bx *= -1;
        by *= -1;
        bz *= -1;
        bw *= -1;
    }

    if (1 - cosom > EPSILON) {
        omega = acos(cosom);
        sinom = 1 / sin(omega);
        scale0 = sin((1 - x) * omega) * sinom;
        scale1 = sin(x * omega) * sinom;
    } else {
        scale0 = 1 - x;
        scale1 = x;
    }

    this.x = scale0 * ax + scale1 * bx;
    this.y = scale0 * ay + scale1 * by;
    this.z = scale0 * az + scale1 * bz;
    this.w = scale0 * aw + scale1 * bw;

    return this;
};

/**
 * @method qdot
 * @memberof Odin.Quat
 * dot product of two quats, can be called as a static function Quat.qdot( a, b )
 * @param Quat a
 * @param Quat b
 * @return Number
 */
Quat.qdot = Quat.prototype.qdot = function (a, b) {

    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};

/**
 * @method dot
 * @memberof Odin.Quat
 * dot product of this and other
 * @param Quat other
 * @return Number
 */
Quat.prototype.dot = function (other) {

    return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
};

/**
 * @method rotationX
 * @memberof Odin.Quat
 * gets quat's x rotation as an eular angle
 * @param Number angle
 * @return this
 */
Quat.prototype.rotationX = function () {
    var w = this.w;

    return this.x / sqrt(1 - (w * w));
};

/**
 * @method rotationY
 * @memberof Odin.Quat
 * gets quat's y rotation as an eular angle
 * @param Number angle
 * @return this
 */
Quat.prototype.rotationY = function () {
    var w = this.w;

    return this.y / sqrt(1 - (w * w));
};

/**
 * @method rotationZ
 * @memberof Odin.Quat
 * gets quat's z rotation as an eular angle
 * @param Number angle
 * @return this
 */
Quat.prototype.rotationZ = function () {
    var w = this.w;

    return this.z / sqrt(1 - (w * w));
};

/**
 * @method rotateX
 * @memberof Odin.Quat
 * sets quat's x rotation
 * @param Number angle
 * @return this
 */
Quat.prototype.rotateX = function (angle) {
    var halfAngle = angle * 0.5,
        x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        s = sin(halfAngle),
        c = cos(halfAngle);

    this.x = x * c + w * s;
    this.y = y * c + z * s;
    this.z = z * c - y * s;
    this.w = w * c - x * s;

    return this;
};

/**
 * @method rotateY
 * @memberof Odin.Quat
 * sets quat's y rotation
 * @param Number angle
 * @return this
 */
Quat.prototype.rotateY = function (angle) {
    var halfAngle = angle * 0.5,
        x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        s = sin(halfAngle),
        c = cos(halfAngle);

    this.x = x * c - z * s;
    this.y = y * c + w * s;
    this.z = z * c + x * s;
    this.w = w * c - y * s;

    return this;
};

/**
 * @method rotateZ
 * @memberof Odin.Quat
 * sets quat's z rotation
 * @param Number angle
 * @return this
 */
Quat.prototype.rotateZ = function (angle) {
    var halfAngle = angle * 0.5,
        x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        s = sin(halfAngle),
        c = cos(halfAngle);

    this.x = x * c + y * s;
    this.y = y * c - x * s;
    this.z = z * c + w * s;
    this.w = w * c - z * s;

    return this;
};

/**
 * @method rotate
 * @memberof Odin.Quat
 * rotates quat by z then x then y in that order
 * @param Number x
 * @param Number y
 * @param Number z
 * @return this
 */
Quat.prototype.rotate = function (x, y, z) {

    this.rotateZ(z);
    this.rotateX(x);
    this.rotateY(y);

    return this;
};

/**
 * @method lookRotation
 * @memberof Odin.Quat
 * creates a rotation with the specified forward and upwards directions
 * @param Vec3 forward
 * @param Vec3 up
 * @return this
 */
Quat.prototype.lookRotation = function (forward, up) {
    var fx = forward.x,
        fy = forward.y,
        fz = forward.z,
        ux = up.x,
        uy = up.y,
        uz = up.z,

        ax = uy * fz - uz * fy,
        ay = uz * fx - ux * fz,
        az = ux * fy - uy * fx,

        d = (1.0 + ux * fx + uy * fy + uz * fz) * 2.0,
        dsq = d * d,
        s = 1.0 / dsq;

    this.x = ax * s;
    this.y = ay * s;
    this.z = az * s;
    this.w = dsq * 0.5;

    return this;
};

/**
 * @method fromAxisAngle
 * @memberof Odin.Quat
 * sets quat from axis and angle
 * @param Vec3 axis
 * @param Number angle
 * @return this
 */
Quat.prototype.fromAxisAngle = function (axis, angle) {
    var halfAngle = angle * 0.5,
        s = sin(halfAngle);

    this.x = axis.x * s;
    this.y = axis.y * s;
    this.z = axis.z * s;
    this.w = cos(halfAngle);

    return this;
};

/**
 * @method fromVec3s
 * @memberof Odin.Quat
 * sets quat from two vectors
 * @param Vec3 u
 * @param Vec3 v
 * @return this
 */
Quat.prototype.fromVec3s = function () {
    var a = new Vec3;

    return function (u, v) {
        a.vcross(u, v);

        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = sqrt(u.lengthSq() * v.lengthSq()) + u.dot(v);

        return this.normalize();
    };
}();

/**
 * @method fromMat3
 * @memberof Odin.Quat
 * sets values from Mat3
 * @param Mat3 m
 * @return this
 */
Quat.prototype.fromMat3 = function (m) {
    var te = m.elements,
        m11 = te[0],
        m12 = te[3],
        m13 = te[6],
        m21 = te[1],
        m22 = te[4],
        m23 = te[7],
        m31 = te[2],
        m32 = te[5],
        m33 = te[8],
        trace = m11 + m22 + m33,
        s, invS;

    if (trace > 0.0) {
        s = 0.5 / sqrt(trace + 1.0);

        this.w = 0.25 / s;
        this.x = (m32 - m23) * s;
        this.y = (m13 - m31) * s;
        this.z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
        s = 2.0 * sqrt(1.0 + m11 - m22 - m33);
        invS = 1.0 / s;

        this.w = (m32 - m23) * invS;
        this.x = 0.25 * s;
        this.y = (m12 + m21) * invS;
        this.z = (m13 + m31) * invS;
    } else if (m22 > m33) {
        s = 2.0 * sqrt(1.0 + m22 - m11 - m33);
        invS = 1.0 / s;

        this.w = (m13 - m31) * invS;
        this.x = (m12 + m21) * invS;
        this.y = 0.25 * s;
        this.z = (m23 + m32) * invS;
    } else {
        s = 2.0 * sqrt(1.0 + m33 - m11 - m22);
        invS = 1.0 / s;

        this.w = (m21 - m12) * invS;
        this.x = (m13 + m31) * invS;
        this.y = (m23 + m32) * invS;
        this.z = 0.25 * s;
    }

    return this;
};

/**
 * @method fromMat4
 * @memberof Odin.Quat
 * sets values from Mat4
 * @param Mat4 m
 * @return this
 */
Quat.prototype.fromMat4 = function (m) {
    var te = m.elements,
        m11 = te[0],
        m12 = te[4],
        m13 = te[8],
        m21 = te[1],
        m22 = te[5],
        m23 = te[9],
        m31 = te[2],
        m32 = te[6],
        m33 = te[10],
        trace = m11 + m22 + m33,
        s, invS;

    if (trace > 0.0) {
        s = 0.5 / sqrt(trace + 1);

        this.w = 0.25 / s;
        this.x = (m32 - m23) * s;
        this.y = (m13 - m31) * s;
        this.z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
        s = 2.0 * sqrt(1.0 + m11 - m22 - m33);
        invS = 1.0 / s;

        this.w = (m32 - m23) * invS;
        this.x = 0.25 * s;
        this.y = (m12 + m21) * invS;
        this.z = (m13 + m31) * invS;
    } else if (m22 > m33) {
        s = 2.0 * sqrt(1.0 + m22 - m11 - m33);
        invS = 1.0 / s;

        this.w = (m13 - m31) * invS;
        this.x = (m12 + m21) * invS;
        this.y = 0.25 * s;
        this.z = (m23 + m32) * invS;
    } else {
        s = 2.0 * sqrt(1.0 + m33 - m11 - m22);
        invS = 1.0 / s;

        this.w = (m21 - m12) * invS;
        this.x = (m13 + m31) * invS;
        this.y = (m23 + m32) * invS;
        this.z = 0.25 * s;
    }

    return this;
};

/**
 * @method fromArray
 * @memberof Odin.Quat
 * sets values from array
 * @param Array array
 * @return this
 */
Quat.prototype.fromArray = function (array) {

    this.x = array[0];
    this.y = array[1];
    this.z = array[2];
    this.w = array[3];

    return this;
};

/**
 * @memberof Odin.Quat
 * @param Odin.Quat other
 * @return this
 */
Quat.prototype.equals = function (other) {

    return !(
    this.x !== other.x ||
    this.y !== other.y ||
    this.z !== other.z ||
    this.w !== other.w
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Quat
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Quat.prototype.fromJSON = function (json) {

    this.x = json.x;
    this.y = json.y;
    this.z = json.z;
    this.w = json.w;

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Quat
 * returns array of this
 * @return Object
 */
Quat.prototype.toArray = function (array) {
    array || (array = []);

    array[0] = this.x;
    array[1] = this.y;
    array[2] = this.z;
    array[3] = this.w;

    return array;
};

/**
 * @method toJSON
 * @memberof Odin.Quat
 * returns json object of this
 * @return Object
 */
Quat.prototype.toJSON = function (json) {
    json || (json = {});

    json._className = "Quat";
    json.x = this.x;
    json.y = this.y;
    json.z = this.z;
    json.w = this.w;

    return json;
};

/**
 * @method toString
 * @memberof Odin.Quat
 * returns string of this
 * @return String
 */
Quat.prototype.toString = function () {

    return "Quat( " + this.x + ", " + this.y + ", " + this.z + ", " + this.w + " )";
};


module.exports = Quat;

},{"./mathf":107,"./vec3":112}],109:[function(require,module,exports){
"use strict";


var defineProperty = Object.defineProperty;


function Rect(x, y, width, height) {

    this._x = x || 0.0;
    this._y = y || 0.0;
    this._width = width || 0.0;
    this._height = height || 0.0;

    this._xMin = this._x;
    this._xMax = this._x + this._width;
    this._yMin = this._y;
    this._yMax = this._y + this._height;
}

defineProperty(Rect.prototype, "x", {
    get: function () {
        return this._x;
    },
    set: function (value) {
        this._x = value;
        this._xMin = value;
        this._xMax = value + this._width;
    }
});
defineProperty(Rect.prototype, "y", {
    get: function () {
        return this._y;
    },
    set: function (value) {
        this._y = value;
        this._yMin = value;
        this._yMax = value + this._height;
    }
});
defineProperty(Rect.prototype, "width", {
    get: function () {
        return this._width;
    },
    set: function (value) {
        this._width = value;
        this._xMax = this._xMin + value;
    }
});
defineProperty(Rect.prototype, "height", {
    get: function () {
        return this._height;
    },
    set: function (value) {
        this._height = value;
        this._yMax = this._yMin + value;
    }
});
defineProperty(Rect.prototype, "xMin", {
    get: function () {
        return this._xMin;
    },
    set: function (value) {
        this._xMin = value;
        this._x = value;
        this._width = this._xMax - this._xMin;
        this._xMax = value + this._width;
    }
});
defineProperty(Rect.prototype, "xMax", {
    get: function () {
        return this._xMax;
    },
    set: function (value) {
        this._xMax = value;
        this._width = value - this._xMin;
    }
});
defineProperty(Rect.prototype, "yMin", {
    get: function () {
        return this._yMin;
    },
    set: function (value) {
        this._yMin = value;
        this._y = value;
        this._height = this._yMax - this._yMin;
        this._yMax = value + this._height;
    }
});
defineProperty(Rect.prototype, "yMax", {
    get: function () {
        return this._yMax;
    },
    set: function (value) {
        this._yMax = value;
        this._height = value - this._yMin;
    }
});
defineProperty(Rect.prototype, "z", {
    get: function () {
        return this.width;
    },
    set: function (value) {
        this.width = value;
    }
});
defineProperty(Rect.prototype, "w", {
    get: function () {
        return this.height;
    },
    set: function (value) {
        this.height = value;
    }
});


Rect.prototype.clone = function () {

    return new Rect(this.x, this.y, this.width, this.height);
};


Rect.prototype.copy = function (other) {

    this._x = other._x;
    this._y = other._y;
    this._width = other._width;
    this._height = other._height;

    this._xMin = other._xMin;
    this._xMax = other._xMax;
    this._yMin = other._yMin;
    this._yMax = other._yMax;

    return this;
};


Rect.prototype.set = function (x, y, width, height) {

    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;

    return this;
};


Rect.prototype.center = function (v) {

    v.x = this._x + this._width * 0.5;
    v.y = this._y + this._height * 0.5;

    return v;
};


Rect.prototype.intersects = function (rect) {

    return !(
    rect._xMax < this._xMin || rect._xMin > this._xMax ||
    rect._yMax < this._yMin || rect._yMin > this._yMax
    );
};


Rect.prototype.contains = function (point) {
    var x = point.x,
        y = point.y;

    return !(
    x < this._xMin || x > this._xMax ||
    y < this._yMin || y > this._yMax
    );
};


Rect.prototype.toJSON = function (json) {
    json || (json = {});

    json.x = this._x;
    json.y = this._y;
    json.width = this._width;
    json.height = this._height;

    return json;
};


Rect.prototype.fromJSON = function (json) {

    this.x = json.x;
    this.y = json.y;
    this.width = json.width;
    this.height = json.height;

    return this;
};


Rect.prototype.toString = function () {

    return "Rect( " + this._x + ", " + this._y + ", " + this._width + ", " + this._height + " )";
};


module.exports = Rect;

},{}],110:[function(require,module,exports){
"use strict";


var defineProperty = Object.defineProperty;


function RectOffset(left, right, top, bottom) {

    this.left = left || 0.0;
    this.right = right || 0.0;
    this.top = top || 0.0;
    this.bottom = bottom || 0.0;
}


defineProperty(RectOffset.prototype, "horizontal", {
    get: function () {

        return this.left + this.right;
    }
});


defineProperty(RectOffset.prototype, "vertical", {
    get: function () {

        return this.top + this.bottom;
    }
});


RectOffset.prototype.clone = function () {

    return new RectOffset(this.left, this.right, this.top, this.bottom);
};


RectOffset.prototype.copy = function (other) {

    this.left = other.left;
    this.right = other.right;
    this.top = other.top;
    this.bottom = other.bottom;

    return this;
};


RectOffset.prototype.set = function (left, right, top, bottom) {

    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;

    return this;
};


RectOffset.prototype.add = function (rect) {

    rect.xMin -= this.left;
    rect.xMax += this.right;
    rect.yMin -= this.top;
    rect.yMax += this.bottom;

    return rect;
};


RectOffset.prototype.sub = function (rect) {

    rect.xMin += this.left;
    rect.xMax -= this.right;
    rect.yMin += this.top;
    rect.yMax -= this.bottom;

    return rect;
};


RectOffset.prototype.toJSON = function (json) {
    json || (json = {});

    json.left = this.left;
    json.right = this.right;
    json.top = this.top;
    json.bottom = this.bottom;

    return json;
};


RectOffset.prototype.fromJSON = function (json) {

    this.left = json.left;
    this.right = json.right;
    this.top = json.top;
    this.bottom = json.bottom;

    return this;
};


RectOffset.prototype.toString = function () {

    return "RectOffset( " + this.left + ", " + this.right + ", " + this.top + ", " + this.bottom + " )";
};


module.exports = RectOffset;

},{}],111:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var sqrt = Math.sqrt;

/**
 * @class Vec2
 * 2d vector
 * @param Number x
 * @param Number y
 */
function Vec2(x, y) {

    /**
     * @property Number x
     * @memberof Xian.Vec2
     */
    this.x = x || 0.0;

    /**
     * @property Number y
     * @memberof Xian.Vec2
     */
    this.y = y || 0.0;
}

Mathf._classes["Vec2"] = Vec2;

/**
 * @method clone
 * @memberof Xian.Vec2
 * returns new instance of this
 * @return Vec2
 */
Vec2.prototype.clone = function () {

    return new Vec2(this.x, this.y);
};

/**
 * @method copy
 * @memberof Xian.Vec2
 * copies other
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.copy = function (other) {

    this.x = other.x;
    this.y = other.y;

    return this;
};

/**
 * @method set
 * @memberof Xian.Vec2
 * sets values of this
 * @param Number x
 * @param Number y
 * @return this
 */
Vec2.prototype.set = function (x, y) {

    this.x = x;
    this.y = y;

    return this;
};

/**
 * @method add
 * @memberof Xian.Vec2
 * adds other's values to this
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.add = function (other) {

    this.x += other.x;
    this.y += other.y;

    return this;
};

/**
 * @method vadd
 * @memberof Xian.Vec2
 * adds a and b together saves it in this
 * @param Vec2 a
 * @param Vec2 b
 * @return this
 */
Vec2.prototype.vadd = function (a, b) {

    this.x = a.x + b.x;
    this.y = a.y + b.y;

    return this;
};

/**
 * @method sadd
 * @memberof Xian.Vec2
 * adds scalar value to this
 * @param Number s
 * @return this
 */
Vec2.prototype.sadd = function (s) {

    this.x += s;
    this.y += s;

    return this;
};

/**
 * @method sub
 * @memberof Xian.Vec2
 * subtracts other's values from this
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.sub = function (other) {

    this.x -= other.x;
    this.y -= other.y;

    return this;
};

/**
 * @method vsub
 * @memberof Xian.Vec2
 * subtracts b from a saves it in this
 * @param Vec2 a
 * @param Vec2 b
 * @return this
 */
Vec2.prototype.vsub = function (a, b) {

    this.x = a.x - b.x;
    this.y = a.y - b.y;

    return this;
};

/**
 * @method ssub
 * @memberof Xian.Vec2
 * subtracts this by a scalar value
 * @param Number s
 * @return this
 */
Vec2.prototype.ssub = function (s) {

    this.x -= s;
    this.y -= s;

    return this;
};

/**
 * @method mul
 * @memberof Xian.Vec2
 * muliples this's values by other's
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.mul = function (other) {

    this.x *= other.x;
    this.y *= other.y;

    return this;
};

/**
 * @method vmul
 * @memberof Xian.Vec2
 * muliples a and b saves it in this
 * @param Vec2 a
 * @param Vec2 b
 * @return this
 */
Vec2.prototype.vmul = function (a, b) {

    this.x = a.x * b.x;
    this.y = a.y * b.y;

    return this;
};

/**
 * @method smul
 * @memberof Xian.Vec2
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Vec2.prototype.smul = function (s) {

    this.x *= s;
    this.y *= s;

    return this;
};

/**
 * @method div
 * @memberof Xian.Vec2
 * divides this's values by other's
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.div = function (other) {
    var x = other.x,
        y = other.y;

    this.x *= x !== 0.0 ? 1.0 / x : 0.0;
    this.y *= y !== 0.0 ? 1.0 / y : 0.0;

    return this;
};

/**
 * @method vdiv
 * @memberof Xian.Vec2
 * divides b from a saves it in this
 * @param Vec2 a
 * @param Vec2 b
 * @return this
 */
Vec2.prototype.vdiv = function (a, b) {
    var x = b.x,
        y = b.y;

    this.x = x !== 0.0 ? a.x / x : 0.0;
    this.y = y !== 0.0 ? a.y / y : 0.0;

    return this;
};

/**
 * @method sdiv
 * @memberof Xian.Vec2
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Vec2.prototype.sdiv = function (s) {
    s = s === 0.0 ? 0.0 : 1.0 / s;

    this.x *= s;
    this.y *= s;

    return this;
};

/**
 * @method length
 * @memberof Xian.Vec2
 * returns the length of this
 * @return Number
 */
Vec2.prototype.length = function () {
    var x = this.x,
        y = this.y,
        lsq = x * x + y * y;

    if (lsq === 1) return 1;

    return lsq > 0.0 ? sqrt(lsq) : 0.0;
};

/**
 * @method lengthSq
 * @memberof Xian.Vec2
 * returns the squared length of this
 * @return Number
 */
Vec2.prototype.lengthSq = function () {
    var x = this.x,
        y = this.y;

    return x * x + y * y;
};

/**
 * @method setLength
 * @memberof Xian.Vec2
 * sets this so its magnitude is equal to length
 * @param Number length
 * @return Vec2
 */
Vec2.prototype.setLength = function (length) {
    var x = this.x,
        y = this.y,
        l = x * x + y * y;

    if (l === 1) {
        this.x *= length;
        this.y *= length;

        return this;
    }

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l * length;
    this.y *= l * length;

    return this;
};

/**
 * @method normalize
 * @memberof Xian.Vec2
 * returns this with a length of 1
 * @return this
 */
Vec2.prototype.normalize = function () {
    var x = this.x,
        y = this.y,
        l = x * x + y * y;

    if (l === 1) return this;

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l;
    this.y *= l;

    return this;
};

/**
 * @method orthoNormalize
 * @memberof Xian.Vec2
 * returns makes vectors normalized and orthogonal to each other
 * @param Vec2 a
 * @param Vec2 b
 * @param Vec2 c
 * @return this
 */
Vec2.prototype.orthoNormalize = function (a, b, c) {
    if (a.lengthSq() !== 1.0) a.normalize();
    c.vcross(a, b);
    if (a.lengthSq() === 0.0) return;
    c.normalize();
    b.vcross(c, a);
};

/**
 * @method inverse
 * @memberof Xian.Vec2
 * returns the inverse of this
 * @return this
 */
Vec2.prototype.inverse = function () {

    this.x *= -1;
    this.y *= -1;

    return this;
};

/**
 * @method inverseVec
 * @memberof Xian.Vec2
 * returns the inverse of other
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.inverseVec = function (other) {

    this.x = -other.x;
    this.y = -other.y;

    return this;
};

/**
 * @method lerp
 * @memberof Xian.Vec2
 * linear interpolation between this and other by x
 * @param Vec2 other
 * @param Number x
 * @return Vec2
 */
Vec2.prototype.lerp = function (other, x) {

    this.x += (other.x - this.x) * x;
    this.y += (other.y - this.y) * x;

    return this;
};

/**
 * @method vlerp
 * @memberof Xian.Vec2
 * linear interpolation between a and b by x
 * @param Vec2 a
 * @param Vec2 b
 * @param Number x
 * @return Vec2
 */
Vec2.prototype.vlerp = function (a, b, x) {
    var ax = a.x,
        ay = a.y;

    this.x = ax + (b.x - ax) * x;
    this.y = ay + (b.y - ay) * x;

    return this;
};

/**
 * @method vdot
 * @memberof Xian.Vec2
 * dot product of two vectors, can be called as a static function Vec2.vdot( a, b )
 * @param Vec2 a
 * @param Vec2 b
 * @return Number
 */
Vec2.vdot = Vec2.prototype.vdot = function (a, b) {

    return a.x * b.x + a.y * b.y;
};

/**
 * @method dot
 * @memberof Xian.Vec2
 * dot product of this and other vector
 * @param Vec2 other
 * @return Number
 */
Vec2.prototype.dot = function (other) {

    return this.x * other.x + this.y * other.y;
};

/**
 * @method vcross
 * @memberof Xian.Vec2
 * cross product between a vector and b vector, can be called as a static function Vec2.vcross( a, b )
 * @param Vec2 a
 * @param Vec2 b
 * @return Number
 */
Vec2.vcross = Vec2.prototype.vcross = function (a, b) {

    return a.x * b.y - a.y * b.x;
};

/**
 * @method cross
 * @memberof Xian.Vec2
 * cross product between this vector and other
 * @param Vec2 other
 * @return Number
 */
Vec2.prototype.cross = function (other) {

    return this.x * other.y - this.y * other.x;
};

/**
 * @method perp
 * @memberof Xian.Vec2
 * @param Vec2 other
 * @return Number
 */
Vec2.prototype.perp = function () {
    var x = this.x,
        y = this.y;

    this.x = -y;
    this.y = x;

    return this;
};

/**
 * @method min
 * @memberof Xian.Vec2
 * returns min values from this and other vector
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.min = function (other) {
    var ax = this.x,
        ay = this.y,
        bx = other.x,
        by = other.y;

    this.x = bx < ax ? bx : ax;
    this.y = by < ay ? by : ay;

    return this;
};

/**
 * @method max
 * @memberof Xian.Vec2
 * returns max values from this and other vector
 * @param Vec2 other
 * @return this
 */
Vec2.prototype.max = function (other) {
    var ax = this.x,
        ay = this.y,
        bx = other.x,
        by = other.y;

    this.x = bx > ax ? bx : ax;
    this.y = by > ay ? by : ay;

    return this;
};

/**
 * @method clamp
 * @memberof Xian.Vec2
 * clamp values between min and max's values
 * @param Vec2 min
 * @param Vec2 max
 * @return this
 */
Vec2.prototype.clamp = function (min, max) {
    var x = this.x,
        y = this.y,
        minx = min.x,
        miny = min.y,
        maxx = max.x,
        maxy = max.y;

    this.x = x < minx ? minx : x > maxx ? maxx : x;
    this.y = y < miny ? miny : y > maxy ? maxy : y;

    return this;
};

/**
 * @method transformAngle
 * @memberof Xian.Vec2
 * transforms this with angle
 * @param Mat2 m
 * @return this
 */
Vec2.prototype.transformAngle = function (a) {
    var x = this.x,
        y = this.y,
        c = cos(a),
        s = sin(a);

    this.x = x * c - y * s;
    this.y = x * s + y * c;

    return this;
};

/**
 * @method transformMat2
 * @memberof Xian.Vec2
 * transforms this with Mat2
 * @param Mat2 m
 * @return this
 */
Vec2.prototype.transformMat2 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y;

    this.x = x * me[0] + y * me[2];
    this.y = x * me[1] + y * me[3];

    return this;
};

/**
 * @method untransformMat2
 * @memberof Xian.Vec2
 * untransforms this with Mat2
 * @param Mat2 m
 * @return this
 */
Vec2.prototype.untransformMat2 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y;

    this.x = x * me[0] + y * me[1];
    this.y = x * me[2] + y * me[3];

    return this;
};

/**
 * @method transformMat32
 * @memberof Xian.Vec2
 * transforms this with Mat32
 * @param Mat32 m
 * @return this
 */
Vec2.prototype.transformMat32 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y;

    this.x = x * me[0] + y * me[2] + me[4];
    this.y = x * me[1] + y * me[3] + me[5];

    return this;
};

/**
 * @method untransformMat32
 * @memberof Xian.Vec2
 * untransforms this with Mat32
 * @param Mat32 m
 * @return this
 */
Vec2.prototype.untransformMat32 = function (m) {
    var me = m.elements,
        x = this.x - me[4],
        y = this.y - me[5];

    this.x = x * me[0] + y * me[1];
    this.y = x * me[2] + y * me[3];

    return this;
};

/**
 * @method transformMat3
 * @memberof Xian.Vec2
 * transforms this with Mat3
 * @param Mat3 m
 * @return this
 */
Vec2.prototype.transformMat3 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y;

    this.x = x * me[0] + y * me[3] + me[6];
    this.y = x * me[1] + y * me[4] + me[7];

    return this;
};

/**
 * @method transformMat4
 * @memberof Xian.Vec2
 * transforms this with Mat4
 * @param Mat4 m
 * @return this
 */
Vec2.prototype.transformMat4 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y;

    this.x = x * me[0] + y * me[4] + me[12];
    this.y = x * me[1] + y * me[5] + me[13];

    return this;
};

/**
 * @method transformProjection
 * @memberof Xian.Vec3
 * transforms this with Mat4 projection matrix
 * @param Mat4 m
 * @return this
 */
Vec2.prototype.transformProjection = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        d = 1 / (me[3] * x + me[7] * y + me[11] * z + me[15]);

    this.x = (me[0] * x + me[4] * y + me[12]) * d;
    this.y = (me[1] * x + me[5] * y + me[13]) * d;

    return this;
};

/**
 * @method fromVec3
 * @memberof Xian.Vec2
 * sets values from Vec3
 * @param Vec3 v
 * @return this
 */
Vec2.prototype.fromVec3 = function (v) {

    this.x = v.x;
    this.y = v.y;

    return this;
};

/**
 * @method fromVec4
 * @memberof Xian.Vec2
 * sets values from Vec4
 * @param Vec4 v
 * @return this
 */
Vec2.prototype.fromVec4 = function (v) {

    this.x = v.x;
    this.y = v.y;

    return this;
};

/**
 * @method positionFromMat32
 * @memberof Xian.Vec2
 * sets position from Mat32
 * @param Mat32 m
 * @return this
 */
Vec2.prototype.positionFromMat32 = function (m) {
    var me = m.elements;

    this.x = me[4];
    this.y = me[5];

    return this;
};

/**
 * @method positionFromMat4
 * @memberof Xian.Vec2
 * sets position from Mat4
 * @param Mat4 m
 * @return this
 */
Vec2.prototype.positionFromMat4 = function (m) {
    var me = m.elements;

    this.x = me[12];
    this.y = me[13];

    return this;
};

/**
 * @method scaleFromMat2
 * @memberof Xian.Vec2
 * sets this from Mat2 scale
 * @param Mat2 m
 * @return this
 */
Vec2.prototype.scaleFromMat2 = function (m) {
    var me = m.elements,
        x = this.set(me[0], m[2]).length(),
        y = this.set(me[1], m[3]).length();

    this.x = x;
    this.y = y;

    return this;
};

/**
 * @method scaleFromMat32
 * @memberof Xian.Vec2
 * sets this from Mat32 scale
 * @param Mat32 m
 * @return this
 */
Vec2.prototype.scaleFromMat32 = Vec2.prototype.scaleFromMat2;

/**
 * @memberof Xian.Vec2
 * @param Xian.Vec2 other
 * @return this
 */
Vec2.prototype.equals = function (other) {

    return !(
    this.x !== other.x ||
    this.y !== other.y
    );
};

/**
 * @memberof Xian.Vec2
 * @param Xian.Vec2 other
 * @return this
 */
Vec2.prototype.notEquals = function (other) {

    return (
    this.x !== other.x ||
    this.y !== other.y
    );
};

/**
 * @method fromJSON
 * @memberof Xian.Vec2
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Vec2.prototype.fromJSON = function (json) {

    this.x = json.x;
    this.y = json.y;

    return this;
};

/**
 * @method toJSON
 * @memberof Xian.Vec2
 * returns json object of this
 * @return Object
 */
Vec2.prototype.toJSON = function (json) {
    json || (json = {});

    json._className = "Vec2";
    json.x = this.x;
    json.y = this.y;

    return json;
};

/**
 * @method fromArray
 * @memberof Xian.Vec2
 * sets values from Array object
 * @param Array array
 * @return this
 */
Vec2.prototype.fromArray = function (array) {

    this.x = array[0];
    this.y = array[1];

    return this;
};

/**
 * @method toArray
 * @memberof Xian.Vec2
 * returns array object of this
 * @return Array
 */
Vec2.prototype.toArray = function (array) {
    array || (array = []);

    array[0] = this.x;
    array[1] = this.y;

    return array;
};

/**
 * @method toString
 * @memberof Xian.Vec2
 * returns string of this
 * @return String
 */
Vec2.prototype.toString = function () {

    return "Vec2( " + this.x + ", " + this.y + " )";
};


module.exports = Vec2;

},{"./mathf":107}],112:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var sqrt = Math.sqrt;

/**
 * @class Vec3
 * 3d vector
 * @param Number x
 * @param Number y
 * @param Number z
 */
function Vec3(x, y, z) {

    /**
     * @property Number x
     * @memberof Odin.Vec3
     */
    this.x = x || 0.0;

    /**
     * @property Number y
     * @memberof Odin.Vec3
     */
    this.y = y || 0.0;

    /**
     * @property Number z
     * @memberof Odin.Vec3
     */
    this.z = z || 0.0;
}

Mathf._classes["Vec3"] = Vec3;

/**
 * @method clone
 * @memberof Odin.Vec3
 * returns new instance of this
 * @return Vec3
 */
Vec3.prototype.clone = function () {

    return new Vec3(this.x, this.y, this.z);
};

/**
 * @method copy
 * @memberof Odin.Vec3
 * copies other
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.copy = function (other) {

    this.x = other.x;
    this.y = other.y;
    this.z = other.z;

    return this;
};

/**
 * @method set
 * @memberof Odin.Vec3
 * sets values of this
 * @param Number x
 * @param Number y
 * @param Number z
 * @return this
 */
Vec3.prototype.set = function (x, y, z) {

    this.x = x;
    this.y = y;
    this.z = z;

    return this;
};

/**
 * @method add
 * @memberof Odin.Vec3
 * adds other's values to this
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.add = function (other) {

    this.x += other.x;
    this.y += other.y;
    this.z += other.z;

    return this;
};

/**
 * @method vadd
 * @memberof Odin.Vec3
 * adds a and b together saves it in this
 * @param Vec3 a
 * @param Vec3 b
 * @return this
 */
Vec3.prototype.vadd = function (a, b) {

    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;

    return this;
};

/**
 * @method sadd
 * @memberof Odin.Vec3
 * adds scalar value to this
 * @param Number s
 * @return this
 */
Vec3.prototype.sadd = function (s) {

    this.x += s;
    this.y += s;
    this.z += s;

    return this;
};

/**
 * @method sub
 * @memberof Odin.Vec3
 * subtracts other's values from this
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.sub = function (other) {

    this.x -= other.x;
    this.y -= other.y;
    this.z -= other.z;

    return this;
};

/**
 * @method vsub
 * @memberof Odin.Vec3
 * subtracts b from a saves it in this
 * @param Vec3 a
 * @param Vec3 b
 * @return this
 */
Vec3.prototype.vsub = function (a, b) {

    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;

    return this;
};

/**
 * @method ssub
 * @memberof Odin.Vec3
 * subtracts this by a scalar value
 * @param Number s
 * @return this
 */
Vec3.prototype.ssub = function (s) {

    this.x -= s;
    this.y -= s;
    this.z -= s;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Vec3
 * muliples this's values by other's
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.mul = function (other) {

    this.x *= other.x;
    this.y *= other.y;
    this.z *= other.z;

    return this;
};

/**
 * @method vmul
 * @memberof Odin.Vec3
 * muliples a and b saves it in this
 * @param Vec3 a
 * @param Vec3 b
 * @return this
 */
Vec3.prototype.vmul = function (a, b) {

    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;

    return this;
};

/**
 * @method smul
 * @memberof Odin.Vec3
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Vec3.prototype.smul = function (s) {

    this.x *= s;
    this.y *= s;
    this.z *= s;

    return this;
};

/**
 * @method div
 * @memberof Odin.Vec3
 * divides this's values by other's
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.div = function (other) {
    var x = other.x,
        y = other.y,
        z = other.z;

    this.x *= x !== 0.0 ? 1.0 / x : 0.0;
    this.y *= y !== 0.0 ? 1.0 / y : 0.0;
    this.z *= z !== 0.0 ? 1.0 / z : 0.0;

    return this;
};

/**
 * @method vdiv
 * @memberof Odin.Vec3
 * divides b from a saves it in this
 * @param Vec3 a
 * @param Vec3 b
 * @return this
 */
Vec3.prototype.vdiv = function (a, b) {
    var x = b.x,
        y = b.y,
        z = b.z;

    this.x = x !== 0.0 ? a.x / x : 0.0;
    this.y = y !== 0.0 ? a.y / y : 0.0;
    this.z = z !== 0.0 ? a.z / z : 0.0;

    return this;
};

/**
 * @method sdiv
 * @memberof Odin.Vec3
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Vec3.prototype.sdiv = function (s) {
    s = s === 0.0 ? 0.0 : 1.0 / s;

    this.x *= s;
    this.y *= s;
    this.z *= s;

    return this;
};

/**
 * @method length
 * @memberof Odin.Vec3
 * returns the length of this
 * @return Number
 */
Vec3.prototype.length = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        lsq = x * x + y * y + z * z;

    if (lsq === 1) return 1;

    return lsq === 0.0 ? 0.0 : sqrt(lsq);
};

/**
 * @method lengthSq
 * @memberof Odin.Vec3
 * returns the squared length of this
 * @return Number
 */
Vec3.prototype.lengthSq = function () {
    var x = this.x,
        y = this.y,
        z = this.z;

    return x * x + y * y + z * z;
};

/**
 * @method setLength
 * @memberof Odin.Vec3
 * sets this so its magnitude is equal to length
 * @param Number length
 * @return Vec3
 */
Vec3.prototype.setLength = function (length) {
    var x = this.x,
        y = this.y,
        z = this.z,
        l = x * x + y * y + z * z;

    if (l === 1) {
        this.x *= length;
        this.y *= length;
        this.z *= length;

        return this;
    }

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l * length;
    this.y *= l * length;
    this.z *= l * length;

    return this;
};

/**
 * @method normalize
 * @memberof Odin.Vec3
 * returns this with a length of 1
 * @return this
 */
Vec3.prototype.normalize = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        l = x * x + y * y + z * z;

    if (l === 1) return this;

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l;
    this.y *= l;
    this.z *= l;

    return this;
};

/**
 * @method orthoNormalize
 * @memberof Odin.Vec3
 * returns makes vectors normalized and orthogonal to each other
 * @param Vec3 a
 * @param Vec3 b
 * @param Vec3 c
 * @return this
 */
Vec3.prototype.orthoNormalize = function (a, b, c) {
    if (a.lengthSq() !== 1.0) a.normalize();
    c.vcross(a, b);
    if (a.lengthSq() === 0.0) return;
    c.normalize();
    b.vcross(c, a);
};

/**
 * @method inverse
 * @memberof Odin.Vec3
 * returns the inverse of this
 * @return this
 */
Vec3.prototype.inverse = function () {

    this.x *= -1;
    this.y *= -1;
    this.z *= -1;

    return this;
};

/**
 * @method inverseVec
 * @memberof Odin.Vec3
 * returns the inverse of other
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.inverseVec = function (other) {

    this.x = -other.x;
    this.y = -other.y;
    this.z = -(other.z || 0);

    return this;
};

/**
 * @method lerp
 * @memberof Odin.Vec3
 * linear interpolation between this and other by x
 * @param Vec3 other
 * @param Number x
 * @return Vec3
 */
Vec3.prototype.lerp = function (other, x) {

    this.x += (other.x - this.x) * x;
    this.y += (other.y - this.y) * x;
    this.z += (other.z - this.z) * x;

    return this;
};

/**
 * @method vlerp
 * @memberof Odin.Vec3
 * linear interpolation between a and b by x
 * @param Vec3 a
 * @param Vec3 b
 * @param Number x
 * @return Vec3
 */
Vec3.prototype.vlerp = function (a, b, x) {
    var ax = a.x,
        ay = a.y,
        az = a.z;

    this.x = ax + (b.x - ax) * x;
    this.y = ay + (b.y - ay) * x;
    this.z = az + (b.z - az) * x;

    return this;
};

/**
 * @method vdot
 * @memberof Odin.Vec3
 * dot product of two vectors, can be called as a static function Vec3.vdot( a, b )
 * @param Vec3 a
 * @param Vec3 b
 * @return Number
 */
Vec3.vdot = Vec3.prototype.vdot = function (a, b) {

    return a.x * b.x + a.y * b.y + a.z * b.z;
};

/**
 * @method dot
 * @memberof Odin.Vec3
 * dot product of this and other vector
 * @param Vec3 other
 * @return Number
 */
Vec3.prototype.dot = function (other) {

    return this.x * other.x + this.y * other.y + this.z * other.z;
};

/**
 * @method vcross
 * @memberof Odin.Vec3
 * cross product between a vector and b vector, can be called as a static function Vec3.vcross( a, b )
 * @param Vec3 a
 * @param Vec3 b
 * @return Number
 */
Vec3.vcross = Vec3.prototype.vcross = function (a, b) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        bx = b.x,
        by = b.y,
        bz = b.z;

    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;

    return this;
};

/**
 * @method cross
 * @memberof Odin.Vec3
 * cross product between this vector and other
 * @param Vec3 other
 * @return Number
 */
Vec3.prototype.cross = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        bx = other.x,
        by = other.y,
        bz = other.z;

    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;

    return this;
};

/**
 * @method min
 * @memberof Odin.Vec3
 * returns min values from this and other vector
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.min = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        bx = other.x,
        by = other.y,
        bz = other.z;

    this.x = bx < ax ? bx : ax;
    this.y = by < ay ? by : ay;
    this.z = bz < az ? bz : az;

    return this;
};

/**
 * @method max
 * @memberof Odin.Vec3
 * returns max values from this and other vector
 * @param Vec3 other
 * @return this
 */
Vec3.prototype.max = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        bx = other.x,
        by = other.y,
        bz = other.z;

    this.x = bx > ax ? bx : ax;
    this.y = by > ay ? by : ay;
    this.z = bz > az ? bz : az;

    return this;
};

/**
 * @method clamp
 * @memberof Odin.Vec3
 * clamp values between min and max's values
 * @param Vec3 min
 * @param Vec3 max
 * @return this
 */
Vec3.prototype.clamp = function (min, max) {
    var x = this.x,
        y = this.y,
        z = this.z,
        minx = min.x,
        miny = min.y,
        minz = min.z,
        maxx = max.x,
        maxy = max.y,
        maxz = max.z;

    this.x = x < minx ? minx : x > maxx ? maxx : x;
    this.y = y < miny ? miny : y > maxy ? maxy : y;
    this.z = z < minz ? minz : z > maxz ? maxz : z;

    return this;
};

/**
 * @method transformMat3
 * @memberof Odin.Vec3
 * transforms this with Mat3
 * @param Mat3 m
 * @return this
 */
Vec3.prototype.transformMat3 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        z = this.z;

    this.x = x * me[0] + y * me[3] + z * me[6];
    this.y = x * me[1] + y * me[4] + z * me[7];
    this.z = x * me[2] + y * me[5] + z * me[8];

    return this;
};

/**
 * @method transformMat4
 * @memberof Odin.Vec3
 * transforms this with Mat4
 * @param Mat4 m
 * @return this
 */
Vec3.prototype.transformMat4 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        z = this.z;

    this.x = x * me[0] + y * me[4] + z * me[8] + me[12];
    this.y = x * me[1] + y * me[5] + z * me[9] + me[13];
    this.z = x * me[2] + y * me[6] + z * me[10] + me[14];

    return this;
};

/**
 * @method transformMat4
 * @memberof Odin.Vec3
 * transforms this with Mat4
 * @param Mat4 m
 * @return this
 */
Vec3.prototype.transformMat4Rotation = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        z = this.z;

    this.x = x * me[0] + y * me[4] + z * me[8];
    this.y = x * me[1] + y * me[5] + z * me[9];
    this.z = x * me[2] + y * me[6] + z * me[10];

    return this;
};

/**
 * @method transformProjection
 * @memberof Odin.Vec3
 * transforms this with Mat4 projection matrix
 * @param Mat4 m
 * @return this
 */
Vec3.prototype.transformProjection = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        z = this.z,
        d = 1 / (me[3] * x + me[7] * y + me[11] * z + me[15]);

    this.x = (me[0] * x + me[4] * y + me[8] * z + me[12]) * d;
    this.y = (me[1] * x + me[5] * y + me[9] * z + me[13]) * d;
    this.z = (me[2] * x + me[6] * y + me[10] * z + me[14]) * d;

    return this;
};

/**
 * @method transformQuat
 * @memberof Odin.Vec3
 * transforms this with Quat
 * @param Quat q
 * @return this
 */
Vec3.prototype.transformQuat = function (q) {
    var x = this.x,
        y = this.y,
        z = this.z,
        qx = q.x,
        qy = q.y,
        qz = q.z,
        qw = q.w,

        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

    return this;
};

/**
 * @method fromVec2
 * @memberof Odin.Vec3
 * sets values from Vec2
 * @param Vec2 v
 * @return this
 */
Vec3.prototype.fromVec2 = function (v) {

    this.x = v.x;
    this.y = v.y;
    this.z = 0.0;

    return this;
};

/**
 * @method fromVec4
 * @memberof Odin.Vec3
 * sets position from Vec4
 * @param Vec4 v
 * @return this
 */
Vec3.prototype.fromVec4 = function (v) {

    this.x = v.x;
    this.y = v.y;
    this.z = v.z;

    return this;
};

/**
 * @method positionFromMat4
 * @memberof Odin.Vec3
 * sets position from Mat4
 * @param Mat4 m
 * @return this
 */
Vec3.prototype.positionFromMat4 = function (m) {
    var me = m.elements;

    this.x = me[12];
    this.y = me[13];
    this.z = me[14];

    return this;
};

/**
 * @method scaleFromMat3
 * @memberof Odin.Vec3
 * sets this from Mat3 scale
 * @param Mat3 m
 * @return this
 */
Vec3.prototype.scaleFromMat3 = function (m) {
    var me = m.elements,
        x = this.set(me[0], me[3], me[6]).length(),
        y = this.set(me[1], me[4], me[7]).length(),
        z = this.set(me[2], me[5], me[8]).length();

    this.x = x;
    this.y = y;
    this.z = z;

    return this;
};

/**
 * @method scaleFromMat4
 * @memberof Odin.Vec3
 * sets this from Mat4 scale
 * @param Mat4 m
 * @return this
 */
Vec3.prototype.scaleFromMat4 = function (m) {
    var me = m.elements,
        x = this.set(me[0], me[4], me[8]).length(),
        y = this.set(me[1], me[5], me[9]).length(),
        z = this.set(me[2], me[6], me[10]).length();

    this.x = x;
    this.y = y;
    this.z = z;

    return this;
};

/**
 * @memberof Odin.Vec3
 * @param Odin.Vec3 other
 * @return this
 */
Vec3.prototype.equals = function (other) {

    return !(
    this.x !== other.x ||
    this.y !== other.y ||
    this.z !== other.z
    );
};

/**
 * @memberof Odin.Vec3
 * @param Odin.Vec3 other
 * @return this
 */
Vec3.prototype.notEquals = function (other) {

    return (
    this.x !== other.x ||
    this.y !== other.y ||
    this.z !== other.z
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Vec3
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Vec3.prototype.fromJSON = function (json) {

    this.x = json.x;
    this.y = json.y;
    this.z = json.z;

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.Vec3
 * returns json object of this
 * @return Object
 */
Vec3.prototype.toJSON = function (json) {
    json || (json = {});

    json._className = "Vec3";
    json.x = this.x;
    json.y = this.y;
    json.z = this.z;

    return json;
};

/**
 * @method fromArray
 * @memberof Odin.Vec3
 * sets values from Array object
 * @param Array array
 * @return this
 */
Vec3.prototype.fromArray = function (array) {

    this.x = array[0];
    this.y = array[1];
    this.z = array[2];

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Vec3
 * returns array object of this
 * @return Array
 */
Vec3.prototype.toArray = function (array) {
    array || (array = []);

    array[0] = this.x;
    array[1] = this.y;
    array[2] = this.z;

    return array;
};

/**
 * @method toString
 * @memberof Odin.Vec3
 * returns string of this
 * @return String
 */
Vec3.prototype.toString = function () {

    return "Vec3( " + this.x + ", " + this.y + ", " + this.z + " )";
};


module.exports = Vec3;

},{"./mathf":107}],113:[function(require,module,exports){
var Mathf = require("./mathf");
"use strict";


var sqrt = Math.sqrt;

/**
 * @class Vec4
 * 3d vector
 * @param Number x
 * @param Number y
 * @param Number z
 * @param Number w
 */
function Vec4(x, y, z, w) {

    /**
     * @property Number x
     * @memberof Odin.Vec4
     */
    this.x = x || 0.0;

    /**
     * @property Number y
     * @memberof Odin.Vec4
     */
    this.y = y || 0.0;

    /**
     * @property Number z
     * @memberof Odin.Vec4
     */
    this.z = z || 0.0;

    /**
     * @property Number w
     * @memberof Odin.Vec4
     */
    this.w = w != undefined ? w : 1.0;
}

Mathf._classes["Vec4"] = Vec4;

/**
 * @method clone
 * @memberof Odin.Vec4
 * returns new instance of this
 * @return Vec4
 */
Vec4.prototype.clone = function () {

    return new Vec4(this.x, this.y, this.z, this.w);
};

/**
 * @method copy
 * @memberof Odin.Vec4
 * copies other
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.copy = function (other) {

    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.w = other.w;

    return this;
};

/**
 * @method set
 * @memberof Odin.Vec4
 * sets values of this
 * @param Number x
 * @param Number y
 * @param Number z
 * @param Number w
 * @return this
 */
Vec4.prototype.set = function (x, y, z, w) {

    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;

    return this;
};

/**
 * @method add
 * @memberof Odin.Vec4
 * adds other's values to this
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.add = function (other) {

    this.x += other.x;
    this.y += other.y;
    this.z += other.z;
    this.w += other.w;

    return this;
};

/**
 * @method vadd
 * @memberof Odin.Vec4
 * adds a and b together saves it in this
 * @param Vec4 a
 * @param Vec4 b
 * @return this
 */
Vec4.prototype.vadd = function (a, b) {

    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;

    return this;
};

/**
 * @method sadd
 * @memberof Odin.Vec4
 * adds scalar value to this
 * @param Number s
 * @return this
 */
Vec4.prototype.sadd = function (s) {

    this.x += s;
    this.y += s;
    this.z += s;
    this.w += s;

    return this;
};

/**
 * @method sub
 * @memberof Odin.Vec4
 * subtracts other's values from this
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.sub = function (other) {

    this.x -= other.x;
    this.y -= other.y;
    this.z -= other.z;
    this.w -= other.w;

    return this;
};

/**
 * @method vsub
 * @memberof Odin.Vec4
 * subtracts b from a saves it in this
 * @param Vec4 a
 * @param Vec4 b
 * @return this
 */
Vec4.prototype.vsub = function (a, b) {

    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;

    return this;
};

/**
 * @method ssub
 * @memberof Odin.Vec4
 * subtracts this by a scalar value
 * @param Number s
 * @return this
 */
Vec4.prototype.ssub = function (s) {

    this.x -= s;
    this.y -= s;
    this.z -= s;
    this.w -= s;

    return this;
};

/**
 * @method mul
 * @memberof Odin.Vec4
 * muliples this's values by other's
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.mul = function (other) {

    this.x *= other.x;
    this.y *= other.y;
    this.z *= other.z;
    this.w *= other.w;

    return this;
};

/**
 * @method vmul
 * @memberof Odin.Vec4
 * muliples a and b saves it in this
 * @param Vec4 a
 * @param Vec4 b
 * @return this
 */
Vec4.prototype.vmul = function (a, b) {

    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    this.w = a.w * b.w;

    return this;
};

/**
 * @method smul
 * @memberof Odin.Vec4
 * muliples this by a scalar value
 * @param Number s
 * @return this
 */
Vec4.prototype.smul = function (s) {

    this.x *= s;
    this.y *= s;
    this.z *= s;
    this.w *= s;

    return this;
};

/**
 * @method div
 * @memberof Odin.Vec4
 * divides this's values by other's
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.div = function (other) {
    var x = other.x,
        y = other.y,
        z = other.z,
        w = other.w;

    this.x *= x !== 0.0 ? 1.0 / x : 0.0;
    this.y *= y !== 0.0 ? 1.0 / y : 0.0;
    this.z *= z !== 0.0 ? 1.0 / z : 0.0;
    this.w *= w !== 0.0 ? 1.0 / w : 0.0;

    return this;
};

/**
 * @method vdiv
 * @memberof Odin.Vec4
 * divides b from a saves it in this
 * @param Vec4 a
 * @param Vec4 b
 * @return this
 */
Vec4.prototype.vdiv = function (a, b) {
    var x = b.x,
        y = b.y,
        z = b.z,
        w = b.w;

    this.x = x !== 0.0 ? a.x / x : 0.0;
    this.y = y !== 0.0 ? a.y / y : 0.0;
    this.z = z !== 0.0 ? a.z / z : 0.0;
    this.w = w !== 0.0 ? a.w / w : 0.0;

    return this;
};

/**
 * @method sdiv
 * @memberof Odin.Vec4
 * divides this by scalar value
 * @param Number s
 * @return this
 */
Vec4.prototype.sdiv = function (s) {
    s = s === 0.0 ? 0.0 : 1.0 / s;

    this.x *= s;
    this.y *= s;
    this.z *= s;
    this.w *= s;

    return this;
};

/**
 * @method length
 * @memberof Odin.Vec4
 * returns the length of this
 * @return Number
 */
Vec4.prototype.length = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        lsq = x * x + y * y + z * z + w * w;

    if (lsq === 1) return 1;

    return lsq > 0.0 ? sqrt(lsq) : 0.0;
};

/**
 * @method lengthSq
 * @memberof Odin.Vec4
 * returns the squared length of this
 * @return Number
 */
Vec4.prototype.lengthSq = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w;

    return x * x + y * y + z * z + w * w;
};

/**
 * @method setLength
 * @memberof Odin.Vec4
 * sets this so its magnitude is equal to length
 * @param Number length
 * @return Vec4
 */
Vec4.prototype.setLength = function (length) {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        l = x * x + y * y + z * z + w * w;

    if (l === 1) {
        this.x *= length;
        this.y *= length;
        this.z *= length;
        this.w *= length;

        return this;
    }

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l * length;
    this.y *= l * length;
    this.z *= l * length;
    this.w *= l * length;

    return this;
};

/**
 * @method normalize
 * @memberof Odin.Vec4
 * returns this with a length of 1
 * @return this
 */
Vec4.prototype.normalize = function () {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        l = x * x + y * y + z * z + w * w;

    if (l === 1) return this;

    l = l > 0.0 ? 1.0 / sqrt(l) : 0.0;

    this.x *= l;
    this.y *= l;
    this.z *= l;
    this.w *= l;

    return this;
};

/**
 * @method orthoNormalize
 * @memberof Odin.Vec4
 * returns makes vectors normalized and orthogonal to each other
 * @param Vec4 a
 * @param Vec4 b
 * @param Vec4 c
 * @return this
 */
Vec4.prototype.orthoNormalize = function (a, b, c) {
    if (a.lengthSq() !== 1.0) a.normalize();
    c.vcross(a, b);
    if (a.lengthSq() === 0.0) return;
    c.normalize();
    b.vcross(c, a);
};

/**
 * @method inverse
 * @memberof Odin.Vec4
 * returns the inverse of this
 * @return this
 */
Vec4.prototype.inverse = function () {

    this.x *= -1;
    this.y *= -1;
    this.z *= -1;
    this.w *= -1;

    return this;
};

/**
 * @method inverseVec
 * @memberof Odin.Vec4
 * returns the inverse of other
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.inverseVec = function (other) {

    this.x = -other.x;
    this.y = -other.y;
    this.z = -(other.z || 0);
    this.w = -(other.w || 0);

    return this;
};

/**
 * @method lerp
 * @memberof Odin.Vec4
 * linear interpolation between this and other by x
 * @param Vec4 other
 * @param Number x
 * @return Vec4
 */
Vec4.prototype.lerp = function (other, x) {

    this.x += (other.x - this.x) * x;
    this.y += (other.y - this.y) * x;
    this.z += (other.z - this.z) * x;
    this.w += (other.w - this.w) * x;

    return this;
};

/**
 * @method vlerp
 * @memberof Odin.Vec4
 * linear interpolation between a and b by x
 * @param Vec4 a
 * @param Vec4 b
 * @param Number x
 * @return Vec4
 */
Vec4.prototype.vlerp = function (a, b, x) {
    var ax = a.x,
        ay = a.y,
        az = a.z,
        aw = a.w;

    this.x = ax + (b.x - ax) * x;
    this.y = ay + (b.y - ay) * x;
    this.z = az + (b.z - az) * x;
    this.w = aw + (b.w - aw) * x;

    return this;
};

/**
 * @method vdot
 * @memberof Odin.Vec4
 * dot product of two vectors, can be called as a static function Vec4.vdot( a, b )
 * @param Vec4 a
 * @param Vec4 b
 * @return Number
 */
Vec4.vdot = Vec4.prototype.vdot = function (a, b) {

    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};

/**
 * @method dot
 * @memberof Odin.Vec4
 * dot product of this and other vector
 * @param Vec4 other
 * @return Number
 */
Vec4.prototype.dot = function (other) {

    return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
};

/**
 * @method min
 * @memberof Odin.Vec4
 * returns min values from this and other vector
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.min = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        aw = this.w,
        bx = other.x,
        by = other.y,
        bz = other.z,
        bw = this.w;

    this.x = bx < ax ? bx : ax;
    this.y = by < ay ? by : ay;
    this.z = bz < az ? bz : az;
    this.w = bw < aw ? bw : aw;

    return this;
};

/**
 * @method max
 * @memberof Odin.Vec4
 * returns max values from this and other vector
 * @param Vec4 other
 * @return this
 */
Vec4.prototype.max = function (other) {
    var ax = this.x,
        ay = this.y,
        az = this.z,
        aw = this.w,
        bx = other.x,
        by = other.y,
        bz = other.z,
        bw = this.w;

    this.x = bx > ax ? bx : ax;
    this.y = by > ay ? by : ay;
    this.z = bz > az ? bz : az;
    this.w = bw > aw ? bw : aw;

    return this;
};

/**
 * @method clamp
 * @memberof Odin.Vec4
 * clamp values between min and max's values
 * @param Vec4 min
 * @param Vec4 max
 * @return this
 */
Vec4.prototype.clamp = function (min, max) {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        minx = min.x,
        miny = min.y,
        minz = min.z,
        minw = min.w,
        maxx = max.x,
        maxy = max.y,
        maxz = max.z,
        maxw = maxw;

    this.x = x < minx ? minx : x > maxx ? maxx : x;
    this.y = y < miny ? miny : y > maxy ? maxy : y;
    this.z = z < minz ? minz : z > maxz ? maxz : z;
    this.w = w < minw ? minw : w > maxw ? maxw : w;

    return this;
};

/**
 * @method transformMat4
 * @memberof Odin.Vec4
 * transforms this with Mat4
 * @param Mat4 m
 * @return this
 */
Vec4.prototype.transformMat4 = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        z = this.z,
        w = this.w;

    this.x = x * me[0] + y * me[4] + z * me[8] + w * me[12];
    this.y = x * me[1] + y * me[5] + z * me[9] + w * me[13];
    this.z = x * me[2] + y * me[6] + z * me[10] + w * me[14];
    this.w = x * me[3] + y * me[7] + z * me[11] + w * me[15];

    return this;
};

/**
 * @method transformProjection
 * @memberof Odin.Vec3
 * transforms this with Mat4 projection matrix
 * @param Mat4 m
 * @return this
 */
Vec4.prototype.transformProjection = function (m) {
    var me = m.elements,
        x = this.x,
        y = this.y,
        z = this.z,
        w = this.w,
        d = 1 / (me[3] * x + me[7] * y + me[11] * z + me[15]);

    this.x = (me[0] * x + me[4] * y + me[8] * z + me[12] * w) * d;
    this.y = (me[1] * x + me[5] * y + me[9] * z + me[13] * w) * d;
    this.z = (me[2] * x + me[6] * y + me[10] * z + me[14] * w) * d;
    this.w = (me[3] * x + me[7] * y + me[11] * z + me[15] * w) * d;

    return this;
};

/**
 * @method fromVec2
 * @memberof Odin.Vec4
 * sets values from Vec2
 * @param Vec2 v
 * @return this
 */
Vec4.prototype.fromVec2 = function (v) {

    this.x = v.x;
    this.y = v.y;
    this.z = 0.0;
    this.w = 1;

    return this;
};

/**
 * @method fromVec3
 * @memberof Odin.Vec4
 * sets values from Vec3
 * @param Vec3 v
 * @return this
 */
Vec4.prototype.fromVec3 = function (v) {

    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    this.w = 1;

    return this;
};

/**
 * @method fromRect
 * @memberof Odin.Vec4
 * sets values from Rect
 * @param Vec3 v
 * @return this
 */
Vec4.prototype.fromRect = function (rect) {

    this.x = rect.x;
    this.y = rect.y;
    this.z = rect.width;
    this.w = rect.height;

    return this;
};

/**
 * @method positionFromMat4
 * @memberof Odin.Vec4
 * sets position from Mat4
 * @param Mat4 m
 * @return this
 */
Vec4.prototype.positionFromMat4 = function (m) {
    var me = m.elements;

    this.x = me[12];
    this.y = me[13];
    this.z = me[14];
    this.w = me[15];

    return this;
};

/**
 * @memberof Odin.Vec4
 * @param Odin.Vec4 other
 * @return this
 */
Vec4.prototype.equals = function (other) {

    return !(
    this.x !== other.x ||
    this.y !== other.y ||
    this.z !== other.z ||
    this.w !== other.w
    );
};

/**
 * @memberof Odin.Vec4
 * @param Odin.Vec4 other
 * @return this
 */
Vec4.prototype.notEquals = function (other) {

    return (
    this.x !== other.x ||
    this.y !== other.y ||
    this.z !== other.z ||
    this.w !== other.w
    );
};

/**
 * @method fromJSON
 * @memberof Odin.Vec4
 * sets values from JSON object
 * @param Object json
 * @return this
 */
Vec4.prototype.fromJSON = function (json) {

    this.x = json.x;
    this.y = json.y;
    this.z = json.z;
    this.w = json.w;

    return this;
};

/**
 * @method toJSON
 * @memberof Odin.Vec4
 * returns json object of this
 * @return Object
 */
Vec4.prototype.toJSON = function (json) {
    json || (json = {});

    json._className = "Vec4";
    json.x = this.x;
    json.y = this.y;
    json.z = this.z;
    json.w = this.w;

    return json;
};

/**
 * @method fromArray
 * @memberof Odin.Vec4
 * sets values from Array object
 * @param Array array
 * @return this
 */
Vec4.prototype.fromArray = function (array) {

    this.x = array[0];
    this.y = array[1];
    this.z = array[2];
    this.w = array[3];

    return this;
};

/**
 * @method toArray
 * @memberof Odin.Vec4
 * returns array object of this
 * @return Array
 */
Vec4.prototype.toArray = function (array) {
    array || (array = []);

    array[0] = this.x;
    array[1] = this.y;
    array[2] = this.z;
    array[3] = this.w;

    return array;
};

/**
 * @method toString
 * @memberof Odin.Vec4
 * returns string of this
 * @return String
 */
Vec4.prototype.toString = function () {

    return "Vec4( " + this.x + ", " + this.y + ", " + this.z + ", " + this.w + " )";
};


module.exports = Vec4;

},{"./mathf":107}],114:[function(require,module,exports){
var P2Enums = require("../p2enums");
"use strict";


var MotionState = P2Enums.MotionState,
    SleepState = P2Enums.SleepState;


function P2Broadphase() {
}


P2Broadphase.prototype.collisions = function (bodies, pairsi, pairsj) {
    var length = bodies.length,
        bi, bj, shapesi, shapesj, length, si, sj,
        i = length,
        j, k, l;

    pairsi.length = pairsj.length = 0;

    while (i--) {
        j = 0;
        while (j !== i) {
            bi = bodies[i];
            bj = bodies[j];
            j++;

            if ((bi.motionState !== MotionState.Dynamic && bj.motionState !== MotionState.Dynamic) || (bi.sleepState === SleepState.Sleeping && bj.sleepState === SleepState.Sleeping)) {
                continue;
            }

            shapesi = bi.shapes;
            shapesj = bj.shapes;

            if (!bi.aabb.intersects(bj.aabb)) continue;

            k = shapesi.length;
            length = shapesj.length;
            while (k--) {
                l = length;
                while (l--) {
                    si = shapesi[k];
                    sj = shapesj[l];
                    if ((si.filterGroup & sj.filterMask) === 0 || (sj.filterGroup & si.filterMask) === 0) continue;

                    if (si.aabb.intersects(sj.aabb)) {
                        pairsi.push(si);
                        pairsj.push(sj);
                    }
                }
            }
        }
    }
};


P2Broadphase.prototype.toJSON = function (json) {
    json || (json = {});

    return json;
};


P2Broadphase.prototype.fromJSON = function () {

    return this;
};


module.exports = P2Broadphase;

},{"../p2enums":128}],115:[function(require,module,exports){
var P2Enums = require("../p2enums");
"use strict";


var floor = Math.floor,
    defineProperty = Object.defineProperty,
    MotionState = P2Enums.MotionState,
    SleepState = P2Enums.SleepState;


function Cell(counter) {
    Array.call(this);
    this._counter = counter;
}

Cell.prototype = Object.create(Array.prototype);
Cell.prototype.constructor = Cell;


function P2BroadphaseSpatialHash(opts) {
    opts || (opts = {});

    this._cellSize = 0;
    this._inverseCellSize = 0;

    this.cells = {};
    this.cellDeathFrameCount = opts.cellDeathFrameCount != undefined ? opts.cellDeathFrameCount : 300;
    this.cellSize = opts.cellSize != undefined ? opts.cellSize : 1;
}


defineProperty(P2BroadphaseSpatialHash.prototype, "cellSize", {
    get: function () {
        return this._cellSize;
    },
    set: function (value) {
        value = value >= 1 ? value : 1;

        this._cellSize = floor(value);
        this._inverseCellSize = 1 / this._cellSize;
    }
});


P2BroadphaseSpatialHash.prototype.collisions = function (bodies, pairsi, pairsj) {
    var cells = this.cells,
        cellSize = this._cellSize,
        cellDeathFrameCount = this.cellDeathFrameCount,
        inverseCellSize = this._inverseCellSize,
        aabb, min, max, minx, miny, body, position, shapes, shape, x, y,
        cell, key, si, sj, bi, bj, i, j, k, l;

    for (key in cells) {
        cell = cells[key];
        if (cell.length === 0) {
            if (cell._counter-- <= 0) delete cells[key];
        } else {
            cell._counter = cellDeathFrameCount;
        }
        cell.length = 0;
    }
    pairsi.length = pairsj.length = 0;

    i = bodies.length;
    while (i--) {
        body = bodies[i];
        shapes = body.shapes;
        j = shapes.length;
        while (j--) {
            shape = shapes[j];
            aabb = shape.aabb;
            min = aabb.min;
            max = aabb.max;
            minx = (min.x * inverseCellSize | 0) * cellSize;
            miny = (min.y * inverseCellSize | 0) * cellSize;

            x = minx + ((max.x - min.x) * inverseCellSize | 0) * cellSize;
            y = miny + ((max.y - min.y) * inverseCellSize | 0) * cellSize;

            for (k = minx; k <= x; k += cellSize) {
                for (l = miny; l <= y; l += cellSize) {
                    key = k + ":" + l;
                    (cells[key] || (cells[key] = new Cell(cellDeathFrameCount))).push(shape);
                }
            }
        }
    }

    for (key in cells) {
        cell = cells[key];
        i = cell.length;

        while (i--) {
            j = 0;
            while (j !== i) {
                si = cell[i];
                sj = cell[j];
                j++;

                bi = si.body;
                bj = sj.body;

                if (bi && bj) {
                    if (!bi.aabb.intersects(bj.aabb)) continue;

                    if ((bi.motionState !== MotionState.Dynamic && bj.motionState !== MotionState.Dynamic) || (bi.sleepState === SleepState.Sleeping && bj.sleepState === SleepState.Sleeping)) {
                        continue;
                    }
                    if ((si.filterGroup & sj.filterMask) === 0 || (sj.filterGroup & si.filterMask) === 0) continue;
                }

                pairsi.push(si);
                pairsj.push(sj);
            }
        }
    }
};


P2BroadphaseSpatialHash.prototype.toJSON = function (json) {
    json || (json = {});

    json.cellSize = this.cellSize;
    json.cellDeathFrameCount = this.cellDeathFrameCount;

    return json;
};


P2BroadphaseSpatialHash.prototype.fromJSON = function (json) {

    this.cellSize = json.cellSize;
    this.cellDeathFrameCount = json.cellDeathFrameCount;

    return this;
};


module.exports = P2BroadphaseSpatialHash;

},{"../p2enums":128}],116:[function(require,module,exports){
var ObjectPool = require("../../base/object_pool");
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var P2Enums = require("../p2enums");
var P2Contact = require("../constraints/p2contact");
"use strict";


var min = Math.min,
    abs = Math.abs,
    sqrt = Math.sqrt,

    EPSILON = Mathf.EPSILON,

    BodyType = P2Enums.BodyType,
    ShapeType = P2Enums.ShapeType,

    CONTACT_POOL = new ObjectPool(P2Contact);


function clearContact(contact) {

    contact.bi = contact.bj = undefined;
}

function createContact(bi, bj, e, u, nx, ny, px, py, s, contacts) {
    var c = CONTACT_POOL.create(),
        n = c.n,
        p = c.p;

    c.bi = bi;
    c.bj = bj;

    c.e = e;
    c.u = u;

    n.x = nx;
    n.y = ny;

    p.x = px;
    p.y = py;

    c.s = s;

    contacts.push(c);
}

function circle2Circle(si, sj, xix, xiy, ri, xjx, xjy, rj, contacts) {
    var dx = xjx - xix,
        dy = xjy - xiy,
        dist = dx * dx + dy * dy,
        invDist, separation = 0.0,
        r = ri + rj,
        nx, ny;

    if (dist > r * r) return;
    if (!collide(si, sj)) return;

    if (dist < EPSILON) {
        nx = 0.0;
        ny = 1.0;
        invDist = 0.0;
        separation = -r;
    } else {
        dist = sqrt(dist);
        invDist = 1.0 / dist;

        nx = dx * invDist;
        ny = dy * invDist;

        separation = dist - r;
    }

    createContact(
        si.body,
        sj.body,
        1.0 + min(si.elasticity, sj.elasticity),
        min(si.friction, sj.friction),
        nx,
        ny,
        xjx - rj * nx,
        xjy - rj * ny,
        separation,
        contacts
    );
}

function P2Nearphase() {
}

P2Nearphase.CONTACT_POOL = CONTACT_POOL;


P2Nearphase.prototype.collisions = function (pairsi, pairsj, contacts) {
    var si, sj,
        i = pairsi.length;

    contacts.length = 0;
    CONTACT_POOL.clearForEach(clearContact);

    while (i--) {
        si = pairsi[i];
        sj = pairsj[i];

        collisionType(si, sj, contacts);
    }
};


function collide(si, sj) {
    var bi = si.body,
        bj = sj.body,
        i = bi._index,
        j = bj._index,
        space = bi.space || bj.space;

    if (!space) return false;
    space.collisionMatrixSet(i, j, 1, true);

    if (space.collisionMatrixGet(i, j, true) !== space.collisionMatrixGet(i, j, false)) {
        bi.wake();
        bj.wake();

        bi.emit("collide", bj, si, sj);
        bj.emit("collide", bi, sj, si);
    } else {
        bi.wake();
        bj.wake();

        bi.emit("colliding", bj, si, sj);
        bj.emit("colliding", bi, sj, si);
    }

    if (si.isTrigger || sj.isTrigger) return false;

    return true;
}


function circleCircle(si, sj, contacts) {
    var xi = si.position,
        xj = sj.position;

    circle2Circle(
        si,
        sj,
        xi.x, xi.y, si.radius,
        xj.x, xj.y, sj.radius,
        contacts
    );
}


function segmentCircle(si, sj, contacts) {
    var ri = si.radius,
        a = si._a,
        b = si._b,
        n = si._normal,
        ax = a.x,
        ay = a.y,
        bx = b.x,
        by = b.y,
        nx = n.x,
        ny = n.y,

        xj = sj.position,
        xjx = xj.x,
        xjy = xj.y,
        rj = sj.radius,
        r = ri + rj,

        dn = (nx * xjx + ny * xjy) - (ax * nx + ay * ny),
        dist = abs(dn),
        dt, dta, dtb, dx, dy, invDist;

    if (dist > r) return;

    dt = xjx * ny - xjy * nx;
    dta = ax * ny - ay * nx;
    dtb = bx * ny - by * nx;

    if (dt <= dta) {
        if (dt < dta - r) return;

        dx = xjx - ax;
        dy = xjy - ay;

        dist = dx * dx + dy * dy;
        if (dist > r * r) return;

        dist = dist === 0.0 ? 0.0 : sqrt(dist);
        invDist = dist === 0.0 ? 0.0 : 1.0 / dist;

        nx = dx * invDist;
        ny = dy * invDist;
    } else if (dt > dtb) {
        if (dt > dtb + r) return;

        dx = xjx - bx;
        dy = xjy - by;

        dist = dx * dx + dy * dy;
        if (dist > r * r) return;

        dist = dist === 0.0 ? 0.0 : sqrt(dist);
        invDist = dist === 0.0 ? 0.0 : 1.0 / dist;

        nx = dx * invDist;
        ny = dy * invDist;
    } else {
        if (dn < 0.0) {
            nx = -nx;
            ny = -ny;
        }
    }
    if (!collide(si, sj)) return;

    createContact(
        si.body,
        sj.body,
        1.0 + min(si.elasticity, sj.elasticity),
        min(si.friction, sj.friction),
        nx,
        ny,
        xjx - r * nx,
        xjy - r * ny,
        dist - r,
        contacts
    );
}


function segmentSegment(si, sj, contacts) {
    var ai = si._a,
        aix = ai.x,
        aiy = ai.y,
        bi = si._b,
        bix = bi.x,
        biy = bi.y,
        ri = si.radius,

        aj = sj._a,
        ajx = aj.x,
        ajy = aj.y,
        bj = sj._b,
        bjx = bj.x,
        bjy = bj.y,
        rj = sj.radius,
        d0, d1, d2, d3, mi, mj, m, s, t, ux, uy, vx, vy, amx, amy, bmx, bmy;

    segmentSegmentArray[0] = d0 = segmentPointDistanceSq(aix, aiy, bix, biy, ajx, ajy);
    segmentSegmentArray[1] = d1 = segmentPointDistanceSq(aix, aiy, bix, biy, bjx, bjy);
    segmentSegmentArray[2] = d2 = segmentPointDistanceSq(ajx, ajy, bjx, bjy, aix, aiy);
    segmentSegmentArray[3] = d3 = segmentPointDistanceSq(ajx, ajy, bjx, bjy, bix, biy);

    mi = d0 < d1 ? 0 : 1;
    mj = d2 < d3 ? 2 : 3;
    m = segmentSegmentArray[mi] < segmentSegmentArray[mj] ? mi : mj;

    ux = bix - aix;
    uy = biy - aiy;
    vx = bjx - ajx;
    vy = bjy - ajy;

    if (m === 0) {
        s = ((ajx - aix) * ux + (ajy - aiy) * uy) / (ux * ux + uy * uy);
        s = s < 0 ? 0 : (s > 1 ? 1 : s);
        t = 0;
    } else if (m === 1) {
        s = ((bjx - aix) * ux + (bjy - aiy) * uy) / (ux * ux + uy * uy);
        s = s < 0 ? 0 : (s > 1 ? 1 : s);
        t = 1;
    } else if (m === 2) {
        s = 0;
        t = ((aix - ajx) * vx + (aiy - ajy) * vy) / (vx * vx + vy * vy);
        t = t < 0 ? 0 : (t > 1 ? 1 : t);
    } else if (m === 3) {
        s = 1;
        t = ((bix - ajx) * vx + (biy - ajy) * vy) / (vx * vx + vy * vy);
        t = t < 0 ? 0 : (t > 1 ? 1 : t);
    }

    amx = aix + (ux * s);
    amy = aiy + (uy * s);
    bmx = ajx + (vx * t);
    bmy = ajy + (vy * t);

    circle2Circle(
        si,
        sj,
        amx, amy, ri,
        bmx, bmy, rj,
        contacts
    );
}


function convexSegment(si, sj, contacts) {
    var vertices = si._vertices,
        normals = si._normals,

        a = sj._a,
        ax = a.x,
        ay = a.y,
        b = sj._b,
        bx = b.x,
        by = b.y,
        nj = sj._normal,
        radius = sj.radius,
        njx = nj.x,
        njy = nj.y,

        segD = njx * ax + njy * ay,
        minNorm = valueOnAxis(vertices, njx, njy, segD) - radius,
        minNeg = valueOnAxis(vertices, -njx, -njy, -segD) - radius,
        index = -1,
        polyMin = -Infinity,
        v, n, dist, i, vax, vay, vbx, vby, u, e, nx, ny, count = 0;

    if (minNeg > 0 || minNorm > 0) return;

    i = vertices.length;
    while (i--) {
        v = vertices[i];
        n = normals[i];
        nx = n.x;
        ny = n.y;
        dist = segmentValueOnAxis(ax, ay, bx, by, radius, nx, ny, (nx * v.x + ny * v.y));

        if (dist > 0.0) {
            return;
        } else if (dist > polyMin) {
            polyMin = dist;
            index = i;
        }
    }

    if (index === -1) return;
    if (!collide(si, sj)) return;

    e = 1.0 + min(si.elasticity, sj.elasticity);
    u = min(si.friction, sj.friction);

    n = normals[index];
    nx = n.x;
    ny = n.y;

    vax = ax + (-nx * radius);
    vay = ay + (-ny * radius);

    vbx = bx + (-nx * radius);
    vby = by + (-ny * radius);

    if (contains(vertices, normals, vax, vay)) {
        createContact(
            si.body,
            sj.body,
            e,
            u,
            nx,
            ny,
            vax,
            vay,
            polyMin,
            contacts
        );
        count++;
    }
    if (contains(vertices, normals, vbx, vby)) {
        createContact(
            si.body,
            sj.body,
            e,
            u,
            nx,
            ny,
            vbx,
            vby,
            polyMin,
            contacts
        );
        count++;
    }

    if (minNorm >= polyMin || minNeg >= polyMin) {
        if (minNorm > minNeg) {
            count += pointsBehindSegment(si, sj, e, u, ax, ay, bx, by, radius, nx, ny, minNorm, 1, contacts);
        } else {
            count += pointsBehindSegment(si, sj, e, u, ax, ay, bx, by, radius, nx, ny, minNeg, -1, contacts);
        }
    }
}

var segmentSegmentArray = [0.0, 0.0, 0.0, 0.0];

function pointsBehindSegment(si, sj, e, u, ax, ay, bx, by, radius, nx, ny, dist, coef, contacts) {
    var dta = nx * ay - ny * ax,
        dtb = nx * by - ny * bx,
        vertices = si._vertices,
        i = vertices.length,
        v, vx, vy, dt,
        count = 0;

    nx *= coef;
    ny *= coef;

    while (i--) {
        v = vertices[i]
        vx = v.x;
        vy = v.y;

        if ((vx * nx + vy * ny) < (nx * ax + ny * ay) * coef + radius) {
            dt = nx * vy - ny * vx;
            if (dta >= dt && dt >= dtb) {
                createContact(
                    si.body,
                    sj.body,
                    e,
                    u,
                    nx,
                    ny,
                    vx,
                    vy,
                    dist,
                    contacts
                );
                count++;
            }
        }
    }

    return count;
}

function segmentPointDistanceSq(ax, ay, bx, by, px, py) {
    var wx = px - ax,
        wy = py - ay,
        dx = bx - ax,
        dy = by - ay,

        proj = wx * dx + wy * dy,
        vsq;

    if (proj <= 0.0) return wx * wx + wy * wy;

    vsq = dx * dx + dy * dy;
    if (proj >= vsq) return (wx * wx + wy * wy) - 2 * proj + vsq;


    return (wx * wx + wy * wy) - proj * proj / vsq;
}

function segmentValueOnAxis(ax, ay, bx, by, r, nx, ny, d) {
    var a = (nx * ax + ny * ay) - r,
        b = (nx * bx + ny * by) - r;

    return min(a, b) - d;
}


function convexCircle(si, sj, contacts) {
    var vertices = si._vertices,
        normals = si._normals,
        xj = sj.position,
        xjx = xj.x,
        xjy = xj.y,
        radius = sj.radius,

        vertex, normal, s, separation = -Infinity,
        index = -1,
        v1, v2, v1x, v1y, v2x, v2y, ex, ey, dx, dy, u, dist, invDist,

        nx, ny,
        i = vertices.length;

    while (i--) {
        vertex = vertices[i];
        normal = normals[i];
        s = normal.x * (xjx - vertex.x) + normal.y * (xjy - vertex.y);

        if (s > radius) return;

        if (s > separation) {
            separation = s;
            index = i;
        }
    }

    if (index === -1) return;

    normal = normals[index];
    nx = normal.x;
    ny = normal.y;

    v1 = vertices[index];
    v1x = v1.x;
    v1y = v1.y;
    v2 = vertices[index + 1] || vertices[0];
    v2x = v2.x;
    v2y = v2.y;

    ex = v2x - v1x;
    ey = v2y - v1y;

    dx = xjx - v1x;
    dy = xjy - v1y;

    u = (ex * dx + ey * dy) / (ex * ex + ey * ey);

    if (u < 0.0) {
        dx = xjx - v1x;
        dy = xjy - v1y;

        dist = dx * dx + dy * dy;
        if (dist > radius * radius) return;

        dist = sqrt(dist);
        invDist = dist > 0.0 ? 1.0 / dist : 0.0;

        nx = dx * invDist;
        ny = dy * invDist;
    } else if (u > 1.0) {
        dx = xjx - v2x;
        dy = xjy - v2y;

        dist = dx * dx + dy * dy;
        if (dist > radius * radius) return;

        dist = sqrt(dist);
        invDist = dist > 0.0 ? 1.0 / dist : 0.0;

        nx = dx * invDist;
        ny = dy * invDist;
    } else {
        normal = normals[index];
        nx = normal.x;
        ny = normal.y;

        dist = separation;
    }
    if (!collide(si, sj)) return;

    createContact(
        si.body,
        sj.body,
        1.0 + min(si.elasticity, sj.elasticity),
        min(si.friction, sj.friction),
        nx,
        ny,
        xjx - radius * nx,
        xjy - radius * ny,
        dist - radius,
        contacts
    );
}


function contains(vertices, normals, px, py) {
    var n, nx, ny, v, vx, vy,
        i = vertices.length;

    while (i--) {
        n = normals[i];
        nx = n.x;
        ny = n.y;
        v = vertices[i];
        vx = v.x;
        vy = v.y;

        if ((nx * px + ny * py) - (nx * vx + ny * vy) > 0) return false;
    }

    return true;
}


function findContacts(si, sj, normal, dist, contacts) {
    if (!collide(si, sj)) return;
    var verticesi = si._vertices,
        normalsi = si._normals,
        verticesj = sj._vertices,
        normalsj = sj._normals,
        v, vx, vy,
        nx = normal.x,
        ny = normal.y,

        e = 1.0 + min(si.elasticity, sj.elasticity),
        u = min(si.friction, sj.friction),

        i;

    i = verticesi.length;
    while (i--) {
        v = verticesi[i];
        vx = v.x;
        vy = v.y;

        if (contains(verticesj, normalsj, vx, vy)) {
            createContact(
                si.body,
                sj.body,
                e,
                u,
                nx,
                ny,
                vx,
                vy,
                dist,
                contacts
            );
        }
    }

    i = verticesj.length;
    while (i--) {
        v = verticesj[i];
        vx = v.x;
        vy = v.y;

        if (contains(verticesi, normalsi, vx, vy)) {
            createContact(
                si.body,
                sj.body,
                e,
                u,
                nx,
                ny,
                vx,
                vy,
                dist,
                contacts
            );
        }
    }
}


function valueOnAxis(vertices, nx, ny, d) {
    var v, m = Infinity,
        i = vertices.length;

    while (i--) {
        v = vertices[i];
        m = min(m, nx * v.x + ny * v.y);
    }

    return m - d;
}


var lastMinMSA = 0.0;

function findMSA(si, sj) {
    var verticesi = si._vertices,
        normalsi = si._normals,
        counti = normalsi.length,
        verticesj = sj._vertices,

        n, v, dist, min = -Infinity,
        index = -1,
        i = counti;

    while (i--) {
        n = normalsi[i];
        v = verticesi[i];

        dist = valueOnAxis(verticesj, n.x, n.y, (n.x * v.x + n.y * v.y));

        if (dist > 0.0) return -1;

        if (dist > min) {
            min = dist;
            index = i;
        }
    }

    lastMinMSA = min;
    return index;
}


function convexConvex(si, sj, contacts) {
    var indexi, mini, indexj, minj;

    indexi = findMSA(si, sj);
    if (indexi < 0) return;
    mini = lastMinMSA;

    indexj = findMSA(sj, si);
    if (indexj < 0) return;
    minj = lastMinMSA;

    if (mini > minj) {
        findContacts(si, sj, si._normals[indexi], mini, contacts);
    } else {
        findContacts(sj, si, sj._normals[indexj], minj, contacts);
    }
}


function collisionType(si, sj, contacts) {
    var siType = si.type,
        sjType = sj.type;

    if (siType === ShapeType.Circle) {

        if (sjType === ShapeType.Circle) {
            circleCircle(si, sj, contacts);
        } else if (sjType === ShapeType.Segment) {
            segmentCircle(sj, si, contacts);
        } else if (sjType === ShapeType.Convex) {
            convexCircle(sj, si, contacts);
        }
    } else if (siType === ShapeType.Convex) {

        if (sjType === ShapeType.Circle) {
            convexCircle(si, sj, contacts);
        } else if (sjType === ShapeType.Segment) {
            convexSegment(si, sj, contacts);
        } else if (sjType === ShapeType.Convex) {
            convexConvex(si, sj, contacts);
        }
    } else if (siType === ShapeType.Segment) {

        if (sjType === ShapeType.Circle) {
            segmentCircle(si, sj, contacts);
        } else if (sjType === ShapeType.Segment) {
            segmentSegment(si, sj, contacts);
        } else if (sjType === ShapeType.Convex) {
            convexSegment(sj, si, contacts);
        }
    }
}


module.exports = P2Nearphase;

},{"../../base/object_pool":15,"../../math/mathf":107,"../../math/vec2":111,"../constraints/p2contact":118,"../p2enums":128}],117:[function(require,module,exports){
var EventEmitter = require("../../base/event_emitter");
"use strict";

/**
 * @class P2Constraint
 * @extends Class
 * @brief 2d contact equation
 */
function P2Constraint(bi, bj) {

    EventEmitter.call(this);

    /**
     * @property P2Body bj
     * @memberof P2Constraint
     */
    this.bi = bi;

    /**
     * @property P2Body bj
     * @memberof P2Constraint
     */
    this.bj = bj;

    /**
     * @property Array equations
     * @memberof P2Constraint
     */
    this.equations = [];
}

EventEmitter.extend(P2Constraint);


P2Constraint.prototype.update = function () {

};


module.exports = P2Constraint;

},{"../../base/event_emitter":13}],118:[function(require,module,exports){
var Class = require("../../base/class");
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var P2Equation = require("../constraints/p2equation");
"use strict";


/**
 * @class P2Contact
 * @extends P2Equation
 * @brief 2d contact equation
 */
function P2Contact() {

    P2Equation.call(this);

    this.minForce = 0.0;

    /**
     * @property Vec2 p
     * @memberof P2Contact
     */
    this.p = new Vec2;

    /**
     * @property Vec2 n
     * @memberof P2Contact
     */
    this.n = new Vec2;

    /**
     * @property Number s
     * @memberof P2Contact
     */
    this.s = 0.0;

    /**
     * @property Number e
     * @memberof P2Contact
     */
    this.e = 1.0;

    /**
     * @property Number u
     * @memberof P2Contact
     */
    this.u = 1.0;

    this.ri = new Vec2;
    this.rj = new Vec2;

    this.rixn = 0;
    this.rjxn = 0;
}

P2Equation.extend(P2Contact);


P2Contact.prototype.init = function (h) {
    var bi = this.bi,
        bj = this.bj,

        p = this.p,
        px = p.x,
        py = p.y,
        n = this.n,
        nx = n.x,
        ny = n.y,

        xi = bi.position,
        xj = bj.position,

        ri = this.ri,
        rix = px - xi.x,
        riy = py - xi.y,

        rj = this.rj,
        rjx = px - xj.x,
        rjy = py - xj.y,

        rixn = rix * ny - riy * nx,
        rjxn = rjx * ny - rjy * nx;

    ri.x = rix;
    ri.y = riy;

    rj.x = rjx;
    rj.y = rjy;

    this.rixn = rixn;
    this.rjxn = rjxn;

    this.lambda = 0;
    this.calculateB(h);
    this.calculateC();
};


P2Contact.prototype.calculateB = function (h) {
    var bi = this.bi,
        bj = this.bj,

        n = this.n,
        nx = n.x,
        ny = n.y,

        vi = bi.velocity,
        wi = bi.angularVelocity,
        fi = bi.force,
        ti = bi.torque,
        invMi = bi.invMass,
        invIi = bi.invInertia,

        vj = bj.velocity,
        wj = bj.angularVelocity,
        fj = bj.force,
        tj = bj.torque,
        invMj = bj.invMass,
        invIj = bj.invInertia,

        ri = this.ri,
        rix = ri.x,
        riy = ri.y,
        rj = this.rj,
        rjx = rj.x,
        rjy = rj.y,

        e = this.e,

        Gq = this.s,

        GWx = vj.x + (-wj * rjy) - vi.x - (-wi * riy),
        GWy = vj.y + (wj * rjx) - vi.y - (wi * rix),
        GW = e * GWx * nx + e * GWy * ny,

        GiMfx = fj.x * invMj + (-tj * invIj * rjy) - fi.x * invMi - (-ti * invIi * riy),
        GiMfy = fj.y * invMj + (tj * invIj * rjx) - fi.y * invMi - (ti * invIi * rix),
        GiMf = GiMfx * nx + GiMfy * ny;

    this.B = -this.a * Gq - this.b * GW - h * GiMf;
};


P2Contact.prototype.calculateC = function () {
    var bi = this.bi,
        bj = this.bj,

        rixn = this.rixn,
        rjxn = this.rjxn,

        invIi = bi.invInertia,
        invIj = bj.invInertia,

        C = bi.invMass + bj.invMass + this.epsilon + invIi * rixn * rixn + invIj * rjxn * rjxn;

    this.invC = C === 0 ? 0 : 1 / C;
};


P2Contact.prototype.calculateGWlambda = function () {
    var bi = this.bi,
        bj = this.bj,

        n = this.n,

        vlambdai = bi.vlambda,
        wlambdai = bi.wlambda,
        vlambdaj = bj.vlambda,
        wlambdaj = bj.wlambda,

        ulambdax = vlambdaj.x - vlambdai.x,
        ulambday = vlambdaj.y - vlambdai.y,

        GWlambda = ulambdax * n.x + ulambday * n.y;

    if (wlambdai != undefined) GWlambda -= wlambdai * this.rixn;
    if (wlambdaj != undefined) GWlambda += wlambdaj * this.rjxn;

    return GWlambda;
};


P2Contact.prototype.addToLambda = function (deltaLambda) {
    var bi = this.bi,
        bj = this.bj,

        n = this.n,
        nx = n.x,
        ny = n.y,

        invMi = bi.invMass,
        vlambdai = bi.vlambda,
        invMj = bj.invMass,
        vlambdaj = bj.vlambda;

    vlambdai.x -= deltaLambda * invMi * nx;
    vlambdai.y -= deltaLambda * invMi * ny;

    vlambdaj.x += deltaLambda * invMj * nx;
    vlambdaj.y += deltaLambda * invMj * ny;

    if (bi.wlambda != undefined) bi.wlambda -= deltaLambda * bi.invInertia * this.rixn;
    if (bj.wlambda != undefined) bj.wlambda += deltaLambda * bj.invInertia * this.rjxn;
};


module.exports = P2Contact;

},{"../../base/class":8,"../../math/mathf":107,"../../math/vec2":111,"../constraints/p2equation":120}],119:[function(require,module,exports){
var P2Constraint = require("./p2constraint");
var P2Contact = require("./p2contact");
"use strict";


var sqrt = Math.sqrt;


/**
 * @class P2DistanceConstraint
 * @extends P2Constraint
 * @brief 2d contact equation
 */
function P2DistanceConstraint(bi, bj, distance, maxForce) {

    P2Constraint.call(this, bi, bj);

    this.distance = distance || (distance = 1);
    maxForce || (maxForce = 1e6);

    var distanceEquation = this._distanceEquation = new P2Contact();
    distanceEquation.bi = bi;
    distanceEquation.bj = bj;
    distanceEquation.minForce = -maxForce;
    distanceEquation.maxForce = maxForce;
    console.log(distanceEquation);

    this.equations.push(distanceEquation);
}

P2Constraint.extend(P2DistanceConstraint);


P2DistanceConstraint.prototype.update = function () {
    var distanceEquation = this._distanceEquation,
        distance = this.distance,
        bi = this.bi,
        bj = this.bj,
        n = distanceEquation.n,
        ri = distanceEquation.ri,
        rj = distanceEquation.rj,
        xi = bi.position,
        xj = bj.position,
        nx = xj.x - xi.x,
        ny = xj.y - xi.y,
        len = nx * nx + ny * ny,
        invLen = len === 0 ? 0 : 1 / (len = sqrt(len))

    nx *= invLen;
    ny *= invLen;
    n.x = nx;
    n.y = ny;

    ri.x = nx * distance * 0.5;
    ri.y = ny * distance * 0.5;

    rj.x = nx * distance * -0.5;
    rj.y = ny * distance * -0.5;
};


module.exports = P2DistanceConstraint;

},{"./p2constraint":117,"./p2contact":118}],120:[function(require,module,exports){
var EventEmitter = require("../../base/event_emitter");
"use strict";

/**
 * @class P2Equation
 * @extends Class
 * @brief 2d contact equation
 */
function P2Equation() {

    EventEmitter.call(this);

    /**
     * @property P2Body bj
     * @memberof P2Equation
     */
    this.bi = undefined;

    /**
     * @property P2Body bj
     * @memberof P2Equation
     */
    this.bj = undefined;

    /**
     * @property Number minForce
     * @memberof P2Equation
     */
    this.minForce = -Number.MAX_VALUE;

    /**
     * @property Number maxForce
     * @memberof P2Equation
     */
    this.maxForce = Number.MAX_VALUE;

    /**
     * @property Number relaxation
     * @brief number of timesteps it takesto stabilize the constraint
     * @memberof P2Equation
     */
    this.relaxation = 4;

    /**
     * @property Number stiffness
     * @brief spring constant
     * @memberof P2Equation
     */
    this.stiffness = 1e6;

    this.a = 0;
    this.b = 0;
    this.epsilon = 0;

    this.lambda = 0;
    this.B = 0;
    this.invC = 0;
}

EventEmitter.extend(P2Equation);


P2Equation.prototype.updateConstants = function (h) {
    var k = this.stiffness,
        d = this.relaxation;

    this.a = 4.0 / (h * (1.0 + 4.0 * d));
    this.b = (4.0 * d) / (1.0 + 4.0 * d);
    this.epsilon = 4.0 / (h * h * k * (1.0 + 4.0 * d));
};


module.exports = P2Equation;

},{"../../base/event_emitter":13}],121:[function(require,module,exports){
var Class = require("../../base/class");
var Mathf = require("../../math/mathf");
var Vec2 = require("../../math/vec2");
var P2Equation = require("./p2equation");
"use strict";


/**
 * @class P2Friction
 * @extends P2Equation
 * @brief 2d contact equation
 */
function P2Friction() {

    P2Equation.call(this);

    /**
     * @property Vec2 p
     * @memberof P2Friction
     */
    this.p = new Vec2;

    /**
     * @property Vec2 t
     * @memberof P2Friction
     */
    this.t = new Vec2;

    this.ri = new Vec2;
    this.rj = new Vec2;

    this.rixt = 0;
    this.rjxt = 0;
}

P2Equation.extend(P2Friction);


P2Friction.prototype.init = function (h) {
    var bi = this.bi,
        bj = this.bj,

        p = this.p,
        px = p.x,
        py = p.y,
        t = this.t,
        tx = t.x,
        ty = t.y,

        xi = bi.position,
        xj = bj.position,

        ri = this.ri,
        rix = px - xi.x,
        riy = py - xi.y,

        rj = this.rj,
        rjx = px - xj.x,
        rjy = py - xj.y,

        rixt = rix * ty - riy * tx,
        rjxt = rjx * ty - rjy * tx;

    ri.x = rix;
    ri.y = riy;

    rj.x = rjx;
    rj.y = rjy;

    this.rixt = rixt;
    this.rjxt = rjxt;

    this.lambda = 0;
    this.calculateB(h);
    this.calculateC();
};


P2Friction.prototype.calculateB = function (h) {
    var bi = this.bi,
        bj = this.bj,

        t = this.t,
        tx = t.x,
        ty = t.y,

        vi = bi.velocity,
        wi = bi.angularVelocity,
        fi = bi.force,
        ti = bi.torque,
        invMi = bi.invMass,
        invIi = bi.invInertia,

        vj = bj.velocity,
        wj = bj.angularVelocity,
        fj = bj.force,
        tj = bj.torque,
        invMj = bj.invMass,
        invIj = bj.invInertia,

        ri = this.ri,
        rix = ri.x,
        riy = ri.y,
        rj = this.rj,
        rjx = rj.x,
        rjy = rj.y,

        Gq = 0,

        GWx = vj.x + (-wj * rjy) - vi.x - (-wi * riy),
        GWy = vj.y + (wj * rjx) - vi.y - (wi * rix),
        GW = GWx * tx + GWy * ty,

        GiMfx = fj.x * invMj + (-tj * invIj * rjy) - fi.x * invMi - (-ti * invIi * riy),
        GiMfy = fj.y * invMj + (tj * invIj * rjx) - fi.y * invMi - (ti * invIi * rix),
        GiMf = GiMfx * tx + GiMfy * ty;

    this.B = -this.a * Gq - this.b * GW - h * GiMf;
};


P2Friction.prototype.calculateC = function () {
    var bi = this.bi,
        bj = this.bj,

        rixt = this.rixt,
        rjxt = this.rjxt,

        invIi = bi.invInertia,
        invIj = bj.invInertia,

        C = bi.invMass + bj.invMass + this.epsilon + invIi * rixt * rixt + invIj * rjxt * rjxt;

    this.invC = C === 0 ? 0 : 1 / C;
};


P2Friction.prototype.calculateGWlambda = function () {
    var bi = this.bi,
        bj = this.bj,

        t = this.t,

        vlambdai = bi.vlambda,
        wlambdai = bi.wlambda,
        vlambdaj = bj.vlambda,
        wlambdaj = bj.wlambda,

        ulambdax = vlambdaj.x - vlambdai.x,
        ulambday = vlambdaj.y - vlambdai.y,

        GWlambda = ulambdax * t.x + ulambday * t.y;

    if (wlambdai != undefined) GWlambda -= wlambdai * this.rixt;
    if (wlambdaj != undefined) GWlambda += wlambdaj * this.rjxt;

    return GWlambda;
};


P2Friction.prototype.addToLambda = function (deltaLambda) {
    var bi = this.bi,
        bj = this.bj,

        t = this.t,
        tx = t.x,
        ty = t.y,

        invMi = bi.invMass,
        vlambdai = bi.vlambda,
        invMj = bj.invMass,
        vlambdaj = bj.vlambda;

    vlambdai.x -= deltaLambda * invMi * tx;
    vlambdai.y -= deltaLambda * invMi * ty;

    vlambdaj.x += deltaLambda * invMj * tx;
    vlambdaj.y += deltaLambda * invMj * ty;

    if (bi.wlambda != undefined) bi.wlambda -= deltaLambda * bi.invInertia * this.rixt;
    if (bj.wlambda != undefined) bj.wlambda += deltaLambda * bj.invInertia * this.rjxt;
};


module.exports = P2Friction;

},{"../../base/class":8,"../../math/mathf":107,"../../math/vec2":111,"./p2equation":120}],122:[function(require,module,exports){
var Class = require("../../base/class");
var P2Enums = require("../p2enums");
var P2Shape = require("./p2shape");
"use strict";


var ShapeType = P2Enums.ShapeType,

    abs = Math.abs,
    PI = Math.PI;


function P2Circle(opts) {
    opts || (opts = {});

    P2Shape.call(this, opts);

    this.type = ShapeType.Circle;
    this.radius = opts.radius != undefined ? abs(opts.radius) : 0.5;
}

P2Shape.extend(P2Circle);


P2Circle.prototype.copy = function (other) {
    P2Shape.prototype.copy.call(this, other);

    this.radius = other.radius;

    return this;
};


P2Circle.prototype.pointQuery = function (p) {
    var x = this.position,
        dx = x.x - p.x,
        dy = x.y - p.y,
        r = this.radius;

    return (dx * dx + dy * dy) < r * r;
};


P2Circle.prototype.centroid = function (v) {
    var localPosition = this.localPosition;

    v.x = localPosition.x;
    v.y = localPosition.y;

    return v;
};


P2Circle.prototype.area = function () {
    var r = this.radius;

    return PI * (r * r);
};


P2Circle.prototype.inertia = function (mass) {
    var r = this.radius,
        localPosition = this.localPosition,
        lx = localPosition.x,
        ly = localPosition.y;

    return mass * ((r * r * 0.5) + (lx * lx + ly * ly));
};


P2Circle.prototype.update = function (matrix) {
    var localMatrix = this.matrix,
        matrixWorld = this.matrixWorld,
        localPosition = this.localPosition,
        pos = this.position,
        r = this.radius,
        aabb = this.aabb,
        min = aabb.min,
        max = aabb.max,
        x, y;

    localMatrix.setRotation(this.localRotation);
    localMatrix.setPosition(localPosition);
    matrixWorld.mmul(matrix, localMatrix);

    pos.x = localPosition.x;
    pos.y = localPosition.y;
    pos.transformMat32(matrix);
    x = pos.x;
    y = pos.y;

    min.x = x - r;
    min.y = y - r;
    max.x = x + r;
    max.y = y + r;
};


P2Circle.prototype.toJSON = function (json) {
    json = P2Shape.prototype.toJSON.call(this, json);

    json.radius = this.radius;

    return json;
};


P2Circle.prototype.fromJSON = function (json) {
    P2Shape.prototype.fromJSON.call(this, json);

    this.radius = json.radius;

    return this;
};


module.exports = P2Circle;

},{"../../base/class":8,"../p2enums":128,"./p2shape":127}],123:[function(require,module,exports){
var Vec2 = require("../../math/vec2");
var Log = require("../../base/log");
var P2Enums = require("../p2enums");
var P2Shape = require("./p2shape");
"use strict";


var ShapeType = P2Enums.ShapeType;


function P2Convex(opts) {
    opts || (opts = {});

    P2Shape.call(this, opts);

    this.type = ShapeType.Convex;

    this.vertices = opts.vertices != undefined ? opts.vertices : [
        new Vec2(0.5, 0.5),
        new Vec2(-0.5, 0.5),
        new Vec2(-0.5, -0.5),
        new Vec2(0.5, -0.5)
    ];

    if (!P2Convex.validateVertices(this.vertices)) {
        log.warn("P2Convex.constructor: passed vertices are invalid, creating convex hull from vertices with gift wrapping algorithm");
        this.vertices = P2Convex.createConvexHull(this.vertices);
    }

    this.normals = [];

    this._vertices = [];
    this._normals = [];

    var vertices = this.vertices,
        wverts = this._vertices,
        normals = this.normals,
        wnorms = this._normals,
        v1, v2,
        i;

    i = vertices.length;
    while (i--) {
        v1 = vertices[i];
        v2 = vertices[i + 1] || vertices[0];

        normals[i] = new Vec2(v2.y - v1.y, -(v2.x - v1.x)).normalize();

        wverts[i] = new Vec2(v1);
        wnorms[i] = new Vec2(normals[i]);
    }
}

P2Shape.extend(P2Convex);


P2Convex.prototype.copy = function (other) {
    P2Shape.prototype.copy.call(this, other);
    var vertices = other.vertices,
        normals = other.normals,
        i;

    this.vertices.length = this.normals.length = this._vertices.length = this._normals.length = 0;

    i = vertices.length;
    while (i--) this.vertices[i] = vertices[i].clone();

    i = normals.length;
    while (i--) this.normals[i] = normals[i].clone();

    return this;
};


P2Convex.prototype.pointQuery = function (p) {
    if (!this.aabb.contains(p)) return false;
    var vertices = this._vertices,
        normals = this._normals,
        px = p.x,
        py = p.y,
        n, nx, ny, v, vx, vy,
        i = vertices.length;
    ;

    while (i--) {
        n = normals[i];
        nx = n.x;
        ny = n.y;
        v = vertices[i];
        vx = v.x;
        vy = v.y;

        if ((nx * px + ny * py) - (nx * vx + ny * vy) > 0) return false;
    }

    return true;
}


P2Convex.prototype.centroid = function () {
    var v1 = new Vec2,
        v2 = new Vec2,
        vsum = new Vec2;

    return function (v) {
        var localPosition = this.localPosition,
            vertices = this.vertices,
            len = vertices.length,
            v1x, v1y, v2x, v2y, area = 0,
            cross,
            i = len;

        vsum.x = vsum.y = 0;

        while (i--) {
            v1.vadd(localPosition, vertices[i]);
            v2.vadd(localPosition, vertices[(i + 1) % len]);

            v1x = v1.x;
            v1y = v1.y;
            v2x = v2.x;
            v2y = v2.y;

            cross = v1x * v2y - v1y * v2x;
            area += cross;

            vsum.x += (v1x + v2x) * cross;
            vsum.y += (v1y + v2y) * cross;
        }

        return v.copy(vsum).smul(1 / (3 * area));
    };
}();


P2Convex.prototype.area = function () {
    var vertices = this.vertices,
        len = vertices.length,
        v1, v2, area = 0,
        i = len;

    while (i--) {
        v1 = vertices[i];
        v2 = vertices[(i + 1) % len];

        area += v1.x * v2.y - v1.y * v2.x;
    }

    return area * 0.5;
};


P2Convex.prototype.inertia = function () {
    var v1 = new Vec2,
        v2 = new Vec2;

    return function (mass) {
        var localPosition = this.localPosition,
            vertices = this.vertices,
            len = vertices.length,
            v1x, v1y, v2x, v2y, a = 0,
            b = 0,
            sum1 = 0,
            sum2 = 0,
            i = len;

        while (i--) {
            v1.vadd(localPosition, vertices[i]);
            v2.vadd(localPosition, vertices[(i + 1) % len]);

            v1x = v1.x;
            v1y = v1.y;
            v2x = v2.x;
            v2y = v2.y;

            a = v2x * v1y - v2y * v1x;
            b = (v1x * v1x + v1y * v1y) + (v1x * v2x + v1y * v2y) + (v2x * v2x + v2y * v2y);

            sum1 += a * b;
            sum2 += a;
        }

        return (mass * sum1) / (6 * sum2);
    };
}();


P2Convex.prototype.update = function (matrix) {
    var localMatrix = this.matrix,
        matrixWorld = this.matrixWorld,
        localPos = this.localPosition,

        vertices = this.vertices,
        normals = this.normals,
        pos = this.position,

        aabb = this.aabb,
        min = aabb.min,
        max = aabb.max,
        minx = Infinity,
        miny = Infinity,
        maxx = -Infinity,
        maxy = -Infinity,

        wnorms = this._normals,
        wnorm, wverts = this._vertices,
        wvert, x, y,
        i = vertices.length;

    localMatrix.setRotation(this.localRotation);
    localMatrix.setPosition(localPos);
    matrixWorld.mmul(matrix, localMatrix);

    pos.x = localPos.x;
    pos.y = localPos.y;
    pos.transformMat32(matrix);

    while (i--) {
        wvert = wverts[i] || (wverts[i] = new Vec2);
        wnorm = wnorms[i] || (wnorms[i] = new Vec2);

        wnorm.copy(normals[i]).transformMat2(matrixWorld);
        wvert.copy(vertices[i]).transformMat32(matrixWorld);
        x = wvert.x;
        y = wvert.y;

        minx = x < minx ? x : minx;
        miny = y < miny ? y : miny;

        maxx = x > maxx ? x : maxx;
        maxy = y > maxy ? y : maxy;
    }

    min.x = minx;
    min.y = miny;
    max.x = maxx;
    max.y = maxy;
};


P2Convex.prototype.toJSON = function (json) {
    json = P2Shape.prototype.toJSON.call(this, json);
    var vertices = this.vertices,
        normals = this.normals,
        jsonVertices = json.vertices || (json.vertices = []),
        jsonNormals = json.normals || (json.normals = []),
        i;

    i = vertices.length;
    while (i--) jsonVertices[i] = vertices[i].toJSON(jsonVertices[i]);

    i = normals.length;
    while (i--) jsonNormals[i] = normals[i].toJSON(jsonNormals[i]);

    return json;
};


P2Convex.prototype.fromJSON = function (json) {
    P2Shape.prototype.fromJSON.call(this, json);
    var vertices = this.vertices,
        normals = this.normals,
        jsonVertices = json.vertices,
        jsonNormals = json.normals,
        verticesLength = jsonVertices.length,
        normalsLength = jsonNormals.length,
        i;

    vertices.length = this._vertices.length = verticesLength;
    normals.length = this._normals.length = normalsLength;

    i = verticesLength;
    while (i--) vertices[i] = (vertices[i] || new Vec2()).fromJSON(jsonVertices[i]);

    i = normalsLength;
    while (i--) normals[i] = (normals[i] || new Vec2()).fromJSON(jsonNormals[i]);

    return this;
};


P2Convex.validateVertices = P2Convex.prototype.validateVertices = function (vertices) {
    var len = vertices.length,
        a, b, bx, by, c, abx, aby, bcx, bcy,
        i;

    for (i = 0; i < len; i++) {
        a = vertices[i];
        b = vertices[(i + 1) % len];
        bx = b.x;
        by = b.y;
        c = vertices[(i + 2) % len];

        abx = bx - a.x;
        aby = by - a.y;
        bcx = c.x - bx;
        bcy = c.y - by;

        if ((bcx * aby - bcy * abx) > 0) return false;
    }

    return true;
};


P2Convex.createConvexHull = P2Convex.prototype.createConvexHull = function () {
    var hull = [],
        r = new Vec2;

    return function (points) {
        var rmi = 0,
            rmx = -Infinity,
            n = points.length,
            v, vx, vy,
            ih, ie, m = 0,
            c, newPoints = [],
            failed = false,
            i;

        for (i = n; i--;) {
            v = points[i];
            vx = v.x;
            vy = v.y;

            if (vx > rmx || (vx == rmx && vy < points[rmi].y)) {
                rmi = i;
                rmx = vx;
            }
        }

        hull.length = 0;
        ih = rmi;

        while (true) {
            hull[m] = ih;

            ie = 0;
            for (i = 1; i < n; i++) {
                if (ie === ih) {
                    ie = i;
                    continue;
                }

                r.vsub(points[ie], points[hull[m]]);
                v.vsub(points[i], points[hull[m]]);
                c = v.cross(r);

                if (c < 0) ie = i;

                if (c === 0 && v.lenSq() > r.lenSq()) {
                    ie = i;
                }
            }

            m++;
            ih = ie;

            if (m > n) {
                failed = true;
                break;
            }
            if (ie === rmi) break;
        }

        if (failed) {
            Log.warn("P2Convex.constructor: gift wrapping algorithm failed");
            return [
                new Vec2(0.5, 0.5),
                new Vec2(-0.5, 0.5),
                new Vec2(-0.5, -0.5),
                new Vec2(0.5, -0.5)
            ];
        }

        for (i = m; i--;) {
            newPoints.push(points[hull[i]]);
        }

        if (!P2Convex.validateVertices(newPoints)) {
            Log.warn("P2Convex.constructor: gift wrapping algorithm failed");
            return [
                new Vec2(0.5, 0.5),
                new Vec2(-0.5, 0.5),
                new Vec2(-0.5, -0.5),
                new Vec2(0.5, -0.5)
            ];
        }

        return newPoints;
    };
}();


module.exports = P2Convex;

},{"../../base/log":14,"../../math/vec2":111,"../p2enums":128,"./p2shape":127}],124:[function(require,module,exports){
var Vec2 = require("../../math/vec2");
var P2Convex = require("./p2convex");
"use strict";


function P2Rect(opts) {
    opts || (opts = {});

    var extents = opts.extents || new Vec2(0.5, 0.5),
        x = extents.x,
        y = extents.y;

    opts.vertices = [
        new Vec2(x, y),
        new Vec2(-x, y),
        new Vec2(-x, -y),
        new Vec2(x, -y)
    ];

    P2Convex.call(this, opts);

    this.extents = extents;
}

P2Convex.extend(P2Rect);


P2Rect.prototype.toJSON = function (json) {
    json = P2Convex.prototype.toJSON.call(this, json);

    json.extents = this.extents.toJSON(json.extents);

    return json;
};


P2Rect.prototype.fromJSON = function (json) {
    P2Convex.prototype.fromJSON.call(this, json);

    this.extents.fromJSON(json.extents);

    return this;
};


module.exports = P2Rect;

},{"../../math/vec2":111,"./p2convex":123}],125:[function(require,module,exports){
var Class = require("../../base/class");
var AABB2 = require("../../math/aabb2");
var Vec2 = require("../../math/vec2");
var Mat32 = require("../../math/mat32");
var Log = require("../../base/log");
var P2Enums = require("../p2enums");
"use strict";


var TWO_PI = Math.PI * 2,
    pow = Math.pow,

    BodyType = P2Enums.BodyType,
    MotionState = P2Enums.MotionState,
    SleepState = P2Enums.SleepState;


function P2Rigidbody(opts) {
    opts || (opts = {});

    Class.call(this, opts);

    this.type = BodyType.RigidBody;
    this._index = -1;

    this.space = undefined;

    this.position = opts.position != undefined ? opts.position : new Vec2;
    this.velocity = opts.velocity != undefined ? opts.velocity : new Vec2;
    this.force = new Vec2;

    this.rotation = opts.rotation != undefined ? opts.rotation : 0;
    this.angularVelocity = opts.angularVelocity != undefined ? opts.angularVelocity : 0;
    this.torque = 0;

    this.linearDamping = opts.linearDamping != undefined ? opts.linearDamping : 0.01;
    this.angularDamping = opts.angularDamping != undefined ? opts.angularDamping : TWO_PI * 0.01;

    this.matrix = new Mat32();
    this.aabb = new AABB2;

    this.mass = opts.mass != undefined ? opts.mass : 0.0;
    this.invMass = this.mass > 0.0 ? 1.0 / this.mass : 0.0;

    this.inertia = 0;
    this.invInertia = 0;

    this.shapes = [];

    this.motionState = opts.motionState != undefined ? opts.motionState : MotionState.Static;

    this.allowSleep = opts.allowSleep != undefined ? !!opts.allowSleep : true;
    this.sleepState = SleepState.Awake;

    this.sleepVelocityLimit = opts.sleepVelocityLimit != undefined ? !!opts.sleepVelocityLimit : 0.01;
    this.sleepTimeLimit = opts.sleepTimeLimit != undefined ? !!opts.sleepTimeLimit : 1.0;
    this.sleepAngularVelocityLimit = opts.sleepAngularVelocityLimit != undefined ? !!opts.sleepAngularVelocityLimit : TWO_PI * 0.01;

    this.userData = undefined;

    this._sleepTime = 0.0;
    this._lastSleepyTime = 0.0;

    this.vlambda = new Vec2;
    this.wlambda = 0;

    if (opts.shape) this.addShape(opts.shape);
    if (opts.shapes) this.addShapes.apply(this, opts.shapes);
}

Class.extend(P2Rigidbody);


P2Rigidbody.prototype.copy = function (other) {
    var shapes = other.shapes,
        i = shapes.length;

    this.clear();

    this.motionState = other.motionState;

    this.position.copy(other.position);
    this.velocity.copy(other.velocity);
    this.force.copy(other.force);

    this.linearDamping = other.linearDamping;

    this.mass = other.mass;
    this.invMass = other.invMass;

    this.allowSleep = other.allowSleep;
    this.sleepState = other.sleepState;

    this.rotation = other.rotation;
    this.angularVelocity = other.angularVelocity;
    this.torque = other.torque;

    this.angularDamping = other.angularDamping;

    while (i--) this.addShape(shapes[i].clone());

    return this;
};


var VEC2_SCALE = new Vec2(1.0, 1.0);
P2Rigidbody.prototype.init = function () {
    var shapes = this.shapes,
        matrix = this.matrix,
        aabb = this.aabb,
        shape,
        i = shapes.length;

    matrix.compose(this.position, VEC2_SCALE, this.rotation);
    aabb.clear();

    while (i--) {
        shape = shapes[i];
        shape.update(matrix);
        aabb.union(shape.aabb);
    }

    this.resetMassData();
};


P2Rigidbody.prototype.update = function (dt) {
    if (this.motionState === MotionState.Static) return;
    var shapes = this.shapes,
        force = this.force,
        invMass = this.invMass,
        pos = this.position,
        vel = this.velocity,
        linearDamping = pow(1 - this.linearDamping, dt),
        matrix = this.matrix,
        aabb = this.aabb,
        shape,
        i;

    vel.x += force.x * invMass * dt;
    vel.y += force.y * invMass * dt;
    this.angularVelocity += this.torque * this.invInertia * dt;

    force.x = force.y = this.torque = 0;

    vel.x *= linearDamping;
    vel.y *= linearDamping;

    this.angularVelocity *= pow(1 - this.angularDamping, dt);

    if (this.sleepState !== SleepState.Sleeping) {

        pos.x += vel.x * dt;
        pos.y += vel.y * dt;

        this.rotation += this.angularVelocity * dt;

        matrix.compose(pos, VEC2_SCALE, this.rotation);
        aabb.clear();

        i = shapes.length;
        while (i--) {
            shape = shapes[i];
            shape.update(matrix);
            aabb.union(shape.aabb);
        }
    }
};


P2Rigidbody.prototype.clear = function () {
    var shapes = this.shapes,
        i = shapes.length;

    while (i--) this.removeShape(shapes[i]);

    return this;
};


P2Rigidbody.prototype.applyForce = function (force, worldPoint) {
    if (this.motionState === MotionState.Static) return;
    if (this.sleepState === SleepState.Sleeping) this.wake();
    var pos = this.position,
        f = this.force,
        fx = force.x,
        fy = force.y,
        px, py;

    worldPoint = worldPoint || pos;

    px = worldPoint.x - pos.x;
    py = worldPoint.y - pos.y;

    f.x += fx;
    f.y += fy;

    this.torque += px * fy - py * fx;
};


P2Rigidbody.prototype.applyTorque = function (torque) {
    if (this.motionState === MotionState.Static) return;
    if (this.sleepState === SleepState.Sleeping) this.wake();

    this.torque += torque;
};


P2Rigidbody.prototype.applyImpulse = function (impulse, worldPoint) {
    if (this.motionState === MotionState.Static) return;
    if (this.sleepState === SleepState.Sleeping) this.wake();
    var pos = this.position,
        invMass = this.invMass,
        velocity = this.velocity,
        ix = impulse.x,
        iy = impulse.y,
        px, py;

    worldPoint = worldPoint || pos;

    px = worldPoint.x - pos.x;
    py = worldPoint.y - pos.y;

    velocity.x += ix * invMass;
    velocity.y += iy * invMass;

    this.angularVelocity += (px * iy - py * ix) * this.invInertia;
};


P2Rigidbody.prototype.applyVelocity = function (velocity) {
    if (this.motionState === MotionState.Static) return;
    if (this.sleepState === SleepState.Sleeping) this.wake();
    var vel = this.velocity;

    vel.x += velocity.x;
    vel.y += velocity.y;
};


P2Rigidbody.prototype.applyAngularVelocity = function (angularVelocity) {
    if (this.motionState === MotionState.Static) return;
    if (this.sleepState === SleepState.Sleeping) this.wake();

    this.angularVelocity += angularVelocity;
};


var totalCentroid = new Vec2,
    centroid = new Vec2;
P2Rigidbody.prototype.resetMassData = function () {
    if (this.motionState !== MotionState.Dynamic) return;
    var shapes = this.shapes,
        shape,
        totalMass = 0,
        totalInertia = 0,
        mass, inertia,
        i;

    totalCentroid.x = totalCentroid.y = 0;

    i = shapes.length;
    while (i--) {
        shape = shapes[i];

        shape.centroid(centroid);
        mass = shape.area() * shape.density;
        inertia = shape.inertia(mass);

        totalCentroid.add(centroid.smul(mass));
        totalMass += mass;
        totalInertia += inertia;
    }

    centroid.copy(totalCentroid.sdiv(totalMass));

    this.setMass(totalMass);
    this.setInertia(totalInertia - totalMass * centroid.lengthSq());
};


P2Rigidbody.prototype.setMotionState = function (motionState) {
    if (this.motionState === motionState) return;

    this.motionState = motionState;

    this.velocity.set(0, 0);
    this.force.set(0, 0);
    this.angularVelocity = this.torque = 0;

    this.wake();
};


P2Rigidbody.prototype.setInertia = function (inertia) {

    this.inertia = inertia;
    this.invInertia = inertia > 0.0 ? 1.0 / inertia : 0.0;
};


P2Rigidbody.prototype.setMass = function (mass) {

    this.mass = mass;
    this.invMass = mass > 0.0 ? 1.0 / mass : 0.0;
};


P2Rigidbody.prototype.isAwake = function () {

    return this.sleepState === SleepState.Awake;
};


P2Rigidbody.prototype.isSleepy = function () {

    return this.sleepState === SleepState.Sleepy;
};


P2Rigidbody.prototype.isSleeping = function () {

    return this.sleepState === SleepState.Sleeping;
};


P2Rigidbody.prototype.isStatic = function () {

    return this.motionState === MotionState.Static;
};


P2Rigidbody.prototype.isDynamic = function () {

    return this.motionState === MotionState.Dynamic;
};


P2Rigidbody.prototype.isKinematic = function () {

    return this.motionState === MotionState.Kinematic;
};


P2Rigidbody.prototype.wake = function () {

    if (this.sleepState === SleepState.Sleeping) this.emit("wake");
    this.sleepState = SleepState.Awake;
};


P2Rigidbody.prototype.sleep = function () {

    if (this.sleepState !== SleepState.Sleeping) this.emit("sleep");
    this.sleepState = SleepState.Sleeping;
};


P2Rigidbody.prototype.addShape = function (shape) {
    var shapes = this.shapes,
        index = shapes.indexOf(shape);

    if (index === -1) {
        shape.body = this;

        shapes.push(shape);

        if (this.space) {
            shape.update(this.matrix);
            this.resetMassData();
        }
    } else {
        Log.error("P2Rigidbody.addShape: Shape already attached to Body");
    }

    return this;
};


P2Rigidbody.prototype.addShapes = function () {

    for (var i = arguments.length; i--;) this.addShape(arguments[i]);
    return this;
};


P2Rigidbody.prototype.removeShape = function (shape) {
    var shapes = this.shapes,
        index = shapes.indexOf(shape);

    if (index !== -1) {
        shape.body = undefined;

        shapes.splice(index, 1);

        if (this.space) this.resetMassData();
    } else {
        Log.error("P2Rigidbody.removeShape: Shape not attached to Body");
    }

    return this;
};


P2Rigidbody.prototype.removeShapes = function () {

    for (var i = arguments.length; i--;) this.removeShape(arguments[i]);
    return this;
};


P2Rigidbody.prototype.forEachShape = function (fn, ctx) {
    var shapes = this.shapes,
        i = shapes.length;

    if (ctx) {
        while (i--) {
            if (fn.call(ctx, shapes[i], i, shapes) === false) break;
        }
    } else {
        while (i--) {
            if (fn(shapes[i], i, shapes) === false) break;
        }
    }

    return this;
};


P2Rigidbody.prototype.sleepTick = function (time) {

    if (this.allowSleep) {
        var sleepState = this.sleepState,
            velSq = this.velocity.lengthSq(),
            sleepVelocityLimit = this.sleepVelocityLimit * this.sleepVelocityLimit,
            aVel = this.angularVelocity,
            sleepAngularVelocityLimit = this.sleepAngularVelocityLimit;

        if (sleepState === SleepState.Awake && (velSq < sleepVelocityLimit && aVel < sleepAngularVelocityLimit)) {
            this.sleepState = SleepState.Sleepy;
            this._sleepTime = time;
        } else if (sleepState === SleepState.Sleepy && (velSq > sleepVelocityLimit || aVel > sleepAngularVelocityLimit)) {
            this.wake();
        } else if (sleepState === SleepState.Sleepy && (time - this._lastSleepyTime) > this.sleepTimeLimit) {
            this.sleep();
        }
    }
};


P2Rigidbody.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);
    var shapes = this.shapes,
        jsonShapes = json.shapes || (json.shapes = []),
        i = shapes.length;

    json.position = this.position.toJSON(json.position);
    json.velocity = this.velocity.toJSON(json.velocity);
    json.force = this.force.toJSON(json.force);

    json.rotation = this.rotation;
    json.angularVelocity = this.angularVelocity;
    json.torque = this.torque;

    json.motionState = this.motionState;

    json.linearDamping = this.linearDamping;

    json.mass = this.mass;
    json.invMass = this.invMass;

    json.allowSleep = this.allowSleep;
    json.sleepState = this.sleepState;

    json.angularDamping = this.angularDamping;

    while (i--) jsonShapes[i] = shapes[i].toJSON(jsonShapes[i]);

    return json;
};


P2Rigidbody.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);
    var jsonShapes = json.shapes || (json.shapes = []),
        i = jsonShapes.length;

    this.position.fromJSON(json.position);
    this.velocity.fromJSON(json.velocity);
    this.force.fromJSON(json.force);

    this.rotation = json.rotation;
    this.angularVelocity = json.angularVelocity;
    this.torque = json.torque;

    this.motionState = json.motionState;

    this.linearDamping = json.linearDamping;

    this.mass = json.mass;
    this.invMass = json.invMass;

    this.allowSleep = json.allowSleep;
    this.sleepState = json.sleepState;

    this.angularDamping = json.angularDamping;

    while (i--) this.addShape(Class.fromJSON(jsonShapes[i]));

    return this;
};


module.exports = P2Rigidbody;

},{"../../base/class":8,"../../base/log":14,"../../math/aabb2":100,"../../math/mat32":105,"../../math/vec2":111,"../p2enums":128}],126:[function(require,module,exports){
var Class = require("../../base/class");
var Vec2 = require("../../math/vec2");
var P2Enums = require("../p2enums");
var P2Shape = require("./p2shape");
"use strict";


var ShapeType = P2Enums.ShapeType,

    abs = Math.abs,
    sqrt = Math.sqrt,
    PI = Math.PI;


function P2Segment(opts) {
    opts || (opts = {});

    P2Shape.call(this, opts);

    this.type = ShapeType.Segment;

    this.a = opts.a != undefined ? opts.a : new Vec2(-0.5, 0.0);
    this.b = opts.b != undefined ? opts.b : new Vec2(0.5, 0.0);

    this._a = this.a.clone();
    this._b = this.b.clone();
    this._normal = new Vec2().vsub(this._b, this._a).perp().normalize();

    this.radius = opts.radius != undefined ? abs(opts.radius) : 0.5;
}

P2Shape.extend(P2Segment);


P2Segment.prototype.copy = function (other) {
    P2Shape.prototype.copy.call(this, other);

    this.a.copy(other.a);
    this.b.copy(other.b);

    this.radius = other.radius;

    return this;
};


P2Segment.prototype.pointQuery = function (p) {
    if (!this.aabb.contains(p)) return false;
    var r = this.radius,
        a = this._a,
        b = this._b,
        n = this._normal,
        ax = a.x,
        ay = a.y,
        bx = b.x,
        by = b.y,
        nx = n.x,
        ny = n.y,
        px = p.x,
        py = p.y,

        dn = (nx * px + ny * py) - (ax * nx + ay * ny),
        dist = abs(dn),
        dt, dta, dtb, dx, dy;

    if (dist > r) return false;

    dt = px * ny - py * nx;
    dta = ax * ny - ay * nx;
    dtb = bx * ny - by * nx;

    if (dt <= dta) {
        if (dt < dta - r) return false;

        dx = px - ax;
        dy = py - ay;

        return (dx * dx + dy * dy) < (r * r);
    } else if (dt > dtb) {
        if (dt > dtb + r) return false;

        dx = px - bx;
        dy = py - by;

        return (dx * dx + dy * dy) < (r * r);
    }

    return true;
};


P2Segment.prototype.centroid = function (v) {
    var localPosition = this.localPosition,
        a = this.a,
        b = this.b;

    v.x = localPosition.x + (a.x + b.x) * 0.5;
    v.y = localPosition.y + (a.y + b.y) * 0.5;

    return v;
};


P2Segment.prototype.area = function () {
    var a = this.a,
        b = this.b,
        r = this.radius,
        abx = b.x - a.x,
        aby = b.y - a.y,
        l = abx * abx + aby * aby;

    l = l === 0.0 ? 0.0 : sqrt(l);

    return r * (PI * r + 2 * l);
};


var inv12 = 1.0 / 12.0;
P2Segment.prototype.inertia = function (mass) {
    var localPosition = this.localPosition,
        lx = localPosition.x,
        ly = localPosition.y,
        a = this.a,
        b = this.b,
        ax = lx + a.x,
        ay = ly + a.y,
        bx = lx + b.x,
        by = ly + b.y,
        abx = bx - ax,
        aby = by - ay,
        lsq = abx * abx + aby * aby,
        x = (ax + bx) * 0.5,
        y = (ay + by) * 0.5;

    return mass * (lsq * inv12 + (x * x + y * y));
};


var VEC2_SCALE = new Vec2(1.0, 1.0);
P2Segment.prototype.update = function (matrix) {
    var localMatrix = this.matrix,
        matrixWorld = this.matrixWorld,
        localPos = this.localPosition,
        pos = this.position,
        _a = this._a,
        _b = this._b,
        _normal = this._normal,
        a = this.a,
        b = this.b,
        radius = this.radius,
        aabb = this.aabb,
        min = aabb.min,
        max = aabb.max,
        l, r, b, t;

    localMatrix.compose(localPos, VEC2_SCALE, this.localRotation);
    matrixWorld.mmul(matrix, localMatrix);

    pos.x = localPos.x;
    pos.y = localPos.y;
    pos.transformMat32(matrix);

    _a.x = a.x;
    _a.y = a.y;
    _a.transformMat32(matrix);

    _b.x = b.x;
    _b.y = b.y;
    _b.transformMat32(matrix);

    _normal.x = -(_b.y - _a.y);
    _normal.y = _b.x - _a.x;
    _normal.normalize();

    if (_a.x < _b.x) {
        l = _a.x;
        r = _b.x;
    } else {
        l = _b.x;
        r = _a.x;
    }

    if (_a.y < _b.y) {
        b = _a.y;
        t = _b.y;
    } else {
        b = _b.y;
        t = _a.y;
    }

    min.x = l - radius;
    min.y = b - radius;
    max.x = r + radius;
    max.y = t + radius;
};


P2Segment.prototype.toJSON = function (json) {
    json = P2Shape.prototype.toJSON.call(this, json);

    json.a = this.a.toJSON(json.a);
    json.b = this.b.toJSON(json.b);

    json.radius = this.radius;

    return json;
};


P2Segment.prototype.fromJSON = function (json) {
    P2Shape.prototype.fromJSON.call(this, json);

    this.a.fromJSON(json.a);
    this.b.fromJSON(json.b);

    this.radius = json.radius;

    return this;
};


module.exports = P2Segment;

},{"../../base/class":8,"../../math/vec2":111,"../p2enums":128,"./p2shape":127}],127:[function(require,module,exports){
var Class = require("../../base/class");
var Vec2 = require("../../math/vec2");
var Mat32 = require("../../math/mat32");
var AABB2 = require("../../math/aabb2");
"use strict";


function P2Shape(opts) {
    opts || (opts = {});

    Class.call(this);

    this.type = -1;

    this.body = undefined;

    this.density = opts.density != undefined ? opts.density : 1;

    this.localPosition = opts.position != undefined ? opts.position : new Vec2;
    this.localRotation = opts.rotation != undefined ? opts.rotation : 0;

    this.position = new Vec2;
    this.rotation = 0;

    this.matrix = new Mat32;
    this.matrixWorld = new Mat32;

    this.friction = opts.friction != undefined ? opts.friction : 0.5;
    this.elasticity = opts.elasticity != undefined ? opts.elasticity : 0.25;

    this.isTrigger = opts.isTrigger != undefined ? !!opts.isTrigger : false;

    this.filterMask = opts.filterMask != undefined ? opts.filterMask : 1;
    this.filterGroup = opts.filterGroup != undefined ? opts.filterGroup : 1;

    this.aabb = new AABB2;
}

Class.extend(P2Shape);


P2Shape.prototype.copy = function (other) {

    this.density = other.density;

    this.localPosition.copy(other.localPosition);
    this.localRotation = other.localRotation;

    this.friction = other.friction;
    this.elasticity = other.elasticity;

    this.isTrigger = other.isTrigger;

    this.filterMask = other.filterMask;
    this.filterGroup = other.filterGroup;

    return this;
};


P2Shape.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.density = this.density;

    json.localPosition = this.localPosition.toJSON(json.localPosition);
    json.localRotation = this.localRotation;

    json.friction = this.friction;
    json.elasticity = this.elasticity;

    json.isTrigger = this.isTrigger;

    json.filterMask = this.filterMask;
    json.filterGroup = this.filterGroup;

    return json;
};


P2Shape.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.density = json.density;

    this.localPosition.fromJSON(json.localPosition);
    this.localRotation = json.localRotation;

    this.friction = json.friction;
    this.elasticity = json.elasticity;

    this.isTrigger = json.isTrigger;

    this.filterMask = json.filterMask;
    this.filterGroup = json.filterGroup;

    return this;
};


module.exports = P2Shape;

},{"../../base/class":8,"../../math/aabb2":100,"../../math/mat32":105,"../../math/vec2":111}],128:[function(require,module,exports){
var Enum = require("../base/enum");
"use strict";


module.exports = {
    BodyType: new Enum("Particle RigidBody"),
    ShapeType: new Enum("Convex Circle Segment"),
    MotionState: new Enum("Dynamic Static Kinematic"),
    SleepState: new Enum("Awake Sleepy Sleeping")
};

},{"../base/enum":12}],129:[function(require,module,exports){
var Mathf = require("../math/mathf");
"use strict";


var clamp = Mathf.clamp;

/**
 * @class P2Solver
 * @brief World Solver
 * @param Object opts sets Class properties from passed Object
 */
function P2Solver(opts) {
    opts || (opts = {});

    /**
     * @property Number iterations
     * @brief max number of iterations
     * @memberof P2Solver
     */
    this.iterations = opts.iterations != undefined ? opts.iterations : 10;

    /**
     * @property Number tolerance
     * @memberof P2Solver
     */
    this.tolerance = opts.tolerance != undefined ? opts.tolerance : 1e-6;
}

/**
 * @method solve
 * @memberof P2Solver
 * @brief solves all equations
 * @param Number h
 * @param Array equations
 */
P2Solver.prototype.solve = function (h, equations) {
    var num = equations.length,
        eq, bi, bj,
        vlambdai, vlambdaj, vi, vj,
        iterations = this.iterations,
        iter = 0,
        toleranceSq = this.tolerance * this.tolerance,
        GWlambda, lambda, deltaLambda, deltaLambdaTotal,
        i, j;

    if (num > -1) {

        i = num;
        while (i--) {
            eq = equations[i];

            eq.updateConstants(h);
            eq.init(h);
        }

        i = iterations;
        while (i--) {

            iter++;
            deltaLambdaTotal = 0;

            j = num;
            while (j--) {
                eq = equations[j];

                GWlambda = eq.calculateGWlambda();
                lambda = eq.lambda;
                deltaLambda = eq.invC * (eq.B - GWlambda - eq.epsilon * lambda);

                eq.lambda = clamp(lambda + deltaLambda, eq.minForce, eq.maxForce);
                deltaLambda = eq.lambda - lambda;

                eq.addToLambda(deltaLambda);
                deltaLambdaTotal += deltaLambda;
            }

            if (deltaLambdaTotal * deltaLambdaTotal < toleranceSq) break;
        }

        i = num;
        while (i--) {
            eq = equations[i];

            bi = eq.bi;
            vi = bi.velocity;
            vlambdai = bi.vlambda;
            bj = eq.bj;
            vj = bj.velocity;
            vlambdaj = bj.vlambda;

            vi.x += vlambdai.x;
            vi.y += vlambdai.y;

            vj.x += vlambdaj.x;
            vj.y += vlambdaj.y;

            vlambdai.x = vlambdai.y = vlambdaj.x = vlambdaj.y = 0;

            if (bi.wlambda != undefined) {
                bi.angularVelocity += bi.wlambda;
                bi.wlambda = 0;
            }
            if (bj.wlambda != undefined) {
                bj.angularVelocity += bj.wlambda;
                bj.wlambda = 0;
            }
        }
    }

    return iter;
};


module.exports = P2Solver;
},{"../math/mathf":107}],130:[function(require,module,exports){
var Class = require("../base/class");
var Time = require("../base/time");
var ObjectPool = require("../base/object_pool");
var Vec2 = require("../math/vec2");
var P2Enums = require("./p2enums");
var P2Solver = require("./p2solver");
var P2Broadphase = require("./collision/p2broadphase");
var P2Nearphase = require("./collision/p2nearphase");
var P2Friction = require("./constraints/p2friction");
var Log = require("../base/log");
"use strict";


var now = Time.now,
    MotionState = P2Enums.MotionState,

    FRICTION_POOL = new ObjectPool(P2Friction);


function P2Space(opts) {
    opts || (opts = {});

    Class.call(this, opts);

    this.useGravity = opts.useGravity != undefined ? !!opts.useGravity : true;
    this.gravity = opts.gravity != undefined ? opts.gravity : new Vec2(0.0, -9.801);

    this.time = 0.0;

    this.broadphase = new P2Space.DefaultBroadPhase(opts.broadphase);
    this.nearphase = new P2Space.DefaultNearPhase(opts.nearphase);

    this.solver = new P2Space.DefaultSolver(opts.solver);

    this.bodies = [];
    this._bodyHash = {};

    this._pairsi = [];
    this._pairsj = [];

    this.contacts = [];
    this.frictions = [];
    this.constraints = [];

    this._collisionMatrix = [];
    this._collisionMatrixPrevious = [];

    this.stats = {
        step: 0.0,
        solve: 0.0,
        integrate: 0.0,
        nearphase: 0.0,
        broadphase: 0.0
    };
}

Class.extend(P2Space);


P2Space.DefaultBroadPhase = P2Broadphase;
P2Space.DefaultNearPhase = P2Nearphase;
P2Space.DefaultSolver = P2Solver;
P2Space.FRICTION_POOL = FRICTION_POOL;


P2Space.prototype.collisionMatrixGet = function (i, j, current) {
    var tmp = j;

    if (j > i) {
        j = i;
        i = tmp;
    }
    i = (i * (i + 1) >> 1) + j - 1;

    return (current === undefined || current) ? this._collisionMatrix[i] : this._collisionMatrixPrevious[i];
};


P2Space.prototype.collisionMatrixSet = function (i, j, value, current) {
    var tmp = j;

    if (j > i) {
        j = i;
        i = tmp;
    }

    i = (i * (i + 1) >> 1) + j - 1;

    if (current == undefined || current) {
        this._collisionMatrix[i] = value;
    } else {
        this._collisionMatrixPrevious[i] = value;
    }
};


P2Space.prototype.collisionMatrixTick = function () {
    var collisionMatrix = this._collisionMatrixPrevious,
        i;

    this._collisionMatrixPrevious = this._collisionMatrix;
    this._collisionMatrix = collisionMatrix;

    i = collisionMatrix.length;
    while (i--) collisionMatrix[i] = 0;
};


P2Space.prototype.clear = function () {
    var bodies = this.bodies,
        i = bodies.length;

    while (i--) this.removeBody(bodies[i]);

    return this;
};


P2Space.prototype.addBody = function (body) {
    var bodies = this.bodies,
        index = bodies.indexOf(body);

    if (index === -1) {
        bodies.push(body);
        this._bodyHash[body._id] = body;

        body.space = this;
        body._index = bodies.length - 1;

        body.init();
    } else {
        Log.error("P2Space.addBody: Body already member of P2Space");
    }

    return this;
};


P2Space.prototype.addBodies = function () {
    var i = arguments.length;

    while (i--) this.addBody(arguments[i]);
    return this;
};


P2Space.prototype.removeBody = function (body) {
    var bodies = this.bodies,
        index = bodies.indexOf(body);

    if (index !== -1) {
        body.space = undefined;
        body._index = -1;

        bodies.splice(index, 1);
        this._bodyHash[body._id] = undefined;
    } else {
        Log.error("P2Space.addBody: Body not member of P2Space");
    }

    return this;
};


P2Space.prototype.removeBodies = function () {
    var i = arguments.length;

    while (i--) this.removeBody(arguments[i]);
    return this;
};


P2Space.prototype.addConstraint = function (constraint) {
    var constraints = this.constraints,
        index = constraints.indexOf(constraint);

    if (index === -1) {
        constraints.push(constraint);
    } else {
        Log.error("P2Space.addConstraint: Constraint already member of P2Space");
    }

    return this;
};


P2Space.prototype.removeConstraint = function (constraint) {
    var constraints = this.constraints,
        index = constraints.indexOf(constraint);

    if (index !== -1) {
        constraints.splice(index, 1);
    } else {
        Log.error("P2Space.removeConstraint: Constraint not a member of P2Space");
    }

    return this;
};


P2Space.prototype.findBodyByPoint = function (p) {
    var bodies = this.bodies,
        body, shapes, shape,
        i = bodies.length,
        j;

    while (i--) {
        body = bodies[i];
        if (!body) continue;

        shapes = body.shapes;
        j = shapes.length;
        while (j--) {
            shape = shapes[j];
            if (!shape) continue;

            if (shape.pointQuery(p)) return body;
        }
    }

    return undefined;
};


P2Space.prototype.findBodyById = function (id) {

    return this._bodyHash[id];
};


P2Space.prototype.step = function (dt) {
    var stepStart = now(),
        stats = this.stats,
        g = this.gravity,
        gx = g.x,
        gy = g.y,
        bodies = this.bodies,
        numBodies = bodies.length,
        solver = this.solver,
        constraints = this.constraints,
        pairsi = this._pairsi,
        pairsj = this._pairsj,
        contacts = this.contacts,
        frictions = this.frictions,
        constraint, time, start, body, force, mass,
        bi, bj, c, cp, cn, u, slipForce, fc, fcp, fct,
        i;

    time = this.time += dt;

    if (this.useGravity) {
        i = numBodies;
        while (i--) {
            body = bodies[i];

            if (body.motionState === MotionState.Dynamic) {
                force = body.force;
                mass = body.mass;

                force.x += gx * mass;
                force.y += gy * mass;
            }
        }
    }

    this.collisionMatrixTick();

    start = now();
    this.broadphase.collisions(bodies, pairsi, pairsj);
    stats.broadphase = now() - start;

    start = now();
    this.nearphase.collisions(pairsi, pairsj, contacts);
    stats.nearphase = now() - start;

    start = now();
    solver.solve(dt, contacts);

    FRICTION_POOL.clear();
    frictions.length = 0;

    i = contacts.length;
    while (i--) {
        c = contacts[i];

        if (c.u > 0.0) {
            bi = c.bi;
            bj = c.bj;
            fc = FRICTION_POOL.create();
            u = c.u;

            slipForce = u * c.lambda;
            fc.minForce = -slipForce;
            fc.maxForce = slipForce;

            fc.bi = bi;
            fc.bj = bj;

            cp = c.p;
            fcp = fc.p;

            fcp.x = cp.x;
            fcp.y = cp.y;

            cn = c.n;
            fct = fc.t;

            fct.x = -cn.y;
            fct.y = cn.x;

            frictions.push(fc);
        }
    }

    solver.solve(dt, frictions);

    i = constraints.length;
    while (i--) {
        constraint = constraints[i];
        constraint.update();
        solver.solve(dt, constraint.equations);
    }
    stats.solve = now() - start;

    start = now();
    i = numBodies;
    while (i--) {
        body = bodies[i];
        if (!body) continue;

        body.update(dt);
        body.sleepTick(time);
    }
    stats.integrate = now() - start;

    stats.step = now() - stepStart;
};


P2Space.prototype.toJSON = function (json) {
    json = Class.prototype.toJSON.call(this, json);

    json.useGravity = this.useGravity;
    json.gravity = this.gravity.toJSON(json.gravity);
    json.broadphase = this.broadphase.toJSON(json.broadphase);

    return json;
};


P2Space.prototype.fromJSON = function (json) {
    Class.prototype.fromJSON.call(this, json);

    this.useGravity = json.useGravity;
    this.gravity.fromJSON(json.gravity);
    this.broadphase.fromJSON(json.broadphase);

    return this;
};


module.exports = P2Space;

},{"../base/class":8,"../base/log":14,"../base/object_pool":15,"../base/time":18,"../math/vec2":111,"./collision/p2broadphase":114,"./collision/p2nearphase":116,"./constraints/p2friction":121,"./p2enums":128,"./p2solver":129}],131:[function(require,module,exports){
"use strict";


function Phys2D() {

    this.P2Broadphase = require("./collision/p2broadphase");
    this.P2BroadphaseSpatialHash = require("./collision/p2broadphase_spatialhash");
    this.P2Nearphase = require("./collision/p2nearphase");

    this.P2Circle = require("./objects/p2circle");
    this.P2Convex = require("./objects/p2convex");
    this.P2Rect = require("./objects/p2rect");
    this.P2Rigidbody = require("./objects/p2rigidbody");
    this.P2Segment = require("./objects/p2segment");
    this.P2Shape = require("./objects/p2shape");

    this.P2Constraint = require("./constraints/p2constraint");
    this.P2DistanceConstraint = require("./constraints/p2distance_constraint");

    this.P2Enums = require("./p2enums");
    this.P2Space = require("./p2space");
}


module.exports = new Phys2D;

},{"./collision/p2broadphase":114,"./collision/p2broadphase_spatialhash":115,"./collision/p2nearphase":116,"./constraints/p2constraint":117,"./constraints/p2distance_constraint":119,"./objects/p2circle":122,"./objects/p2convex":123,"./objects/p2rect":124,"./objects/p2rigidbody":125,"./objects/p2segment":126,"./objects/p2shape":127,"./p2enums":128,"./p2space":130}],132:[function(require,module,exports){
"use strict";


var Device = require("./base/device"),
    Time = require("./base/time"),
    now = Time.now,

    IS_SERVER = !(typeof(window) !== "undefined" && window.document),
    IS_CLIENT = !IS_SERVER,

    defineProperty = Object.defineProperty;


if (Device.mobile) {
    window.onerror = function (message, page, line) {
        alert("line: " + line + ", page: " + page + "\nmessage: " + message);
    };
}


/**
 * Holds all accessible Classes
 * @class Xian
 */
function Xian() {

    this.Phys2D = require("./phys2d/phys2d");

    this.AudioCtx = require("./base/audio_ctx");
    this.Class = require("./base/class");
    this.Device = require("./base/device");
    this.Dom = require("./base/dom");
    this.Enum = require("./base/enum");
    this.EventEmitter = require("./base/event_emitter");
    this.ObjectPool = require("./base/object_pool");
    this.requestAnimationFrame = require("./base/request_animation_frame");
    this.io = require("./base/socket.io");
    this.Time = require("./base/time");
    this.util = require("./base/util");
    //
    this.Shader = require("./core/assets/shaders/shader");
    this.ShaderLib = require("./core/assets/shaders/shader_lib");
    this.Asset = require("./core/assets/asset");
    this.AssetLoader = require("./core/assets/asset_loader");
    this.Assets = require("./core/assets/assets");
    this.AudioClip = require("./core/assets/audio_clip");
    this.Material = require("./core/assets/material");
    this.Mesh = require("./core/assets/mesh");
    this.SpriteSheet = require("./core/assets/sprite_sheet");
    this.Texture = require("./core/assets/texture");
    this.TextureCube = require("./core/assets/texture_cube");
    //
    this.BoneComponentManager = require("./core/component_managers/bone_component_manager");
    this.Camera2DComponentManager = require("./core/component_managers/camera_2d_component_manager");
    this.CameraComponentManager = require("./core/component_managers/camera_component_manager");
    this.ComponentManager = require("./core/component_managers/component_manager");
    this.LightComponentManager = require("./core/component_managers/light_component_manager");
    this.MeshAnimationComponentManager = require("./core/component_managers/mesh_animation_component_manager");
    this.MeshFilterComponentManager = require("./core/component_managers/mesh_filter_component_manager");
    this.SpriteComponentManager = require("./core/component_managers/sprite_component_manager");
    this.Transform2DComponentManager = require("./core/component_managers/transform_2d_component_manager");
    this.TransformComponentManager = require("./core/component_managers/transform_component_manager");

    this.ParticleSystem = require("./core/components/particle_system/particle_system");
    this.AudioSource = require("./core/components/audio_source");
    this.Camera = require("./core/components/camera");
    this.Camera2D = require("./core/components/camera_2d");
    this.Component = require("./core/components/component");
    this.GUIText = require("./core/components/gui_text");
    this.GUITexture = require("./core/components/gui_texture");
    this.Light = require("./core/components/light");
    this.MeshAnimation = require("./core/components/mesh_animation");
    this.MeshFilter = require("./core/components/mesh_filter");
    this.OrbitControl = require("./core/components/orbit_control");
    this.RigidBody2D = require("./core/components/rigid_body_2d");
    this.Sprite = require("./core/components/sprite");
    this.SpriteAnimation = require("./core/components/sprite_animation");
    this.Transform = require("./core/components/transform");
    this.Transform2D = require("./core/components/transform_2d");
    //
    this.BaseGame = require("./core/game/base_game");
    //this.ClientGame = require("./core/game/client_game");
    this.Game = require("./core/game/game");
    this.Config = require("./base/config");
    this.Log = require("./base/log");
    //
    this.GUIComponentManager = require("./core/gui/component_managers/gui_component_manager");

    this.GUIComponent = require("./core/gui/components/gui_component");
    //this.GUIContent = require("./core/gui/components/gui_content");
    this.GUITransform = require("./core/gui/components/gui_transform");
    //
    this.GUI = require("./core/gui/gui");
    this.GUIObject = require("./core/gui/gui_object");
    //this.GUIStyle = require("./core/gui/gui_style");
    //this.GUIStyleState = require("./core/gui/gui_style_state");
    //
    this.Handler = require("./core/input/handler");
    this.Input = require("./core/input/input");
    //
    this.Canvas = require("./core/renderer/canvas");
    this.RenderTarget = require("./core/renderer/render_target");
    this.Renderer = require("./core/renderer/renderer");
    this.ShaderChunks = require("./core/renderer/shader_chunks");

    this.World = require("./core/world/world");
    this.World2D = require("./core/world/world_2d");
    //
    this.Enums = require("./core/enums");
    this.GameObject = require("./core/game_object");
    this.Prefab = require("./core/prefab");
    this.Scene = require("./core/scene");
    //
    this.AABB2 = require("./math/aabb2");
    this.AABB3 = require("./math/aabb3");
    this.Color = require("./math/color");
    this.Mat2 = require("./math/mat2");
    this.Mat3 = require("./math/mat3");
    this.Mat32 = require("./math/mat32");
    this.Mat4 = require("./math/mat4");
    this.Mathf = require("./math/mathf");
    this.Quat = require("./math/quat");
    this.Rect = require("./math/rect");
    this.RectOffset = require("./math/rect_offset");
    this.Vec2 = require("./math/vec2");
    this.Vec3 = require("./math/vec3");
    this.Vec4 = require("./math/vec4");
}


defineProperty(Xian.prototype, "isServer", {
    get: function () {
        return IS_SERVER;
    }
});


defineProperty(Xian.prototype, "isClient", {
    get: function () {
        return IS_CLIENT;
    }
});


/**
 * attaches Xian to window/global and all subclasses
 */
Xian.prototype.globalize = function () {

    for (var key in this) window[key] = this[key];
    window.Xian = this;
};

/**
 * benchmarks function console.logs number of operations / second
 * @param String name
 * @param Function fn
 */
Xian.prototype.benchmark = function (name, fn, times) {
    times || (times = 1000);
    var start = 0.0,
        time = 0.0,
        i = times;

    while (i--) {
        start = now();
        fn();
        time += now() - start;
    }

    console.log(name + ":\n\t" + times / time + " (ops/sec)\n\t" + time / times + "(avg/call)");
};


module.exports = new Xian();

},{"./base/audio_ctx":7,"./base/class":8,"./base/config":9,"./base/device":10,"./base/dom":11,"./base/enum":12,"./base/event_emitter":13,"./base/log":14,"./base/object_pool":15,"./base/request_animation_frame":16,"./base/socket.io":17,"./base/time":18,"./base/util":19,"./core/assets/asset":20,"./core/assets/asset_loader":21,"./core/assets/assets":22,"./core/assets/audio_clip":23,"./core/assets/material":24,"./core/assets/mesh":25,"./core/assets/shaders/shader":35,"./core/assets/shaders/shader_lib":36,"./core/assets/sprite_sheet":37,"./core/assets/texture":38,"./core/assets/texture_cube":39,"./core/component_managers/bone_component_manager":40,"./core/component_managers/camera_2d_component_manager":41,"./core/component_managers/camera_component_manager":42,"./core/component_managers/component_manager":43,"./core/component_managers/light_component_manager":44,"./core/component_managers/mesh_animation_component_manager":45,"./core/component_managers/mesh_filter_component_manager":46,"./core/component_managers/sprite_component_manager":47,"./core/component_managers/transform_2d_component_manager":48,"./core/component_managers/transform_component_manager":49,"./core/components/audio_source":50,"./core/components/camera":52,"./core/components/camera_2d":53,"./core/components/component":54,"./core/components/gui_text":56,"./core/components/gui_texture":57,"./core/components/light":58,"./core/components/mesh_animation":59,"./core/components/mesh_filter":60,"./core/components/orbit_control":61,"./core/components/particle_system/particle_system":66,"./core/components/rigid_body_2d":68,"./core/components/sprite":69,"./core/components/sprite_animation":70,"./core/components/transform":71,"./core/components/transform_2d":72,"./core/enums":73,"./core/game/base_game":74,"./core/game/game":75,"./core/game_object":77,"./core/gui/component_managers/gui_component_manager":78,"./core/gui/components/gui_component":79,"./core/gui/components/gui_transform":80,"./core/gui/gui":81,"./core/gui/gui_object":82,"./core/input/handler":87,"./core/input/input":88,"./core/prefab":91,"./core/renderer/canvas":92,"./core/renderer/render_target":93,"./core/renderer/renderer":95,"./core/renderer/shader_chunks":96,"./core/scene":97,"./core/world/world":98,"./core/world/world_2d":99,"./math/aabb2":100,"./math/aabb3":101,"./math/color":102,"./math/mat2":103,"./math/mat3":104,"./math/mat32":105,"./math/mat4":106,"./math/mathf":107,"./math/quat":108,"./math/rect":109,"./math/rect_offset":110,"./math/vec2":111,"./math/vec3":112,"./math/vec4":113,"./phys2d/phys2d":131}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwiZXhhbXBsZXNcXHRlc3RcXGluZGV4LmpzIiwibm9kZV9tb2R1bGVzXFxicm93c2VyaWZ5XFxub2RlX21vZHVsZXNcXGJ1ZmZlclxcaW5kZXguanMiLCJub2RlX21vZHVsZXNcXGJyb3dzZXJpZnlcXG5vZGVfbW9kdWxlc1xcYnVmZmVyXFxub2RlX21vZHVsZXNcXGJhc2U2NC1qc1xcbGliXFxiNjQuanMiLCJub2RlX21vZHVsZXNcXGJyb3dzZXJpZnlcXG5vZGVfbW9kdWxlc1xcYnVmZmVyXFxub2RlX21vZHVsZXNcXGllZWU3NTRcXGluZGV4LmpzIiwibm9kZV9tb2R1bGVzXFxicm93c2VyaWZ5XFxub2RlX21vZHVsZXNcXGJ1ZmZlclxcbm9kZV9tb2R1bGVzXFxpcy1hcnJheVxcaW5kZXguanMiLCJub2RlX21vZHVsZXNcXGJyb3dzZXJpZnlcXG5vZGVfbW9kdWxlc1xccHJvY2Vzc1xcYnJvd3Nlci5qcyIsInNyY1xceGlhblxcYmFzZVxcYXVkaW9fY3R4LmpzIiwic3JjXFx4aWFuXFxiYXNlXFxjbGFzcy5qcyIsInNyY1xceGlhblxcYmFzZVxcY29uZmlnLmpzIiwic3JjXFx4aWFuXFxiYXNlXFxkZXZpY2UuanMiLCJzcmNcXHhpYW5cXGJhc2VcXGRvbS5qcyIsInNyY1xceGlhblxcYmFzZVxcZW51bS5qcyIsInNyY1xceGlhblxcYmFzZVxcZXZlbnRfZW1pdHRlci5qcyIsInNyY1xceGlhblxcYmFzZVxcbG9nLmpzIiwic3JjXFx4aWFuXFxiYXNlXFxvYmplY3RfcG9vbC5qcyIsInNyY1xceGlhblxcYmFzZVxccmVxdWVzdF9hbmltYXRpb25fZnJhbWUuanMiLCJzcmNcXHhpYW5cXGJhc2VcXHNvY2tldC5pby5qcyIsInNyY1xceGlhblxcYmFzZVxcdGltZS5qcyIsInNyY1xceGlhblxcYmFzZVxcdXRpbC5qcyIsInNyY1xceGlhblxcY29yZVxcYXNzZXRzXFxhc3NldC5qcyIsInNyY1xceGlhblxcY29yZVxcYXNzZXRzXFxhc3NldF9sb2FkZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcYXNzZXRzLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxhc3NldHNcXGF1ZGlvX2NsaXAuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcbWF0ZXJpYWwuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcbWVzaC5qcyIsInNyY1xceGlhblxcY29yZVxcYXNzZXRzXFxtZXNoX2JvbmUuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcc2hhZGVyc1xcbm9ybWFsXFxkaWZmdXNlLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxhc3NldHNcXHNoYWRlcnNcXG5vcm1hbFxcbm9ybWFsX2RpZmZ1c2UuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcc2hhZGVyc1xcbm9ybWFsXFxub3JtYWxfc3BlY3VsYXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcc2hhZGVyc1xcbm9ybWFsXFxwYXJhbGxheF9kaWZmdXNlLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxhc3NldHNcXHNoYWRlcnNcXG5vcm1hbFxcc3BlY3VsYXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcc2hhZGVyc1xcbm9ybWFsXFx1bmxpdC5qcyIsInNyY1xceGlhblxcY29yZVxcYXNzZXRzXFxzaGFkZXJzXFxwYXJ0aWNsZVxcdW5saXQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGFzc2V0c1xcc2hhZGVyc1xccmVmbGVjdGl2ZVxccmVmbGVjdGl2ZV92ZXJ0ZXhfbGl0LmpzIiwic3JjXFx4aWFuXFxjb3JlXFxhc3NldHNcXHNoYWRlcnNcXHNoYWRlci5qcyIsInNyY1xceGlhblxcY29yZVxcYXNzZXRzXFxzaGFkZXJzXFxzaGFkZXJfbGliLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxhc3NldHNcXHNwcml0ZV9zaGVldC5qcyIsInNyY1xceGlhblxcY29yZVxcYXNzZXRzXFx0ZXh0dXJlLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxhc3NldHNcXHRleHR1cmVfY3ViZS5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50X21hbmFnZXJzXFxib25lX2NvbXBvbmVudF9tYW5hZ2VyLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRfbWFuYWdlcnNcXGNhbWVyYV8yZF9jb21wb25lbnRfbWFuYWdlci5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50X21hbmFnZXJzXFxjYW1lcmFfY29tcG9uZW50X21hbmFnZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudF9tYW5hZ2Vyc1xcY29tcG9uZW50X21hbmFnZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudF9tYW5hZ2Vyc1xcbGlnaHRfY29tcG9uZW50X21hbmFnZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudF9tYW5hZ2Vyc1xcbWVzaF9hbmltYXRpb25fY29tcG9uZW50X21hbmFnZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudF9tYW5hZ2Vyc1xcbWVzaF9maWx0ZXJfY29tcG9uZW50X21hbmFnZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudF9tYW5hZ2Vyc1xcc3ByaXRlX2NvbXBvbmVudF9tYW5hZ2VyLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRfbWFuYWdlcnNcXHRyYW5zZm9ybV8yZF9jb21wb25lbnRfbWFuYWdlci5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50X21hbmFnZXJzXFx0cmFuc2Zvcm1fY29tcG9uZW50X21hbmFnZXIuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXGF1ZGlvX3NvdXJjZS5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xcYm9uZS5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xcY2FtZXJhLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxjYW1lcmFfMmQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXGNvbXBvbmVudC5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xcZ3VpX2VsZW1lbnQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXGd1aV90ZXh0LmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxndWlfdGV4dHVyZS5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xcbGlnaHQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXG1lc2hfYW5pbWF0aW9uLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxtZXNoX2ZpbHRlci5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xcb3JiaXRfY29udHJvbC5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xccGFydGljbGVfc3lzdGVtXFxlbWl0dGVyLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxwYXJ0aWNsZV9zeXN0ZW1cXGVtaXR0ZXJfMmQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXHBhcnRpY2xlX3N5c3RlbVxccGFydGljbGUuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXHBhcnRpY2xlX3N5c3RlbVxccGFydGljbGVfMmQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXHBhcnRpY2xlX3N5c3RlbVxccGFydGljbGVfc3lzdGVtLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxwYXJ0aWNsZV9zeXN0ZW1cXHR3ZWVuLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxyaWdpZF9ib2R5XzJkLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxjb21wb25lbnRzXFxzcHJpdGUuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXHNwcml0ZV9hbmltYXRpb24uanMiLCJzcmNcXHhpYW5cXGNvcmVcXGNvbXBvbmVudHNcXHRyYW5zZm9ybS5qcyIsInNyY1xceGlhblxcY29yZVxcY29tcG9uZW50c1xcdHJhbnNmb3JtXzJkLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxlbnVtcy5qcyIsInNyY1xceGlhblxcY29yZVxcZ2FtZVxcYmFzZV9nYW1lLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxnYW1lXFxnYW1lLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxnYW1lXFxsb29wLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxnYW1lX29iamVjdC5qcyIsInNyY1xceGlhblxcY29yZVxcZ3VpXFxjb21wb25lbnRfbWFuYWdlcnNcXGd1aV9jb21wb25lbnRfbWFuYWdlci5qcyIsInNyY1xceGlhblxcY29yZVxcZ3VpXFxjb21wb25lbnRzXFxndWlfY29tcG9uZW50LmpzIiwic3JjXFx4aWFuXFxjb3JlXFxndWlcXGNvbXBvbmVudHNcXGd1aV90cmFuc2Zvcm0uanMiLCJzcmNcXHhpYW5cXGNvcmVcXGd1aVxcZ3VpLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxndWlcXGd1aV9vYmplY3QuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGlucHV0XFxheGVzLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxpbnB1dFxcYXhpcy5qcyIsInNyY1xceGlhblxcY29yZVxcaW5wdXRcXGJ1dHRvbi5qcyIsInNyY1xceGlhblxcY29yZVxcaW5wdXRcXGJ1dHRvbnMuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGlucHV0XFxoYW5kbGVyLmpzIiwic3JjXFx4aWFuXFxjb3JlXFxpbnB1dFxcaW5wdXQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXGlucHV0XFx0b3VjaC5qcyIsInNyY1xceGlhblxcY29yZVxcaW5wdXRcXHRvdWNoZXMuanMiLCJzcmNcXHhpYW5cXGNvcmVcXHByZWZhYi5qcyIsInNyY1xceGlhblxcY29yZVxccmVuZGVyZXJcXGNhbnZhcy5qcyIsInNyY1xceGlhblxcY29yZVxccmVuZGVyZXJcXHJlbmRlcl90YXJnZXQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXHJlbmRlcmVyXFxyZW5kZXJfdGFyZ2V0X2N1YmUuanMiLCJzcmNcXHhpYW5cXGNvcmVcXHJlbmRlcmVyXFxyZW5kZXJlci5qcyIsInNyY1xceGlhblxcY29yZVxccmVuZGVyZXJcXHNoYWRlcl9jaHVua3MuanMiLCJzcmNcXHhpYW5cXGNvcmVcXHNjZW5lLmpzIiwic3JjXFx4aWFuXFxjb3JlXFx3b3JsZFxcd29ybGQuanMiLCJzcmNcXHhpYW5cXGNvcmVcXHdvcmxkXFx3b3JsZF8yZC5qcyIsInNyY1xceGlhblxcbWF0aFxcYWFiYjIuanMiLCJzcmNcXHhpYW5cXG1hdGhcXGFhYmIzLmpzIiwic3JjXFx4aWFuXFxtYXRoXFxjb2xvci5qcyIsInNyY1xceGlhblxcbWF0aFxcbWF0Mi5qcyIsInNyY1xceGlhblxcbWF0aFxcbWF0My5qcyIsInNyY1xceGlhblxcbWF0aFxcbWF0MzIuanMiLCJzcmNcXHhpYW5cXG1hdGhcXG1hdDQuanMiLCJzcmNcXHhpYW5cXG1hdGhcXG1hdGhmLmpzIiwic3JjXFx4aWFuXFxtYXRoXFxxdWF0LmpzIiwic3JjXFx4aWFuXFxtYXRoXFxyZWN0LmpzIiwic3JjXFx4aWFuXFxtYXRoXFxyZWN0X29mZnNldC5qcyIsInNyY1xceGlhblxcbWF0aFxcdmVjMi5qcyIsInNyY1xceGlhblxcbWF0aFxcdmVjMy5qcyIsInNyY1xceGlhblxcbWF0aFxcdmVjNC5qcyIsInNyY1xceGlhblxccGh5czJkXFxjb2xsaXNpb25cXHAyYnJvYWRwaGFzZS5qcyIsInNyY1xceGlhblxccGh5czJkXFxjb2xsaXNpb25cXHAyYnJvYWRwaGFzZV9zcGF0aWFsaGFzaC5qcyIsInNyY1xceGlhblxccGh5czJkXFxjb2xsaXNpb25cXHAybmVhcnBoYXNlLmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXGNvbnN0cmFpbnRzXFxwMmNvbnN0cmFpbnQuanMiLCJzcmNcXHhpYW5cXHBoeXMyZFxcY29uc3RyYWludHNcXHAyY29udGFjdC5qcyIsInNyY1xceGlhblxccGh5czJkXFxjb25zdHJhaW50c1xccDJkaXN0YW5jZV9jb25zdHJhaW50LmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXGNvbnN0cmFpbnRzXFxwMmVxdWF0aW9uLmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXGNvbnN0cmFpbnRzXFxwMmZyaWN0aW9uLmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXG9iamVjdHNcXHAyY2lyY2xlLmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXG9iamVjdHNcXHAyY29udmV4LmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXG9iamVjdHNcXHAycmVjdC5qcyIsInNyY1xceGlhblxccGh5czJkXFxvYmplY3RzXFxwMnJpZ2lkYm9keS5qcyIsInNyY1xceGlhblxccGh5czJkXFxvYmplY3RzXFxwMnNlZ21lbnQuanMiLCJzcmNcXHhpYW5cXHBoeXMyZFxcb2JqZWN0c1xccDJzaGFwZS5qcyIsInNyY1xceGlhblxccGh5czJkXFxwMmVudW1zLmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXHAyc29sdmVyLmpzIiwic3JjXFx4aWFuXFxwaHlzMmRcXHAyc3BhY2UuanMiLCJzcmNcXHhpYW5cXHBoeXMyZFxccGh5czJkLmpzIiwic3JjXFx4aWFuXFx4aWFuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9qREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3dkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9TQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1ZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdFhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM2FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcFNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdC9GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbDVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6MEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqMEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2a0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbDdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy8yQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaHVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbmdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBYaWFuID0gcmVxdWlyZShcIi4uLy4uL3NyYy94aWFuL3hpYW5cIik7XG5cblhpYW4uZ2xvYmFsaXplKCk7XG5cbnZhciByYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICBQSSA9IE1hdGguUEksXG4gICAgVFdPX1BJID0gUEkgKiAyO1xuXG5cbmZ1bmN0aW9uIENhbWVyYUNvbnRyb2wob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIkNhbWVyYUNvbnRyb2xcIiwgb3B0cyk7XG5cbiAgICB0aGlzLnNwZWVkID0gMTtcbiAgICB0aGlzLnpvb21TcGVlZCA9IDY7XG59XG5Db21wb25lbnQuZXh0ZW5kKENhbWVyYUNvbnRyb2wpO1xuXG5DYW1lcmFDb250cm9sLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtMmQsXG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy50cmFuc2Zvcm0yZC5wb3NpdGlvbixcbiAgICAgICAgY2FtZXJhMmQgPSB0aGlzLmNhbWVyYTJkLFxuICAgICAgICBkdCA9IFRpbWUuZGVsdGEsXG4gICAgICAgIHNwZCA9IHRoaXMuc3BlZWQsXG4gICAgICAgIG1vdXNlV2hlZWwgPSBJbnB1dC5heGlzKFwibW91c2VXaGVlbFwiKTtcblxuICAgIGlmIChJbnB1dC5tb3VzZUJ1dHRvbigwKSkge1xuICAgICAgICBwb3NpdGlvbi54ICs9IC1kdCAqIHNwZCAqIElucHV0LmF4aXMoXCJtb3VzZVhcIik7XG4gICAgICAgIHBvc2l0aW9uLnkgKz0gZHQgKiBzcGQgKiBJbnB1dC5heGlzKFwibW91c2VZXCIpO1xuICAgIH1cbiAgICBpZiAoSW5wdXQubW91c2VCdXR0b24oMSkpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gcmFuZG9tKCkgPCAwLjUgPyBib3guY2xvbmUoKSA6IGNpcmNsZS5jbG9uZSgpO1xuXG4gICAgICAgIGNhbWVyYTJkLnRvV29ybGQoSW5wdXQubW91c2VQb3NpdGlvbiwgaW5zdGFuY2UudHJhbnNmb3JtMmQucG9zaXRpb24pO1xuICAgICAgICBpbnN0YW5jZS50cmFuc2Zvcm0yZC5yb3RhdGlvbiA9IFRXT19QSSAqIHJhbmRvbSgpO1xuXG4gICAgICAgIHRoaXMuZ2FtZU9iamVjdC5zY2VuZS5hZGRHYW1lT2JqZWN0KGluc3RhbmNlKTtcbiAgICB9XG4gICAgaWYgKG1vdXNlV2hlZWwpIGNhbWVyYTJkLnNldE9ydGhvZ3JhcGhpY1NpemUoY2FtZXJhMmQub3J0aG9ncmFwaGljU2l6ZSArIC1kdCAqIHRoaXMuem9vbVNwZWVkICogSW5wdXQuYXhpcyhcIm1vdXNlV2hlZWxcIikpO1xufTtcblxuXG5Bc3NldHMuYWRkQXNzZXRzKFxuICAgIG5ldyBTaGFkZXJMaWIuVW5saXQsXG4gICAgbmV3IFRleHR1cmUoe1xuICAgICAgICBuYW1lOiBcImltZ19wbGF5ZXJcIixcbiAgICAgICAgZmxpcFk6IHRydWUsXG4gICAgICAgIGZpbHRlcjogRW51bXMuRmlsdGVyTW9kZS5Ob25lLFxuICAgICAgICBzcmM6IFwiLi4vY29udGVudC9pbWFnZXMvcGxheWVyLnBuZ1wiXG4gICAgfSksXG4gICAgbmV3IFRleHR1cmUoe1xuICAgICAgICBuYW1lOiBcImltZ19ob3NwaXRhbFwiLFxuICAgICAgICBmbGlwWTogdHJ1ZSxcbiAgICAgICAgZmlsdGVyOiBFbnVtcy5GaWx0ZXJNb2RlLk5vbmUsXG4gICAgICAgIHNyYzogXCIuLi9jb250ZW50L2ltYWdlcy9ob3NwaXRhbC5wbmdcIlxuICAgIH0pXG4pO1xuXG5Bc3NldHMuYWRkQXNzZXRzKFxuICAgIG5ldyBNYXRlcmlhbCh7XG4gICAgICAgIG5hbWU6IFwibWF0X3BsYXllclwiLFxuICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgICAgZGlmZnVzZU1hcDogQXNzZXRzLmdldChcImltZ19wbGF5ZXJcIilcbiAgICAgICAgfSxcbiAgICAgICAgc2hhZGVyOiBBc3NldHMuZ2V0KFwic2hhZGVyX3VubGl0XCIpXG4gICAgfSksXG4gICAgbmV3IE1hdGVyaWFsKHtcbiAgICAgICAgbmFtZTogXCJtYXRfaG9zcGl0YWxcIixcbiAgICAgICAgdW5pZm9ybXM6IHtcbiAgICAgICAgICAgIGRpZmZ1c2VNYXA6IEFzc2V0cy5nZXQoXCJpbWdfaG9zcGl0YWxcIilcbiAgICAgICAgfSxcbiAgICAgICAgc2hhZGVyOiBBc3NldHMuZ2V0KFwic2hhZGVyX3VubGl0XCIpXG4gICAgfSlcbik7XG5cbmdhbWUgPSBuZXcgR2FtZSh7XG4gICAgZGVidWc6IHRydWUsXG4gICAgZm9yY2VDYW52YXM6IGZhbHNlLFxuICAgIHdpZHRoOiA5NjAsXG4gICAgaGVpZ2h0OiA2NDAsXG4gICAgcmVuZGVyZXI6IHtcbiAgICAgICAgZGlzYWJsZURlcHRoOiB0cnVlXG4gICAgfVxufSk7XG5cblBoeXMyRC5QMlNwYWNlLkRlZmF1bHRCcm9hZFBoYXNlID0gUGh5czJELlAyQnJvYWRwaGFzZVNwYXRpYWxIYXNoO1xuXG52YXIgc2NlbmUgPSBuZXcgU2NlbmUoe1xuICAgIG5hbWU6IFwiUGxheUdyb3VuZFwiLFxuICAgIHdvcmxkOiBuZXcgV29ybGQyRCh7XG4gICAgICAgIHNwYWNlOiB7XG4gICAgICAgICAgICB1c2VHcmF2aXR5OiB0cnVlLFxuICAgICAgICAgICAgZ3Jhdml0eTogbmV3IFZlYzIoMCwgLTkuODAxKSxcbiAgICAgICAgICAgIGJyb2FkcGhhc2U6IHtcbiAgICAgICAgICAgICAgICBjZWxsU2l6ZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbn0pO1xuXG52YXIgY2FtZXJhID0gbmV3IEdhbWVPYmplY3Qoe1xuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFRyYW5zZm9ybTJEKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjMigwLCA4KVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IENhbWVyYTJEKHtcbiAgICAgICAgICAgIG9ydGhvZ3JhcGhpY1NpemU6IDlcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBDYW1lcmFDb250cm9sXG4gICAgXSxcbiAgICB0YWc6IFwiQ2FtZXJhXCJcbn0pO1xudmFyIGNpcmNsZSA9IG5ldyBHYW1lT2JqZWN0KHtcbiAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBUcmFuc2Zvcm0yRCxcbiAgICAgICAgbmV3IFNwcml0ZSh7XG4gICAgICAgICAgICBtYXRlcmlhbDogQXNzZXRzLmdldChcIm1hdF9wbGF5ZXJcIiksXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHc6IDY0LFxuICAgICAgICAgICAgaDogNjQsXG4gICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgIGhlaWdodDogMVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFJpZ2lkQm9keTJEKHtcbiAgICAgICAgICAgIG1vdGlvblN0YXRlOiBQaHlzMkQuUDJFbnVtcy5Nb3Rpb25TdGF0ZS5EeW5hbWljLFxuICAgICAgICAgICAgc2hhcGU6IG5ldyBQaHlzMkQuUDJDaXJjbGUoe1xuICAgICAgICAgICAgICAgIHJhZGl1czogMC41XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIF1cbn0pO1xudmFyIGJveCA9IG5ldyBHYW1lT2JqZWN0KHtcbiAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBUcmFuc2Zvcm0yRCxcbiAgICAgICAgbmV3IFNwcml0ZSh7XG4gICAgICAgICAgICBtYXRlcmlhbDogQXNzZXRzLmdldChcIm1hdF9wbGF5ZXJcIiksXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHc6IDY0LFxuICAgICAgICAgICAgaDogNjQsXG4gICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgIGhlaWdodDogMVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFJpZ2lkQm9keTJEKHtcbiAgICAgICAgICAgIG1vdGlvblN0YXRlOiBQaHlzMkQuUDJFbnVtcy5Nb3Rpb25TdGF0ZS5EeW5hbWljLFxuICAgICAgICAgICAgc2hhcGU6IG5ldyBQaHlzMkQuUDJSZWN0KHtcbiAgICAgICAgICAgICAgICBleHRlbnRzOiBuZXcgVmVjMigwLjUsIDAuNSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgXVxufSk7XG52YXIgdG9wID0gbmV3IEdhbWVPYmplY3Qoe1xuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFRyYW5zZm9ybTJEKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjMigwLCAzMilcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBTcHJpdGUoe1xuICAgICAgICAgICAgbWF0ZXJpYWw6IEFzc2V0cy5nZXQoXCJtYXRfaG9zcGl0YWxcIiksXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHc6IDY0LFxuICAgICAgICAgICAgaDogNjQsXG4gICAgICAgICAgICB3aWR0aDogMzIsXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUmlnaWRCb2R5MkQoe1xuICAgICAgICAgICAgbW90aW9uU3RhdGU6IFBoeXMyRC5QMkVudW1zLk1vdGlvblN0YXRlLlN0YXRpYyxcbiAgICAgICAgICAgIHNoYXBlOiBuZXcgUGh5czJELlAyUmVjdCh7XG4gICAgICAgICAgICAgICAgZXh0ZW50czogbmV3IFZlYzIoMTYsIDAuNSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgXVxufSk7XG52YXIgYm90dG9tID0gbmV3IEdhbWVPYmplY3Qoe1xuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFRyYW5zZm9ybTJELFxuICAgICAgICBuZXcgU3ByaXRlKHtcbiAgICAgICAgICAgIG1hdGVyaWFsOiBBc3NldHMuZ2V0KFwibWF0X2hvc3BpdGFsXCIpLFxuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB3OiA2NCxcbiAgICAgICAgICAgIGg6IDY0LFxuICAgICAgICAgICAgd2lkdGg6IDMyXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUmlnaWRCb2R5MkQoe1xuICAgICAgICAgICAgbW90aW9uU3RhdGU6IFBoeXMyRC5QMkVudW1zLk1vdGlvblN0YXRlLlN0YXRpYyxcbiAgICAgICAgICAgIHNoYXBlOiBuZXcgUGh5czJELlAyUmVjdCh7XG4gICAgICAgICAgICAgICAgZXh0ZW50czogbmV3IFZlYzIoMTYsIDAuNSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgXVxufSk7XG52YXIgbGVmdCA9IG5ldyBHYW1lT2JqZWN0KHtcbiAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBUcmFuc2Zvcm0yRCh7XG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlYzIoLTE2LCAxNilcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBTcHJpdGUoe1xuICAgICAgICAgICAgbWF0ZXJpYWw6IEFzc2V0cy5nZXQoXCJtYXRfaG9zcGl0YWxcIiksXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHc6IDY0LFxuICAgICAgICAgICAgaDogNjQsXG4gICAgICAgICAgICBoZWlnaHQ6IDMyLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFJpZ2lkQm9keTJEKHtcbiAgICAgICAgICAgIG1vdGlvblN0YXRlOiBQaHlzMkQuUDJFbnVtcy5Nb3Rpb25TdGF0ZS5TdGF0aWMsXG4gICAgICAgICAgICBzaGFwZTogbmV3IFBoeXMyRC5QMlJlY3Qoe1xuICAgICAgICAgICAgICAgIGV4dGVudHM6IG5ldyBWZWMyKDAuNSwgMTYpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIF1cbn0pO1xudmFyIHJpZ2h0ID0gbmV3IEdhbWVPYmplY3Qoe1xuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFRyYW5zZm9ybTJEKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjMigxNiwgMTYpXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgU3ByaXRlKHtcbiAgICAgICAgICAgIG1hdGVyaWFsOiBBc3NldHMuZ2V0KFwibWF0X2hvc3BpdGFsXCIpLFxuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB3OiA2NCxcbiAgICAgICAgICAgIGg6IDY0LFxuICAgICAgICAgICAgaGVpZ2h0OiAzMixcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBSaWdpZEJvZHkyRCh7XG4gICAgICAgICAgICBtb3Rpb25TdGF0ZTogUGh5czJELlAyRW51bXMuTW90aW9uU3RhdGUuU3RhdGljLFxuICAgICAgICAgICAgc2hhcGU6IG5ldyBQaHlzMkQuUDJSZWN0KHtcbiAgICAgICAgICAgICAgICBleHRlbnRzOiBuZXcgVmVjMigwLjUsIDE2KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICBdXG59KTtcblxuc2NlbmUuYWRkR2FtZU9iamVjdHMoY2FtZXJhLCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20pO1xuXG5cbmd1aSA9IG5ldyBYaWFuLkdVSSh7XG4gICAgbmFtZTogXCJMZXZlbFwiXG59KTtcbmd1aU9iamVjdCA9IG5ldyBYaWFuLkdVSU9iamVjdCh7XG4gICAgcG9zaXRpb246IG5ldyBSZWN0KDAsIDAsIDY0LCA2NCksXG4gICAgLy9jb21wb25lbnRzOiBbXG4gICAgLy8gICAgbmV3IFhpYW4uR1VJQ29udGVudCh7XG4gICAgLy8gICAgICAgIHRleHQ6IFwiSGV5IFN0b3AgVGhhdFwiLFxuICAgIC8vICAgICAgICBzdHlsZToge1xuICAgIC8vICAgICAgICAgICAgd29yZFdyYXA6IHRydWUsXG4gICAgLy8gICAgICAgICAgICBzdHJldGNoV2lkdGg6IGZhbHNlLFxuICAgIC8vXG4gICAgLy8gICAgICAgICAgICBub3JtYWw6IHtcbiAgICAvLyAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgWGlhbi5Db2xvcigpXG4gICAgLy8gICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAvLyAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgWGlhbi5Db2xvcihcInJlZFwiKVxuICAgIC8vICAgICAgICAgICAgfSxcbiAgICAvLyAgICAgICAgICAgIGFjdGl2ZToge1xuICAgIC8vICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBYaWFuLkNvbG9yKFwiYmx1ZVwiKVxuICAgIC8vICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICB9XG4gICAgLy8gICAgfSlcbiAgICAvL11cbn0pO1xuZ3VpLmFkZEdVSU9iamVjdChndWlPYmplY3QpO1xuXG5nYW1lLmFkZEdVSShndWkpO1xuZ2FtZS5hZGRTY2VuZShzY2VuZSk7XG5cblxuZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgZ2FtZS5zZXRHVUkoXCJMZXZlbFwiKTtcbiAgICBnYW1lLnNldFNjZW5lKFwiUGxheUdyb3VuZFwiKTtcbiAgICBnYW1lLnNldENhbWVyYShnYW1lLnNjZW5lLmZpbmRCeVRhZ0ZpcnN0KFwiQ2FtZXJhXCIpKTtcbn1cblxuZnVuY3Rpb24gcmVzdGFydCgpIHtcbiAgICBzdGFydCgpO1xufVxuXG5cbmdhbWUub24oXCJzdGFydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgc3RhcnQoKTtcbn0pO1xuXG5cbkFzc2V0TG9hZGVyLm9uKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBnYW1lLnN0YXJ0KCk7XG59KS5sb2FkKCk7XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXMtYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG52YXIga01heExlbmd0aCA9IDB4M2ZmZmZmZmZcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAtIEltcGxlbWVudGF0aW9uIG11c3Qgc3VwcG9ydCBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcy5cbiAqICAgRmlyZWZveCA0LTI5IGxhY2tlZCBzdXBwb3J0LCBmaXhlZCBpbiBGaXJlZm94IDMwKy5cbiAqICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cbiAqXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleSB3aWxsXG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCB3aWxsIHdvcmsgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IChmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigwKVxuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgYXJyLmZvbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH1cbiAgICByZXR1cm4gNDIgPT09IGFyci5mb28oKSAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBuZXcgVWludDhBcnJheSgxKS5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufSkoKVxuXG4vKipcbiAqIENsYXNzOiBCdWZmZXJcbiAqID09PT09PT09PT09PT1cbiAqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGFyZSBhdWdtZW50ZWRcbiAqIHdpdGggZnVuY3Rpb24gcHJvcGVydGllcyBmb3IgYWxsIHRoZSBub2RlIGBCdWZmZXJgIEFQSSBmdW5jdGlvbnMuIFdlIHVzZVxuICogYFVpbnQ4QXJyYXlgIHNvIHRoYXQgc3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXQgcmV0dXJuc1xuICogYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogQnkgYXVnbWVudGluZyB0aGUgaW5zdGFuY2VzLCB3ZSBjYW4gYXZvaWQgbW9kaWZ5aW5nIHRoZSBgVWludDhBcnJheWBcbiAqIHByb3RvdHlwZS5cbiAqL1xuZnVuY3Rpb24gQnVmZmVyIChzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKVxuICAgIHJldHVybiBuZXcgQnVmZmVyKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pXG5cbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3ViamVjdFxuXG4gIC8vIEZpbmQgdGhlIGxlbmd0aFxuICB2YXIgbGVuZ3RoXG4gIGlmICh0eXBlID09PSAnbnVtYmVyJylcbiAgICBsZW5ndGggPSBzdWJqZWN0ID4gMCA/IHN1YmplY3QgPj4+IDAgOiAwXG4gIGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVuY29kaW5nID09PSAnYmFzZTY0JylcbiAgICAgIHN1YmplY3QgPSBiYXNlNjRjbGVhbihzdWJqZWN0KVxuICAgIGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHN1YmplY3QsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHN1YmplY3QgIT09IG51bGwpIHsgLy8gYXNzdW1lIG9iamVjdCBpcyBhcnJheS1saWtlXG4gICAgaWYgKHN1YmplY3QudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShzdWJqZWN0LmRhdGEpKVxuICAgICAgc3ViamVjdCA9IHN1YmplY3QuZGF0YVxuICAgIGxlbmd0aCA9ICtzdWJqZWN0Lmxlbmd0aCA+IDAgPyBNYXRoLmZsb29yKCtzdWJqZWN0Lmxlbmd0aCkgOiAwXG4gIH0gZWxzZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ211c3Qgc3RhcnQgd2l0aCBudW1iZXIsIGJ1ZmZlciwgYXJyYXkgb3Igc3RyaW5nJylcblxuICBpZiAodGhpcy5sZW5ndGggPiBrTWF4TGVuZ3RoKVxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG5cbiAgdmFyIGJ1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBQcmVmZXJyZWQ6IFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgYnVmID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGxlbmd0aCkpXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBUSElTIGluc3RhbmNlIG9mIEJ1ZmZlciAoY3JlYXRlZCBieSBgbmV3YClcbiAgICBidWYgPSB0aGlzXG4gICAgYnVmLmxlbmd0aCA9IGxlbmd0aFxuICAgIGJ1Zi5faXNCdWZmZXIgPSB0cnVlXG4gIH1cblxuICB2YXIgaVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIHN1YmplY3QuYnl0ZUxlbmd0aCA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBTcGVlZCBvcHRpbWl6YXRpb24gLS0gdXNlIHNldCBpZiB3ZSdyZSBjb3B5aW5nIGZyb20gYSB0eXBlZCBhcnJheVxuICAgIGJ1Zi5fc2V0KHN1YmplY3QpXG4gIH0gZWxzZSBpZiAoaXNBcnJheWlzaChzdWJqZWN0KSkge1xuICAgIC8vIFRyZWF0IGFycmF5LWlzaCBvYmplY3RzIGFzIGEgYnl0ZSBhcnJheVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgYnVmW2ldID0gc3ViamVjdC5yZWFkVUludDgoaSlcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICBidWZbaV0gPSAoKHN1YmplY3RbaV0gJSAyNTYpICsgMjU2KSAlIDI1NlxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGJ1Zi53cml0ZShzdWJqZWN0LCAwLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgIW5vWmVybykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmW2ldID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW4gJiYgYVtpXSA9PT0gYltpXTsgaSsrKSB7fVxuICBpZiAoaSAhPT0gbGVuKSB7XG4gICAgeCA9IGFbaV1cbiAgICB5ID0gYltpXVxuICB9XG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3Jhdyc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiAobGlzdCwgdG90YWxMZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVc2FnZTogQnVmZmVyLmNvbmNhdChsaXN0WywgbGVuZ3RoXSknKVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKDApXG4gIH0gZWxzZSBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbGlzdFswXVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKHRvdGFsTGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICB0b3RhbExlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdG90YWxMZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcih0b3RhbExlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICBpdGVtLmNvcHkoYnVmLCBwb3MpXG4gICAgcG9zICs9IGl0ZW0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIChzdHIsIGVuY29kaW5nKSB7XG4gIHZhciByZXRcbiAgc3RyID0gc3RyICsgJydcbiAgc3dpdGNoIChlbmNvZGluZyB8fCAndXRmOCcpIHtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdyYXcnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCAqIDJcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggPj4+IDFcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gdXRmOFRvQnl0ZXMoc3RyKS5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IGJhc2U2NFRvQnl0ZXMoc3RyKS5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8vIHByZS1zZXQgZm9yIHZhbHVlcyB0aGF0IG1heSBleGlzdCBpbiB0aGUgZnV0dXJlXG5CdWZmZXIucHJvdG90eXBlLmxlbmd0aCA9IHVuZGVmaW5lZFxuQnVmZmVyLnByb3RvdHlwZS5wYXJlbnQgPSB1bmRlZmluZWRcblxuLy8gdG9TdHJpbmcoZW5jb2RpbmcsIHN0YXJ0PTAsIGVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID09PSBJbmZpbml0eSA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcbiAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKGVuZCA8PSBzdGFydCkgcmV0dXJuICcnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYmluYXJ5U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKVxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAoYikge1xuICBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heClcbiAgICAgIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYilcbn1cblxuLy8gYGdldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLmdldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMucmVhZFVJbnQ4KG9mZnNldClcbn1cblxuLy8gYHNldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHYsIG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLnNldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMud3JpdGVVSW50OCh2LCBvZmZzZXQpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGJ5dGUgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKGJ5dGUpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG4gICAgYnVmW29mZnNldCArIGldID0gYnl0ZVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIGJpbmFyeVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiB1dGYxNmxlV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gU3VwcG9ydCBib3RoIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZylcbiAgLy8gYW5kIHRoZSBsZWdhY3kgKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIGlmICghaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHsgIC8vIGxlZ2FjeVxuICAgIHZhciBzd2FwID0gZW5jb2RpbmdcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIG9mZnNldCA9IGxlbmd0aFxuICAgIGxlbmd0aCA9IHN3YXBcbiAgfVxuXG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgICByZXQgPSBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBiaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHV0ZjE2bGVXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXMgPSAnJ1xuICB2YXIgdG1wID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGJ1ZltpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICAgICAgdG1wID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wICs9ICclJyArIGJ1ZltpXS50b1N0cmluZygxNilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzICsgZGVjb2RlVXRmOENoYXIodG1wKVxufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGJpbmFyeVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGFzY2lpU2xpY2UoYnVmLCBzdGFydCwgZW5kKVxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW47XG4gICAgaWYgKHN0YXJ0IDwgMClcbiAgICAgIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKVxuICAgICAgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KVxuICAgIGVuZCA9IHN0YXJ0XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgdmFyIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgICByZXR1cm4gbmV3QnVmXG4gIH1cbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSlcbiAgICByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2J1ZmZlciBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWx1ZSBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsdWUgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldF9zdGFydCwgc3RhcnQsIGVuZCkge1xuICB2YXIgc291cmNlID0gdGhpc1xuXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICghdGFyZ2V0X3N0YXJ0KSB0YXJnZXRfc3RhcnQgPSAwXG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgc291cmNlLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAoZW5kIDwgc3RhcnQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NvdXJjZUVuZCA8IHNvdXJjZVN0YXJ0JylcbiAgaWYgKHRhcmdldF9zdGFydCA8IDAgfHwgdGFyZ2V0X3N0YXJ0ID49IHRhcmdldC5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gc291cmNlLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwIHx8IGVuZCA+IHNvdXJjZS5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpXG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgPCBlbmQgLSBzdGFydClcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0ICsgc3RhcnRcblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldF9zdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRfc3RhcnQpXG4gIH1cbn1cblxuLy8gZmlsbCh2YWx1ZSwgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCF2YWx1ZSkgdmFsdWUgPSAwXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCkgZW5kID0gdGhpcy5sZW5ndGhcblxuICBpZiAoZW5kIDwgc3RhcnQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3N0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IHZhbHVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IHV0ZjhUb0J5dGVzKHZhbHVlLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHRoaXNbaV0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgQXJyYXlCdWZmZXJgIHdpdGggdGhlICpjb3BpZWQqIG1lbW9yeSBvZiB0aGUgYnVmZmVyIGluc3RhbmNlLlxuICogQWRkZWQgaW4gTm9kZSAwLjEyLiBPbmx5IGF2YWlsYWJsZSBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgQXJyYXlCdWZmZXIuXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUudG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgcmV0dXJuIChuZXcgQnVmZmVyKHRoaXMpKS5idWZmZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMubGVuZ3RoKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1Zi5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBidWZbaV0gPSB0aGlzW2ldXG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmLmJ1ZmZlclxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCdWZmZXIudG9BcnJheUJ1ZmZlciBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpXG4gIH1cbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgQlAgPSBCdWZmZXIucHJvdG90eXBlXG5cbi8qKlxuICogQXVnbWVudCBhIFVpbnQ4QXJyYXkgKmluc3RhbmNlKiAobm90IHRoZSBVaW50OEFycmF5IGNsYXNzISkgd2l0aCBCdWZmZXIgbWV0aG9kc1xuICovXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5jb25zdHJ1Y3RvciA9IEJ1ZmZlclxuICBhcnIuX2lzQnVmZmVyID0gdHJ1ZVxuXG4gIC8vIHNhdmUgcmVmZXJlbmNlIHRvIG9yaWdpbmFsIFVpbnQ4QXJyYXkgZ2V0L3NldCBtZXRob2RzIGJlZm9yZSBvdmVyd3JpdGluZ1xuICBhcnIuX2dldCA9IGFyci5nZXRcbiAgYXJyLl9zZXQgPSBhcnIuc2V0XG5cbiAgLy8gZGVwcmVjYXRlZCwgd2lsbCBiZSByZW1vdmVkIGluIG5vZGUgMC4xMytcbiAgYXJyLmdldCA9IEJQLmdldFxuICBhcnIuc2V0ID0gQlAuc2V0XG5cbiAgYXJyLndyaXRlID0gQlAud3JpdGVcbiAgYXJyLnRvU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvTG9jYWxlU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvSlNPTiA9IEJQLnRvSlNPTlxuICBhcnIuZXF1YWxzID0gQlAuZXF1YWxzXG4gIGFyci5jb21wYXJlID0gQlAuY29tcGFyZVxuICBhcnIuY29weSA9IEJQLmNvcHlcbiAgYXJyLnNsaWNlID0gQlAuc2xpY2VcbiAgYXJyLnJlYWRVSW50OCA9IEJQLnJlYWRVSW50OFxuICBhcnIucmVhZFVJbnQxNkxFID0gQlAucmVhZFVJbnQxNkxFXG4gIGFyci5yZWFkVUludDE2QkUgPSBCUC5yZWFkVUludDE2QkVcbiAgYXJyLnJlYWRVSW50MzJMRSA9IEJQLnJlYWRVSW50MzJMRVxuICBhcnIucmVhZFVJbnQzMkJFID0gQlAucmVhZFVJbnQzMkJFXG4gIGFyci5yZWFkSW50OCA9IEJQLnJlYWRJbnQ4XG4gIGFyci5yZWFkSW50MTZMRSA9IEJQLnJlYWRJbnQxNkxFXG4gIGFyci5yZWFkSW50MTZCRSA9IEJQLnJlYWRJbnQxNkJFXG4gIGFyci5yZWFkSW50MzJMRSA9IEJQLnJlYWRJbnQzMkxFXG4gIGFyci5yZWFkSW50MzJCRSA9IEJQLnJlYWRJbnQzMkJFXG4gIGFyci5yZWFkRmxvYXRMRSA9IEJQLnJlYWRGbG9hdExFXG4gIGFyci5yZWFkRmxvYXRCRSA9IEJQLnJlYWRGbG9hdEJFXG4gIGFyci5yZWFkRG91YmxlTEUgPSBCUC5yZWFkRG91YmxlTEVcbiAgYXJyLnJlYWREb3VibGVCRSA9IEJQLnJlYWREb3VibGVCRVxuICBhcnIud3JpdGVVSW50OCA9IEJQLndyaXRlVUludDhcbiAgYXJyLndyaXRlVUludDE2TEUgPSBCUC53cml0ZVVJbnQxNkxFXG4gIGFyci53cml0ZVVJbnQxNkJFID0gQlAud3JpdGVVSW50MTZCRVxuICBhcnIud3JpdGVVSW50MzJMRSA9IEJQLndyaXRlVUludDMyTEVcbiAgYXJyLndyaXRlVUludDMyQkUgPSBCUC53cml0ZVVJbnQzMkJFXG4gIGFyci53cml0ZUludDggPSBCUC53cml0ZUludDhcbiAgYXJyLndyaXRlSW50MTZMRSA9IEJQLndyaXRlSW50MTZMRVxuICBhcnIud3JpdGVJbnQxNkJFID0gQlAud3JpdGVJbnQxNkJFXG4gIGFyci53cml0ZUludDMyTEUgPSBCUC53cml0ZUludDMyTEVcbiAgYXJyLndyaXRlSW50MzJCRSA9IEJQLndyaXRlSW50MzJCRVxuICBhcnIud3JpdGVGbG9hdExFID0gQlAud3JpdGVGbG9hdExFXG4gIGFyci53cml0ZUZsb2F0QkUgPSBCUC53cml0ZUZsb2F0QkVcbiAgYXJyLndyaXRlRG91YmxlTEUgPSBCUC53cml0ZURvdWJsZUxFXG4gIGFyci53cml0ZURvdWJsZUJFID0gQlAud3JpdGVEb3VibGVCRVxuICBhcnIuZmlsbCA9IEJQLmZpbGxcbiAgYXJyLmluc3BlY3QgPSBCUC5pbnNwZWN0XG4gIGFyci50b0FycmF5QnVmZmVyID0gQlAudG9BcnJheUJ1ZmZlclxuXG4gIHJldHVybiBhcnJcbn1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtel0vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlpc2ggKHN1YmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXkoc3ViamVjdCkgfHwgQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpIHx8XG4gICAgICBzdWJqZWN0ICYmIHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHN1YmplY3QubGVuZ3RoID09PSAnbnVtYmVyJ1xufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGIgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGlmIChiIDw9IDB4N0YpIHtcbiAgICAgIGJ5dGVBcnJheS5wdXNoKGIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFydCA9IGlcbiAgICAgIGlmIChiID49IDB4RDgwMCAmJiBiIDw9IDB4REZGRikgaSsrXG4gICAgICB2YXIgaCA9IGVuY29kZVVSSUNvbXBvbmVudChzdHIuc2xpY2Uoc3RhcnQsIGkrMSkpLnN1YnN0cigxKS5zcGxpdCgnJScpXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgYnl0ZUFycmF5LnB1c2gocGFyc2VJbnQoaFtqXSwgMTYpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShzdHIpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKVxuICAgICAgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBkZWNvZGVVdGY4Q2hhciAoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkgLy8gVVRGIDggaW52YWxpZCBjaGFyXG4gIH1cbn1cbiIsInZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cblx0ZnVuY3Rpb24gZGVjb2RlIChlbHQpIHtcblx0XHR2YXIgY29kZSA9IGVsdC5jaGFyQ29kZUF0KDApXG5cdFx0aWYgKGNvZGUgPT09IFBMVVMpXG5cdFx0XHRyZXR1cm4gNjIgLy8gJysnXG5cdFx0aWYgKGNvZGUgPT09IFNMQVNIKVxuXHRcdFx0cmV0dXJuIDYzIC8vICcvJ1xuXHRcdGlmIChjb2RlIDwgTlVNQkVSKVxuXHRcdFx0cmV0dXJuIC0xIC8vbm8gbWF0Y2hcblx0XHRpZiAoY29kZSA8IE5VTUJFUiArIDEwKVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBOVU1CRVIgKyAyNiArIDI2XG5cdFx0aWYgKGNvZGUgPCBVUFBFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBVUFBFUlxuXHRcdGlmIChjb2RlIDwgTE9XRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gTE9XRVIgKyAyNlxuXHR9XG5cblx0ZnVuY3Rpb24gYjY0VG9CeXRlQXJyYXkgKGI2NCkge1xuXHRcdHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG5cblx0XHRpZiAoYjY0Lmxlbmd0aCAlIDQgPiAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuXHRcdH1cblxuXHRcdC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuXHRcdC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuXHRcdC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuXHRcdC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2Vcblx0XHR2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXHRcdHBsYWNlSG9sZGVycyA9ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAyKSA/IDIgOiAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMSkgPyAxIDogMFxuXG5cdFx0Ly8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdFx0YXJyID0gbmV3IEFycihiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cblx0XHQvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG5cdFx0bCA9IHBsYWNlSG9sZGVycyA+IDAgPyBiNjQubGVuZ3RoIC0gNCA6IGI2NC5sZW5ndGhcblxuXHRcdHZhciBMID0gMFxuXG5cdFx0ZnVuY3Rpb24gcHVzaCAodikge1xuXHRcdFx0YXJyW0wrK10gPSB2XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxOCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCAxMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA8PCA2KSB8IGRlY29kZShiNjQuY2hhckF0KGkgKyAzKSlcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMDAwKSA+PiAxNilcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMCkgPj4gOClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPj4gNClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxMCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCA0KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpID4+IDIpXG5cdFx0XHRwdXNoKCh0bXAgPj4gOCkgJiAweEZGKVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJcblx0fVxuXG5cdGZ1bmN0aW9uIHVpbnQ4VG9CYXNlNjQgKHVpbnQ4KSB7XG5cdFx0dmFyIGksXG5cdFx0XHRleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMywgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRcdG91dHB1dCA9IFwiXCIsXG5cdFx0XHR0ZW1wLCBsZW5ndGhcblxuXHRcdGZ1bmN0aW9uIGVuY29kZSAobnVtKSB7XG5cdFx0XHRyZXR1cm4gbG9va3VwLmNoYXJBdChudW0pXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcblx0XHRcdHJldHVybiBlbmNvZGUobnVtID4+IDE4ICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDEyICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDYgJiAweDNGKSArIGVuY29kZShudW0gJiAweDNGKVxuXHRcdH1cblxuXHRcdC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcblx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB1aW50OC5sZW5ndGggLSBleHRyYUJ5dGVzOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHtcblx0XHRcdHRlbXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG5cdFx0XHRvdXRwdXQgKz0gdHJpcGxldFRvQmFzZTY0KHRlbXApXG5cdFx0fVxuXG5cdFx0Ly8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuXHRcdHN3aXRjaCAoZXh0cmFCeXRlcykge1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHR0ZW1wID0gdWludDhbdWludDgubGVuZ3RoIC0gMV1cblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDIpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz09J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHR0ZW1wID0gKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDJdIDw8IDgpICsgKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMTApXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPj4gNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDIpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9J1xuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxuXG5cdGV4cG9ydHMudG9CeXRlQXJyYXkgPSBiNjRUb0J5dGVBcnJheVxuXHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0XG59KHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICh0aGlzLmJhc2U2NGpzID0ge30pIDogZXhwb3J0cykpXG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbihidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLFxuICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcbiAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXG4gICAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICAgIG5CaXRzID0gLTcsXG4gICAgICBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDAsXG4gICAgICBkID0gaXNMRSA/IC0xIDogMSxcbiAgICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XG5cbiAgaSArPSBkO1xuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBzID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gZUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCk7XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIGUgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KTtcblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbik7XG59O1xuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGMsXG4gICAgICBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxLFxuICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxuICAgICAgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApLFxuICAgICAgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpLFxuICAgICAgZCA9IGlzTEUgPyAxIDogLTEsXG4gICAgICBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwO1xuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcblxuICBlID0gKGUgPDwgbUxlbikgfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4O1xufTtcbiIsIlxuLyoqXG4gKiBpc0FycmF5XG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIHRvU3RyaW5nXG4gKi9cblxudmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGB2YWxgXG4gKiBpcyBhbiBhcnJheS5cbiAqXG4gKiBleGFtcGxlOlxuICpcbiAqICAgICAgICBpc0FycmF5KFtdKTtcbiAqICAgICAgICAvLyA+IHRydWVcbiAqICAgICAgICBpc0FycmF5KGFyZ3VtZW50cyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICogICAgICAgIGlzQXJyYXkoJycpO1xuICogICAgICAgIC8vID4gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge21peGVkfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2x9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5IHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuICEhIHZhbCAmJiAnW29iamVjdCBBcnJheV0nID09IHN0ci5jYWxsKHZhbCk7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuTXV0YXRpb25PYnNlcnZlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID0gW107XG5cbiAgICBpZiAoY2FuTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICB2YXIgaGlkZGVuRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHF1ZXVlTGlzdCA9IHF1ZXVlLnNsaWNlKCk7XG4gICAgICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcXVldWVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGhpZGRlbkRpdiwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBoaWRkZW5EaXYuc2V0QXR0cmlidXRlKCd5ZXMnLCAnbm8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjYW5Qb3N0KSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsKXtcbnZhciBEb20gPSByZXF1aXJlKCcuL2RvbScpO1xudmFyIERldmljZSA9IHJlcXVpcmUoJy4vZGV2aWNlJyk7XG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgdyA9IHR5cGVvZih3aW5kb3cpICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCxcbiAgICBhZGRFdmVudCA9IERvbS5hZGRFdmVudCxcbiAgICByZW1vdmVFdmVudCA9IERvbS5yZW1vdmVFdmVudCxcbiAgICBBdWRpb0NvbnRleHQgPSAoXG4gICAgdy5BdWRpb0NvbnRleHQgfHxcbiAgICB3LndlYmtpdEF1ZGlvQ29udGV4dCB8fFxuICAgIHcubW96QXVkaW9Db250ZXh0IHx8XG4gICAgdy5vQXVkaW9Db250ZXh0IHx8XG4gICAgdy5tc0F1ZGlvQ29udGV4dFxuICAgICksXG4gICAgYXVkaW9Db250ZXh0ID0gbnVsbDtcblxuaWYgKHR5cGVvZihBdWRpb0NvbnRleHQpICE9PSAndW5kZWZpbmVkJykge1xuICAgIGF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICB2YXIgQXVkaW9Db250ZXh0UHJvdG90eXBlID0gQXVkaW9Db250ZXh0LnByb3RvdHlwZTtcblxuICAgIEF1ZGlvQ29udGV4dFByb3RvdHlwZS5VTkxPQ0tFRCA9ICFEZXZpY2UubW9iaWxlO1xuICAgIEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVHYWluIHx8IChBdWRpb0NvbnRleHRQcm90b3R5cGUuY3JlYXRlR2FpbiA9IEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVHYWluTm9kZSk7XG4gICAgQXVkaW9Db250ZXh0UHJvdG90eXBlLmNyZWF0ZVBhbm5lciB8fCAoQXVkaW9Db250ZXh0UHJvdG90eXBlLmNyZWF0ZVBhbm5lciA9IEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVQYW5uZXJOb2RlKTtcbiAgICBBdWRpb0NvbnRleHRQcm90b3R5cGUuY3JlYXRlRGVsYXkgfHwgKEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVEZWxheSA9IEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVEZWxheU5vZGUpO1xuICAgIEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVTY3JpcHRQcm9jZXNzb3IgfHwgKEF1ZGlvQ29udGV4dFByb3RvdHlwZS5jcmVhdGVTY3JpcHRQcm9jZXNzb3IgPSBBdWRpb0NvbnRleHRQcm90b3R5cGUuY3JlYXRlSmF2YVNjcmlwdE5vZGUpO1xuXG4gICAgdmFyIE9zY2lsbGF0b3JQcm90b3R5cGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICAgICAgQnVmZmVyU291cmNlTm9kZVByb3RvdHlwZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgICAgIEdhaW5Qcm90b3R5cGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpLmdhaW4uY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgT3NjaWxsYXRvclByb3RvdHlwZS5zdGFydCB8fCAoT3NjaWxsYXRvclByb3RvdHlwZS5zdGFydCA9IE9zY2lsbGF0b3JQcm90b3R5cGUubm90ZU9uKTtcbiAgICBPc2NpbGxhdG9yUHJvdG90eXBlLnN0b3AgfHwgKE9zY2lsbGF0b3JQcm90b3R5cGUuc3RvcCA9IE9zY2lsbGF0b3JQcm90b3R5cGUuc3RvcCk7XG4gICAgT3NjaWxsYXRvclByb3RvdHlwZS5zZXRQZXJpb2RpY1dhdmUgfHwgKE9zY2lsbGF0b3JQcm90b3R5cGUuc2V0UGVyaW9kaWNXYXZlID0gT3NjaWxsYXRvclByb3RvdHlwZS5zZXRXYXZlVGFibGUpO1xuXG4gICAgQnVmZmVyU291cmNlTm9kZVByb3RvdHlwZS5zdGFydCB8fCAoQnVmZmVyU291cmNlTm9kZVByb3RvdHlwZS5zdGFydCA9IEJ1ZmZlclNvdXJjZU5vZGVQcm90b3R5cGUubm90ZU9uKTtcbiAgICBCdWZmZXJTb3VyY2VOb2RlUHJvdG90eXBlLnN0b3AgfHwgKEJ1ZmZlclNvdXJjZU5vZGVQcm90b3R5cGUuc3RvcCA9IEJ1ZmZlclNvdXJjZU5vZGVQcm90b3R5cGUuc3RvcCk7XG5cbiAgICBHYWluUHJvdG90eXBlLnNldFRhcmdldEF0VGltZSB8fCAoR2FpblByb3RvdHlwZS5zZXRUYXJnZXRBdFRpbWUgPSBHYWluUHJvdG90eXBlLnNldFRhcmdldFZhbHVlQXRUaW1lKTtcblxuICAgIHZhciBvblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICB2YXIgYnVmZmVyID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlcigxLCAxLCAyMjA1MCksXG4gICAgICAgICAgICBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cbiAgICAgICAgc291cmNlLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgc291cmNlLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgc291cmNlLnN0YXJ0KDApO1xuXG4gICAgICAgIGF1ZGlvQ29udGV4dC5VTkxPQ0tFRCA9IHRydWU7XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnYXVkaW9jb250ZXh0dW5sb2NrJykpO1xuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhdWRpb0NvbnRleHQgIT0gdW5kZWZpbmVkID8gYXVkaW9Db250ZXh0IDogZmFsc2U7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KSIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL2V2ZW50X2VtaXR0ZXInKTtcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgQ0xBU1NfSUQgPSAwO1xuXG4vKipcbiAqIEBjbGFzcyBYaWFuLkNsYXNzXG4gKiBAZXh0ZW5kcyBYaWFuLkV2ZW50RW1pdHRlclxuICovXG5mdW5jdGlvbiBDbGFzcygpIHtcblxuICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5faWQgPSArK0NMQVNTX0lEO1xuICAgIHRoaXMuX2pzb25JZCA9IC0xO1xuICAgIHRoaXMuX25hbWUgPSAnJztcbn1cblxuRXZlbnRFbWl0dGVyLmV4dGVuZChDbGFzcyk7XG5cblxuLyoqXG4gKiByZXR1cm5zIG5ldyBjb3B5IG9mIHRoaXNcbiAqIEBtZW1iZXJvZiBYaWFuLkNsYXNzXG4gKiBAcmV0dXJuIENsYXNzXG4gKi9cbkNsYXNzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XG59O1xuXG4vKipcbiAqIGNvcGllcyBvdGhlciBvZiBzYW1lIGNsYXNzXG4gKiBAbWVtYmVyb2YgWGlhbi5DbGFzc1xuICogQHBhcmFtIHtYaWFuLkNsYXNzfSBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbkNsYXNzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIGNsZWFycyBkYXRhIGZvciBHQ1xuICogQG1lbWJlcm9mIFhpYW4uQ2xhc3NcbiAqIEByZXR1cm4gdGhpc1xuICovXG5DbGFzcy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogY29udmVydHMgdGhpcyB0byBhIEpTT04gb2JqZWN0XG4gKiBAbWVtYmVyb2YgWGlhbi5DbGFzc1xuICogQHJldHVybiBqc29uXG4gKi9cbkNsYXNzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLl9pZCA9IHRoaXMuX2lkO1xuICAgIGpzb24uX2pzb25JZCA9IHRoaXMuX2lkO1xuICAgIGpzb24uX2NsYXNzTmFtZSA9IHRoaXMuX2NsYXNzTmFtZTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuLyoqXG4gKiBzZXRzIHRoaXMgZnJvbSBKU09OIG9iamVjdFxuICogQG1lbWJlcm9mIFhpYW4uQ2xhc3NcbiAqIEByZXR1cm4gdGhpc1xuICovXG5DbGFzcy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuXG4gICAgdGhpcy5fanNvbklkID0ganNvbi5fanNvbklkO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHJldHVybnMgY2xhc3MgbmFtZVxuICogQG1lbWJlcm9mIFhpYW4uQ2xhc3NcbiAqIEByZXR1cm4gc3RyaW5nXG4gKi9cbkNsYXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiB0aGlzLl9uYW1lO1xufTtcblxuLyoqXG4gKiBAbWVtYmVyb2YgWGlhbi5DbGFzc1xuICogQHBhcmFtIHtjb25zdHJ1Y3Rvcn0gY2hpbGRcbiAqIEBwYXJhbSB7Y29uc3RydWN0b3J9IHBhcmVudFxuICogQHJldHVybiBjaGlsZFxuICovXG5DbGFzcy5leHRlbmQgPSBmdW5jdGlvbiAoY2hpbGQsIHBhcmVudCkge1xuICAgIGlmICghcGFyZW50KSBwYXJlbnQgPSB0aGlzO1xuXG4gICAgY2hpbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgICBjaGlsZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjaGlsZDtcblxuICAgIGNoaWxkLmV4dGVuZCA9IHBhcmVudC5leHRlbmQ7XG4gICAgY2hpbGQucHJvdG90eXBlLl9jbGFzc05hbWUgPSBjaGlsZC5fY2xhc3NOYW1lID0gY2hpbGQubmFtZTtcblxuICAgICh0aGlzLl9jaGlsZHJlbiB8fCAodGhpcy5fY2hpbGRyZW4gPSB7fSkpW2NoaWxkLm5hbWVdID0gY2hpbGQ7XG4gICAgY2hpbGQuX3BhcmVudCA9IHRoaXM7XG5cbiAgICBDbGFzcy5fY2xhc3Nlc1tjaGlsZC5uYW1lXSA9IGNoaWxkO1xuXG4gICAgaWYgKHBhcmVudC5vbkV4dGVuZCkge1xuICAgICAgICBpZiAoIWNoaWxkLm9uRXh0ZW5kKSBjaGlsZC5vbkV4dGVuZCA9IHBhcmVudC5vbkV4dGVuZDtcbiAgICAgICAgcGFyZW50Lm9uRXh0ZW5kKGNoaWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG59O1xuXG4vKipcbiAqIGNyZWF0ZXMgbmV3IFhpYW4uQ2xhc3MgZnJvbSBqc29uIG9iamVjdFxuICogQG1lbWJlcm9mIFhpYW4uQ2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBqc29uXG4gKiBAcmV0dXJuIFhpYW4uQ2xhc3NcbiAqL1xuQ2xhc3MuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuXG4gICAgcmV0dXJuIG5ldyBDbGFzcy5fY2xhc3Nlc1tqc29uLl9jbGFzc05hbWVdKCkuZnJvbUpTT04oanNvbik7XG59O1xuXG4vKipcbiAqIGNyZWF0ZXMgbmV3IFhpYW4uQ2xhc3MgZnJvbSBzdHJpbmcgdHlwZVxuICogQG1lbWJlcm9mIFhpYW4uQ2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIFhpYW4uQ2xhc3NcbiAqL1xuQ2xhc3MuY3JlYXRlID0gZnVuY3Rpb24gKHR5cGUpIHtcblxuICAgIHJldHVybiBuZXcgQ2xhc3MuX2NsYXNzZXNbdHlwZV07XG59O1xuXG5cbkNsYXNzLl9jbGFzc2VzID0ge307XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDbGFzcztcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cbmZ1bmN0aW9uIENvbmZpZygpIHtcblxuICAgIHRoaXMuZGVidWcgPSBmYWxzZTtcblxuICAgIHRoaXMuaG9zdCA9ICcxMjcuMC4wLjEnO1xuICAgIHRoaXMucG9ydCA9IDMwMDA7XG5cbiAgICB0aGlzLkZBS0VfTEFHID0gMDtcbiAgICB0aGlzLlNDRU5FX1NZTkNfUkFURSA9IDAuNTtcblxuICAgIHRoaXMuTUFYX1NDRU5FX1NUQVRFUyA9IDU7XG5cbiAgICB0aGlzLk1JTl9ERUxUQSA9IDAuMDAwMDAxO1xuICAgIHRoaXMuTUFYX0RFTFRBID0gMC4yNTtcbn1cblxuXG5Db25maWcucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIGZvciAodmFyIGtleSBpbiBqc29uKSB7XG4gICAgICAgIGlmICh0aGlzW2tleV0gIT0gdW5kZWZpbmVkKSB0aGlzW2tleV0gPSBqc29uW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkNvbmZpZy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMpIHtcbiAgICAgICAgaWYgKHRoaXNba2V5XSAhPSB1bmRlZmluZWQgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBrZXkpKSBqc29uW2tleV0gPSB0aGlzW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbmZpZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIERldmljZSgpIHtcbiAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBhdWRpbyA9IG5ldyBBdWRpbyxcbiAgICAgICAgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7XG5cbiAgICB0aGlzLnVzZXJBZ2VudCA9IHVzZXJBZ2VudDtcblxuICAgIHRoaXMucGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgdGhpcy5pbnZQaXhlbFJhdGlvID0gMSAvIHRoaXMucGl4ZWxSYXRpbztcblxuICAgIHRoaXMuYnJvd3NlciA9IHVzZXJBZ2VudC5tYXRjaCgvKG9wZXJhfGNocm9tZXxzYWZhcml8ZmlyZWZveHxtc2llKVxcLz9cXHMqKFxcLj9cXGQrKFxcLlxcZCspKikvaSlbMV07XG4gICAgdGhpcy50b3VjaCA9IFwib250b3VjaHN0YXJ0XCIgaW4gd2luZG93O1xuICAgIHRoaXMubW9iaWxlID0gL2FuZHJvaWR8d2Vib3N8aXBob25lfGlwYWR8aXBvZHxibGFja2JlcnJ5L2kudGVzdCh1c2VyQWdlbnQpO1xuXG4gICAgdGhpcy5wb2ludGVyTG9jayA9IFwicG9pbnRlckxvY2tFbGVtZW50XCIgaW4gZG9jdW1lbnQgfHwgXCJtb3pQb2ludGVyTG9ja0VsZW1lbnRcIiBpbiBkb2N1bWVudCB8fCBcIndlYmtpdFBvaW50ZXJMb2NrRWxlbWVudFwiIGluIGRvY3VtZW50O1xuICAgIHRoaXMuZnVsbFNjcmVlbiA9IFwiZnVsbHNjcmVlbkVsZW1lbnRcIiBpbiBkb2N1bWVudCB8fCBcIm1vekZ1bGxzY3JlZW5FbGVtZW50XCIgaW4gZG9jdW1lbnQgfHwgXCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudFwiIGluIGRvY3VtZW50O1xuXG4gICAgdGhpcy53ZWJnbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLFxuICAgICAgICAgICAgbmFtZXMgPSBbXCIzZFwiLCBcIm1vei13ZWJnbFwiLCBcImV4cGVyaW1lbnRhbC13ZWJnbFwiLCBcIndlYmtpdC0zZFwiLCBcIndlYmdsXCJdLFxuICAgICAgICAgICAgaGFzLCBpID0gbmFtZXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGhhcyA9ICEhY2FudmFzLmdldENvbnRleHQobmFtZXNbaV0pO1xuICAgICAgICAgICAgaWYgKGhhcykgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzO1xuICAgIH0oKSk7XG5cbiAgICB0aGlzLmNhbnZhcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLFxuICAgICAgICAgICAgaGFzID0gISFjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgIHJldHVybiBoYXM7XG4gICAgfSgpKTtcblxuICAgIHRoaXMuZ2FtZXBhZHMgPSAhIW5hdmlnYXRvci5nZXRHYW1lcGFkcyB8fCAhIW5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkcyB8fCAhIW5hdmlnYXRvci53ZWJraXRHYW1lcGFkcztcblxuICAgIHRoaXMuYXVkaW9NcGVnID0gISFhdWRpby5jYW5QbGF5VHlwZShcImF1ZGlvL21wZWdcIik7XG4gICAgdGhpcy5hdWRpb09nZyA9ICEhYXVkaW8uY2FuUGxheVR5cGUoXCJhdWRpby9vZ2dcIik7XG4gICAgdGhpcy5hdWRpb01wMyA9ICEhYXVkaW8uY2FuUGxheVR5cGUoXCJhdWRpby9tcDNcIik7XG4gICAgdGhpcy5hdWRpb01wNCA9ICEhYXVkaW8uY2FuUGxheVR5cGUoXCJhdWRpby9tcDRcIik7XG5cbiAgICB0aGlzLnZpZGVvV2VibSA9ICEhdmlkZW8uY2FuUGxheVR5cGUoXCJ2aWRlby93ZWJtXCIpO1xuICAgIHRoaXMudmlkZW9PZ2cgPSAhIXZpZGVvLmNhblBsYXlUeXBlKFwidmlkZW8vb2dnXCIpO1xuICAgIHRoaXMudmlkZW9NcDQgPSAhIXZpZGVvLmNhblBsYXlUeXBlKFwidmlkZW8vbXA0XCIpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IERldmljZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBTUExJVEVSID0gL1sgLF0rLyxcblxuICAgIFdFQkdMX05BTUVTID0gW1wid2ViZ2xcIiwgXCJ3ZWJraXQtM2RcIiwgXCJtb3otd2ViZ2xcIiwgXCJleHBlcmltZW50YWwtd2ViZ2xcIiwgXCIzZFwiXSxcbiAgICBXRUJHTF9BVFRSSUJVVEVTID0ge1xuICAgICAgICBhbHBoYTogdHJ1ZSxcbiAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxuICAgICAgICBkZXB0aDogdHJ1ZSxcbiAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhOiB0cnVlLFxuICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IGZhbHNlLFxuICAgICAgICBzdGVuY2lsOiB0cnVlXG4gICAgfTtcblxuXG5mdW5jdGlvbiBEb20oKSB7XG59XG5cblxudmFyIEVWRU5UX0NBTExCQUNLX0lEID0gMCxcbiAgICBFVkVOVF9DQUxMQkFDS1MgPSB7fTtcbkRvbS5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbiAob2JqLCBuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIG5hbWVzID0gbmFtZS5zcGxpdChTUExJVEVSKSxcbiAgICAgICAgaSA9IG5hbWVzLmxlbmd0aCxcbiAgICAgICAgc2NvcGUgPSBjdHggfHwgb2JqLFxuICAgICAgICBhZm4gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzY29wZSwgZSB8fCB3aW5kb3cuZXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgRVZFTlRfQ0FMTEJBQ0tTWyhjYWxsYmFjay5fX0VWRU5UX0NBTExCQUNLX0lEX18gPSBFVkVOVF9DQUxMQkFDS19JRCsrKV0gPSBhZm47XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcblxuICAgICAgICBpZiAob2JqLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBvYmouYXR0YWNoRXZlbnQoXCJvblwiICsgbmFtZSwgYWZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGFmbiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG5Eb20ucHJvdG90eXBlLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKG9iaiwgbmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoU1BMSVRFUiksXG4gICAgICAgIGkgPSBuYW1lcy5sZW5ndGgsXG4gICAgICAgIHNjb3BlID0gY3R4IHx8IG9iaixcbiAgICAgICAgaWQgPSBjYWxsYmFjay5fX0VWRU5UX0NBTExCQUNLX0lEX18sXG4gICAgICAgIGFmbiA9IEVWRU5UX0NBTExCQUNLU1tpZF07XG5cbiAgICBFVkVOVF9DQUxMQkFDS1NbaWRdID0gbnVsbDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgbmFtZSA9IG5hbWVzW2ldO1xuXG4gICAgICAgIGlmIChvYmouZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIG9iai5kZXRhY2hFdmVudChcIm9uXCIgKyBuYW1lLCBhZm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgYWZuLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbkRvbS5wcm90b3R5cGUuYWRkTWV0YSA9IGZ1bmN0aW9uIChpZCwgbmFtZSwgY29udGVudCkge1xuICAgIHZhciBtZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm1ldGFcIiksXG4gICAgICAgIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuXG4gICAgaWYgKGlkKSBtZXRhLmlkID0gaWQ7XG4gICAgaWYgKG5hbWUpIG1ldGEubmFtZSA9IG5hbWU7XG4gICAgaWYgKGNvbnRlbnQpIG1ldGEuY29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICBoZWFkLmluc2VydEJlZm9yZShtZXRhLCBoZWFkLmZpcnN0Q2hpbGQpO1xufTtcblxuXG5Eb20ucHJvdG90eXBlLmdldFdlYkdMQ29udGV4dCA9IGZ1bmN0aW9uIChjYW52YXMsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIga2V5LCBnbCwgaSA9IFdFQkdMX05BTUVTLmxlbmd0aDtcblxuICAgIGF0dHJpYnV0ZXMgfHwgKGF0dHJpYnV0ZXMgPSB7fSk7XG4gICAgZm9yIChrZXkgaW4gV0VCR0xfQVRUUklCVVRFUykge1xuICAgICAgICBpZiAoYXR0cmlidXRlc1trZXldID09IHVuZGVmaW5lZCkgYXR0cmlidXRlc1trZXldID0gV0VCR0xfQVRUUklCVVRFU1trZXldO1xuICAgIH1cblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoV0VCR0xfTkFNRVNbaV0sIGF0dHJpYnV0ZXMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEb20uZ2V0V2ViR0xDb250ZXh0OiBjb3VsZCBub3QgZ2V0IGEgV2ViR0wgQ29udGV4dCBcIiArIChlcnIubWVzc2FnZSB8fCBcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIWdsKSB0aHJvdyBcIkRvbS5nZXRXZWJHTENvbnRleHQ6IGNvdWxkIG5vdCBnZXQgYSBXZWJHTCBDb250ZXh0XCI7XG5cbiAgICByZXR1cm4gZ2w7XG59O1xuXG5cbnZhciBjcmVhdGVTaGFkZXIgPSBEb20ucHJvdG90eXBlLmNyZWF0ZVNoYWRlciA9IGZ1bmN0aW9uIChnbCwgc291cmNlLCB0eXBlKSB7XG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcblxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkRvbS5jcmVhdGVTaGFkZXI6IHByb2JsZW0gY29tcGlsaW5nIHNoYWRlciBcIiArIGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKSk7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG59O1xuXG5cbkRvbS5wcm90b3R5cGUuY3JlYXRlUHJvZ3JhbSA9IGZ1bmN0aW9uIChnbCwgdmVydGV4LCBmcmFnbWVudCkge1xuICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpLFxuICAgICAgICBzaGFkZXI7XG5cbiAgICBzaGFkZXIgPSBjcmVhdGVTaGFkZXIoZ2wsIHZlcnRleCwgZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHNoYWRlcik7XG4gICAgZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBzaGFkZXIgPSBjcmVhdGVTaGFkZXIoZ2wsIGZyYWdtZW50LCBnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBzaGFkZXIpO1xuICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuXG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG4gICAgZ2wudmFsaWRhdGVQcm9ncmFtKHByb2dyYW0pO1xuICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEb20uY3JlYXRlUHJvZ3JhbTogcHJvYmxlbSBjb21waWxpbmcgUHJvZ3JhbSBcIiArIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvZ3JhbTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgRG9tO1xuIiwidmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGlzQXJyYXkgPSB1dGlsLmlzQXJyYXksXG4gICAgU1BMSVRFUiA9IC9bICxdKy8sXG4gICAgQ09VTlRFUiA9IDA7XG5cblxuZnVuY3Rpb24gRW51bShlbnVtcykge1xuICAgIGVudW1zID0gaXNBcnJheShlbnVtcykgPyBlbnVtcyA6IGVudW1zLnNwbGl0KFNQTElURVIpO1xuICAgIHZhciBpID0gZW51bXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpc1tlbnVtc1tpXV0gPSArK0NPVU5URVI7XG59XG5cblxuRW51bS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGVudW1zKSB7XG4gICAgZW51bXMgPSBpc0FycmF5KGVudW1zKSA/IGVudW1zIDogZW51bXMuc3BsaXQoU1BMSVRFUik7XG4gICAgdmFyIGkgPSBlbnVtcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzW2VudW1zW2ldXSA9ICsrQ09VTlRFUjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5FbnVtLnByb3RvdHlwZS5pbiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB2YXIga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gdGhpcykge1xuICAgICAgICBpZiAodGhpc1trZXldID09IG51bSkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEVudW07XG4iLCIndXNlIHN0cmljdCc7XG5cblxudmFyIHNoaWZ0ID0gQXJyYXkucHJvdG90eXBlLnNoaWZ0O1xuXG5cbi8qKlxuICogQGNsYXNzIFhpYW4uRXZlbnRFbWl0dGVyXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcblxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xufVxuXG4vKipcbiAqIGF0dGFjaGVzIGZ1bmN0aW9uIHRvIGFuIGV2ZW50XG4gKiBAbWVtYmVyb2YgWGlhbi5FdmVudEVtaXR0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICogQHBhcmFtIHtvYmplY3R9IGN0eFxuICogQHJldHVybiB0aGlzXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIsIGN0eCkge1xuICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgICAoZXZlbnRzW3R5cGVdIHx8IChldmVudHNbdHlwZV0gPSBbXSkpLnB1c2goe1xuICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgIGN0eDogY3R4IHx8IHRoaXNcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBhdHRhY2hlcyBmdW5jdGlvbiB0byBhbiBldmVudCwgb24gdGhlIGZpcnN0IGNhbGwgaXRzIHJlbW92ZWRcbiAqIEBtZW1iZXJvZiBYaWFuLkV2ZW50RW1pdHRlclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gKiBAcGFyYW0ge29iamVjdH0gY3R4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyLCBjdHgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGN0eCA9IGN0eCB8fCB0aGlzO1xuXG4gICAgZnVuY3Rpb24gb25jZSgpIHtcbiAgICAgICAgX3RoaXMub2ZmKHR5cGUsIG9uY2UsIGN0eCk7XG4gICAgICAgIGxpc3RlbmVyLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbih0eXBlLCBvbmNlLCBjdHgpO1xufTtcblxuLyoqXG4gKiBhdHRhY2hlcyBmdW5jdGlvbiB0byBhbiBldmVudCBvbiBhbm90aGVyIG9iamVjdFxuICogQG1lbWJlcm9mIFhpYW4uRXZlbnRFbWl0dGVyXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjdHhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlblRvID0gZnVuY3Rpb24gKG9iaiwgdHlwZSwgbGlzdGVuZXIsIGN0eCkge1xuICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlcikpIHRocm93IFwiQ2FuJ3QgbGlzdGVuIHRvIE9iamVjdCwgaXQncyBub3QgYSBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXJcIjtcblxuICAgIG9iai5vbih0eXBlLCBsaXN0ZW5lciwgY3R4IHx8IHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgZnVuY3Rpb24gZnJvbSBhbiBldmVudFxuICogQG1lbWJlcm9mIFhpYW4uRXZlbnRFbWl0dGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjdHhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lciwgY3R4KSB7XG4gICAgdmFyIHRoaXNFdmVudHMgPSB0aGlzLl9ldmVudHMsXG4gICAgICAgIGV2ZW50cywgZXZlbnQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgZm9yIChpIGluIHRoaXNFdmVudHMpXG4gICAgICAgICAgICBpZiAoKGV2ZW50cyA9IHRoaXNFdmVudHNbaV0pKSBldmVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZXZlbnRzID0gdGhpc0V2ZW50c1t0eXBlXTtcbiAgICBpZiAoIWV2ZW50cykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgIGV2ZW50cy5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eCA9IGN0eCB8fCB0aGlzO1xuICAgICAgICBpID0gZXZlbnRzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50Lmxpc3RlbmVyID09PSBsaXN0ZW5lciAmJiBldmVudC5jdHggPT09IGN0eCkge1xuICAgICAgICAgICAgICAgIGV2ZW50cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogZW1pdHMgZXZlbnQgdHlwZVxuICogQG1lbWJlcm9mIFhpYW4uRXZlbnRFbWl0dGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB0aGlzXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50c1t0eXBlXSxcbiAgICAgICAgYTEsIGEyLCBhMywgYTQsXG4gICAgICAgIGxlbmd0aCwgZXZlbnQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXM7XG4gICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgaSA9IGV2ZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIChldmVudCA9IGV2ZW50c1tpXSkubGlzdGVuZXIuY2FsbChldmVudC5jdHgpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChsZW5ndGggPT09IDIpIHtcbiAgICAgICAgYTEgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGkgPSBldmVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAoZXZlbnQgPSBldmVudHNbaV0pLmxpc3RlbmVyLmNhbGwoZXZlbnQuY3R4LCBhMSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gMykge1xuICAgICAgICBhMSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgYTIgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIGkgPSBldmVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAoZXZlbnQgPSBldmVudHNbaV0pLmxpc3RlbmVyLmNhbGwoZXZlbnQuY3R4LCBhMSwgYTIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChsZW5ndGggPT09IDQpIHtcbiAgICAgICAgYTEgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGEyID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBhMyA9IGFyZ3VtZW50c1szXTtcbiAgICAgICAgaSA9IGV2ZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIChldmVudCA9IGV2ZW50c1tpXSkubGlzdGVuZXIuY2FsbChldmVudC5jdHgsIGExLCBhMiwgYTMpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChsZW5ndGggPT09IDUpIHtcbiAgICAgICAgYTEgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGEyID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBhMyA9IGFyZ3VtZW50c1szXTtcbiAgICAgICAgYTQgPSBhcmd1bWVudHNbNF07XG4gICAgICAgIGkgPSBldmVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAoZXZlbnQgPSBldmVudHNbaV0pLmxpc3RlbmVyLmNhbGwoZXZlbnQuY3R4LCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzaGlmdC5hcHBseShhcmd1bWVudHMpO1xuICAgICAgICBpID0gZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgKGV2ZW50ID0gZXZlbnRzW2ldKS5saXN0ZW5lci5hcHBseShldmVudC5jdHgsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIFhpYW4uRXZlbnRFbWl0dGVyXG4gKiBAcGFyYW0ge2NvbnN0cnVjdG9yfSBjaGlsZFxuICogQHBhcmFtIHtjb25zdHJ1Y3Rvcn0gcGFyZW50XG4gKiBAcmV0dXJuIGNoaWxkXG4gKi9cbkV2ZW50RW1pdHRlci5leHRlbmQgPSBmdW5jdGlvbiAoY2hpbGQsIHBhcmVudCkge1xuICAgIGlmICghcGFyZW50KSBwYXJlbnQgPSB0aGlzO1xuXG4gICAgY2hpbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgICBjaGlsZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjaGlsZDtcblxuICAgICh0aGlzLl9jaGlsZHJlbiB8fCAodGhpcy5fY2hpbGRyZW4gPSB7fSkpW2NoaWxkLm5hbWVdID0gY2hpbGQ7XG4gICAgY2hpbGQuX3BhcmVudCA9IHRoaXM7XG5cbiAgICBjaGlsZC5leHRlbmQgPSBwYXJlbnQuZXh0ZW5kIHx8IHRoaXMuZXh0ZW5kO1xuXG4gICAgaWYgKHBhcmVudC5vbkV4dGVuZCkge1xuICAgICAgICBpZiAoIWNoaWxkLm9uRXh0ZW5kKSBjaGlsZC5vbkV4dGVuZCA9IHBhcmVudC5vbkV4dGVuZDtcbiAgICAgICAgcGFyZW50Lm9uRXh0ZW5kKGNoaWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuIiwidmFyIERldmljZSA9IHJlcXVpcmUoXCIuL2RldmljZVwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBDb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZWFjaCA9IHV0aWwuZWFjaDtcblxuXG5mdW5jdGlvbiBMb2coKSB7XG59XG5cblxuaWYgKERldmljZS5tb2JpbGUpIHtcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgICBMb2cucHJvdG90eXBlLmRlYnVnID0gTG9nLnByb3RvdHlwZS5pbmZvID0gTG9nLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghQ29uZmlnLmRlYnVnKSByZXR1cm47XG4gICAgICAgIGFsZXJ0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSk7XG4gICAgfTtcblxuICAgIExvZy5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCEoQ29uZmlnLmRlYnVnIHx8IENvbmZpZy53YXJuKSkgcmV0dXJuO1xuICAgICAgICBhbGVydChzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpO1xuICAgIH07XG5cbiAgICBMb2cucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIShDb25maWcuZGVidWcgfHwgQ29uZmlnLmVycm9yKSkgcmV0dXJuO1xuICAgICAgICBhbGVydChzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpO1xuICAgIH07XG59IGVsc2Uge1xuICAgIExvZy5wcm90b3R5cGUuZGVidWcgPSBMb2cucHJvdG90eXBlLmluZm8gPSBMb2cucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFDb25maWcuZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTG9nLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIShDb25maWcuZGVidWcgfHwgQ29uZmlnLndhcm4pKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMb2cucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIShDb25maWcuZGVidWcgfHwgQ29uZmlnLmVycm9yKSkgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuXG52YXIgQ0FDSEUgPSB7fTtcbkxvZy5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIShDb25maWcuZGVidWcgfHwgQ29uZmlnLmVycm9yKSB8fCBDQUNIRVtjYWNoZUtleShhcmd1bWVudHMpXSkgcmV0dXJuO1xuXG4gICAgQ0FDSEVbY2FjaGVLZXkoYXJndW1lbnRzKV0gPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cblxuZnVuY3Rpb24gY2FjaGVLZXkoYXJncykge1xuICAgIHZhciBrZXkgPSBcIlwiLFxuICAgICAgICBpO1xuXG4gICAgZm9yIChpID0gYXJncy5sZW5ndGg7IGktLTspIGtleSArPSBhcmdzW2ldO1xuXG4gICAgcmV0dXJuIGtleTtcbn07XG5cblxuTG9nLnByb3RvdHlwZS5vYmplY3QgPSBmdW5jdGlvbiAob2JqLCB2YWx1ZXMsIHRhYnMpIHtcbiAgICBpZiAoIUNvbmZpZy5kZWJ1ZykgcmV0dXJuIFwiXCI7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG5cbiAgICB0YWJzIHx8ICh0YWJzID0gXCJcIik7XG4gICAgdmFsdWVzIHx8ICh2YWx1ZXMgPSBbXSk7XG5cbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICAgIGlmICh+dmFsdWVzLmluZGV4T2YodmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YodmFsdWUpLFxuICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0bXAgPSB0YWJzO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgdGFicyArPSBcIlxcdFwiO1xuICAgICAgICAgICAgc3RyICs9IHRhYnMgKyBpICsgXCIgPSBcIiArIHRoaXMub2JqZWN0KHZhbHVlLCB2YWx1ZXMsIHRhYnMpICsgXCJcXG5cIjtcbiAgICAgICAgICAgIHRhYnMgPSB0bXA7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBzdHIgKz0gdGFicyArIGkgKyBcIiA9IFwiICsgdmFsdWUgKyBcIlxcblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgc3RyICs9IHRhYnMgKyB2YWx1ZSArIFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICB9LCB0aGlzKTtcblxuICAgIHJldHVybiBzdHI7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IExvZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIE9iamVjdFBvb2woY29uc3RydWN0b3IpIHtcblxuICAgIHRoaXMucG9vbGVkID0gW107XG4gICAgdGhpcy5vYmplY3RzID0gW107XG4gICAgdGhpcy5vYmplY3QgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuXG5PYmplY3RQb29sLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvb2xlZCA9IHRoaXMucG9vbGVkLFxuICAgICAgICBvYmplY3QgPSBwb29sZWQubGVuZ3RoID8gcG9vbGVkLnBvcCgpIDogbmV3IHRoaXMub2JqZWN0O1xuXG4gICAgdGhpcy5vYmplY3RzLnB1c2gob2JqZWN0KTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuXG5PYmplY3RQb29sLnByb3RvdHlwZS5yZW1vdmVPYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLm9iamVjdHMsXG4gICAgICAgIHBvb2xlZCA9IHRoaXMucG9vbGVkLFxuICAgICAgICBpbmRleCA9IG9iamVjdHMuaW5kZXhPZihvYmplY3QpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgcG9vbGVkLnB1c2gob2JqZWN0KTtcbiAgICAgICAgb2JqZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5PYmplY3RQb29sLnByb3RvdHlwZS5yZW1vdmUgPSBPYmplY3RQb29sLnByb3RvdHlwZS5yZW1vdmVPYmplY3RzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlT2JqZWN0KGFyZ3VtZW50c1tpXSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuT2JqZWN0UG9vbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLm9iamVjdHMsXG4gICAgICAgIHBvb2xlZCA9IHRoaXMucG9vbGVkLFxuICAgICAgICBpID0gb2JqZWN0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSBwb29sZWQucHVzaChvYmplY3RzW2ldKTtcbiAgICBvYmplY3RzLmxlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuT2JqZWN0UG9vbC5wcm90b3R5cGUuY2xlYXJGb3JFYWNoID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLm9iamVjdHMsXG4gICAgICAgIHBvb2xlZCA9IHRoaXMucG9vbGVkLFxuICAgICAgICBvYmplY3QsXG4gICAgICAgIGkgPSBvYmplY3RzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0c1tpXTtcblxuICAgICAgICBwb29sZWQucHVzaChvYmplY3QpO1xuICAgICAgICBmbihvYmplY3QpO1xuICAgIH1cbiAgICBvYmplY3RzLmxlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuT2JqZWN0UG9vbC5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLnBvb2xlZC5sZW5ndGggPSB0aGlzLm9iamVjdHMubGVuZ3RoID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdFBvb2w7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCl7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgUkFURSA9IDEwMDAgLyA2MCxcbiAgICB3ID0gdHlwZW9mKHdpbmRvdykgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxudy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbncud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG53Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxudy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG53Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5mdW5jdGlvbiAoY2FsbGJhY2spIHtcblxuICAgIHJldHVybiB3LnNldFRpbWVvdXQoY2FsbGJhY2ssIFJBVEUpO1xufVxuKTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pIiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbyA9IChmdW5jdGlvbihleHBvcnRzLCBnbG9iYWwpIHtcbiAgICAgICAgdmFyIGlvID0gZXhwb3J0cztcbiAgICAgICAgaW8udmVyc2lvbiA9IFwiMC45LjE2XCI7XG4gICAgICAgIGlvLnByb3RvY29sID0gMTtcbiAgICAgICAgaW8udHJhbnNwb3J0cyA9IFtdO1xuICAgICAgICBpby5qID0gW107XG4gICAgICAgIGlvLnNvY2tldHMgPSB7fTtcbiAgICAgICAgaW8uY29ubmVjdCA9IGZ1bmN0aW9uKGhvc3QsIGRldGFpbHMpIHtcbiAgICAgICAgICAgIHZhciB1cmkgPSBpby51dGlsLnBhcnNlVXJpKGhvc3QpLFxuICAgICAgICAgICAgICAgIHV1cmksIHNvY2tldDtcbiAgICAgICAgICAgIGlmIChnbG9iYWwgJiYgZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgdXJpLnByb3RvY29sID0gdXJpLnByb3RvY29sIHx8IGdsb2JhbC5sb2NhdGlvbi5wcm90b2NvbC5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdCB8fCAoZ2xvYmFsLmRvY3VtZW50ID8gZ2xvYmFsLmRvY3VtZW50LmRvbWFpbiA6IGdsb2JhbC5sb2NhdGlvbi5ob3N0bmFtZSk7XG4gICAgICAgICAgICAgICAgdXJpLnBvcnQgPSB1cmkucG9ydCB8fCBnbG9iYWwubG9jYXRpb24ucG9ydFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXVyaSA9IGlvLnV0aWwudW5pcXVlVXJpKHVyaSk7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBob3N0OiB1cmkuaG9zdCxcbiAgICAgICAgICAgICAgICBzZWN1cmU6IFwiaHR0cHNcIiA9PSB1cmkucHJvdG9jb2wsXG4gICAgICAgICAgICAgICAgcG9ydDogdXJpLnBvcnQgfHwgKFwiaHR0cHNcIiA9PSB1cmkucHJvdG9jb2wgPyA0NDMgOiA4MCksXG4gICAgICAgICAgICAgICAgcXVlcnk6IHVyaS5xdWVyeSB8fCBcIlwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW8udXRpbC5tZXJnZShvcHRpb25zLCBkZXRhaWxzKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zW1wiZm9yY2UgbmV3IGNvbm5lY3Rpb25cIl0gfHwgIWlvLnNvY2tldHNbdXVyaV0pIHtcbiAgICAgICAgICAgICAgICBzb2NrZXQgPSBuZXcgaW8uU29ja2V0KG9wdGlvbnMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSAmJiBzb2NrZXQpIHtcbiAgICAgICAgICAgICAgICBpby5zb2NrZXRzW3V1cmldID0gc29ja2V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb2NrZXQgPSBzb2NrZXQgfHwgaW8uc29ja2V0c1t1dXJpXTtcbiAgICAgICAgICAgIHJldHVybiBzb2NrZXQub2YodXJpLnBhdGgubGVuZ3RoID4gMSA/IHVyaS5wYXRoIDogXCJcIilcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlvXG4gICAgfSkoe30sIHRoaXMpO1xuICAgIChmdW5jdGlvbihleHBvcnRzLCBnbG9iYWwpIHtcbiAgICAgICAgdmFyIHV0aWwgPSBleHBvcnRzLnV0aWwgPSB7fTtcbiAgICAgICAgdmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoW146XFwvPyMuXSspOik/KD86XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPyhbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xuICAgICAgICB2YXIgcGFydHMgPSBbXCJzb3VyY2VcIiwgXCJwcm90b2NvbFwiLCBcImF1dGhvcml0eVwiLCBcInVzZXJJbmZvXCIsIFwidXNlclwiLCBcInBhc3N3b3JkXCIsIFwiaG9zdFwiLCBcInBvcnRcIiwgXCJyZWxhdGl2ZVwiLCBcInBhdGhcIiwgXCJkaXJlY3RvcnlcIiwgXCJmaWxlXCIsIFwicXVlcnlcIiwgXCJhbmNob3JcIl07XG4gICAgICAgIHV0aWwucGFyc2VVcmkgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgXCJcIiksXG4gICAgICAgICAgICAgICAgdXJpID0ge30sIGkgPSAxNDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCBcIlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXJpXG4gICAgICAgIH07XG4gICAgICAgIHV0aWwudW5pcXVlVXJpID0gZnVuY3Rpb24odXJpKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG9jb2wgPSB1cmkucHJvdG9jb2wsXG4gICAgICAgICAgICAgICAgaG9zdCA9IHVyaS5ob3N0LFxuICAgICAgICAgICAgICAgIHBvcnQgPSB1cmkucG9ydDtcbiAgICAgICAgICAgIGlmIChcImRvY3VtZW50XCIgaW4gZ2xvYmFsKSB7XG4gICAgICAgICAgICAgICAgaG9zdCA9IGhvc3QgfHwgZG9jdW1lbnQuZG9tYWluO1xuICAgICAgICAgICAgICAgIHBvcnQgPSBwb3J0IHx8IChwcm90b2NvbCA9PSBcImh0dHBzXCIgJiYgZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgIT09IFwiaHR0cHM6XCIgPyA0NDMgOiBkb2N1bWVudC5sb2NhdGlvbi5wb3J0KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBob3N0ID0gaG9zdCB8fCBcImxvY2FsaG9zdFwiO1xuICAgICAgICAgICAgICAgIGlmICghcG9ydCAmJiBwcm90b2NvbCA9PSBcImh0dHBzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9ydCA9IDQ0M1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAocHJvdG9jb2wgfHwgXCJodHRwXCIpICsgXCI6Ly9cIiArIGhvc3QgKyBcIjpcIiArIChwb3J0IHx8IDgwKVxuICAgICAgICB9O1xuICAgICAgICB1dGlsLnF1ZXJ5ID0gZnVuY3Rpb24oYmFzZSwgYWRkaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IHV0aWwuY2h1bmtRdWVyeShiYXNlIHx8IFwiXCIpLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgICAgIHV0aWwubWVyZ2UocXVlcnksIHV0aWwuY2h1bmtRdWVyeShhZGRpdGlvbiB8fCBcIlwiKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBwYXJ0IGluIHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KHBhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaChwYXJ0ICsgXCI9XCIgKyBxdWVyeVtwYXJ0XSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50cy5sZW5ndGggPyBcIj9cIiArIGNvbXBvbmVudHMuam9pbihcIiZcIikgOiBcIlwiXG4gICAgICAgIH07XG4gICAgICAgIHV0aWwuY2h1bmtRdWVyeSA9IGZ1bmN0aW9uKHFzKSB7XG4gICAgICAgICAgICB2YXIgcXVlcnkgPSB7fSwgcGFyYW1zID0gcXMuc3BsaXQoXCImXCIpLFxuICAgICAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgICAgIGwgPSBwYXJhbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGt2O1xuICAgICAgICAgICAgZm9yICg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgICAgICBrdiA9IHBhcmFtc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICAgICAgICAgICAgaWYgKGt2WzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5W2t2WzBdXSA9IGt2WzFdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIHZhciBwYWdlTG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHV0aWwubG9hZCA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICBpZiAoXCJkb2N1bWVudFwiIGluIGdsb2JhbCAmJiBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHwgcGFnZUxvYWRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbigpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1dGlsLm9uKGdsb2JhbCwgXCJsb2FkXCIsIGZuLCBmYWxzZSlcbiAgICAgICAgfTtcbiAgICAgICAgdXRpbC5vbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBmbiwgY2FwdHVyZSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KFwib25cIiArIGV2ZW50LCBmbilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBjYXB0dXJlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdXRpbC5yZXF1ZXN0ID0gZnVuY3Rpb24oeGRvbWFpbikge1xuICAgICAgICAgICAgaWYgKHhkb21haW4gJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXV0aWwudWEuaGFzQ09SUykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCB1dGlsLnVhLmhhc0NPUlMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXhkb21haW4pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvd1soW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKSldKFwiTWljcm9zb2Z0LlhNTEhUVFBcIilcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdykge1xuICAgICAgICAgICAgdXRpbC5sb2FkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBhZ2VMb2FkZWQgPSB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHV0aWwuZGVmZXIgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgaWYgKCF1dGlsLnVhLndlYmtpdCB8fCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHV0aWwubG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZuLCAxMDApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICB1dGlsLm1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBhZGRpdGlvbmFsLCBkZWVwLCBsYXN0c2Vlbikge1xuICAgICAgICAgICAgdmFyIHNlZW4gPSBsYXN0c2VlbiB8fCBbXSxcbiAgICAgICAgICAgICAgICBkZXB0aCA9IHR5cGVvZiBkZWVwID09IFwidW5kZWZpbmVkXCIgPyAyIDogZGVlcCxcbiAgICAgICAgICAgICAgICBwcm9wO1xuICAgICAgICAgICAgZm9yIChwcm9wIGluIGFkZGl0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWRkaXRpb25hbC5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiB1dGlsLmluZGV4T2Yoc2VlbiwgcHJvcCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BdICE9PSBcIm9iamVjdFwiIHx8ICFkZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gYWRkaXRpb25hbFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZW4ucHVzaChhZGRpdGlvbmFsW3Byb3BdKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5tZXJnZSh0YXJnZXRbcHJvcF0sIGFkZGl0aW9uYWxbcHJvcF0sIGRlcHRoIC0gMSwgc2VlbilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRcbiAgICAgICAgfTtcbiAgICAgICAgdXRpbC5taXhpbiA9IGZ1bmN0aW9uKGN0b3IsIGN0b3IyKSB7XG4gICAgICAgICAgICB1dGlsLm1lcmdlKGN0b3IucHJvdG90eXBlLCBjdG9yMi5wcm90b3R5cGUpXG4gICAgICAgIH07XG4gICAgICAgIHV0aWwuaW5oZXJpdCA9IGZ1bmN0aW9uKGN0b3IsIGN0b3IyKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBmKCkge31cbiAgICAgICAgICAgIGYucHJvdG90eXBlID0gY3RvcjIucHJvdG90eXBlO1xuICAgICAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgZlxuICAgICAgICB9O1xuICAgICAgICB1dGlsLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCJcbiAgICAgICAgfTtcbiAgICAgICAgdXRpbC5pbnRlcnNlY3QgPSBmdW5jdGlvbihhcnIsIGFycjIpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBbXSxcbiAgICAgICAgICAgICAgICBsb25nZXN0ID0gYXJyLmxlbmd0aCA+IGFycjIubGVuZ3RoID8gYXJyIDogYXJyMixcbiAgICAgICAgICAgICAgICBzaG9ydGVzdCA9IGFyci5sZW5ndGggPiBhcnIyLmxlbmd0aCA/IGFycjIgOiBhcnI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNob3J0ZXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh+dXRpbC5pbmRleE9mKGxvbmdlc3QsIHNob3J0ZXN0W2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzaG9ydGVzdFtpXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0XG4gICAgICAgIH07XG4gICAgICAgIHV0aWwuaW5kZXhPZiA9IGZ1bmN0aW9uKGFyciwgbywgaSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGFyci5sZW5ndGgsIGkgPSBpIDwgMCA/IGkgKyBqIDwgMCA/IDAgOiBpICsgaiA6IGkgfHwgMDsgaSA8IGogJiYgYXJyW2ldICE9PSBvOyBpKyspIHt9XG4gICAgICAgICAgICByZXR1cm4gaiA8PSBpID8gLTEgOiBpXG4gICAgICAgIH07XG4gICAgICAgIHV0aWwudG9BcnJheSA9IGZ1bmN0aW9uKGVudSkge1xuICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbnUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZW51W2ldKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyclxuICAgICAgICB9O1xuICAgICAgICB1dGlsLnVhID0ge307XG4gICAgICAgIHV0aWwudWEuaGFzQ09SUyA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEud2l0aENyZWRlbnRpYWxzICE9IHVuZGVmaW5lZFxuICAgICAgICB9KSgpO1xuICAgICAgICB1dGlsLnVhLndlYmtpdCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvd2Via2l0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgdXRpbC51YS5pRGV2aWNlID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbmF2aWdhdG9yICYmIC9pUGFkfGlQaG9uZXxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIH0pKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUuZXhwb3J0cywgdGhpcyk7XG4gICAgKGZ1bmN0aW9uKGV4cG9ydHMsIGlvKSB7XG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4gICAgICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHt9XG4gICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLiRldmVudHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHMgPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLiRldmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBmblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaW8udXRpbC5pc0FycmF5KHRoaXMuJGV2ZW50c1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZXZlbnRzW25hbWVdLnB1c2goZm4pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZXZlbnRzW25hbWVdID0gW3RoaXMuJGV2ZW50c1tuYW1lXSwgZm5dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG4gICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIobmFtZSwgb24pO1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uLmxpc3RlbmVyID0gZm47XG4gICAgICAgICAgICB0aGlzLm9uKG5hbWUsIG9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuJGV2ZW50cyAmJiB0aGlzLiRldmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXMuJGV2ZW50c1tuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoaW8udXRpbC5pc0FycmF5KGxpc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGZuIHx8IChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGZuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsaXN0LnNwbGljZShwb3MsIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy4kZXZlbnRzW25hbWVdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdCA9PT0gZm4gfHwgKGxpc3QubGlzdGVuZXIgJiYgbGlzdC5saXN0ZW5lciA9PT0gZm4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy4kZXZlbnRzW25hbWVdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHMgPSB7fTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuJGV2ZW50cyAmJiB0aGlzLiRldmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy4kZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZXZlbnRzID0ge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy4kZXZlbnRzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZXZlbnRzW25hbWVdID0gW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW8udXRpbC5pc0FycmF5KHRoaXMuJGV2ZW50c1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBbdGhpcy4kZXZlbnRzW25hbWVdXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGV2ZW50c1tuYW1lXVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJGV2ZW50cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLiRldmVudHNbbmFtZV07XG4gICAgICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpby51dGlsLmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICB9KShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHMsIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHMpO1xuICAgIChmdW5jdGlvbihleHBvcnRzLCBuYXRpdmVKU09OKSB7XG4gICAgICAgIGlmIChuYXRpdmVKU09OICYmIG5hdGl2ZUpTT04ucGFyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzLkpTT04gPSB7XG4gICAgICAgICAgICAgICAgcGFyc2U6IG5hdGl2ZUpTT04ucGFyc2UsXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5OiBuYXRpdmVKU09OLnN0cmluZ2lmeVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBKU09OID0gZXhwb3J0cy5KU09OID0ge307XG5cbiAgICAgICAgZnVuY3Rpb24gZihuKSB7XG4gICAgICAgICAgICByZXR1cm4gbiA8IDEwID8gXCIwXCIgKyBuIDogblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGF0ZShkKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUoZC52YWx1ZU9mKCkpID8gZC5nZXRVVENGdWxsWWVhcigpICsgXCItXCIgKyBmKGQuZ2V0VVRDTW9udGgoKSArIDEpICsgXCItXCIgKyBmKGQuZ2V0VVRDRGF0ZSgpKSArIFwiVFwiICsgZihkLmdldFVUQ0hvdXJzKCkpICsgXCI6XCIgKyBmKGQuZ2V0VVRDTWludXRlcygpKSArIFwiOlwiICsgZihkLmdldFVUQ1NlY29uZHMoKSkgKyBcIlpcIiA6IG51bGxcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3ggPSAvW1xcdTAwMDBcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZyxcbiAgICAgICAgICAgIGVzY2FwYWJsZSA9IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceDlmXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXG4gICAgICAgICAgICBnYXAsIGluZGVudCwgbWV0YSA9IHtcbiAgICAgICAgICAgICAgICBcIlxcYlwiOiBcIlxcXFxiXCIsXG4gICAgICAgICAgICAgICAgXCJcXHRcIjogXCJcXFxcdFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCI6IFwiXFxcXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcZlwiOiBcIlxcXFxmXCIsXG4gICAgICAgICAgICAgICAgXCJcXHJcIjogXCJcXFxcclwiLFxuICAgICAgICAgICAgICAgICdcIic6ICdcXFxcXCInLFxuICAgICAgICAgICAgICAgIFwiXFxcXFwiOiBcIlxcXFxcXFxcXCJcbiAgICAgICAgICAgIH0sIHJlcDtcblxuICAgICAgICBmdW5jdGlvbiBxdW90ZShzdHJpbmcpIHtcbiAgICAgICAgICAgIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGVzY2FwYWJsZS50ZXN0KHN0cmluZykgPyAnXCInICsgc3RyaW5nLnJlcGxhY2UoZXNjYXBhYmxlLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBtZXRhW2FdO1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYyA9PT0gXCJzdHJpbmdcIiA/IGMgOiBcIlxcXFx1XCIgKyAoXCIwMDAwXCIgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNClcbiAgICAgICAgICAgIH0pICsgJ1wiJyA6ICdcIicgKyBzdHJpbmcgKyAnXCInXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdHIoa2V5LCBob2xkZXIpIHtcbiAgICAgICAgICAgIHZhciBpLCBrLCB2LCBsZW5ndGgsIG1pbmQgPSBnYXAsXG4gICAgICAgICAgICAgICAgcGFydGlhbCwgdmFsdWUgPSBob2xkZXJba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRhdGUoa2V5KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXAgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwLmNhbGwoaG9sZGVyLCBrZXksIHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdW90ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IFwibnVsbFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJudWxsXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBnYXAgKz0gaW5kZW50O1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsW2ldID0gc3RyKGksIHZhbHVlKSB8fCBcIm51bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwID8gXCJbXVwiIDogZ2FwID8gXCJbXFxuXCIgKyBnYXAgKyBwYXJ0aWFsLmpvaW4oXCIsXFxuXCIgKyBnYXApICsgXCJcXG5cIiArIG1pbmQgKyBcIl1cIiA6IFwiW1wiICsgcGFydGlhbC5qb2luKFwiLFwiKSArIFwiXVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FwID0gbWluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcCAmJiB0eXBlb2YgcmVwID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSByZXAubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBbaV0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IHJlcFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gocXVvdGUoaykgKyAoZ2FwID8gXCI6IFwiIDogXCI6XCIpICsgdilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBzdHIoaywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKHF1b3RlKGspICsgKGdhcCA/IFwiOiBcIiA6IFwiOlwiKSArIHYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwID8gXCJ7fVwiIDogZ2FwID8gXCJ7XFxuXCIgKyBnYXAgKyBwYXJ0aWFsLmpvaW4oXCIsXFxuXCIgKyBnYXApICsgXCJcXG5cIiArIG1pbmQgKyBcIn1cIiA6IFwie1wiICsgcGFydGlhbC5qb2luKFwiLFwiKSArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICBnYXAgPSBtaW5kO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIEpTT04uc3RyaW5naWZ5ID0gZnVuY3Rpb24odmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBnYXAgPSBcIlwiO1xuICAgICAgICAgICAgaW5kZW50ID0gXCJcIjtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3BhY2U7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgKz0gXCIgXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ID0gc3BhY2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXAgPSByZXBsYWNlcjtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlciAmJiB0eXBlb2YgcmVwbGFjZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAodHlwZW9mIHJlcGxhY2VyICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXBsYWNlci5sZW5ndGggIT09IFwibnVtYmVyXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSlNPTi5zdHJpbmdpZnlcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHIoXCJcIiwge1xuICAgICAgICAgICAgICAgIFwiXCI6IHZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBKU09OLnBhcnNlID0gZnVuY3Rpb24odGV4dCwgcmV2aXZlcikge1xuICAgICAgICAgICAgdmFyIGo7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdhbGsoaG9sZGVyLCBrZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaywgdiwgdmFsdWUgPSBob2xkZXJba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoayBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gd2Fsayh2YWx1ZSwgayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVtrXSA9IHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsdWVba11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldml2ZXIuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ID0gU3RyaW5nKHRleHQpO1xuICAgICAgICAgICAgY3gubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGlmIChjeC50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShjeCwgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcXFxcdVwiICsgKFwiMDAwMFwiICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvXltcXF0sOnt9XFxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxcXCg/OltcIlxcXFxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nLCBcIkBcIikucmVwbGFjZSgvXCJbXlwiXFxcXFxcblxccl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/L2csIFwiXVwiKS5yZXBsYWNlKC8oPzpefDp8LCkoPzpcXHMqXFxbKSsvZywgXCJcIikpKSB7XG4gICAgICAgICAgICAgICAgaiA9IGV2YWwoXCIoXCIgKyB0ZXh0ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gXCJmdW5jdGlvblwiID8gd2Fsayh7XG4gICAgICAgICAgICAgICAgICAgIFwiXCI6IGpcbiAgICAgICAgICAgICAgICB9LCBcIlwiKSA6IGpcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkpTT04ucGFyc2VcIilcbiAgICAgICAgfVxuICAgIH0pKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUuZXhwb3J0cywgdHlwZW9mIEpTT04gIT09IFwidW5kZWZpbmVkXCIgPyBKU09OIDogdW5kZWZpbmVkKTtcbiAgICAoZnVuY3Rpb24oZXhwb3J0cywgaW8pIHtcbiAgICAgICAgdmFyIHBhcnNlciA9IGV4cG9ydHMucGFyc2VyID0ge307XG4gICAgICAgIHZhciBwYWNrZXRzID0gcGFyc2VyLnBhY2tldHMgPSBbXCJkaXNjb25uZWN0XCIsIFwiY29ubmVjdFwiLCBcImhlYXJ0YmVhdFwiLCBcIm1lc3NhZ2VcIiwgXCJqc29uXCIsIFwiZXZlbnRcIiwgXCJhY2tcIiwgXCJlcnJvclwiLCBcIm5vb3BcIl07XG4gICAgICAgIHZhciByZWFzb25zID0gcGFyc2VyLnJlYXNvbnMgPSBbXCJ0cmFuc3BvcnQgbm90IHN1cHBvcnRlZFwiLCBcImNsaWVudCBub3QgaGFuZHNoYWtlblwiLCBcInVuYXV0aG9yaXplZFwiXTtcbiAgICAgICAgdmFyIGFkdmljZSA9IHBhcnNlci5hZHZpY2UgPSBbXCJyZWNvbm5lY3RcIl07XG4gICAgICAgIHZhciBKU09OID0gaW8uSlNPTixcbiAgICAgICAgICAgIGluZGV4T2YgPSBpby51dGlsLmluZGV4T2Y7XG4gICAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gaW5kZXhPZihwYWNrZXRzLCBwYWNrZXQudHlwZSksXG4gICAgICAgICAgICAgICAgaWQgPSBwYWNrZXQuaWQgfHwgXCJcIixcbiAgICAgICAgICAgICAgICBlbmRwb2ludCA9IHBhY2tldC5lbmRwb2ludCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIGFjayA9IHBhY2tldC5hY2ssXG4gICAgICAgICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWFzb24gPSBwYWNrZXQucmVhc29uID8gaW5kZXhPZihyZWFzb25zLCBwYWNrZXQucmVhc29uKSA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZHYgPSBwYWNrZXQuYWR2aWNlID8gaW5kZXhPZihhZHZpY2UsIHBhY2tldC5hZHZpY2UpIDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlYXNvbiAhPT0gXCJcIiB8fCBhZHYgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSByZWFzb24gKyAoYWR2ICE9PSBcIlwiID8gKFwiK1wiICsgYWR2KSA6IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2tldC5kYXRhICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGFja2V0LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcGFja2V0Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2tldC5hcmdzICYmIHBhY2tldC5hcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYuYXJncyA9IHBhY2tldC5hcmdzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGV2KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbm5lY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2tldC5xcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHBhY2tldC5xc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhY2tcIjpcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHBhY2tldC5hY2tJZCArIChwYWNrZXQuYXJncyAmJiBwYWNrZXQuYXJncy5sZW5ndGggPyBcIitcIiArIEpTT04uc3RyaW5naWZ5KHBhY2tldC5hcmdzKSA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVuY29kZWQgPSBbdHlwZSwgaWQgKyAoYWNrID09IFwiZGF0YVwiID8gXCIrXCIgOiBcIlwiKSwgZW5kcG9pbnRdO1xuICAgICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZC5wdXNoKGRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlZC5qb2luKFwiOlwiKVxuICAgICAgICB9O1xuICAgICAgICBwYXJzZXIuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uKHBhY2tldHMpIHtcbiAgICAgICAgICAgIHZhciBkZWNvZGVkID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChwYWNrZXRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhY2tldHNbMF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFja2V0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFja2V0ID0gcGFja2V0c1tpXTtcbiAgICAgICAgICAgICAgICBkZWNvZGVkICs9IFwiXFx1ZmZmZFwiICsgcGFja2V0Lmxlbmd0aCArIFwiXFx1ZmZmZFwiICsgcGFja2V0c1tpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZWRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlZ2V4cCA9IC8oW146XSspOihbMC05XSspPyhcXCspPzooW146XSspPzo/KFtcXHNcXFNdKik/LztcbiAgICAgICAgcGFyc2VyLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBwaWVjZXMgPSBkYXRhLm1hdGNoKHJlZ2V4cCk7XG4gICAgICAgICAgICBpZiAoIXBpZWNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlkID0gcGllY2VzWzJdIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgZGF0YSA9IHBpZWNlc1s1XSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIHBhY2tldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcGFja2V0c1twaWVjZXNbMV1dLFxuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogcGllY2VzWzRdIHx8IFwiXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgcGFja2V0LmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgaWYgKHBpZWNlc1szXSkge1xuICAgICAgICAgICAgICAgICAgICBwYWNrZXQuYWNrID0gXCJkYXRhXCJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYWNrZXQuYWNrID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBpZWNlcyA9IGRhdGEuc3BsaXQoXCIrXCIpO1xuICAgICAgICAgICAgICAgICAgICBwYWNrZXQucmVhc29uID0gcmVhc29uc1twaWVjZXNbMF1dIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHBhY2tldC5hZHZpY2UgPSBhZHZpY2VbcGllY2VzWzFdXSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICBwYWNrZXQuZGF0YSA9IGRhdGEgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0cyA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXQubmFtZSA9IG9wdHMubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldC5hcmdzID0gb3B0cy5hcmdzXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgICAgIHBhY2tldC5hcmdzID0gcGFja2V0LmFyZ3MgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJqc29uXCI6XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXQuZGF0YSA9IEpTT04ucGFyc2UoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbm5lY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFja2V0LnFzID0gZGF0YSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWNrXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwaWVjZXMgPSBkYXRhLm1hdGNoKC9eKFswLTldKykoXFwrKT8oLiopLyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldC5hY2tJZCA9IHBpZWNlc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldC5hcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGllY2VzWzNdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2V0LmFyZ3MgPSBwaWVjZXNbM10gPyBKU09OLnBhcnNlKHBpZWNlc1szXSkgOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRpc2Nvbm5lY3RcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiaGVhcnRiZWF0XCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFja2V0XG4gICAgICAgIH07XG4gICAgICAgIHBhcnNlci5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuY2hhckF0KDApID09IFwiXFx1ZmZmZFwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBcIlwiOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jaGFyQXQoaSkgPT0gXCJcXHVmZmZkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YS5zdWJzdHIoaSArIDEpLnN1YnN0cigwLCBsZW5ndGgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IE51bWJlcihsZW5ndGgpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCArPSBkYXRhLmNoYXJBdChpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEpXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzLCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzKTtcbiAgICAoZnVuY3Rpb24oZXhwb3J0cywgaW8pIHtcbiAgICAgICAgZXhwb3J0cy5UcmFuc3BvcnQgPSBUcmFuc3BvcnQ7XG5cbiAgICAgICAgZnVuY3Rpb24gVHJhbnNwb3J0KHNvY2tldCwgc2Vzc2lkKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lkID0gc2Vzc2lkXG4gICAgICAgIH1cbiAgICAgICAgaW8udXRpbC5taXhpbihUcmFuc3BvcnQsIGlvLkV2ZW50RW1pdHRlcik7XG4gICAgICAgIFRyYW5zcG9ydC5wcm90b3R5cGUuaGVhcnRiZWF0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQuY29ubmVjdGVkIHx8IHRoaXMuc29ja2V0LmNvbm5lY3RpbmcgfHwgdGhpcy5zb2NrZXQucmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDbG9zZVRpbWVvdXQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXNncyA9IGlvLnBhcnNlci5kZWNvZGVQYXlsb2FkKGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChtc2dzICYmIG1zZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbXNncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25QYWNrZXQobXNnc1tpXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH07XG4gICAgICAgIFRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNldEhlYXJ0YmVhdFRpbWVvdXQoKTtcbiAgICAgICAgICAgIGlmIChwYWNrZXQudHlwZSA9PSBcImhlYXJ0YmVhdFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub25IZWFydGJlYXQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhY2tldC50eXBlID09IFwiY29ubmVjdFwiICYmIHBhY2tldC5lbmRwb2ludCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3QoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhY2tldC50eXBlID09IFwiZXJyb3JcIiAmJiBwYWNrZXQuYWR2aWNlID09IFwicmVjb25uZWN0XCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vblBhY2tldChwYWNrZXQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5zZXRDbG9zZVRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jbG9zZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uRGlzY29ubmVjdCgpXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5zb2NrZXQuY2xvc2VUaW1lb3V0KVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dHMoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uRGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uQ29ubmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5jbGVhckNsb3NlVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlVGltZW91dCA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5jbGVhclRpbWVvdXRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZW9wZW5UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVvcGVuVGltZW91dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZChpby5wYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCkpXG4gICAgICAgIH07XG4gICAgICAgIFRyYW5zcG9ydC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImhlYXJ0YmVhdFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jbGVhckNsb3NlVGltZW91dCgpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub25PcGVuKClcbiAgICAgICAgfTtcbiAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub25DbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QoKVxuICAgICAgICB9O1xuICAgICAgICBUcmFuc3BvcnQucHJvdG90eXBlLnByZXBhcmVVcmwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5zb2NrZXQub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjaGVtZSgpICsgXCI6Ly9cIiArIG9wdGlvbnMuaG9zdCArIFwiOlwiICsgb3B0aW9ucy5wb3J0ICsgXCIvXCIgKyBvcHRpb25zLnJlc291cmNlICsgXCIvXCIgKyBpby5wcm90b2NvbCArIFwiL1wiICsgdGhpcy5uYW1lICsgXCIvXCIgKyB0aGlzLnNlc3NpZFxuICAgICAgICB9O1xuICAgICAgICBUcmFuc3BvcnQucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24oc29ja2V0LCBmbikge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzKVxuICAgICAgICB9XG4gICAgfSkoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzLCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzKTtcbiAgICAoZnVuY3Rpb24oZXhwb3J0cywgaW8sIGdsb2JhbCkge1xuICAgICAgICBleHBvcnRzLlNvY2tldCA9IFNvY2tldDtcblxuICAgICAgICBmdW5jdGlvbiBTb2NrZXQob3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHBvcnQ6IDgwLFxuICAgICAgICAgICAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQ6IFwiZG9jdW1lbnRcIiBpbiBnbG9iYWwgPyBkb2N1bWVudCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc291cmNlOiBcInNvY2tldC5pb1wiLFxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydHM6IGlvLnRyYW5zcG9ydHMsXG4gICAgICAgICAgICAgICAgXCJjb25uZWN0IHRpbWVvdXRcIjogMTAwMDAsXG4gICAgICAgICAgICAgICAgXCJ0cnkgbXVsdGlwbGUgdHJhbnNwb3J0c1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVjb25uZWN0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWNvbm5lY3Rpb24gZGVsYXlcIjogNTAwLFxuICAgICAgICAgICAgICAgIFwicmVjb25uZWN0aW9uIGxpbWl0XCI6IEluZmluaXR5LFxuICAgICAgICAgICAgICAgIFwicmVvcGVuIGRlbGF5XCI6IDMwMDAsXG4gICAgICAgICAgICAgICAgXCJtYXggcmVjb25uZWN0aW9uIGF0dGVtcHRzXCI6IDEwLFxuICAgICAgICAgICAgICAgIFwic3luYyBkaXNjb25uZWN0IG9uIHVubG9hZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcImF1dG8gY29ubmVjdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZmxhc2ggcG9saWN5IHBvcnRcIjogMTA4NDMsXG4gICAgICAgICAgICAgICAgXCJtYW51YWxGbHVzaFwiOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlvLnV0aWwubWVyZ2UodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZG9CdWZmZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNbXCJzeW5jIGRpc2Nvbm5lY3Qgb24gdW5sb2FkXCJdICYmICghdGhpcy5pc1hEb21haW4oKSB8fCBpby51dGlsLnVhLmhhc0NPUlMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlvLnV0aWwub24oZ2xvYmFsLCBcImJlZm9yZXVubG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNjb25uZWN0U3luYygpXG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zW1wiYXV0byBjb25uZWN0XCJdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpby51dGlsLm1peGluKFNvY2tldCwgaW8uRXZlbnRFbWl0dGVyKTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5vZiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5uYW1lc3BhY2VzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lc3BhY2VzW25hbWVdID0gbmV3IGlvLlNvY2tldE5hbWVzcGFjZSh0aGlzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWVzcGFjZXNbbmFtZV0ucGFja2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29ubmVjdFwiXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlc1tuYW1lXVxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgdmFyIG5zcDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5uYW1lc3BhY2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgICAgICBuc3AgPSB0aGlzLm9mKGkpO1xuICAgICAgICAgICAgICAgICAgICBuc3AuJGVtaXQuYXBwbHkobnNwLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGVtcHR5KCkge31cbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5oYW5kc2hha2UgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uRXJyb3IoZGF0YS5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGRhdGEuc3BsaXQoXCI6XCIpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1cmwgPSBbXCJodHRwXCIgKyAob3B0aW9ucy5zZWN1cmUgPyBcInNcIiA6IFwiXCIpICsgXCI6L1wiLCBvcHRpb25zLmhvc3QgKyBcIjpcIiArIG9wdGlvbnMucG9ydCwgb3B0aW9ucy5yZXNvdXJjZSwgaW8ucHJvdG9jb2wsIGlvLnV0aWwucXVlcnkodGhpcy5vcHRpb25zLnF1ZXJ5LCBcInQ9XCIgKyArbmV3IERhdGUpXS5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzWERvbWFpbigpICYmICFpby51dGlsLnVhLmhhc0NPUlMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXSxcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQuc3JjID0gdXJsICsgXCImanNvbnA9XCIgKyBpby5qLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgICAgICAgICAgICAgICBpby5qLnB1c2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBpby51dGlsLnJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzWERvbWFpbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHhoci5yZXNwb25zZVRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDQwMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXNlbGYucmVjb25uZWN0aW5nICYmIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgeGhyLnNlbmQobnVsbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5nZXRUcmFuc3BvcnQgPSBmdW5jdGlvbihvdmVycmlkZSkge1xuICAgICAgICAgICAgdmFyIHRyYW5zcG9ydHMgPSBvdmVycmlkZSB8fCB0aGlzLnRyYW5zcG9ydHM7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdHJhbnNwb3J0OyB0cmFuc3BvcnQgPSB0cmFuc3BvcnRzW2ldOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaW8uVHJhbnNwb3J0W3RyYW5zcG9ydF0gJiYgaW8uVHJhbnNwb3J0W3RyYW5zcG9ydF0uY2hlY2sodGhpcykgJiYgKCF0aGlzLmlzWERvbWFpbigpIHx8IGlvLlRyYW5zcG9ydFt0cmFuc3BvcnRdLnhkb21haW5DaGVjayh0aGlzKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBpby5UcmFuc3BvcnRbdHJhbnNwb3J0XSh0aGlzLCB0aGlzLnNlc3Npb25pZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5oYW5kc2hha2UoZnVuY3Rpb24oc2lkLCBoZWFydGJlYXQsIGNsb3NlLCB0cmFuc3BvcnRzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXNzaW9uaWQgPSBzaWQ7XG4gICAgICAgICAgICAgICAgc2VsZi5jbG9zZVRpbWVvdXQgPSBjbG9zZSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgc2VsZi5oZWFydGJlYXRUaW1lb3V0ID0gaGVhcnRiZWF0ICogMTAwMDtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYudHJhbnNwb3J0cykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnRyYW5zcG9ydHMgPSBzZWxmLm9yaWdUcmFuc3BvcnRzID0gKHRyYW5zcG9ydHMgPyBpby51dGlsLmludGVyc2VjdCh0cmFuc3BvcnRzLnNwbGl0KFwiLFwiKSwgc2VsZi5vcHRpb25zLnRyYW5zcG9ydHMpIDogc2VsZi5vcHRpb25zLnRyYW5zcG9ydHMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuc2V0SGVhcnRiZWF0VGltZW91dCgpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29ubmVjdCh0cmFuc3BvcnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQuY2xlYXJUaW1lb3V0cygpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQgPSBzZWxmLmdldFRyYW5zcG9ydCh0cmFuc3BvcnRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucHVibGlzaChcImNvbm5lY3RfZmFpbGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQucmVhZHkoc2VsZiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wdWJsaXNoKFwiY29ubmVjdGluZ1wiLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0Lm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnNbXCJjb25uZWN0IHRpbWVvdXRcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnNbXCJ0cnkgbXVsdGlwbGUgdHJhbnNwb3J0c1wiXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBzZWxmLnRyYW5zcG9ydHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlbWFpbmluZy5sZW5ndGggPiAwICYmIHJlbWFpbmluZy5zcGxpY2UoMCwgMSlbMF0gIT0gc2VsZi50cmFuc3BvcnQubmFtZSkge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0KHJlbWFpbmluZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnB1Ymxpc2goXCJjb25uZWN0X2ZhaWxlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNlbGYub3B0aW9uc1tcImNvbm5lY3QgdGltZW91dFwiXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29ubmVjdChzZWxmLnRyYW5zcG9ydHMpO1xuICAgICAgICAgICAgICAgIHNlbGYub25jZShcImNvbm5lY3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLmNvbm5lY3RUaW1lb3V0VGltZXIpO1xuICAgICAgICAgICAgICAgICAgICBmbiAmJiB0eXBlb2YgZm4gPT0gXCJmdW5jdGlvblwiICYmIGZuKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLnNldEhlYXJ0YmVhdFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lcik7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQgJiYgIXRoaXMudHJhbnNwb3J0LmhlYXJ0YmVhdHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0Lm9uQ2xvc2UoKVxuICAgICAgICAgICAgfSwgdGhpcy5oZWFydGJlYXRUaW1lb3V0KVxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCAmJiAhdGhpcy5kb0J1ZmZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhY2tldChkYXRhKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLnNldEJ1ZmZlciA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHRoaXMuZG9CdWZmZXIgPSB2O1xuICAgICAgICAgICAgaWYgKCF2ICYmIHRoaXMuY29ubmVjdGVkICYmIHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zW1wibWFudWFsRmx1c2hcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbHVzaEJ1ZmZlcigpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLmZsdXNoQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5wYXlsb2FkKHRoaXMuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gW11cbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQgfHwgdGhpcy5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3Blbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mKFwiXCIpLnBhY2tldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRpc2Nvbm5lY3RcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdChcImJvb3RlZFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0U3luYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHhociA9IGlvLnV0aWwucmVxdWVzdCgpO1xuICAgICAgICAgICAgdmFyIHVyaSA9IFtcImh0dHBcIiArICh0aGlzLm9wdGlvbnMuc2VjdXJlID8gXCJzXCIgOiBcIlwiKSArIFwiOi9cIiwgdGhpcy5vcHRpb25zLmhvc3QgKyBcIjpcIiArIHRoaXMub3B0aW9ucy5wb3J0LCB0aGlzLm9wdGlvbnMucmVzb3VyY2UsIGlvLnByb3RvY29sLCBcIlwiLCB0aGlzLnNlc3Npb25pZF0uam9pbihcIi9cIikgKyBcIi8/ZGlzY29ubmVjdD0xXCI7XG4gICAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB1cmksIGZhbHNlKTtcbiAgICAgICAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QoXCJib290ZWRcIilcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5pc1hEb21haW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwb3J0ID0gZ2xvYmFsLmxvY2F0aW9uLnBvcnQgfHwgKFwiaHR0cHM6XCIgPT0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sID8gNDQzIDogODApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ob3N0ICE9PSBnbG9iYWwubG9jYXRpb24uaG9zdG5hbWUgfHwgdGhpcy5vcHRpb25zLnBvcnQgIT0gcG9ydFxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXQucHJvdG90eXBlLm9uQ29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZG9CdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRCdWZmZXIoZmFsc2UpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNvbm5lY3RcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lcilcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICAgICAgICAgICAgdGhpcy5vZihwYWNrZXQuZW5kcG9pbnQpLm9uUGFja2V0KHBhY2tldClcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyICYmIGVyci5hZHZpY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmFkdmljZSA9PT0gXCJyZWNvbm5lY3RcIiAmJiAodGhpcy5jb25uZWN0ZWQgfHwgdGhpcy5jb25uZWN0aW5nKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHVibGlzaChcImVycm9yXCIsIGVyciAmJiBlcnIucmVhc29uID8gZXJyLnJlYXNvbiA6IGVycilcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0LnByb3RvdHlwZS5vbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAgIHZhciB3YXNDb25uZWN0ZWQgPSB0aGlzLmNvbm5lY3RlZCxcbiAgICAgICAgICAgICAgICB3YXNDb25uZWN0aW5nID0gdGhpcy5jb25uZWN0aW5nO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAod2FzQ29ubmVjdGVkIHx8IHdhc0Nvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmNsZWFyVGltZW91dHMoKTtcbiAgICAgICAgICAgICAgICBpZiAod2FzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVibGlzaChcImRpc2Nvbm5lY3RcIiwgcmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiYm9vdGVkXCIgIT0gcmVhc29uICYmIHRoaXMub3B0aW9ucy5yZWNvbm5lY3QgJiYgIXRoaXMucmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFNvY2tldC5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gMDtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXkgPSB0aGlzLm9wdGlvbnNbXCJyZWNvbm5lY3Rpb24gZGVsYXlcIl07XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbWF4QXR0ZW1wdHMgPSB0aGlzLm9wdGlvbnNbXCJtYXggcmVjb25uZWN0aW9uIGF0dGVtcHRzXCJdLFxuICAgICAgICAgICAgICAgIHRyeU11bHRpcGxlID0gdGhpcy5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl0sXG4gICAgICAgICAgICAgICAgbGltaXQgPSB0aGlzLm9wdGlvbnNbXCJyZWNvbm5lY3Rpb24gbGltaXRcIl07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIHNlbGYubmFtZXNwYWNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShpKSAmJiBcIlwiICE9PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5uYW1lc3BhY2VzW2ldLnBhY2tldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29ubmVjdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnB1Ymxpc2goXCJyZWNvbm5lY3RcIiwgc2VsZi50cmFuc3BvcnQubmFtZSwgc2VsZi5yZWNvbm5lY3Rpb25BdHRlbXB0cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYucmVjb25uZWN0aW9uVGltZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJjb25uZWN0X2ZhaWxlZFwiLCBtYXliZVJlY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImNvbm5lY3RcIiwgbWF5YmVSZWNvbm5lY3QpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYucmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYucmVjb25uZWN0aW9uRGVsYXk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYucmVjb25uZWN0aW9uVGltZXI7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYucmVkb1RyYW5zcG9ydHM7XG4gICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl0gPSB0cnlNdWx0aXBsZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBtYXliZVJlY29ubmVjdCgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYucmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc2V0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29ubmVjdGluZyAmJiBzZWxmLnJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5yZWNvbm5lY3Rpb25UaW1lciA9IHNldFRpbWVvdXQobWF5YmVSZWNvbm5lY3QsIDEwMDApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnJlY29ubmVjdGlvbkF0dGVtcHRzKysgPj0gbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnJlZG9UcmFuc3BvcnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9uKFwiY29ubmVjdF9mYWlsZWRcIiwgbWF5YmVSZWNvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnRzID0gc2VsZi5vcmlnVHJhbnNwb3J0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0ID0gc2VsZi5nZXRUcmFuc3BvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVkb1RyYW5zcG9ydHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0KClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHVibGlzaChcInJlY29ubmVjdF9mYWlsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZWNvbm5lY3Rpb25EZWxheSA8IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdGlvbkRlbGF5ICo9IDJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wdWJsaXNoKFwicmVjb25uZWN0aW5nXCIsIHNlbGYucmVjb25uZWN0aW9uRGVsYXksIHNlbGYucmVjb25uZWN0aW9uQXR0ZW1wdHMpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdGlvblRpbWVyID0gc2V0VGltZW91dChtYXliZVJlY29ubmVjdCwgc2VsZi5yZWNvbm5lY3Rpb25EZWxheSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNbXCJ0cnkgbXVsdGlwbGUgdHJhbnNwb3J0c1wiXSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25UaW1lciA9IHNldFRpbWVvdXQobWF5YmVSZWNvbm5lY3QsIHRoaXMucmVjb25uZWN0aW9uRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5vbihcImNvbm5lY3RcIiwgbWF5YmVSZWNvbm5lY3QpXG4gICAgICAgIH1cbiAgICB9KShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHMsIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHMsIHRoaXMpO1xuICAgIChmdW5jdGlvbihleHBvcnRzLCBpbykge1xuICAgICAgICBleHBvcnRzLlNvY2tldE5hbWVzcGFjZSA9IFNvY2tldE5hbWVzcGFjZTtcblxuICAgICAgICBmdW5jdGlvbiBTb2NrZXROYW1lc3BhY2Uoc29ja2V0LCBuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWUgfHwgXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuanNvbiA9IG5ldyBGbGFnKHRoaXMsIFwianNvblwiKTtcbiAgICAgICAgICAgIHRoaXMuYWNrUGFja2V0cyA9IDA7XG4gICAgICAgICAgICB0aGlzLmFja3MgPSB7fVxuICAgICAgICB9XG4gICAgICAgIGlvLnV0aWwubWl4aW4oU29ja2V0TmFtZXNwYWNlLCBpby5FdmVudEVtaXR0ZXIpO1xuICAgICAgICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLiRlbWl0ID0gaW8uRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuICAgICAgICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLm9mID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb2NrZXQub2YuYXBwbHkodGhpcy5zb2NrZXQsIGFyZ3VtZW50cylcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0TmFtZXNwYWNlLnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgICAgICAgIHBhY2tldC5lbmRwb2ludCA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnBhY2tldChwYWNrZXQpO1xuICAgICAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgU29ja2V0TmFtZXNwYWNlLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSwgZm4pIHtcbiAgICAgICAgICAgIHZhciBwYWNrZXQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5mbGFncy5qc29uID8gXCJqc29uXCIgOiBcIm1lc3NhZ2VcIixcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZm4pIHtcbiAgICAgICAgICAgICAgICBwYWNrZXQuaWQgPSArK3RoaXMuYWNrUGFja2V0cztcbiAgICAgICAgICAgICAgICBwYWNrZXQuYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFja3NbcGFja2V0LmlkXSA9IGZuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYWNrZXQocGFja2V0KVxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICAgICAgbGFzdEFyZyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICBwYWNrZXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBsYXN0QXJnKSB7XG4gICAgICAgICAgICAgICAgcGFja2V0LmlkID0gKyt0aGlzLmFja1BhY2tldHM7XG4gICAgICAgICAgICAgICAgcGFja2V0LmFjayA9IFwiZGF0YVwiO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNrc1twYWNrZXQuaWRdID0gbGFzdEFyZztcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWNrZXQuYXJncyA9IGFyZ3M7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYWNrZXQocGFja2V0KVxuICAgICAgICB9O1xuICAgICAgICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWNrZXQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRpc2Nvbm5lY3RcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJkaXNjb25uZWN0XCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFjaygpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnBhY2tldCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IGlvLnV0aWwudG9BcnJheShhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICBhY2tJZDogcGFja2V0LmlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29ubmVjdFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiY29ubmVjdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRpc2Nvbm5lY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQub25EaXNjb25uZWN0KHBhY2tldC5yZWFzb24gfHwgXCJib290ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJkaXNjb25uZWN0XCIsIHBhY2tldC5yZWFzb24pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwianNvblwiOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gW1wibWVzc2FnZVwiLCBwYWNrZXQuZGF0YV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuYWNrID09IFwiZGF0YVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChhY2spXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFja2V0LmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFja2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhY2tcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNrSWQ6IHBhY2tldC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdC5hcHBseSh0aGlzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtwYWNrZXQubmFtZV0uY29uY2F0KHBhY2tldC5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2tldC5hY2sgPT0gXCJkYXRhXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGFjaylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0LmFwcGx5KHRoaXMsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhY2tcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWNrc1twYWNrZXQuYWNrSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFja3NbcGFja2V0LmFja0lkXS5hcHBseSh0aGlzLCBwYWNrZXQuYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5hY2tJZF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2tldC5hZHZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uRXJyb3IocGFja2V0KVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhY2tldC5yZWFzb24gPT0gXCJ1bmF1dGhvcml6ZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJjb25uZWN0X2ZhaWxlZFwiLCBwYWNrZXQucmVhc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiZXJyb3JcIiwgcGFja2V0LnJlYXNvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIEZsYWcobnNwLCBuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZSA9IG5zcDtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICAgICAgfVxuICAgICAgICBGbGFnLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZS5mbGFnc1t0aGlzLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlLnNlbmQuYXBwbHkodGhpcy5uYW1lc3BhY2UsIGFyZ3VtZW50cylcbiAgICAgICAgfTtcbiAgICAgICAgRmxhZy5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lc3BhY2UuZmxhZ3NbdGhpcy5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZS5lbWl0LmFwcGx5KHRoaXMubmFtZXNwYWNlLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICB9KShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHMsIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHMpO1xuICAgIChmdW5jdGlvbihleHBvcnRzLCBpbywgZ2xvYmFsKSB7XG4gICAgICAgIGV4cG9ydHMud2Vic29ja2V0ID0gV1M7XG5cbiAgICAgICAgZnVuY3Rpb24gV1MoKSB7XG4gICAgICAgICAgICBpby5UcmFuc3BvcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICAgIGlvLnV0aWwuaW5oZXJpdChXUywgaW8uVHJhbnNwb3J0KTtcbiAgICAgICAgV1MucHJvdG90eXBlLm5hbWUgPSBcIndlYnNvY2tldFwiO1xuICAgICAgICBXUy5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gaW8udXRpbC5xdWVyeSh0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5KSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBTb2NrZXQ7XG4gICAgICAgICAgICBpZiAoIVNvY2tldCkge1xuICAgICAgICAgICAgICAgIFNvY2tldCA9IGdsb2JhbC5Nb3pXZWJTb2NrZXQgfHwgZ2xvYmFsLldlYlNvY2tldFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnkpO1xuICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vbk9wZW4oKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC5zZXRCdWZmZXIoZmFsc2UpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm9uRGF0YShldi5kYXRhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC5zZXRCdWZmZXIodHJ1ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLndlYnNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHNlbGYub25FcnJvcihlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpby51dGlsLnVhLmlEZXZpY2UpIHtcbiAgICAgICAgICAgIFdTLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLndlYnNvY2tldC5zZW5kKGRhdGEpXG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFdTLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2Vic29ja2V0LnNlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBXUy5wcm90b3R5cGUucGF5bG9hZCA9IGZ1bmN0aW9uKGFycikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWNrZXQoYXJyW2ldKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgV1MucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLndlYnNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfTtcbiAgICAgICAgV1MucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbkVycm9yKGUpXG4gICAgICAgIH07XG4gICAgICAgIFdTLnByb3RvdHlwZS5zY2hlbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvY2tldC5vcHRpb25zLnNlY3VyZSA/IFwid3NzXCIgOiBcIndzXCJcbiAgICAgICAgfTtcbiAgICAgICAgV1MuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAoXCJXZWJTb2NrZXRcIiBpbiBnbG9iYWwgJiYgIShcIl9fYWRkVGFza1wiIGluIFdlYlNvY2tldCkpIHx8IFwiTW96V2ViU29ja2V0XCIgaW4gZ2xvYmFsXG4gICAgICAgIH07XG4gICAgICAgIFdTLnhkb21haW5DaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaW8udHJhbnNwb3J0cy5wdXNoKFwid2Vic29ja2V0XCIpXG4gICAgfSkoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0cywgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0cywgdGhpcyk7XG4gICAgKGZ1bmN0aW9uKGV4cG9ydHMsIGlvLCBnbG9iYWwpIHtcbiAgICAgICAgZXhwb3J0cy5YSFIgPSBYSFI7XG5cbiAgICAgICAgZnVuY3Rpb24gWEhSKHNvY2tldCkge1xuICAgICAgICAgICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlvLlRyYW5zcG9ydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW11cbiAgICAgICAgfVxuICAgICAgICBpby51dGlsLmluaGVyaXQoWEhSLCBpby5UcmFuc3BvcnQpO1xuICAgICAgICBYSFIucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICAgICAgdGhpcy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xvc2VUaW1lb3V0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBYSFIucHJvdG90eXBlLnBheWxvYWQgPSBmdW5jdGlvbihwYXlsb2FkKSB7XG4gICAgICAgICAgICB2YXIgbXNncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXlsb2FkLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIG1zZ3MucHVzaChpby5wYXJzZXIuZW5jb2RlUGFja2V0KHBheWxvYWRbaV0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZW5kKGlvLnBhcnNlci5lbmNvZGVQYXlsb2FkKG1zZ3MpKVxuICAgICAgICB9O1xuICAgICAgICBYSFIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnBvc3QoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGVtcHR5KCkge31cbiAgICAgICAgWEhSLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2V0QnVmZmVyKHRydWUpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wb3N0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25DbG9zZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9ubG9hZCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubG9hZCA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VuZFhIUiA9IHRoaXMucmVxdWVzdChcIlBPU1RcIik7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmIHRoaXMuc2VuZFhIUiBpbnN0YW5jZW9mIFhEb21haW5SZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kWEhSLm9ubG9hZCA9IHRoaXMuc2VuZFhIUi5vbmVycm9yID0gb25sb2FkXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFhIUi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzdGF0ZUNoYW5nZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZW5kWEhSLnNlbmQoZGF0YSlcbiAgICAgICAgfTtcbiAgICAgICAgWEhSLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBYSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICAgIHZhciByZXEgPSBpby51dGlsLnJlcXVlc3QodGhpcy5zb2NrZXQuaXNYRG9tYWluKCkpLFxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gaW8udXRpbC5xdWVyeSh0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5LCBcInQ9XCIgKyArbmV3IERhdGUpO1xuICAgICAgICAgICAgcmVxLm9wZW4obWV0aG9kIHx8IFwiR0VUXCIsIHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnksIHRydWUpO1xuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PSBcIlBPU1RcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXEuc2V0UmVxdWVzdEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIilcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5jb250ZW50VHlwZSA9IFwidGV4dC9wbGFpblwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcVxuICAgICAgICB9O1xuICAgICAgICBYSFIucHJvdG90eXBlLnNjaGVtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0Lm9wdGlvbnMuc2VjdXJlID8gXCJodHRwc1wiIDogXCJodHRwXCJcbiAgICAgICAgfTtcbiAgICAgICAgWEhSLmNoZWNrID0gZnVuY3Rpb24oc29ja2V0LCB4ZG9tYWluKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW8udXRpbC5yZXF1ZXN0KHhkb21haW4pLFxuICAgICAgICAgICAgICAgICAgICB1c2VzWERvbVJlcSA9IChnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgcmVxdWVzdCBpbnN0YW5jZW9mIFhEb21haW5SZXF1ZXN0KSxcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0UHJvdG9jb2wgPSAoc29ja2V0ICYmIHNvY2tldC5vcHRpb25zICYmIHNvY2tldC5vcHRpb25zLnNlY3VyZSA/IFwiaHR0cHM6XCIgOiBcImh0dHA6XCIpLFxuICAgICAgICAgICAgICAgICAgICBpc1hQcm90b2NvbCA9IChnbG9iYWwubG9jYXRpb24gJiYgc29ja2V0UHJvdG9jb2wgIT0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sKTtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdCAmJiAhKHVzZXNYRG9tUmVxICYmIGlzWFByb3RvY29sKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgWEhSLnhkb21haW5DaGVjayA9IGZ1bmN0aW9uKHNvY2tldCkge1xuICAgICAgICAgICAgcmV0dXJuIFhIUi5jaGVjayhzb2NrZXQsIHRydWUpXG4gICAgICAgIH1cbiAgICB9KShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvLlRyYW5zcG9ydCA6IG1vZHVsZS5leHBvcnRzLCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzLCB0aGlzKTtcbiAgICAoZnVuY3Rpb24oZXhwb3J0cywgaW8pIHtcbiAgICAgICAgZXhwb3J0cy5odG1sZmlsZSA9IEhUTUxGaWxlO1xuXG4gICAgICAgIGZ1bmN0aW9uIEhUTUxGaWxlKCkge1xuICAgICAgICAgICAgaW8uVHJhbnNwb3J0LlhIUi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgICAgaW8udXRpbC5pbmhlcml0KEhUTUxGaWxlLCBpby5UcmFuc3BvcnQuWEhSKTtcbiAgICAgICAgSFRNTEZpbGUucHJvdG90eXBlLm5hbWUgPSBcImh0bWxmaWxlXCI7XG4gICAgICAgIEhUTUxGaWxlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jID0gbmV3IHdpbmRvd1soW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKSldKFwiaHRtbGZpbGVcIik7XG4gICAgICAgICAgICB0aGlzLmRvYy5vcGVuKCk7XG4gICAgICAgICAgICB0aGlzLmRvYy53cml0ZShcIjxodG1sPjwvaHRtbD5cIik7XG4gICAgICAgICAgICB0aGlzLmRvYy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5kb2MucGFyZW50V2luZG93LnMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGlmcmFtZUMgPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgaWZyYW1lQy5jbGFzc05hbWUgPSBcInNvY2tldGlvXCI7XG4gICAgICAgICAgICB0aGlzLmRvYy5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZUMpO1xuICAgICAgICAgICAgdGhpcy5pZnJhbWUgPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICAgICAgaWZyYW1lQy5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgcXVlcnkgPSBpby51dGlsLnF1ZXJ5KHRoaXMuc29ja2V0Lm9wdGlvbnMucXVlcnksIFwidD1cIiArICtuZXcgRGF0ZSk7XG4gICAgICAgICAgICB0aGlzLmlmcmFtZS5zcmMgPSB0aGlzLnByZXBhcmVVcmwoKSArIHF1ZXJ5O1xuICAgICAgICAgICAgaW8udXRpbC5vbih3aW5kb3csIFwidW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuZGVzdHJveSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBIVE1MRmlsZS5wcm90b3R5cGUuXyA9IGZ1bmN0aW9uKGRhdGEsIGRvYykge1xuICAgICAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvXFxcXFxcLy9nLCBcIi9cIik7XG4gICAgICAgICAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtcbiAgICAgICAgICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9O1xuICAgICAgICBIVE1MRmlsZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pZnJhbWUuc3JjID0gXCJhYm91dDpibGFua1wiXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIENvbGxlY3RHYXJiYWdlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgSFRNTEZpbGUucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybiBpby5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpXG4gICAgICAgIH07XG4gICAgICAgIEhUTUxGaWxlLmNoZWNrID0gZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPSBcInVuZGVmaW5lZFwiICYmIChbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpKSBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG5ldyB3aW5kb3dbKFtcIkFjdGl2ZVwiXS5jb25jYXQoXCJPYmplY3RcIikuam9pbihcIlhcIikpXShcImh0bWxmaWxlXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiBpby5UcmFuc3BvcnQuWEhSLmNoZWNrKHNvY2tldClcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIEhUTUxGaWxlLnhkb21haW5DaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlvLnRyYW5zcG9ydHMucHVzaChcImh0bWxmaWxlXCIpXG4gICAgfSkoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0cywgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0cyk7XG4gICAgKGZ1bmN0aW9uKGV4cG9ydHMsIGlvLCBnbG9iYWwpIHtcbiAgICAgICAgZXhwb3J0c1tcInhoci1wb2xsaW5nXCJdID0gWEhSUG9sbGluZztcblxuICAgICAgICBmdW5jdGlvbiBYSFJQb2xsaW5nKCkge1xuICAgICAgICAgICAgaW8uVHJhbnNwb3J0LlhIUi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgICAgaW8udXRpbC5pbmhlcml0KFhIUlBvbGxpbmcsIGlvLlRyYW5zcG9ydC5YSFIpO1xuICAgICAgICBpby51dGlsLm1lcmdlKFhIUlBvbGxpbmcsIGlvLlRyYW5zcG9ydC5YSFIpO1xuICAgICAgICBYSFJQb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gXCJ4aHItcG9sbGluZ1wiO1xuICAgICAgICBYSFJQb2xsaW5nLnByb3RvdHlwZS5oZWFydGJlYXRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgWEhSUG9sbGluZy5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaW8uVHJhbnNwb3J0LlhIUi5wcm90b3R5cGUub3Blbi5jYWxsKHNlbGYpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gZW1wdHkoKSB7fVxuICAgICAgICBYSFJQb2xsaW5nLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25EYXRhKHRoaXMucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25DbG9zZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9ubG9hZCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubG9hZCA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIHRoaXMub25lcnJvciA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIHNlbGYucmV0cnlDb3VudGVyID0gMTtcbiAgICAgICAgICAgICAgICBzZWxmLm9uRGF0YSh0aGlzLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgc2VsZi5nZXQoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBvbmVycm9yKCkge1xuICAgICAgICAgICAgICAgIHNlbGYucmV0cnlDb3VudGVyKys7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnJldHJ5Q291bnRlciB8fCBzZWxmLnJldHJ5Q291bnRlciA+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbkNsb3NlKClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmdldCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy54aHIgPSB0aGlzLnJlcXVlc3QoKTtcbiAgICAgICAgICAgIGlmIChnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgdGhpcy54aHIgaW5zdGFuY2VvZiBYRG9tYWluUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMueGhyLm9ubG9hZCA9IG9ubG9hZDtcbiAgICAgICAgICAgICAgICB0aGlzLnhoci5vbmVycm9yID0gb25lcnJvclxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzdGF0ZUNoYW5nZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy54aHIuc2VuZChudWxsKVxuICAgICAgICB9O1xuICAgICAgICBYSFJQb2xsaW5nLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpby5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAodGhpcy54aHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54aHIuYWJvcnQoKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgdGhpcy54aHIgPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFhIUlBvbGxpbmcucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24oc29ja2V0LCBmbikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaW8udXRpbC5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHNlbGYsIHNvY2tldClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIGlvLnRyYW5zcG9ydHMucHVzaChcInhoci1wb2xsaW5nXCIpXG4gICAgfSkoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0cywgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0cywgdGhpcyk7XG4gICAgKGZ1bmN0aW9uKGV4cG9ydHMsIGlvLCBnbG9iYWwpIHtcbiAgICAgICAgdmFyIGluZGljYXRvciA9IGdsb2JhbC5kb2N1bWVudCAmJiBcIk1vekFwcGVhcmFuY2VcIiBpbiBnbG9iYWwuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuICAgICAgICBleHBvcnRzW1wianNvbnAtcG9sbGluZ1wiXSA9IEpTT05QUG9sbGluZztcblxuICAgICAgICBmdW5jdGlvbiBKU09OUFBvbGxpbmcoKSB7XG4gICAgICAgICAgICBpby5UcmFuc3BvcnRbXCJ4aHItcG9sbGluZ1wiXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IGlvLmoubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaW8uai5wdXNoKGZ1bmN0aW9uKG1zZykge1xuICAgICAgICAgICAgICAgIHNlbGYuXyhtc2cpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlvLnV0aWwuaW5oZXJpdChKU09OUFBvbGxpbmcsIGlvLlRyYW5zcG9ydFtcInhoci1wb2xsaW5nXCJdKTtcbiAgICAgICAgSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gXCJqc29ucC1wb2xsaW5nXCI7XG4gICAgICAgIEpTT05QUG9sbGluZy5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBxdWVyeSA9IGlvLnV0aWwucXVlcnkodGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeSwgXCJ0PVwiICsgKCtuZXcgRGF0ZSkgKyBcIiZpPVwiICsgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZm9ybSkge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgICAgICAgICAgICAgIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiksXG4gICAgICAgICAgICAgICAgICAgIGlkID0gdGhpcy5pZnJhbWVJZCA9IFwic29ja2V0aW9faWZyYW1lX1wiICsgdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lO1xuICAgICAgICAgICAgICAgIGZvcm0uY2xhc3NOYW1lID0gXCJzb2NrZXRpb1wiO1xuICAgICAgICAgICAgICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgZm9ybS5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgIGZvcm0uc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgZm9ybS50YXJnZXQgPSBpZDtcbiAgICAgICAgICAgICAgICBmb3JtLm1ldGhvZCA9IFwiUE9TVFwiO1xuICAgICAgICAgICAgICAgIGZvcm0uc2V0QXR0cmlidXRlKFwiYWNjZXB0LWNoYXJzZXRcIiwgXCJ1dGYtOFwiKTtcbiAgICAgICAgICAgICAgICBhcmVhLm5hbWUgPSBcImRcIjtcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICAgICAgICAgICAgICB0aGlzLmFyZWEgPSBhcmVhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy5wcmVwYXJlVXJsKCkgKyBxdWVyeTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgaW5pdElmcmFtZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdElmcmFtZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCc8aWZyYW1lIG5hbWU9XCInICsgc2VsZi5pZnJhbWVJZCArICdcIj4nKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICAgICAgICAgICAgc2VsZi5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5pZnJhbWUgPSBpZnJhbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRJZnJhbWUoKTtcbiAgICAgICAgICAgIHRoaXMuYXJlYS52YWx1ZSA9IGlvLkpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm0uc3VibWl0KClcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2V0QnVmZmVyKHRydWUpXG4gICAgICAgIH07XG4gICAgICAgIEpTT05QUG9sbGluZy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxcbiAgICAgICAgICAgICAgICBxdWVyeSA9IGlvLnV0aWwucXVlcnkodGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeSwgXCJ0PVwiICsgKCtuZXcgRGF0ZSkgKyBcIiZpPVwiICsgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdCA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gdGhpcy5wcmVwYXJlVXJsKCkgKyBxdWVyeTtcbiAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vbkNsb3NlKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtcbiAgICAgICAgICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xuICAgICAgICAgICAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG4gICAgICAgICAgICBpZiAoaW5kaWNhdG9yKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpXG4gICAgICAgICAgICAgICAgfSwgMTAwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBKU09OUFBvbGxpbmcucHJvdG90eXBlLl8gPSBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgICAgIHRoaXMub25EYXRhKG1zZyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9O1xuICAgICAgICBKU09OUFBvbGxpbmcucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24oc29ja2V0LCBmbikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCFpbmRpY2F0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW8udXRpbC5sb2FkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoc2VsZilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIEpTT05QUG9sbGluZy5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZG9jdW1lbnRcIiBpbiBnbG9iYWxcbiAgICAgICAgfTtcbiAgICAgICAgSlNPTlBQb2xsaW5nLnhkb21haW5DaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaW8udHJhbnNwb3J0cy5wdXNoKFwianNvbnAtcG9sbGluZ1wiKVxuICAgIH0pKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8uVHJhbnNwb3J0IDogbW9kdWxlLmV4cG9ydHMsIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHMsIHRoaXMpO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlvXG4gICAgICAgIH0pXG4gICAgfVxufSgpKTtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG52YXIgQ29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgaXNTZXJ2ZXIgPSB0eXBlb2Yod2luZG93KSA9PT0gJ3VuZGVmaW5lZCcsXG4gICAgdyA9IGlzU2VydmVyID8ge30gOiB3aW5kb3csXG4gICAgcGVyZm9ybWFuY2UgPSB0eXBlb2Yody5wZXJmb3JtYW5jZSkgIT09ICd1bmRlZmluZWQnID8gdy5wZXJmb3JtYW5jZSA6IHt9LFxuICAgIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgIFNUQVJUX01TID0gRGF0ZS5ub3coKSxcbiAgICBTVEFSVCA9IFNUQVJUX01TICogMC4wMDEsXG4gICAgREVMVEEgPSAxIC8gNjAsXG4gICAgRklYRURfREVMVEEgPSBERUxUQSxcbiAgICBHTE9CQUxfRklYRUQgPSBERUxUQSxcbiAgICBTQ0FMRSA9IDEsXG4gICAgRGF0ZU5vdztcblxuXG5pZiAoaXNTZXJ2ZXIpIHtcbiAgICB2YXIgSFJfVElNRSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG5cbiAgICBEYXRlTm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWUoSFJfVElNRSksXG4gICAgICAgICAgICBzID0gaHJ0aW1lWzBdICogMTAwMCxcbiAgICAgICAgICAgIG5zID0gaHJ0aW1lWzFdICogMWUtNjtcblxuICAgICAgICByZXR1cm4gcyArIG5zO1xuICAgIH1cbn0gZWxzZSB7XG4gICAgRGF0ZU5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBTVEFSVF9NUztcbiAgICB9XG59XG5cblxucGVyZm9ybWFuY2Uubm93IHx8IChwZXJmb3JtYW5jZS5ub3cgPSAoXG5wZXJmb3JtYW5jZS53ZWJraXROb3cgfHxcbnBlcmZvcm1hbmNlLm1vek5vdyB8fFxucGVyZm9ybWFuY2UubXNOb3cgfHxcbnBlcmZvcm1hbmNlLm9Ob3cgfHxcbkRhdGVOb3dcbikpO1xuXG5mdW5jdGlvbiBub3coKSB7XG5cbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCkgKiAwLjAwMTtcbn1cblxuXG5mdW5jdGlvbiBUaW1lKCkge1xuXG4gICAgdGhpcy5zdGFydCA9IFNUQVJUO1xuICAgIHRoaXMuc2luY2VTdGFydCA9IDA7XG4gICAgdGhpcy50aW1lID0gMDtcbiAgICB0aGlzLmZwcyA9IDYwO1xuICAgIHRoaXMuZGVsdGEgPSBERUxUQTtcbiAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuXG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ3NjYWxlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBTQ0FMRTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIFNDQUxFID0gdmFsdWU7XG4gICAgICAgICAgICBGSVhFRF9ERUxUQSA9IEdMT0JBTF9GSVhFRCAqIHZhbHVlXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdmaXhlZERlbHRhJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBGSVhFRF9ERUxUQTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIEdMT0JBTF9GSVhFRCA9IHZhbHVlO1xuICAgICAgICAgICAgRklYRURfREVMVEEgPSBHTE9CQUxfRklYRUQgKiBTQ0FMRTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5cblRpbWUucHJvdG90eXBlLm5vdyA9IG5vdztcblxuXG5UaW1lLnByb3RvdHlwZS5zdGFtcCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBEYXRlLm5vdygpICogMC4wMDE7XG59O1xuXG5cblRpbWUucHJvdG90eXBlLnN0YW1wTVMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbn07XG5cblxudmFyIGZyYW1lQ291bnQgPSAwLFxuICAgIGxhc3QgPSAtMSAvIDYwLFxuICAgIHRpbWUgPSAwLFxuICAgIGRlbHRhID0gMSAvIDYwLFxuICAgIGZwc0ZyYW1lID0gMCxcbiAgICBmcHNMYXN0ID0gMCxcbiAgICBmcHNUaW1lID0gMDtcblxuVGltZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBNSU5fREVMVEEgPSBDb25maWcuTUlOX0RFTFRBLFxuICAgICAgICBNQVhfREVMVEEgPSBDb25maWcuTUFYX0RFTFRBO1xuXG4gICAgdGhpcy5mcmFtZUNvdW50ID0gZnJhbWVDb3VudCsrO1xuXG4gICAgbGFzdCA9IHRpbWU7XG4gICAgdGltZSA9IG5vdygpO1xuICAgIHRoaXMuc2luY2VTdGFydCA9IHRpbWU7XG5cbiAgICBmcHNUaW1lID0gdGltZTtcbiAgICBmcHNGcmFtZSsrO1xuXG4gICAgaWYgKGZwc0xhc3QgKyAxIDwgZnBzVGltZSkge1xuICAgICAgICB0aGlzLmZwcyA9IGZwc0ZyYW1lIC8gKGZwc1RpbWUgLSBmcHNMYXN0KTtcblxuICAgICAgICBmcHNMYXN0ID0gZnBzVGltZTtcbiAgICAgICAgZnBzRnJhbWUgPSAwO1xuICAgIH1cblxuICAgIGRlbHRhID0gKHRpbWUgLSBsYXN0KSAqIFNDQUxFO1xuICAgIHRoaXMuZGVsdGEgPSBkZWx0YSA8IE1JTl9ERUxUQSA/IE1JTl9ERUxUQSA6IGRlbHRhID4gTUFYX0RFTFRBID8gTUFYX0RFTFRBIDogZGVsdGE7XG5cbiAgICB0aGlzLnRpbWUgPSB0aW1lICogU0NBTEU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFRpbWU7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKSIsIihmdW5jdGlvbiAocHJvY2VzcyxCdWZmZXIpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWwgPSB7fSxcbiAgICByYW5kb20gPSBNYXRoLnJhbmRvbSxcblxuICAgIGlzU2VydmVyID0gdHlwZW9mKHdpbmRvdykgPT09IFwidW5kZWZpbmVkXCIsXG4gICAgY3dkID0gaXNTZXJ2ZXIgPyBwcm9jZXNzLmN3ZCgpIDogd2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goLy4qXFwvLylbMF0sXG5cbiAgICBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgdG9TdHJpbmcgPSBPYmplY3RQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdFByb3RvLmhhc093blByb3BlcnR5LFxuXG4gICAgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBBcnJheUZvckVhY2ggPSBBcnJheVByb3RvLmZvckVhY2gsXG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMgfHwgKE9iamVjdC5rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIG91dCA9IFtdLFxuICAgICAgICAgICAgICAgIGtleTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBvdXQucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfSksXG5cbiAgICBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAoQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgICAgfSksXG5cbiAgICBTUElMVEVSID0gL1sgXFxfXFwtXFwuXSt8KD89W0EtWl1bXkEtWl0pL2csXG4gICAgVU5ERVJTQ09SRSA9IC8oW2Etel0pKFtBLVpdKS9nLFxuICAgIEZPUk1BVF9SRUdFWCA9IC8lW3NkaiVdL2c7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuXG4gICAgcmV0dXJuIG9iaiA9PT0gT2JqZWN0KG9iaik7XG59XG51dGlsLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cblxuZnVuY3Rpb24gaXNBcnJheUxpa2Uob2JqKSB7XG5cbiAgICByZXR1cm4gdHlwZW9mKG9iaikgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mKG9iai5sZW5ndGgpID09PSBcIm51bWJlclwiO1xufVxudXRpbC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xudXRpbC5pc0FycmF5ID0gaXNBcnJheTtcblxuXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyhvYmopIHtcblxuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCI7XG59XG51dGlsLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG5cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcblxuICAgIHJldHVybiB0eXBlb2Yob2JqKSA9PT0gXCJmdW5jdGlvblwiXG59XG51dGlsLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuXG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIjtcbn1cbnV0aWwuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuXG5mdW5jdGlvbiBpc051bWJlcihvYmopIHtcblxuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBOdW1iZXJdXCI7XG59XG51dGlsLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cblxuZnVuY3Rpb24gaXNEZWNpbWFsKG9iaikge1xuXG4gICAgcmV0dXJuIGlzTnVtYmVyKG9iaikgJiYgb2JqICUgMSAhPT0gMDtcbn1cbnV0aWwuaXNEZWNpbWFsID0gaXNEZWNpbWFsO1xuXG5cbmZ1bmN0aW9uIGlzSW50ZWdlcihvYmopIHtcblxuICAgIHJldHVybiBpc051bWJlcihvYmopICYmIG9iaiAlIDEgPT09IDA7XG59XG51dGlsLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcblxuXG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7XG5cbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgRGF0ZV1cIjtcbn1cbnV0aWwuaXNEYXRlID0gaXNEYXRlO1xuXG5cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuXG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IFJlZ0V4cF1cIjtcbn1cbnV0aWwuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuXG51dGlsLmlzRmluaXRlID0gaXNGaW5pdGU7XG5cblxudXRpbC5pc05hTiA9IGlzTmFOO1xuXG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHtcblxuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBCb29sZWFuXVwiO1xufVxudXRpbC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cblxuZnVuY3Rpb24gaXNOdWxsKG9iaikge1xuXG4gICAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbn1cbnV0aWwuaXNOdWxsID0gaXNOdWxsO1xuXG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iaikge1xuXG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xufVxudXRpbC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5cbmZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuXG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxudXRpbC5oYXMgPSBoYXM7XG5cblxuZnVuY3Rpb24gZm9ybWF0KGZtdCkge1xuICAgIHZhciBpID0gMSxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgICByZXR1cm4gU3RyaW5nKGZtdCkucmVwbGFjZShGT1JNQVRfUkVHRVgsIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICh4ID09PSBcIiUlXCIpIHJldHVybiBcIiVcIjtcbiAgICAgICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcblxuICAgICAgICBpZiAoeCA9PT0gXCIlc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeCA9PT0gXCIlZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeCA9PT0gXCIlalwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhcl1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgfSk7XG59XG51dGlsLmZvcm1hdCA9IGZvcm1hdDtcblxuXG5mdW5jdGlvbiBjYW1lbGl6ZSh3b3JkLCBsb3dGaXJzdExldHRlcikge1xuICAgIHZhciBwYXJ0cyA9IHdvcmQuc3BsaXQoU1BJTFRFUiksXG4gICAgICAgIHN0cmluZyA9IFwiXCIsXG4gICAgICAgIHBhcnQsIGksIGlsO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgc3RyaW5nICs9IHBhcnRbMF0udG9VcHBlckNhc2UoKSArIHBhcnQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG93Rmlyc3RMZXR0ZXIgPyBzdHJpbmdbMF0udG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSA6IHN0cmluZztcbn07XG51dGlsLmNhbWVsaXplID0gY2FtZWxpemU7XG5cblxuZnVuY3Rpb24gdW5kZXJzY29yZSh3b3JkKSB7XG5cbiAgICByZXR1cm4gd29yZC5yZXBsYWNlKFNQSUxURVIsIFwiXCIpLnJlcGxhY2UoVU5ERVJTQ09SRSwgXCIkMV8kMlwiKS50b0xvd2VyQ2FzZSgpO1xufTtcbnV0aWwudW5kZXJzY29yZSA9IHVuZGVyc2NvcmU7XG5cblxuZnVuY3Rpb24gbWVyZ2Uob2JqLCBhZGQpIHtcbiAgICB2YXIga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gYWRkKSB7XG4gICAgICAgIGlmIChvYmpba2V5XSA9PSB1bmRlZmluZWQpIG9ialtrZXldID0gYWRkW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG51dGlsLm1lcmdlID0gbWVyZ2U7XG5cblxuZnVuY3Rpb24gb3ZlcnJpZGUob2JqLCBhZGQpIHtcbiAgICB2YXIga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gYWRkKSB7XG4gICAgICAgIGlmIChhZGRba2V5XSAhPSB1bmRlZmluZWQpIG9ialtrZXldID0gYWRkW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG51dGlsLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG5cblxuZnVuY3Rpb24gY29weShvYmosIG91dCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mKG9iaiksXG4gICAgICAgIGtleSwgaSwgaWw7XG5cbiAgICBpZiAodHlwZSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIG9iajtcblxuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICAgIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBpbCA9IG9iai5sZW5ndGg7IGkgPCBpbDsgaSsrKSBvdXRbaV0gPSBjb3B5KG9ialtpXSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgICAgIG91dCA9IHt9O1xuICAgICAgICBmb3IgKGtleSBpbiBvYmopIG91dFtrZXldID0gY29weShvYmpba2V5XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG51dGlsLmNvcHkgPSBjb3B5O1xuXG5cbmZ1bmN0aW9uIGNsZWFyKG9iaikge1xuICAgIHZhciBrZXk7XG5cbiAgICBmb3IgKGtleSBpbiBvYmopIGRlbGV0ZSBvYmpba2V5XTtcblxuICAgIHJldHVybiBvYmo7XG59O1xudXRpbC5jbGVhciA9IGNsZWFyO1xuXG5cbnV0aWwua2V5cyA9IGtleXM7XG5cblxuZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0Jhc2U2NChidWZmZXIpIHtcbiAgICB2YXIgYmluYXJ5ID0gXCJcIixcbiAgICAgICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpLFxuICAgICAgICBsZW4gPSBieXRlcy5ieXRlTGVuZ3RoLFxuICAgICAgICBpID0gMDtcblxuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcblxuICAgIHJldHVybiBpc1NlcnZlciA/IG5ldyBCdWZmZXIoYmluYXJ5LnRvU3RyaW5nKCksIFwiYmluYXJ5XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpIDogd2luZG93LmJ0b2EoYmluYXJ5KTtcbn1cbnV0aWwuYXJyYXlCdWZmZXJUb0Jhc2U2NCA9IGFycmF5QnVmZmVyVG9CYXNlNjQ7XG5cblxuZnVuY3Rpb24gYmFzZTY0VG9BcnJheUJ1ZmZlcihzdHIpIHtcbiAgICB2YXIgYmluYXJ5ID0gaXNTZXJ2ZXIgPyBuZXcgQnVmZmVyKHN0ciwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJiaW5hcnlcIikgOiB3aW5kb3cuYXRvYihzdHIpLFxuICAgICAgICBsZW4gPSBiaW5hcnkubGVuZ3RoLFxuICAgICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbikuXG4gICAgICAgICAgICBpID0gMDtcblxuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xufVxudXRpbC5iYXNlNjRUb0FycmF5QnVmZmVyID0gYmFzZTY0VG9BcnJheUJ1ZmZlcjtcblxuXG5mdW5jdGlvbiB1aWQoKSB7XG4gICAgcmV0dXJuIFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZShVSURfUkVQTEFDRVIsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBhID0gMTYgKiByYW5kb20oKSB8IDA7XG4gICAgICAgIHJldHVybiAoXCJ4XCIgPT0gYyA/IGEgOiBhICYgMyB8IDgpLnRvU3RyaW5nKDE2KTtcbiAgICB9KVxufVxudmFyIFVJRF9SRVBMQUNFUiA9IC9beHldL2c7XG51dGlsLnVpZCA9IHVpZDtcblxuXG5mdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0b3IsIGN0eCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgaWYgKEFycmF5Rm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gQXJyYXlGb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjdHgpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY3R4LCBvYmpbaV0sIGksIG9iaikgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb2JqS2V5cyA9IGtleXMob2JqKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqS2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY3R4LCBvYmpbb2JqS2V5c1tpXV0sIG9iaktleXNbaV0sIG9iaikgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG51dGlsLmVhY2ggPSBlYWNoO1xuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCkge1xuICAgIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoXCIvXCIpLFxuICAgICAgICBkaXJlY3RvcmllcyA9IFtdLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgaWwgPSBwYXJ0cy5sZW5ndGgsXG4gICAgICAgIHByZXYsIGRpcmVjdG9yeTtcblxuICAgIGZvciAoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBkaXJlY3RvcnkgPSBwYXJ0c1tpXTtcblxuICAgICAgICBpZiAoZGlyZWN0b3J5ID09PSBcIlwiICYmIGkgIT09IDAgJiYgaSAhPT0gaWwpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoZGlyZWN0b3J5ID09PSBcIi5cIiAmJiBwcmV2ICE9PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoZGlyZWN0b3JpZXMubGVuZ3RoID09PSAxICYmIGRpcmVjdG9yaWVzWzBdID09PSBcIlwiICYmIChkaXJlY3RvcnkgPT09IFwiLlwiIHx8IGRpcmVjdG9yeSA9PT0gXCIuLlwiKSkgY29udGludWU7XG5cbiAgICAgICAgaWYgKGRpcmVjdG9yeSA9PT0gXCIuLlwiICYmIGRpcmVjdG9yaWVzLmxlbmd0aCAmJiBwcmV2ICE9PSBcIi4uXCIgJiYgcHJldiAhPT0gXCIuXCIgJiYgcHJldiAhPT0gdW5kZWZpbmVkICYmIChwcmV2ICE9PSBcIlwiKSkge1xuICAgICAgICAgICAgZGlyZWN0b3JpZXMucG9wKCk7XG4gICAgICAgICAgICBwcmV2ID0gZGlyZWN0b3JpZXNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldiA9PT0gXCIuXCIpIGRpcmVjdG9yaWVzLnBvcCgpO1xuICAgICAgICAgICAgZGlyZWN0b3JpZXMucHVzaChkaXJlY3RvcnkpO1xuICAgICAgICAgICAgcHJldiA9IGRpcmVjdG9yeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHBhdGggPSBkaXJlY3Rvcmllc1swXSkgJiYgcGF0aC5pbmRleE9mKFwiOlwiKSA9PT0gcGF0aC5sZW5ndGggLSAxKSBkaXJlY3Rvcmllc1swXSArPSBcIi9cIjtcblxuICAgIHJldHVybiBkaXJlY3Rvcmllcy5qb2luKFwiL1wiKTtcbn1cbnV0aWwubm9ybWFsaXplUGF0aCA9IG5vcm1hbGl6ZVBhdGg7XG5cblxuZnVuY3Rpb24gcmVsYXRpdmVQYXRoKHBhdGgpIHtcbiAgICBwYXRoIHx8IChwYXRoID0gXCIuL1wiKTtcbiAgICByZXR1cm4gbm9ybWFsaXplUGF0aChyZXF1aXJlLnRvVXJsKHBhdGgpKTtcbn1cbnV0aWwucmVsYXRpdmVQYXRoID0gcmVsYXRpdmVQYXRoO1xuXG5cbmZ1bmN0aW9uIGFic29sdXRlUGF0aChwYXRoKSB7XG4gICAgcGF0aCB8fCAocGF0aCA9IFwiLi9cIik7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgoY3dkICsgcmVxdWlyZS50b1VybChwYXRoKSk7XG59XG51dGlsLmFic29sdXRlUGF0aCA9IGFic29sdXRlUGF0aDtcblxuXG5pZiAoIWlzU2VydmVyKSB7XG4gICAgdXRpbC5jcmVhdGVXb3JrZXIgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdmFyIGJsb2JVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKFxuICAgICAgICAgICAgICAgIG5ldyBCbG9iKFtcbiAgICAgICAgICAgICAgICAgICAgXCIoZnVuY3Rpb24oKSB7XFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImltcG9ydFNjcmlwdHMoXFxcIlwiICsgYWJzb2x1dGVQYXRoKFwib2Rpbi9yZXF1aXJlLmpzXCIpICsgXCJcXFwiKTtcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwicmVxdWlyZS5jb25maWcoe2Jhc2VVcmw6IFxcXCJcIiArIGFic29sdXRlUGF0aChcIi4vXCIpICsgXCJcXFwifSk7XFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIihcIiArIGZuLnRvU3RyaW5nKCkgKyBcIikuY2FsbCh0aGlzKTtcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwifSkuY2FsbCh0aGlzKTtcIlxuICAgICAgICAgICAgICAgIF0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHdvcmtlciA9IG5ldyBXb3JrZXIoYmxvYlVSTCk7XG5cbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChibG9iVVJMKTtcblxuICAgICAgICByZXR1cm4gd29ya2VyO1xuICAgIH07XG5cbiAgICB1dGlsLmFqYXggPSBmdW5jdGlvbiBhamF4KG9wdHMpIHtcbiAgICAgICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QsXG4gICAgICAgICAgICBzcmMgPSBvcHRzLnNyYyxcbiAgICAgICAgICAgIG1ldGhvZCA9IG9wdHMubWV0aG9kIHx8IChvcHRzLm1ldGhvZCA9IFwiR0VUXCIpLFxuICAgICAgICAgICAgYmVmb3JlID0gb3B0cy5iZWZvcmUsXG4gICAgICAgICAgICBzdWNjZXNzID0gb3B0cy5zdWNjZXNzLFxuICAgICAgICAgICAgZXJyb3IgPSBvcHRzLmVycm9yLFxuICAgICAgICAgICAgYXN5bmMgPSBvcHRzLmFzeW5jICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5hc3luYyA6IHRydWU7XG5cbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0dXM7XG5cbiAgICAgICAgICAgIGlmICgoc3RhdHVzID4gMTk5ICYmIHN0YXR1cyA8IDMwMSkgfHwgc3RhdHVzID09IDMwNCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yoc3VjY2VzcykgPT09IFwiZnVuY3Rpb25cIikgc3VjY2Vzcy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGVycm9yKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcywgbmV3IEVycm9yKG1ldGhvZCArIFwiIFwiICsgc3JjICsgXCIgXCIgKyBzdGF0dXMpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIgXCIgKyBzcmMgKyBcIiBcIiArIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoZXJyb3IpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBlcnJvcihuZXcgRXJyb3IobWV0aG9kICsgXCIgXCIgKyBzcmMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiIFwiICsgc3JjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHNyYywgYXN5bmMpO1xuICAgICAgICBpZiAodHlwZW9mKGJlZm9yZSkgPT09IFwiZnVuY3Rpb25cIikgYmVmb3JlLmNhbGwocmVxdWVzdCk7XG4gICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcikiLCJ2YXIgTG9nID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvbG9nXCIpO1xudmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cblxuZnVuY3Rpb24gQXNzZXQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDbGFzcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fbmFtZSA9IG9wdHMubmFtZSAhPSB1bmRlZmluZWQgPyBvcHRzLm5hbWUgOiBcIkFzc2V0X1wiICsgdGhpcy5faWQ7XG4gICAgdGhpcy5fbG9hZGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmpzb24gPSBvcHRzLmpzb24gIT0gdW5kZWZpbmVkID8gISFvcHRzLmpzb24gOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NldHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sb2FkID0gb3B0cy5sb2FkICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5sb2FkIDogISFvcHRzLnNyYztcbiAgICB0aGlzLnNyYyA9IG9wdHMuc3JjO1xuICAgIHRoaXMucmF3ID0gb3B0cy5yYXc7XG59XG5cbkNsYXNzLmV4dGVuZChBc3NldCk7XG5cblxuZGVmaW5lUHJvcGVydHkoQXNzZXQucHJvdG90eXBlLCBcIm5hbWVcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cyxcbiAgICAgICAgICAgIGhhc2g7XG5cbiAgICAgICAgaWYgKGFzc2V0cykge1xuICAgICAgICAgICAgaGFzaCA9IGFzc2V0cy5oYXNoO1xuXG4gICAgICAgICAgICBpZiAoaGFzaFt2YWx1ZV0pIHtcbiAgICAgICAgICAgICAgICBMb2cud2FybihcIkFzc2V0LnNldCBuYW1lOiBjYW4ndCBjaGFuZ2UgbmFtZSB0byBcIiArIHZhbHVlICsgXCIgQXNzZXRzIGFscmVhZHkgaGF2ZSBhbiBhc3NldCB3aXRoIHNhbWUgbmFtZVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBoYXNoW3RoaXMubmFtZV07XG4gICAgICAgICAgICBoYXNoW3ZhbHVlXSA9IHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gICAgfVxufSk7XG5cblxuQXNzZXQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMuc3luYyA9IG90aGVyLnN5bmM7XG4gICAgdGhpcy5qc29uID0gb3RoZXIuanNvbjtcblxuICAgIHRoaXMubmFtZSA9IG90aGVyLm5hbWUgKyBcIi5cIiArIHRoaXMuX2lkO1xuICAgIHRoaXMuc3JjID0gb3RoZXIuc3JjO1xuICAgIHRoaXMucmF3ID0gb3RoZXIucmF3O1xuXG4gICAgaWYgKG90aGVyLmFzc2V0cyAmJiB0aGlzLmFzc2V0cyAhPT0gb3RoZXIuYXNzZXRzKSBvdGhlci5hc3NldHMuYWRkQXNzZXQodGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQXNzZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5yYXcgPSBudWxsO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Bc3NldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuYXNzZXRzKSB7XG4gICAgICAgIExvZy5lcnJvcihcIkFzc2V0LmRlc3Ryb3k6IGNhbid0IGRlc3Ryb3kgQXNzZXQgaWYgaXQncyBub3QgYWRkZWQgdG8gQXNzZXRzXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmFzc2V0cy5yZW1vdmVBc3NldCh0aGlzKTtcbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQXNzZXQucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHJhdykge1xuXG4gICAgdGhpcy5yYXcgPSByYXc7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkFzc2V0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbiwgcGFjaykge1xuICAgIGpzb24gPSBDbGFzcy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgaWYgKCFwYWNrKSBqc29uLnNyYyA9IHRoaXMuc3JjO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkFzc2V0LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLm5hbWUgPSBqc29uLm5hbWU7XG4gICAgdGhpcy5zcmMgPSBqc29uLnNyYztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2V0O1xuIiwidmFyIERldmljZSA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2RldmljZVwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdXRpbFwiKTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9ldmVudF9lbWl0dGVyXCIpO1xudmFyIEF1ZGlvQ3R4ID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvYXVkaW9fY3R4XCIpO1xudmFyIEFzc2V0ID0gcmVxdWlyZShcIi4vYXNzZXRcIik7XG52YXIgQXNzZXRzID0gcmVxdWlyZShcIi4vYXNzZXRzXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpc0FycmF5ID0gdXRpbC5pc0FycmF5LFxuICAgIGFqYXggPSB1dGlsLmFqYXgsXG4gICAgZWFjaCA9IHV0aWwuZWFjaDtcblxuXG5mdW5jdGlvbiBnZXRFeHQoc3JjKSB7XG5cbiAgICByZXR1cm4gc3JjID8gKHNyYy5zcGxpdChcIi5cIikucG9wKCkpLnRvTG93ZXJDYXNlKCkgOiBcIm5vbmVcIjtcbn07XG5cblxuZnVuY3Rpb24gQXNzZXRMb2FkZXIoKSB7XG5cbiAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgIHZhciBzdXBwb3J0cyA9IHRoaXMuc3VwcG9ydHMgPSBbXCJqc29uXCIsIFwianBlZ1wiLCBcImpwZ1wiLCBcInBuZ1wiLCBcImdpZlwiXTtcblxuICAgIGlmIChEZXZpY2UuYXVkaW9NcGVnKSBzdXBwb3J0cy5wdXNoKFwibXBlZ1wiKTtcbiAgICBpZiAoRGV2aWNlLmF1ZGlvT2dnIHx8IERldmljZS52aWRlb09nZykgc3VwcG9ydHMucHVzaChcIm9nZ1wiKTtcbiAgICBpZiAoRGV2aWNlLmF1ZGlvTXAzKSBzdXBwb3J0cy5wdXNoKFwibXAzXCIpO1xuICAgIGlmIChEZXZpY2UuYXVkaW9NcDQgfHwgRGV2aWNlLnZpZGVvTXA0KSBzdXBwb3J0cy5wdXNoKFwibXA0XCIpO1xufVxuXG5FdmVudEVtaXR0ZXIuZXh0ZW5kKEFzc2V0TG9hZGVyKTtcblxuXG5Bc3NldExvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChyZWxvYWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjb3VudCA9IEFzc2V0cy5sZW5ndGgsXG4gICAgICAgIGkgPSBjb3VudCxcbiAgICAgICAgZm4gPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSBMb2cuZXJyb3IoZXJyKTtcblxuICAgICAgICAgICAgY291bnQtLTtcbiAgICAgICAgICAgIGlmIChjb3VudCA8PSAwKSBfdGhpcy5lbWl0KFwibG9hZFwiKTtcbiAgICAgICAgfTtcblxuICAgIGlmICghY291bnQpIHRoaXMuZW1pdChcImxvYWRcIik7XG4gICAgd2hpbGUgKGktLSkgdGhpcy5sb2FkQXNzZXQoQXNzZXRzW2ldLCBmbiwgcmVsb2FkLCB0cnVlKTtcbn07XG5cblxuQXNzZXRMb2FkZXIucHJvdG90eXBlLmxvYWRBc3NldCA9IGZ1bmN0aW9uIChhc3NldCwgY2FsbGJhY2ssIHJlbG9hZCwga25vd24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzdXBwb3J0cyA9IHRoaXMuc3VwcG9ydHMsXG4gICAgICAgIHNyYyA9IGFzc2V0LnNyYztcblxuICAgIGlmICgha25vd24gfHwgQXNzZXRzLmluZGV4T2YoYXNzZXQpID09PSAtMSkgQXNzZXRzLmFkZEFzc2V0KGFzc2V0KTtcblxuICAgIGlmICghYXNzZXQubG9hZCB8fCAhc3JjIHx8IGFzc2V0LnJhdyAmJiAhcmVsb2FkKSB7XG4gICAgICAgIGFzc2V0Ll9sb2FkZWQgPSB0cnVlO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgO1xuXG4gICAgaWYgKGlzQXJyYXkoc3JjKSkge1xuICAgICAgICB2YXIgcmF3ID0gW10sXG4gICAgICAgICAgICBleHRzID0gW10sXG4gICAgICAgICAgICBsb2FkZWQgPSBzcmMubGVuZ3RoLFxuICAgICAgICAgICAgaGFzRXh0ID0gZmFsc2U7XG5cbiAgICAgICAgZWFjaChzcmMsIGZ1bmN0aW9uIChzLCBpKSB7XG4gICAgICAgICAgICB2YXIgZXh0ID0gZ2V0RXh0KHMpO1xuICAgICAgICAgICAgZXh0cy5wdXNoKGV4dCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpc1tleHRdKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKFwiQXNzZXRMb2FkZXIubG9hZDogaGFzIG5vIGxvYWRlciBmb3IgXCIgKyBzcmMgKyBcIiBvZiB0eXBlIFwiICsgZXh0KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzW2V4dF0ocywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGxvYWRlZC0tO1xuICAgICAgICAgICAgICAgIHJhd1tpXSA9IGRhdGE7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyKSBMb2cuZXJyb3IoZXJyKTtcblxuICAgICAgICAgICAgICAgIGlmIChsb2FkZWQgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gZXh0cy5sZW5ndGg7IGotLTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0cy5pbmRleE9mKGV4dHNbaV0pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0V4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0V4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKFwiQXNzZXRMb2FkZXIubG9hZDogZGV2aWNlIGRvZXMgbm90IHN1cHBvcnQgYW55IG9mIHRoZSBnaXZlbiBmaWxlIHR5cGVzIFwiICsgZXh0cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXNzZXQuX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0LnBhcnNlKHJhdyk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0LmVtaXQoXCJsb2FkXCIsIHJhdyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJsb2FkQXNzZXRcIiwgYXNzZXQpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4dCA9IGdldEV4dChzcmMpO1xuXG4gICAgICAgIGlmICghdGhpc1tleHRdKSB7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhuZXcgRXJyb3IoXCJBc3NldExvYWRlci5sb2FkOiBoYXMgbm8gbG9hZGVyIGZpbGUgXCIgKyBzcmMgKyBcIiBvZiB0eXBlIFwiICsgZXh0KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1cHBvcnRzLmluZGV4T2YoZXh0KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG5ldyBFcnJvcihcIkFzc2V0TG9hZGVyLmxvYWQ6IGRldmljZSBkb2VzIG5vdCBzdXBwb3J0IGZpbGUgXCIgKyBzcmMgKyBcIiBvZiB0eXBlIFwiICsgZXh0KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW2V4dF0oc3JjLCBmdW5jdGlvbiAoZXJyLCByYXcpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhuZXcgRXJyb3IoXCJBc3NldExvYWRlci5sb2FkOiBcIiArIGVyci5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3NldC5fbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFzc2V0LnBhcnNlKHJhdyk7XG4gICAgICAgICAgICBhc3NldC5lbWl0KFwibG9hZFwiLCByYXcpO1xuICAgICAgICAgICAgX3RoaXMuZW1pdChcImxvYWRBc3NldFwiLCBhc3NldCk7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5cbkFzc2V0TG9hZGVyLnByb3RvdHlwZS5naWYgPSBBc3NldExvYWRlci5wcm90b3R5cGUuanBnID0gQXNzZXRMb2FkZXIucHJvdG90eXBlLmpwZWcgPSBBc3NldExvYWRlci5wcm90b3R5cGUucG5nID0gZnVuY3Rpb24gKHNyYywgY2FsbGJhY2spIHtcbiAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2U7XG5cbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwsIGltYWdlKTtcbiAgICB9O1xuICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG5ldyBFcnJvcihcIkdFVCBcIiArIHNyYyArIFwiIDQwNCAoTm90IEZvdW5kKVwiKSk7XG4gICAgfTtcblxuICAgIGltYWdlLnNyYyA9IHNyYztcbn07XG5cblxuQXNzZXRMb2FkZXIucHJvdG90eXBlLmpzb24gPSBmdW5jdGlvbiAoc3JjLCBjYWxsYmFjaykge1xuXG4gICAgYWpheCh7XG4gICAgICAgIHNyYzogc3JjLFxuICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwsIGpzb24pO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuXG5Bc3NldExvYWRlci5wcm90b3R5cGUub2dnID0gQXNzZXRMb2FkZXIucHJvdG90eXBlLndhdiA9IEFzc2V0TG9hZGVyLnByb3RvdHlwZS5tcDMgPSBBc3NldExvYWRlci5wcm90b3R5cGUuYWFjID0gZnVuY3Rpb24gKHNyYywgY2FsbGJhY2spIHtcblxuICAgIGFqYXgoe1xuICAgICAgICBzcmM6IHNyYyxcbiAgICAgICAgYmVmb3JlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgfSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKEF1ZGlvQ3R4KSB7XG4gICAgICAgICAgICAgICAgaWYgKEF1ZGlvQ3R4LmRlY29kZUF1ZGlvRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBBdWRpb0N0eC5kZWNvZGVBdWRpb0RhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhidWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhudWxsLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZhaWx1cmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKFwiQXVkaW9Db250ZXh0IEZhaWxlZCB0byBwYXJzZSBBdWRpbyBDbGlwXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gQXVkaW9DdHguY3JlYXRlQnVmZmVyKHRoaXMucmVzcG9uc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhudWxsLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKFwiQXVkaW9Db250ZXh0IEZhaWxlZCB0byBwYXJzZSBBdWRpbyBDbGlwXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKFwiQXVkaW9Db250ZXh0IChXZWJBdWRpbyBBUEkpIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQXNzZXRMb2FkZXI7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBBc3NldCA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIEFzc2V0cygpIHtcblxuICAgIEFycmF5LmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmhhc2ggPSB7fTtcbn1cblxuQXNzZXRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQXJyYXkucHJvdG90eXBlKTtcbkFzc2V0cy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBc3NldHM7XG5cblxuQXNzZXRzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBhc3NldCA9IHRoaXMuaGFzaFtuYW1lXTtcbiAgICBpZiAoYXNzZXQpIHJldHVybiBhc3NldDtcblxuICAgIExvZy5lcnJvcihcIkFzc2V0cy5nZXQ6IGNhbid0IGZpbmQgYXNzZXQgd2l0aCBuYW1lIFwiICsgbmFtZSArIFwiLCBpdCBoYXMgbm90IGJlZW4gYWRkZWQgdG8gQXNzZXRzLCB1c2UgQXNzZXRzLmFkZEFzc2V0KGFzc2V0KVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuXG5Bc3NldHMucHJvdG90eXBlLmFkZEFzc2V0ID0gZnVuY3Rpb24gKGFzc2V0KSB7XG4gICAgaWYgKCEoYXNzZXQgaW5zdGFuY2VvZiBBc3NldCkpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiQXNzZXRzLmFkZEFzc2V0OiBjYW4ndCBhZGQgcGFzc2VkIGFyZ3VtZW50LCBpdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQXNzZXRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IGFzc2V0Lm5hbWU7XG5cbiAgICBpZiAodGhpcy5oYXNoW25hbWVdKSB7XG4gICAgICAgIExvZy5lcnJvcihcIkFzc2V0cy5hZGRBc3NldDogQXNzZXRzIGFscmVhZHkgaGF2ZSBBc3NldCBuYW1lZCBcIiArIGFzc2V0Lm5hbWUpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGFzc2V0LmFzc2V0cyA9IHRoaXM7XG4gICAgdGhpcy5wdXNoKGFzc2V0KTtcbiAgICB0aGlzLmhhc2hbbmFtZV0gPSBhc3NldDtcblxuICAgIHJldHVybiBhc3NldDtcbn07XG5cblxuQXNzZXRzLnByb3RvdHlwZS5hZGRBc3NldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGksIGlsO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5hZGRBc3NldChhcmd1bWVudHNbaV0pO1xufTtcblxuXG5Bc3NldHMucHJvdG90eXBlLnJlbW92ZUFzc2V0ID0gZnVuY3Rpb24gKGFzc2V0KSB7XG4gICAgdmFyIG5hbWUgPSB0eXBlb2YoYXNzZXQpID09PSBcInN0cmluZ1wiID8gYXNzZXQgOiBhc3NldC5uYW1lO1xuICAgIGFzc2V0ID0gdGhpcy5oYXNoW25hbWVdO1xuXG4gICAgaWYgKCFhc3NldCkge1xuICAgICAgICBMb2cuZXJyb3IoXCJBc3NldHMucmVtb3ZlQXNzZXQ6IEFzc2V0cyBkb2VzIG5vdCBoYXZlIGFuIEFzc2V0IG5hbWVkIFwiICsgbmFtZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5zcGxpY2UodGhpcy5pbmRleE9mKGFzc2V0KSwgMSk7XG4gICAgdGhpcy5oYXNoW25hbWVdID0gbnVsbDtcblxuICAgIHJldHVybiBhc3NldDtcbn07XG5cblxuQXNzZXRzLnByb3RvdHlwZS5yZW1vdmVBc3NldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGksIGlsO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5yZW1vdmVBc3NldChhcmd1bWVudHNbaV0pO1xufTtcblxuXG5Bc3NldHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uLCBwYWNrKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHt9KTtcbiAgICB2YXIganNvbkFzc2V0cyA9IGpzb24uYXNzZXRzIHx8IChqc29uLmFzc2V0cyA9IFtdKSxcbiAgICAgICAganNvbkFzc2V0LFxuICAgICAgICBpID0gdGhpcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICgoanNvbkFzc2V0ID0gdGhpc1tpXSkuanNvbikganNvbkFzc2V0c1tpXSA9IGpzb25Bc3NldC50b0pTT04oanNvbkFzc2V0c1tpXSwgcGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkFzc2V0cy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciBhc3NldHNIYXNoID0gdGhpcy5oYXNoLFxuICAgICAgICBqc29uQXNzZXRzID0ganNvbi5hc3NldHMgfHwgKGpzb24uYXNzZXRzID0gW10pLFxuICAgICAgICBhc3NldCwganNvbkFzc2V0LFxuICAgICAgICBpID0ganNvbkFzc2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICghKGpzb25Bc3NldCA9IGpzb25Bc3NldHNbaV0pKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoKGFzc2V0ID0gYXNzZXRzSGFzaFtqc29uQXNzZXQubmFtZV0pKSB7XG4gICAgICAgICAgICBhc3NldC5mcm9tSlNPTihqc29uQXNzZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQoQ2xhc3MuZnJvbUpTT04oanNvbkFzc2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQXNzZXRzO1xuIiwidmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS91dGlsXCIpO1xudmFyIEF1ZGlvQ3R4ID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvYXVkaW9fY3R4XCIpO1xudmFyIEFzc2V0ID0gcmVxdWlyZShcIi4vYXNzZXRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBhcnJheUJ1ZmZlclRvQmFzZTY0ID0gdXRpbC5hcnJheUJ1ZmZlclRvQmFzZTY0LFxuICAgIGJhc2U2NFRvQXJyYXlCdWZmZXIgPSB1dGlsLmJhc2U2NFRvQXJyYXlCdWZmZXI7XG5cblxuZnVuY3Rpb24gQXVkaW9DbGlwKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQXNzZXQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuQXNzZXQuZXh0ZW5kKEF1ZGlvQ2xpcCk7XG5cblxuZGVmaW5lUHJvcGVydHkoQXVkaW9DbGlwLnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcgPyB0aGlzLnJhdy5kdXJhdGlvbiA6IDA7XG4gICAgfVxufSk7XG5cblxuZGVmaW5lUHJvcGVydHkoQXVkaW9DbGlwLnByb3RvdHlwZSwgXCJzYW1wbGVzXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3ID8gdGhpcy5yYXcubGVuZ3RoIDogMDtcbiAgICB9XG59KTtcblxuXG5kZWZpbmVQcm9wZXJ0eShBdWRpb0NsaXAucHJvdG90eXBlLCBcImZyZXF1ZW5jeVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyA/IHRoaXMucmF3LnNhbXBsZVJhdGUgOiA0NDEwMDtcbiAgICB9XG59KTtcblxuXG5kZWZpbmVQcm9wZXJ0eShBdWRpb0NsaXAucHJvdG90eXBlLCBcImNoYW5uZWxzXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3ID8gdGhpcy5yYXcubnVtYmVyT2ZDaGFubmVscyA6IDA7XG4gICAgfVxufSk7XG5cblxuQXVkaW9DbGlwLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBBc3NldC5wcm90b3R5cGUucGFyc2UuY2FsbCh0aGlzLCByYXcpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgICBpID0gcmF3Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKHJhd1tpXSkgdGhpcy5yYXcgPSByYXdbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQXVkaW9DbGlwLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcbiAgICBhcnJheSB8fCAoYXJyYXkgPSBbXSk7XG5cbiAgICByZXR1cm4gdGhpcy5yYXcgPyB0aGlzLnJhdy5nZXRDaGFubmVsRGF0YShhcnJheSwgb2Zmc2V0KSA6IGFycmF5O1xufTtcblxuXG5BdWRpb0NsaXAucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uLCBwYWNrKSB7XG4gICAganNvbiA9IEFzc2V0LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uLCBwYWNrKTtcblxuICAgIGlmICgocGFjayB8fCAhdGhpcy5zcmMpICYmIHRoaXMucmF3KSBqc29uLnJhdyA9IGFycmF5QnVmZmVyVG9CYXNlNjQodGhpcy5yYXcpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkF1ZGlvQ2xpcC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbiwgcGFjaykge1xuICAgIEFzc2V0LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24sIHBhY2spO1xuXG4gICAgaWYgKChwYWNrIHx8ICF0aGlzLnNyYykgJiYgdGhpcy5yYXcpIHRoaXMucmF3ID0gYmFzZTY0VG9BcnJheUJ1ZmZlcihqc29uLnJhdyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBdWRpb0NsaXA7XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL3V0aWxcIik7XG52YXIgUmVjdCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3JlY3RcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzNcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9jb2xvclwiKTtcbnZhciBBc3NldCA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xudmFyIEFzc2V0cyA9IHJlcXVpcmUoXCIuL2Fzc2V0c1wiKTtcbnZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi9lbnVtc1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtZXJnZSA9IHV0aWwubWVyZ2U7XG5cblxuZnVuY3Rpb24gTWF0ZXJpYWwob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBBc3NldC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy5ibGVuZGluZyA9IG9wdHMuYmxlbmRpbmcgIT0gdW5kZWZpbmVkID8gb3B0cy5ibGVuZGluZyA6IEVudW1zLkJsZW5kaW5nLkRlZmF1bHQ7XG4gICAgdGhpcy5zaWRlID0gb3B0cy5zaWRlICE9IHVuZGVmaW5lZCA/IG9wdHMuc2lkZSA6IEVudW1zLlNpZGUuRnJvbnQ7XG5cbiAgICB0aGlzLndpcmVmcmFtZSA9IG9wdHMud2lyZWZyYW1lICE9IHVuZGVmaW5lZCA/IG9wdHMud2lyZWZyYW1lIDogZmFsc2U7XG4gICAgdGhpcy53aXJlZnJhbWVMaW5lV2lkdGggPSBvcHRzLndpcmVmcmFtZUxpbmVXaWR0aCAhPSB1bmRlZmluZWQgPyBvcHRzLndpcmVmcmFtZUxpbmVXaWR0aCA6IDEuMDtcblxuICAgIHRoaXMuc2hhZGVyID0gb3B0cy5zaGFkZXIgIT0gdW5kZWZpbmVkID8gb3B0cy5zaGFkZXIgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnVuaWZvcm1zID0gbWVyZ2Uob3B0cy51bmlmb3JtcyB8fCB7fSwge1xuICAgICAgICBkaWZmdXNlQ29sb3I6IG5ldyBDb2xvcigxLjAsIDEuMCwgMS4wKSxcbiAgICAgICAgc2hpbmluZXNzOiA4LjAsXG4gICAgICAgIG5vcm1hbFNjYWxlOiAxLjBcbiAgICB9KTtcblxuICAgIHRoaXMucmVjZWl2ZVNoYWRvdyA9IG9wdHMucmVjZWl2ZVNoYWRvdyAhPSB1bmRlZmluZWQgPyAhIW9wdHMucmVjZWl2ZVNoYWRvdyA6IHRydWU7XG4gICAgdGhpcy5jYXN0U2hhZG93ID0gb3B0cy5jYXN0U2hhZG93ICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5jYXN0U2hhZG93IDogdHJ1ZTtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufVxuXG5Bc3NldC5leHRlbmQoTWF0ZXJpYWwpO1xuXG5cbk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgQXNzZXQucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBvdGhlcik7XG5cbiAgICB0aGlzLmJsZW5kaW5nID0gb3RoZXIuYmxlbmRpbmc7XG4gICAgdGhpcy5zaWRlID0gb3RoZXIuc2lkZTtcblxuICAgIHRoaXMud2lyZWZyYW1lID0gb3RoZXIud2lyZWZyYW1lO1xuICAgIHRoaXMud2lyZWZyYW1lTGluZVdpZHRoID0gb3RoZXIud2lyZWZyYW1lTGluZVdpZHRoO1xuXG4gICAgdGhpcy5zaGFkZXIgPSBvdGhlci5zaGFkZXI7XG5cbiAgICB0aGlzLnVuaWZvcm1zID0gY29weShvdGhlci51bmlmb3Jtcyk7XG5cbiAgICB0aGlzLnJlY2VpdmVTaGFkb3cgPSBvdGhlci5yZWNlaXZlU2hhZG93O1xuICAgIHRoaXMuY2FzdFNoYWRvdyA9IG90aGVyLmNhc3RTaGFkb3c7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuTWF0ZXJpYWwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHJhdykge1xuICAgIEFzc2V0LnByb3RvdHlwZS5wYXJzZS5jYWxsKHRoaXMsIHJhdyk7XG5cbiAgICB0aGlzLmZyb21KU09OKHJhdyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuTWF0ZXJpYWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIEFzc2V0LnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbk1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbiwgcGFjaykge1xuICAgIGpzb24gPSBBc3NldC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbiwgcGFjayk7XG5cbiAgICBqc29uLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZztcbiAgICBqc29uLnNpZGUgPSB0aGlzLnNpZGU7XG5cbiAgICBqc29uLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lO1xuICAgIGpzb24ud2lyZWZyYW1lTGluZVdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5lV2lkdGg7XG5cbiAgICBqc29uLnNoYWRlciA9IHRoaXMuc2hhZGVyICE9IHVuZGVmaW5lZCA/IHRoaXMuc2hhZGVyLm5hbWUgOiB1bmRlZmluZWQ7XG5cbiAgICB0b0pTT04odGhpcy51bmlmb3JtcywganNvbi51bmlmb3JtcyB8fCAoanNvbi51bmlmb3JtcyA9IHt9KSk7XG5cbiAgICBqc29uLnJlY2VpdmVTaGFkb3cgPSB0aGlzLnJlY2VpdmVTaGFkb3c7XG4gICAganNvbi5jYXN0U2hhZG93ID0gdGhpcy5jYXN0U2hhZG93O1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbk1hdGVyaWFsLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQXNzZXQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLmJsZW5kaW5nID0ganNvbi5ibGVuZGluZztcbiAgICB0aGlzLnNpZGUgPSBqc29uLnNpZGU7XG5cbiAgICB0aGlzLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lO1xuICAgIHRoaXMud2lyZWZyYW1lTGluZVdpZHRoID0ganNvbi53aXJlZnJhbWVMaW5lV2lkdGg7XG5cbiAgICB0aGlzLnNoYWRlciA9IGpzb24uc2hhZGVyICE9IHVuZGVmaW5lZCA/IEFzc2V0cy5nZXQoanNvbi5zaGFkZXIpIDogdW5kZWZpbmVkO1xuXG4gICAgZnJvbUpTT04odGhpcy51bmlmb3JtcywganNvbi51bmlmb3Jtcyk7XG5cbiAgICB0aGlzLnJlY2VpdmVTaGFkb3cgPSBqc29uLnJlY2VpdmVTaGFkb3c7XG4gICAgdGhpcy5jYXN0U2hhZG93ID0ganNvbi5jYXN0U2hhZG93O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbmZ1bmN0aW9uIHRvSlNPTihvYmosIGpzb24pIHtcbiAgICB2YXIgdmFsdWUsIGtleTtcblxuICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBqc29uW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS50b0pTT04pIHtcbiAgICAgICAgICAgIGpzb25ba2V5XSA9IHZhbHVlLnRvSlNPTihqc29uW2tleV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAganNvbltrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbn1cblxuXG5mdW5jdGlvbiBmcm9tSlNPTihvYmosIGpzb24pIHtcbiAgICB2YXIgY2xhc3NlcyA9IENsYXNzLl9jbGFzc2VzLFxuICAgICAgICBtYXRoQ2xhc3NlcyA9IE1hdGhmLl9jbGFzc2VzLFxuICAgICAgICB2YWx1ZSwga2V5O1xuXG4gICAgZm9yIChrZXkgaW4ganNvbikge1xuICAgICAgICB2YWx1ZSA9IGpzb25ba2V5XTtcblxuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRoQ2xhc3Nlc1t2YWx1ZS5fY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBNYXRoZi5mcm9tSlNPTih2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2xhc3Nlc1t2YWx1ZS5fY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBDbGFzcy5mcm9tSlNPTih2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvcHkob2JqKSB7XG4gICAgdmFyIG91dCA9IHt9LFxuICAgICAgICBjbGFzc2VzID0gQ2xhc3MuX2NsYXNzZXMsXG4gICAgICAgIG1hdGhDbGFzc2VzID0gTWF0aGYuX2NsYXNzZXMsXG4gICAgICAgIHZhbHVlLCBrZXk7XG5cbiAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb3V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRoQ2xhc3Nlc1t2YWx1ZS5fY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgb3V0W2tleV0gPSBuZXcgbWF0aENsYXNzZXNbdmFsdWUuX2NsYXNzTmFtZV0oKS5jb3B5KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbGFzc2VzW3ZhbHVlLl9jbGFzc05hbWVdKSB7XG4gICAgICAgICAgICBvdXRba2V5XSA9IG5ldyBjbGFzc2VzW3ZhbHVlLl9jbGFzc05hbWVdKCkuY29weSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGVyaWFsO1xuIiwidmFyIEFzc2V0ID0gcmVxdWlyZShcIi4vYXNzZXRcIik7XG52YXIgTWVzaEJvbmUgPSByZXF1aXJlKFwiLi9tZXNoX2JvbmVcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzNcIik7XG52YXIgVmVjNCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzRcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9jb2xvclwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIE1lc2gob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBBc3NldC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy52ZXJ0aWNlcyA9IG9wdHMudmVydGljZXMgIT0gdW5kZWZpbmVkID8gb3B0cy52ZXJ0aWNlcyA6IFtdO1xuXG4gICAgdGhpcy5ub3JtYWxzID0gb3B0cy5ub3JtYWxzICE9IHVuZGVmaW5lZCA/IG9wdHMubm9ybWFscyA6IFtdO1xuXG4gICAgdGhpcy50YW5nZW50cyA9IG9wdHMudGFuZ2VudHMgIT0gdW5kZWZpbmVkID8gb3B0cy50YW5nZW50cyA6IFtdO1xuXG4gICAgdGhpcy5pbmRpY2VzID0gb3B0cy5pbmRpY2VzICE9IHVuZGVmaW5lZCA/IG9wdHMuaW5kaWNlcyA6IFtdO1xuXG4gICAgdGhpcy5jb2xvcnMgPSBvcHRzLmNvbG9ycyAhPSB1bmRlZmluZWQgPyBvcHRzLmNvbG9ycyA6IFtdO1xuXG4gICAgdGhpcy51dnMgPSBvcHRzLnV2cyAhPSB1bmRlZmluZWQgPyBvcHRzLnV2cyA6IFtdO1xuICAgIHRoaXMudXZzMiA9IG9wdHMudXZzMiAhPSB1bmRlZmluZWQgPyBvcHRzLnV2czIgOiBbXTtcblxuICAgIHRoaXMuYm9uZXMgPSBvcHRzLmJvbmVzICE9IHVuZGVmaW5lZCA/IG9wdHMuYm9uZXMgOiBbXTtcbiAgICB0aGlzLmJvbmVJbmRpY2VzID0gb3B0cy5ib25lSW5kaWNlcyAhPSB1bmRlZmluZWQgPyBvcHRzLmJvbmVJbmRpY2VzIDogW107XG4gICAgdGhpcy5ib25lV2VpZ2h0cyA9IG9wdHMuYm9uZVdlaWdodHMgIT0gdW5kZWZpbmVkID8gb3B0cy5ib25lV2VpZ2h0cyA6IFtdO1xuXG4gICAgdGhpcy5keW5hbWljID0gb3B0cy5keW5hbWljICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5keW5hbWljIDogZmFsc2U7XG4gICAgdGhpcy51c2VCb25lcyA9IG9wdHMudXNlQm9uZXMgIT0gdW5kZWZpbmVkID8gISFvcHRzLnVzZUJvbmVzIDogdGhpcy5ib25lcy5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgdGhpcy5hbmltYXRpb25zID0ge307XG5cbiAgICB0aGlzLmFhYmIgPSBuZXcgQUFCQjM7XG4gICAgaWYgKG9wdHMudmVydGljZXMpIHRoaXMuYWFiYi5mcm9tUG9pbnRzKHRoaXMudmVydGljZXMpO1xuXG4gICAgdGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudGFuZ2VudHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmluZGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudXZzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy51dnMyTmVlZFVwZGF0ZSA9IHRydWU7XG5cbiAgICB0aGlzLmJvbmVJbmRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5ib25lV2VpZ2h0c05lZWRVcGRhdGUgPSB0cnVlO1xuXG4gICAgdGhpcy5fd2ViZ2xCdWZmZXJzSW5pdHRlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbFVzZWQgPSAwO1xuXG4gICAgdGhpcy5fd2ViZ2xWZXJ0ZXhCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xOb3JtYWxCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xUYW5nZW50QnVmZmVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsQ29sb3JCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xVdkJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbFV2MkJ1ZmZlciA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuX3dlYmdsTWVzaEJvbmVJbmRleEJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbE1lc2hCb25lV2VpZ2h0QnVmZmVyID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fd2ViZ2xJbmRleEJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbExpbmVCdWZmZXIgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl93ZWJnbFZlcnRleEFycmF5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsTm9ybWFsQXJyYXkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xUYW5nZW50QXJyYXkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xDb2xvckFycmF5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsVXZBcnJheSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbFV2MkFycmF5ID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fd2ViZ2xNZXNoQm9uZUluZGV4QXJyYXkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xNZXNoQm9uZVdlaWdodEFycmF5ID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fd2ViZ2xJbmRleEFycmF5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsTGluZUFycmF5ID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fd2ViZ2xWZXJ0ZXhDb3VudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbExpbmVDb3VudCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRzLmpzb24pIHRoaXMuZnJvbUpTT04ob3B0cy5qc29uKTtcbn1cblxuQXNzZXQuZXh0ZW5kKE1lc2gpO1xuXG5cbk1lc2gucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICBBc3NldC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIG90aGVyKTtcbiAgICB2YXIgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICBvdGhlclZlcnRpY2VzID0gb3RoZXIudmVydGljZXMsXG4gICAgICAgIG5vcm1hbHMgPSB0aGlzLm5vcm1hbHMsXG4gICAgICAgIG90aGVyTm9ybWFscyA9IG90aGVyLm5vcm1hbHMsXG4gICAgICAgIHRhbmdlbnRzID0gdGhpcy50YW5nZW50cyxcbiAgICAgICAgb3RoZXJUYW5nZW50cyA9IG90aGVyLnRhbmdlbnRzLFxuICAgICAgICBpbmRpY2VzID0gdGhpcy5pbmRpY2VzLFxuICAgICAgICBvdGhlckluZGljZXMgPSBvdGhlci5pbmRpY2VzLFxuICAgICAgICBjb2xvcnMgPSB0aGlzLmNvbG9ycyxcbiAgICAgICAgb3RoZXJDb2xvcnMgPSBvdGhlci5jb2xvcnMsXG4gICAgICAgIHV2cyA9IHRoaXMudXZzLFxuICAgICAgICBvdGhlclV2cyA9IG90aGVyLnV2cyxcbiAgICAgICAgdXZzMiA9IHRoaXMudXZzMixcbiAgICAgICAgb3RoZXJVdjJzID0gb3RoZXIudXZzMixcbiAgICAgICAgYm9uZXMgPSB0aGlzLmJvbmVzLFxuICAgICAgICBvdGhlck1lc2hCb25lcyA9IG90aGVyLmJvbmVzLFxuICAgICAgICBib25lSW5kaWNlcyA9IHRoaXMuYm9uZUluZGljZXMsXG4gICAgICAgIG90aGVyTWVzaEJvbmVJbmRpY2VzID0gb3RoZXIuYm9uZUluZGljZXMsXG4gICAgICAgIGJvbmVXZWlnaHRzID0gdGhpcy5ib25lV2VpZ2h0cyxcbiAgICAgICAgb3RoZXJNZXNoQm9uZVdlaWdodHMgPSBvdGhlci5ib25lV2VpZ2h0cyxcbiAgICAgICAgaTtcblxuICAgIHZlcnRpY2VzLmxlbmd0aCA9IG90aGVyVmVydGljZXMubGVuZ3RoO1xuICAgIG5vcm1hbHMubGVuZ3RoID0gb3RoZXJOb3JtYWxzLmxlbmd0aDtcbiAgICB0YW5nZW50cy5sZW5ndGggPSBvdGhlclRhbmdlbnRzLmxlbmd0aDtcbiAgICBpbmRpY2VzLmxlbmd0aCA9IG90aGVySW5kaWNlcy5sZW5ndGg7XG4gICAgY29sb3JzLmxlbmd0aCA9IG90aGVyQ29sb3JzLmxlbmd0aDtcbiAgICB1dnMubGVuZ3RoID0gb3RoZXJVdnMubGVuZ3RoO1xuICAgIHV2czIubGVuZ3RoID0gb3RoZXJVdjJzLmxlbmd0aDtcblxuICAgIGJvbmVzLmxlbmd0aCA9IG90aGVyTWVzaEJvbmVzLmxlbmd0aDtcbiAgICBib25lSW5kaWNlcy5sZW5ndGggPSBvdGhlck1lc2hCb25lSW5kaWNlcy5sZW5ndGg7XG4gICAgYm9uZVdlaWdodHMubGVuZ3RoID0gb3RoZXJNZXNoQm9uZVdlaWdodHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gb3RoZXJWZXJ0aWNlcy5sZW5ndGg7IGktLTspIHZlcnRpY2VzW2ldID0gKHZlcnRpY2VzW2ldIHx8IG5ldyBWZWMzKS5jb3B5KG90aGVyVmVydGljZXNbaV0pO1xuICAgIGZvciAoaSA9IG90aGVyTm9ybWFscy5sZW5ndGg7IGktLTspIG5vcm1hbHNbaV0gPSAobm9ybWFsc1tpXSB8fCBuZXcgVmVjMykuY29weShvdGhlck5vcm1hbHNbaV0pO1xuICAgIGZvciAoaSA9IG90aGVyVGFuZ2VudHMubGVuZ3RoOyBpLS07KSB0YW5nZW50c1tpXSA9ICh0YW5nZW50c1tpXSB8fCBuZXcgVmVjNCkuY29weShvdGhlclRhbmdlbnRzW2ldKTtcbiAgICBmb3IgKGkgPSBvdGhlckluZGljZXMubGVuZ3RoOyBpLS07KSBpbmRpY2VzW2ldID0gb3RoZXJJbmRpY2VzW2ldO1xuICAgIGZvciAoaSA9IG90aGVyQ29sb3JzLmxlbmd0aDsgaS0tOykgY29sb3JzW2ldID0gKGNvbG9yc1tpXSB8fCBuZXcgQ29sb3IpLmNvcHkob3RoZXJDb2xvcnNbaV0pO1xuICAgIGZvciAoaSA9IG90aGVyVXZzLmxlbmd0aDsgaS0tOykgdXZzW2ldID0gKHV2c1tpXSB8fCBuZXcgVmVjMikuY29weShvdGhlclV2c1tpXSk7XG4gICAgZm9yIChpID0gb3RoZXJVdjJzLmxlbmd0aDsgaS0tOykgdXZzMltpXSA9ICh1dnMyW2ldIHx8IG5ldyBWZWMyKS5jb3B5KG90aGVyVXYyc1tpXSk7XG4gICAgZm9yIChpID0gb3RoZXJNZXNoQm9uZXMubGVuZ3RoOyBpLS07KSBib25lc1tpXSA9IChib25lc1tpXSB8fCBuZXcgTWVzaEJvbmUpLmNvcHkob3RoZXJNZXNoQm9uZXNbaV0pO1xuICAgIGZvciAoaSA9IG90aGVyTWVzaEJvbmVJbmRpY2VzLmxlbmd0aDsgaS0tOykgYm9uZUluZGljZXNbaV0gPSBvdGhlck1lc2hCb25lSW5kaWNlc1tpXTtcbiAgICBmb3IgKGkgPSBvdGhlck1lc2hCb25lV2VpZ2h0cy5sZW5ndGg7IGktLTspIGJvbmVXZWlnaHRzW2ldID0gb3RoZXJNZXNoQm9uZVdlaWdodHNbaV07XG5cbiAgICB0aGlzLmR5bmFtaWMgPSBvdGhlci5keW5hbWljO1xuICAgIHRoaXMudXNlQm9uZXMgPSBvdGhlci51c2VCb25lcztcblxuICAgIHRoaXMuYWFiYi5mcm9tUG9pbnRzKHRoaXMudmVydGljZXMpO1xuXG4gICAgdGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudGFuZ2VudHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmluZGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudXZzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy51dnMyTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5ib25lSW5kaWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMuYm9uZVdlaWdodHNOZWVkVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5NZXNoLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBBc3NldC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMudmVydGljZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLm5vcm1hbHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnRhbmdlbnRzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5pbmRpY2VzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5jb2xvcnMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnV2cy5sZW5ndGggPSAwO1xuICAgIHRoaXMudXZzMi5sZW5ndGggPSAwO1xuXG4gICAgdGhpcy5ib25lcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuYm9uZUluZGljZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmJvbmVXZWlnaHRzLmxlbmd0aCA9IDA7XG5cbiAgICB0aGlzLmFhYmIuY2xlYXIoKTtcblxuICAgIHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLnRhbmdlbnRzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5pbmRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLnV2c05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudXZzMk5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMuYm9uZUluZGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmJvbmVXZWlnaHRzTmVlZFVwZGF0ZSA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxudmFyIEVNUFRZX0FSUkFZID0gW107XG5cbk1lc2gucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHJhdykge1xuICAgIEFzc2V0LnByb3RvdHlwZS5wYXJzZS5jYWxsKHRoaXMsIHJhdyk7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAgdGFuZ2VudHMgPSB0aGlzLnRhbmdlbnRzLFxuICAgICAgICBpbmRpY2VzID0gdGhpcy5pbmRpY2VzLFxuICAgICAgICBjb2xvcnMgPSB0aGlzLmNvbG9ycyxcbiAgICAgICAgdXZzID0gdGhpcy51dnMsXG4gICAgICAgIHV2czIgPSB0aGlzLnV2czIsXG4gICAgICAgIGJvbmVzID0gdGhpcy5ib25lcyxcbiAgICAgICAgYm9uZVdlaWdodHMgPSB0aGlzLmJvbmVXZWlnaHRzLFxuICAgICAgICBib25lSW5kaWNlcyA9IHRoaXMuYm9uZUluZGljZXMsXG4gICAgICAgIGJvbmUsIGl0ZW1zLCBpdGVtLFxuICAgICAgICBpLCBpbDtcblxuICAgIHZlcnRpY2VzLmxlbmd0aCA9IG5vcm1hbHMubGVuZ3RoID0gdGFuZ2VudHMubGVuZ3RoID0gaW5kaWNlcy5sZW5ndGggPSBjb2xvcnMubGVuZ3RoID0gdXZzLmxlbmd0aCA9IHV2czIubGVuZ3RoID0gMDtcbiAgICBib25lcy5sZW5ndGggPSBib25lV2VpZ2h0cy5sZW5ndGggPSBib25lSW5kaWNlcy5sZW5ndGggPSAwO1xuXG4gICAgaXRlbXMgPSByYXcudmVydGljZXMgfHwgRU1QVFlfQVJSQVk7XG4gICAgZm9yIChpID0gMCwgaWwgPSBpdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArPSAzKSB2ZXJ0aWNlcy5wdXNoKG5ldyBWZWMzKGl0ZW1zW2ldLCBpdGVtc1tpICsgMV0sIGl0ZW1zW2kgKyAyXSkpO1xuXG4gICAgaXRlbXMgPSByYXcubm9ybWFscyB8fCBFTVBUWV9BUlJBWTtcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsOyBpICs9IDMpIG5vcm1hbHMucHVzaChuZXcgVmVjMyhpdGVtc1tpXSwgaXRlbXNbaSArIDFdLCBpdGVtc1tpICsgMl0pKTtcblxuICAgIGl0ZW1zID0gcmF3LnRhbmdlbnRzIHx8IEVNUFRZX0FSUkFZO1xuICAgIGZvciAoaSA9IDAsIGlsID0gaXRlbXMubGVuZ3RoOyBpIDwgaWw7IGkgKz0gNCkgdGFuZ2VudHMucHVzaChuZXcgVmVjNChpdGVtc1tpXSwgaXRlbXNbaSArIDFdLCBpdGVtc1tpICsgMl0sIGl0ZW1zW2kgKyAzXSkpO1xuXG4gICAgaXRlbXMgPSByYXcuaW5kaWNlcyB8fCByYXcuZmFjZXMgfHwgRU1QVFlfQVJSQVk7XG4gICAgZm9yIChpID0gMCwgaWwgPSBpdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArPSAzKSBpbmRpY2VzLnB1c2goaXRlbXNbaV0sIGl0ZW1zW2kgKyAxXSwgaXRlbXNbaSArIDJdKTtcblxuICAgIGl0ZW1zID0gcmF3LmNvbG9ycyB8fCBFTVBUWV9BUlJBWTtcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsOyBpICs9IDMpIGNvbG9ycy5wdXNoKG5ldyBDb2xvcihpdGVtc1tpXSwgaXRlbXNbaSArIDFdLCBpdGVtc1tpICsgMl0pKTtcblxuICAgIGl0ZW1zID0gcmF3LnV2cyB8fCBFTVBUWV9BUlJBWTtcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsOyBpICs9IDIpIHV2cy5wdXNoKG5ldyBWZWMyKGl0ZW1zW2ldLCBpdGVtc1tpICsgMV0pKTtcblxuICAgIGl0ZW1zID0gcmF3LnV2czIgfHwgRU1QVFlfQVJSQVk7XG4gICAgZm9yIChpID0gMCwgaWwgPSBpdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArPSAyKSB1dnMyLnB1c2gobmV3IFZlYzIoaXRlbXNbaV0sIGl0ZW1zW2kgKyAxXSkpO1xuXG4gICAgaXRlbXMgPSByYXcuYm9uZXMgfHwgRU1QVFlfQVJSQVk7XG4gICAgZm9yIChpID0gMCwgaWwgPSBpdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcblxuICAgICAgICBib25lID0gbmV3IE1lc2hCb25lKGl0ZW0ucGFyZW50LCBpdGVtLm5hbWUpO1xuXG4gICAgICAgIGJvbmUucG9zaXRpb24uZnJvbUFycmF5KGl0ZW0ucG9zaXRpb24pO1xuICAgICAgICBib25lLnJvdGF0aW9uLmZyb21BcnJheShpdGVtLnJvdGF0aW9uKTtcbiAgICAgICAgYm9uZS5zY2FsZS5mcm9tQXJyYXkoaXRlbS5zY2FsZSk7XG4gICAgICAgIGJvbmUuYmluZFBvc2UuZnJvbUFycmF5KGl0ZW0uYmluZFBvc2UpO1xuICAgICAgICBib25lLnNraW5uZWQgPSAhIWl0ZW0uc2tpbm5lZDtcblxuICAgICAgICBib25lcy5wdXNoKGJvbmUpO1xuICAgIH1cbiAgICBpZiAoaXRlbXMubGVuZ3RoKSB0aGlzLnVzZUJvbmVzID0gdHJ1ZTtcblxuICAgIGl0ZW1zID0gcmF3LmJvbmVXZWlnaHRzIHx8IEVNUFRZX0FSUkFZO1xuICAgIGZvciAoaSA9IDAsIGlsID0gaXRlbXMubGVuZ3RoOyBpIDwgaWw7IGkrKykgYm9uZVdlaWdodHMucHVzaChpdGVtc1tpXSk7XG5cbiAgICBpdGVtcyA9IHJhdy5ib25lSW5kaWNlcyB8fCBFTVBUWV9BUlJBWTtcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsOyBpKyspIGJvbmVJbmRpY2VzLnB1c2goaXRlbXNbaV0pO1xuXG4gICAgdGhpcy5hbmltYXRpb25zID0gcmF3LmFuaW1hdGlvbnM7XG5cbiAgICB0aGlzLmFhYmIuZnJvbVBvaW50cyh0aGlzLnZlcnRpY2VzKTtcblxuICAgIHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLnRhbmdlbnRzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5pbmRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLnV2c05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudXZzMk5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMuYm9uZUluZGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmJvbmVXZWlnaHRzTmVlZFVwZGF0ZSA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuTWVzaC5wcm90b3R5cGUudHJhbnNmb3JtTWF0MyA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAgaTtcblxuICAgIGlmICh2ZXJ0aWNlcykge1xuICAgICAgICBpID0gdmVydGljZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB2ZXJ0aWNlc1tpXS50cmFuc2Zvcm1NYXQzKG0pO1xuICAgICAgICB0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChub3JtYWxzKSB7XG4gICAgICAgIGkgPSBub3JtYWxzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkgbm9ybWFsc1tpXS50cmFuc2Zvcm1NYXQzKG0pO1xuICAgICAgICB0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuTWVzaC5wcm90b3R5cGUudHJhbnNmb3JtTWF0NCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAgaTtcblxuICAgIGlmICh2ZXJ0aWNlcykge1xuICAgICAgICBpID0gdmVydGljZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB2ZXJ0aWNlc1tpXS50cmFuc2Zvcm1NYXQ0KG0pO1xuICAgICAgICB0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChub3JtYWxzKSB7XG4gICAgICAgIGkgPSBub3JtYWxzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkgbm9ybWFsc1tpXS50cmFuc2Zvcm1NYXQ0Um90YXRpb24obSk7XG4gICAgICAgIHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5NZXNoLnByb3RvdHlwZS5jYWxjdWxhdGVBQUJCID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5hYWJiLmZyb21Qb2ludHModGhpcy52ZXJ0aWNlcyk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbk1lc2gucHJvdG90eXBlLmNhbGN1bGF0ZU5vcm1hbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHUgPSBuZXcgVmVjMyxcbiAgICAgICAgdiA9IG5ldyBWZWMzLFxuICAgICAgICB1diA9IG5ldyBWZWMzLFxuICAgICAgICBmYWNlTm9ybWFsID0gbmV3IFZlYzM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAgICAgIGluZGljZXMgPSB0aGlzLmluZGljZXMsXG4gICAgICAgICAgICBhLCBiLCBjLCB2YSwgdmIsIHZjLCBpO1xuXG4gICAgICAgIGZvciAoaSA9IHZlcnRpY2VzLmxlbmd0aDsgaS0tOykobm9ybWFsc1tpXSB8fCAobm9ybWFsc1tpXSA9IG5ldyBWZWMzKSkuc2V0KDAsIDAsIDApO1xuXG4gICAgICAgIGZvciAoaSA9IGluZGljZXMubGVuZ3RoOyBpIC09IDM7KSB7XG4gICAgICAgICAgICBhID0gaW5kaWNlc1tpXTtcbiAgICAgICAgICAgIGIgPSBpbmRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgIGMgPSBpbmRpY2VzW2kgKyAyXTtcblxuICAgICAgICAgICAgdmEgPSB2ZXJ0aWNlc1thXTtcbiAgICAgICAgICAgIHZiID0gdmVydGljZXNbYl07XG4gICAgICAgICAgICB2YyA9IHZlcnRpY2VzW2NdO1xuXG4gICAgICAgICAgICB1LnZzdWIodmMsIHZiKTtcbiAgICAgICAgICAgIHYudnN1Yih2YSwgdmIpO1xuXG4gICAgICAgICAgICB1di52Y3Jvc3ModSwgdik7XG5cbiAgICAgICAgICAgIGZhY2VOb3JtYWwuY29weSh1dikubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgIG5vcm1hbHNbYV0uYWRkKGZhY2VOb3JtYWwpO1xuICAgICAgICAgICAgbm9ybWFsc1tiXS5hZGQoZmFjZU5vcm1hbCk7XG4gICAgICAgICAgICBub3JtYWxzW2NdLmFkZChmYWNlTm9ybWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IGluZGljZXMubGVuZ3RoOyBpIC09IDM7KSB7XG4gICAgICAgICAgICBub3JtYWxzW2luZGljZXNbaV1dLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgbm9ybWFsc1tpbmRpY2VzW2kgKyAxXV0ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICBub3JtYWxzW2luZGljZXNbaSArIDJdXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuTWVzaC5wcm90b3R5cGUuY2FsY3VsYXRlVGFuZ2VudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhbjEgPSBbXSxcbiAgICAgICAgdGFuMiA9IFtdLFxuICAgICAgICBzZGlyID0gbmV3IFZlYzMsXG4gICAgICAgIHRkaXIgPSBuZXcgVmVjMyxcbiAgICAgICAgbiA9IG5ldyBWZWMzLFxuICAgICAgICB0ID0gbmV3IFZlYzMsXG4gICAgICAgIHRtcDEgPSBuZXcgVmVjMyxcbiAgICAgICAgdG1wMiA9IG5ldyBWZWMzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluZGljZXMgPSB0aGlzLmluZGljZXMsXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMsXG4gICAgICAgICAgICBub3JtYWxzID0gdGhpcy5ub3JtYWxzLFxuICAgICAgICAgICAgdGFuZ2VudHMgPSB0aGlzLnRhbmdlbnRzLFxuICAgICAgICAgICAgdXZzID0gdGhpcy51dnMsXG5cbiAgICAgICAgICAgIHYxLCB2MiwgdjMsXG4gICAgICAgICAgICB3MSwgdzIsIHczLFxuXG4gICAgICAgICAgICB4MSwgeDIsIHkxLCB5MiwgejEsIHoyLFxuICAgICAgICAgICAgczEsIHMyLCB0MSwgdDIsXG4gICAgICAgICAgICBhLCBiLCBjLFxuXG4gICAgICAgICAgICByLCB3LCBpO1xuXG4gICAgICAgIGZvciAoaSA9IHZlcnRpY2VzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgKHRhbjFbaV0gfHwgKHRhbjFbaV0gPSBuZXcgVmVjMykpLnNldCgwLCAwLCAwKTtcbiAgICAgICAgICAgICh0YW4yW2ldIHx8ICh0YW4yW2ldID0gbmV3IFZlYzMpKS5zZXQoMCwgMCwgMCk7XG4gICAgICAgICAgICAodGFuZ2VudHNbaV0gfHwgKHRhbmdlbnRzW2ldID0gbmV3IFZlYzQpKS5zZXQoMCwgMCwgMCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSB2ZXJ0aWNlcy5sZW5ndGg7IGktLTspIHV2c1tpXSA9IHV2c1tpXSB8fCAodXZzW2ldID0gbmV3IFZlYzIpO1xuXG4gICAgICAgIGZvciAoaSA9IGluZGljZXMubGVuZ3RoOyBpIC09IDM7KSB7XG4gICAgICAgICAgICBhID0gaW5kaWNlc1tpXTtcbiAgICAgICAgICAgIGIgPSBpbmRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgIGMgPSBpbmRpY2VzW2kgKyAyXTtcblxuICAgICAgICAgICAgdjEgPSB2ZXJ0aWNlc1thXTtcbiAgICAgICAgICAgIHYyID0gdmVydGljZXNbYl07XG4gICAgICAgICAgICB2MyA9IHZlcnRpY2VzW2NdO1xuXG4gICAgICAgICAgICB3MSA9IHV2c1thXTtcbiAgICAgICAgICAgIHcyID0gdXZzW2JdO1xuICAgICAgICAgICAgdzMgPSB1dnNbY107XG5cbiAgICAgICAgICAgIHgxID0gdjIueCAtIHYxLng7XG4gICAgICAgICAgICB4MiA9IHYzLnggLSB2MS54O1xuICAgICAgICAgICAgeTEgPSB2Mi55IC0gdjEueTtcbiAgICAgICAgICAgIHkyID0gdjMueSAtIHYxLnk7XG4gICAgICAgICAgICB6MSA9IHYyLnogLSB2MS56O1xuICAgICAgICAgICAgejIgPSB2My56IC0gdjEuejtcblxuICAgICAgICAgICAgczEgPSB3Mi54IC0gdzEueDtcbiAgICAgICAgICAgIHMyID0gdzMueCAtIHcxLng7XG4gICAgICAgICAgICB0MSA9IHcyLnkgLSB3MS55O1xuICAgICAgICAgICAgdDIgPSB3My55IC0gdzEueTtcblxuICAgICAgICAgICAgciA9IHMxICogdDIgLSBzMiAqIHQxO1xuICAgICAgICAgICAgciA9IHIgIT09IDAgPyAxIC8gciA6IDA7XG5cbiAgICAgICAgICAgIHNkaXIuc2V0KFxuICAgICAgICAgICAgICAgICh0MiAqIHgxIC0gdDEgKiB4MikgKiByLCAodDIgKiB5MSAtIHQxICogeTIpICogciwgKHQyICogejEgLSB0MSAqIHoyKSAqIHJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRkaXIuc2V0KFxuICAgICAgICAgICAgICAgIChzMSAqIHgyIC0gczIgKiB4MSkgKiByLCAoczEgKiB5MiAtIHMyICogeTEpICogciwgKHMxICogejIgLSBzMiAqIHoxKSAqIHJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRhbjFbYV0uYWRkKHNkaXIpO1xuICAgICAgICAgICAgdGFuMVtiXS5hZGQoc2Rpcik7XG4gICAgICAgICAgICB0YW4xW2NdLmFkZChzZGlyKTtcblxuICAgICAgICAgICAgdGFuMlthXS5hZGQodGRpcik7XG4gICAgICAgICAgICB0YW4yW2JdLmFkZCh0ZGlyKTtcbiAgICAgICAgICAgIHRhbjJbY10uYWRkKHRkaXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gdmVydGljZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB0LmNvcHkodGFuMVtpXSk7XG4gICAgICAgICAgICBuLmNvcHkobm9ybWFsc1tpXSk7XG5cbiAgICAgICAgICAgIHRtcDEuY29weSh0KTtcbiAgICAgICAgICAgIHRtcDEuc3ViKG4uc211bChuLmRvdCh0KSkpLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgICAgICBuLmNvcHkobm9ybWFsc1tpXSk7XG4gICAgICAgICAgICB0bXAyLnZjcm9zcyhuLCB0KTtcblxuICAgICAgICAgICAgdyA9ICh0bXAyLmRvdCh0YW4yW2ldKSA8IDApID8gLTEgOiAxO1xuXG4gICAgICAgICAgICB0YW5nZW50c1tpXS5zZXQodG1wMS54LCB0bXAxLnksIHRtcDEueiwgdyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRhbmdlbnRzTmVlZFVwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0oKTtcblxuXG5NZXNoLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbiwgcGFjaykge1xuICAgIGpzb24gPSBBc3NldC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbiwgcGFjayk7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAganNvblZlcnRpY2VzID0ganNvbi52ZXJ0aWNlcyB8fCAoanNvbi52ZXJ0aWNlcyA9IFtdKSxcbiAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAganNvbk5vcm1hbHMgPSBqc29uLm5vcm1hbHMgfHwgKGpzb24ubm9ybWFscyA9IFtdKSxcbiAgICAgICAgdGFuZ2VudHMgPSB0aGlzLnRhbmdlbnRzLFxuICAgICAgICBqc29uVGFuZ2VudHMgPSBqc29uLnRhbmdlbnRzIHx8IChqc29uLnRhbmdlbnRzID0gW10pLFxuICAgICAgICBpbmRpY2VzID0gdGhpcy5pbmRpY2VzLFxuICAgICAgICBqc29uSW5kaWNlcyA9IGpzb24uaW5kaWNlcyB8fCAoanNvbi5pbmRpY2VzID0gW10pLFxuICAgICAgICBjb2xvcnMgPSB0aGlzLmNvbG9ycyxcbiAgICAgICAganNvbkNvbG9ycyA9IGpzb24uY29sb3JzIHx8IChqc29uLmNvbG9ycyA9IFtdKSxcbiAgICAgICAgdXZzID0gdGhpcy51dnMsXG4gICAgICAgIGpzb25VdnMgPSBqc29uLnV2cyB8fCAoanNvbi51dnMgPSBbXSksXG4gICAgICAgIHV2czIgPSB0aGlzLnV2czIsXG4gICAgICAgIGpzb25VdjJzID0ganNvbi51dnMyIHx8IChqc29uLnV2czIgPSBbXSksXG4gICAgICAgIGJvbmVzID0gdGhpcy5ib25lcyxcbiAgICAgICAganNvbk1lc2hCb25lcyA9IGpzb24uYm9uZXMgfHwgKGpzb24uYm9uZXMgPSBbXSksXG4gICAgICAgIGJvbmVJbmRpY2VzID0gdGhpcy5ib25lSW5kaWNlcyxcbiAgICAgICAganNvbk1lc2hCb25lSW5kaWNlcyA9IGpzb24uYm9uZUluZGljZXMgfHwgKGpzb24uYm9uZUluZGljZXMgPSBbXSksXG4gICAgICAgIGJvbmVXZWlnaHRzID0gdGhpcy5ib25lV2VpZ2h0cyxcbiAgICAgICAganNvbk1lc2hCb25lV2VpZ2h0cyA9IGpzb24uYm9uZVdlaWdodHMgfHwgKGpzb24uYm9uZVdlaWdodHMgPSBbXSksXG4gICAgICAgIGk7XG5cbiAgICBqc29uVmVydGljZXMubGVuZ3RoID0gdmVydGljZXMubGVuZ3RoO1xuICAgIGpzb25Ob3JtYWxzLmxlbmd0aCA9IG5vcm1hbHMubGVuZ3RoO1xuICAgIGpzb25UYW5nZW50cy5sZW5ndGggPSB0YW5nZW50cy5sZW5ndGg7XG4gICAganNvbkluZGljZXMubGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7XG4gICAganNvbkNvbG9ycy5sZW5ndGggPSBjb2xvcnMubGVuZ3RoO1xuICAgIGpzb25VdnMubGVuZ3RoID0gdXZzLmxlbmd0aDtcbiAgICBqc29uVXYycy5sZW5ndGggPSB1dnMyLmxlbmd0aDtcblxuICAgIGpzb25NZXNoQm9uZXMubGVuZ3RoID0gYm9uZXMubGVuZ3RoO1xuICAgIGpzb25NZXNoQm9uZUluZGljZXMubGVuZ3RoID0gYm9uZUluZGljZXMubGVuZ3RoO1xuICAgIGpzb25NZXNoQm9uZVdlaWdodHMubGVuZ3RoID0gYm9uZVdlaWdodHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gdmVydGljZXMubGVuZ3RoOyBpLS07KSBqc29uVmVydGljZXNbaV0gPSB2ZXJ0aWNlc1tpXS50b0pTT04oanNvblZlcnRpY2VzW2ldKTtcbiAgICBmb3IgKGkgPSBub3JtYWxzLmxlbmd0aDsgaS0tOykganNvbk5vcm1hbHNbaV0gPSBub3JtYWxzW2ldLnRvSlNPTihqc29uTm9ybWFsc1tpXSk7XG4gICAgZm9yIChpID0gdGFuZ2VudHMubGVuZ3RoOyBpLS07KSBqc29uVGFuZ2VudHNbaV0gPSB0YW5nZW50c1tpXS50b0pTT04oanNvblRhbmdlbnRzW2ldKTtcbiAgICBmb3IgKGkgPSBpbmRpY2VzLmxlbmd0aDsgaS0tOykgaW5kaWNlc1tpXSA9IGpzb25JbmRpY2VzW2ldO1xuICAgIGZvciAoaSA9IGNvbG9ycy5sZW5ndGg7IGktLTspIGpzb25Db2xvcnNbaV0gPSBjb2xvcnNbaV0udG9KU09OKGpzb25Db2xvcnNbaV0pO1xuICAgIGZvciAoaSA9IHV2cy5sZW5ndGg7IGktLTspIGpzb25VdnNbaV0gPSB1dnNbaV0udG9KU09OKGpzb25VdnNbaV0pO1xuICAgIGZvciAoaSA9IHV2czIubGVuZ3RoOyBpLS07KSBqc29uVXYyc1tpXSA9IHV2czJbaV0udG9KU09OKGpzb25VdjJzW2ldKTtcbiAgICBmb3IgKGkgPSBib25lcy5sZW5ndGg7IGktLTspIGpzb25NZXNoQm9uZXNbaV0gPSBib25lc1tpXS50b0pTT04oanNvbk1lc2hCb25lc1tpXSk7XG4gICAgZm9yIChpID0gYm9uZUluZGljZXMubGVuZ3RoOyBpLS07KSBib25lSW5kaWNlc1tpXSA9IGpzb25NZXNoQm9uZUluZGljZXNbaV07XG4gICAgZm9yIChpID0gYm9uZVdlaWdodHMubGVuZ3RoOyBpLS07KSBib25lV2VpZ2h0c1tpXSA9IGpzb25NZXNoQm9uZVdlaWdodHNbaV07XG5cbiAgICBqc29uLmR5bmFtaWMgPSB0aGlzLmR5bmFtaWM7XG4gICAganNvbi51c2VCb25lcyA9IHRoaXMudXNlQm9uZXM7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuTWVzaC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIEFzc2V0LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMsXG4gICAgICAgIGpzb25WZXJ0aWNlcyA9IGpzb24udmVydGljZXMsXG4gICAgICAgIG5vcm1hbHMgPSB0aGlzLm5vcm1hbHMsXG4gICAgICAgIGpzb25Ob3JtYWxzID0ganNvbi5ub3JtYWxzLFxuICAgICAgICB0YW5nZW50cyA9IHRoaXMudGFuZ2VudHMsXG4gICAgICAgIGpzb25UYW5nZW50cyA9IGpzb24udGFuZ2VudHMsXG4gICAgICAgIGluZGljZXMgPSB0aGlzLmluZGljZXMsXG4gICAgICAgIGpzb25JbmRpY2VzID0ganNvbi5pbmRpY2VzLFxuICAgICAgICBjb2xvcnMgPSB0aGlzLmNvbG9ycyxcbiAgICAgICAganNvbkNvbG9ycyA9IGpzb24uY29sb3JzLFxuICAgICAgICB1dnMgPSB0aGlzLnV2cyxcbiAgICAgICAganNvblV2cyA9IGpzb24udXZzLFxuICAgICAgICB1dnMyID0gdGhpcy51dnMyLFxuICAgICAgICBqc29uVXYycyA9IGpzb24udXZzMixcbiAgICAgICAgYm9uZXMgPSB0aGlzLmJvbmVzLFxuICAgICAgICBqc29uTWVzaEJvbmVzID0ganNvbi5ib25lcyxcbiAgICAgICAgYm9uZUluZGljZXMgPSB0aGlzLmJvbmVJbmRpY2VzLFxuICAgICAgICBqc29uTWVzaEJvbmVJbmRpY2VzID0ganNvbi5ib25lSW5kaWNlcyxcbiAgICAgICAgYm9uZVdlaWdodHMgPSB0aGlzLmJvbmVXZWlnaHRzLFxuICAgICAgICBqc29uTWVzaEJvbmVXZWlnaHRzID0ganNvbi5ib25lV2VpZ2h0cyxcbiAgICAgICAgaTtcblxuICAgIHZlcnRpY2VzLmxlbmd0aCA9IGpzb25WZXJ0aWNlcy5sZW5ndGg7XG4gICAgbm9ybWFscy5sZW5ndGggPSBqc29uTm9ybWFscy5sZW5ndGg7XG4gICAgdGFuZ2VudHMubGVuZ3RoID0ganNvblRhbmdlbnRzLmxlbmd0aDtcbiAgICBpbmRpY2VzLmxlbmd0aCA9IGpzb25JbmRpY2VzLmxlbmd0aDtcbiAgICBjb2xvcnMubGVuZ3RoID0ganNvbkNvbG9ycy5sZW5ndGg7XG4gICAgdXZzLmxlbmd0aCA9IGpzb25VdnMubGVuZ3RoO1xuICAgIHV2czIubGVuZ3RoID0ganNvblV2MnMubGVuZ3RoO1xuXG4gICAgYm9uZXMubGVuZ3RoID0ganNvbk1lc2hCb25lcy5sZW5ndGg7XG4gICAgYm9uZUluZGljZXMubGVuZ3RoID0ganNvbk1lc2hCb25lSW5kaWNlcy5sZW5ndGg7XG4gICAgYm9uZVdlaWdodHMubGVuZ3RoID0ganNvbk1lc2hCb25lV2VpZ2h0cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSBqc29uVmVydGljZXMubGVuZ3RoOyBpLS07KSB2ZXJ0aWNlc1tpXSA9ICh2ZXJ0aWNlc1tpXSB8fCBuZXcgVmVjMykuY29weShqc29uVmVydGljZXNbaV0pO1xuICAgIGZvciAoaSA9IGpzb25Ob3JtYWxzLmxlbmd0aDsgaS0tOykgbm9ybWFsc1tpXSA9IChub3JtYWxzW2ldIHx8IG5ldyBWZWMzKS5jb3B5LmZyb21KU09OKGpzb25Ob3JtYWxzW2ldKTtcbiAgICBmb3IgKGkgPSBqc29uVGFuZ2VudHMubGVuZ3RoOyBpLS07KSB0YW5nZW50c1tpXSA9ICh0YW5nZW50c1tpXSB8fCBuZXcgVmVjNCkuZnJvbUpTT04oanNvblRhbmdlbnRzW2ldKTtcbiAgICBmb3IgKGkgPSBqc29uSW5kaWNlcy5sZW5ndGg7IGktLTspIGluZGljZXNbaV0gPSBqc29uSW5kaWNlc1tpXTtcbiAgICBmb3IgKGkgPSBqc29uQ29sb3JzLmxlbmd0aDsgaS0tOykgY29sb3JzW2ldID0gKGNvbG9yc1tpXSB8fCBuZXcgQ29sb3IpLmZyb21KU09OKGpzb25Db2xvcnNbaV0pO1xuICAgIGZvciAoaSA9IGpzb25VdnMubGVuZ3RoOyBpLS07KSB1dnNbaV0gPSAodXZzW2ldIHx8IG5ldyBWZWMyKS5mcm9tSlNPTihqc29uVXZzW2ldKTtcbiAgICBmb3IgKGkgPSBqc29uVXYycy5sZW5ndGg7IGktLTspIHV2czJbaV0gPSAodXZzMltpXSB8fCBuZXcgVmVjMikuZnJvbUpTT04oanNvblV2MnNbaV0pO1xuICAgIGZvciAoaSA9IGpzb25NZXNoQm9uZXMubGVuZ3RoOyBpLS07KSBib25lc1tpXSA9IChib25lc1tpXSB8fCBuZXcgTWVzaEJvbmUpLmZyb21KU09OKGpzb25NZXNoQm9uZXNbaV0pO1xuICAgIGZvciAoaSA9IGpzb25NZXNoQm9uZUluZGljZXMubGVuZ3RoOyBpLS07KSBib25lSW5kaWNlc1tpXSA9IGpzb25NZXNoQm9uZUluZGljZXNbaV07XG4gICAgZm9yIChpID0ganNvbk1lc2hCb25lV2VpZ2h0cy5sZW5ndGg7IGktLTspIGJvbmVXZWlnaHRzW2ldID0ganNvbk1lc2hCb25lV2VpZ2h0c1tpXTtcblxuICAgIHRoaXMuZHluYW1pYyA9IGpzb24uZHluYW1pYztcbiAgICB0aGlzLnVzZUJvbmVzID0ganNvbi51c2VCb25lcztcblxuICAgIHRoaXMuYWFiYi5mcm9tUG9pbnRzKHRoaXMudmVydGljZXMpO1xuXG4gICAgdGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudGFuZ2VudHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmluZGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudXZzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy51dnMyTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5ib25lSW5kaWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMuYm9uZVdlaWdodHNOZWVkVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG52YXIgUEkgPSBNYXRoLlBJLFxuICAgIEhBTEZfUEkgPSBQSSAqIDAuNSxcbiAgICBUV09fUEkgPSBQSSAqIDIsXG4gICAgc2luID0gTWF0aC5zaW4sXG4gICAgY29zID0gTWF0aC5jb3M7XG5NZXNoLlNwaGVyZSA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcbiAgICB2YXIgcmFkaXVzID0gb3B0cy5yYWRpdXMgIT0gdW5kZWZpbmVkID8gb3B0cy5yYWRpdXMgOiAwLjUsXG4gICAgICAgIHNlZ21lbnRzID0gKG9wdHMuc2VnbWVudHMgIT0gdW5kZWZpbmVkID8gZmxvb3IobWF4KG9wdHMuc2VnbWVudHMsIDMpKSA6IDE2KSArIDEsXG4gICAgICAgIHJpbmdzID0gKG9wdHMucmluZ3MgIT0gdW5kZWZpbmVkID8gZmxvb3IobWF4KG9wdHMucmluZ3MsIDMpKSA6IDgpICsgMixcblxuICAgICAgICBSID0gMSAvIChyaW5ncyAtIDEpLFxuICAgICAgICBTID0gMSAvIChzZWdtZW50cyAtIDEpLFxuICAgICAgICByLCBzLFxuICAgICAgICB4LCB5LCB6LFxuICAgICAgICBhLCBiLCBjLCBkLFxuXG4gICAgICAgIG1lc2ggPSBuZXcgTWVzaChvcHRzKSxcbiAgICAgICAgdmVydGljZXMgPSBtZXNoLnZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzID0gbWVzaC5ub3JtYWxzLFxuICAgICAgICB1dnMgPSBtZXNoLnV2cyxcbiAgICAgICAgY29sb3JzID0gbWVzaC5jb2xvcnMsXG4gICAgICAgIGluZGljZXMgPSBtZXNoLmluZGljZXM7XG5cbiAgICBmb3IgKHIgPSAwOyByIDwgcmluZ3M7IHIrKykge1xuICAgICAgICBmb3IgKHMgPSAwOyBzIDwgc2VnbWVudHM7IHMrKykge1xuICAgICAgICAgICAgeiA9IHNpbigtSEFMRl9QSSArIFBJICogciAqIFIpO1xuICAgICAgICAgICAgeCA9IGNvcyhUV09fUEkgKiBzICogUykgKiBzaW4oUEkgKiByICogUik7XG4gICAgICAgICAgICB5ID0gc2luKFRXT19QSSAqIHMgKiBTKSAqIHNpbihQSSAqIHIgKiBSKTtcblxuICAgICAgICAgICAgdmVydGljZXMucHVzaChuZXcgVmVjMyh4LCB5LCB6KS5zbXVsKHJhZGl1cykpO1xuICAgICAgICAgICAgbm9ybWFscy5wdXNoKG5ldyBWZWMzKHgsIHksIHopKTtcbiAgICAgICAgICAgIHV2cy5wdXNoKG5ldyBWZWMyKHMgKiBTLCByICogUikpO1xuICAgICAgICAgICAgY29sb3JzLnB1c2gobmV3IFZlYzMocyAqIFMsIHIgKiBSLCAwKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHIgPSAwOyByIDwgcmluZ3MgLSAxOyByKyspIHtcbiAgICAgICAgZm9yIChzID0gMDsgcyA8IHNlZ21lbnRzIC0gMTsgcysrKSB7XG4gICAgICAgICAgICBhID0gciAqIHNlZ21lbnRzICsgcztcbiAgICAgICAgICAgIGIgPSByICogc2VnbWVudHMgKyAocyArIDEpO1xuICAgICAgICAgICAgYyA9IChyICsgMSkgKiBzZWdtZW50cyArIChzICsgMSk7XG4gICAgICAgICAgICBkID0gKHIgKyAxKSAqIHNlZ21lbnRzICsgcztcblxuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGEsIGIsIGMpO1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGEsIGMsIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWVzaC5jYWxjdWxhdGVBQUJCKCk7XG4gICAgbWVzaC5sb2FkID0gZmFsc2U7XG4gICAgaWYgKG9wdHMudGFuZ2VudHMpIG1lc2guY2FsY3VsYXRlVGFuZ2VudHMoKTtcblxuICAgIHJldHVybiBtZXNoO1xufTtcblxuXG5NZXNoLkN1YmUgPSBmdW5jdGlvbiAob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG4gICAgdmFyIHcgPSBvcHRzLndpZHRoIHx8IDEsXG4gICAgICAgIGggPSBvcHRzLmhlaWdodCB8fCAxLFxuICAgICAgICBkID0gb3B0cy5kZXB0aCB8fCAxLFxuICAgICAgICBodyA9IHcgKiAwLjUsXG4gICAgICAgIGhoID0gaCAqIDAuNSxcbiAgICAgICAgaGQgPSBkICogMC41LFxuICAgICAgICB3cyA9IChvcHRzLndpZHRoU2VnbWVudHMgfHwgMSksXG4gICAgICAgIGhzID0gKG9wdHMuaGVpZ2h0U2VnbWVudHMgfHwgMSksXG4gICAgICAgIGRzID0gKG9wdHMuZGVwdGhTZWdtZW50cyB8fCAxKSxcbiAgICAgICAgbWVzaCA9IG5ldyBNZXNoKG9wdHMpO1xuXG4gICAgYnVpbGRQbGFuZShtZXNoLCBcInpcIiwgXCJ5XCIsIC0xLCAxLCBkLCBkcywgaCwgaHMsIGh3LCB3cyk7XG4gICAgYnVpbGRQbGFuZShtZXNoLCBcInpcIiwgXCJ5XCIsIDEsIDEsIGQsIGRzLCBoLCBocywgLWh3LCB3cyk7XG4gICAgYnVpbGRQbGFuZShtZXNoLCBcInhcIiwgXCJ6XCIsIDEsIC0xLCB3LCB3cywgZCwgZHMsIGhoLCBocyk7XG4gICAgYnVpbGRQbGFuZShtZXNoLCBcInhcIiwgXCJ6XCIsIDEsIDEsIHcsIHdzLCBkLCBkcywgLWhoLCBocyk7XG4gICAgYnVpbGRQbGFuZShtZXNoLCBcInhcIiwgXCJ5XCIsIDEsIDEsIHcsIHdzLCBoLCBocywgaGQsIGRzKTtcbiAgICBidWlsZFBsYW5lKG1lc2gsIFwieFwiLCBcInlcIiwgLTEsIDEsIHcsIHdzLCBoLCBocywgLWhkLCBkcyk7XG5cbiAgICBtZXNoLmNhbGN1bGF0ZUFBQkIoKTtcbiAgICBtZXNoLmxvYWQgPSBmYWxzZTtcbiAgICBpZiAob3B0cy50YW5nZW50cykgbWVzaC5jYWxjdWxhdGVUYW5nZW50cygpO1xuXG4gICAgcmV0dXJuIG1lc2g7XG59O1xuXG5cbk1lc2guUGxhbmUgPSBmdW5jdGlvbiAob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG4gICAgdmFyIHcgPSBvcHRzLndpZHRoIHx8IDEsXG4gICAgICAgIGggPSBvcHRzLmhlaWdodCB8fCAxLFxuICAgICAgICB3cyA9IChvcHRzLndpZHRoU2VnbWVudHMgfHwgMSksXG4gICAgICAgIGhzID0gKG9wdHMuaGVpZ2h0U2VnbWVudHMgfHwgMSksXG4gICAgICAgIG1lc2ggPSBuZXcgTWVzaChvcHRzKTtcblxuICAgIGJ1aWxkUGxhbmUobWVzaCwgXCJ4XCIsIFwieVwiLCAxLCAxLCB3LCB3cywgaCwgaHMsIDAsIDApO1xuXG4gICAgbWVzaC5jYWxjdWxhdGVBQUJCKCk7XG4gICAgbWVzaC5sb2FkID0gZmFsc2U7XG4gICAgaWYgKG9wdHMudGFuZ2VudHMpIG1lc2guY2FsY3VsYXRlVGFuZ2VudHMoKTtcblxuICAgIHJldHVybiBtZXNoO1xufTtcblxuXG5mdW5jdGlvbiBidWlsZFBsYW5lKG1lc2gsIHUsIHYsIHVkaXIsIHZkaXIsIHdpZHRoLCB3cywgaGVpZ2h0LCBocywgZGVwdGgsIGRzKSB7XG4gICAgdmFyIHZlcnRpY2VzID0gbWVzaC52ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IG1lc2gubm9ybWFscyxcbiAgICAgICAgaW5kaWNlcyA9IG1lc2guaW5kaWNlcyxcbiAgICAgICAgdXZzID0gbWVzaC51dnMsXG4gICAgICAgIGdyaWRYID0gd3MsXG4gICAgICAgIGdyaWRZID0gaHMsXG4gICAgICAgIHdpZHRoX2hhbGYgPSB3aWR0aCAvIDIsXG4gICAgICAgIGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMixcbiAgICAgICAgb2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoLFxuICAgICAgICB3LCBpeCwgaXk7XG5cbiAgICBpZiAoKHUgPT09IFwieFwiICYmIHYgPT09IFwielwiKSB8fCAodSA9PT0gXCJ6XCIgJiYgdiA9PT0gXCJ4XCIpKSB7XG4gICAgICAgIHcgPSBcInlcIjtcbiAgICAgICAgZ3JpZFkgPSBkcztcbiAgICB9IGVsc2UgaWYgKCh1ID09PSBcInhcIiAmJiB2ID09PSBcInlcIikgfHwgKHUgPT09IFwieVwiICYmIHYgPT09IFwieFwiKSkge1xuICAgICAgICB3ID0gXCJ6XCI7XG4gICAgfSBlbHNlIGlmICgodSA9PT0gXCJ5XCIgJiYgdiA9PT0gXCJ6XCIpIHx8ICh1ID09PSBcInpcIiAmJiB2ID09PSBcInlcIikpIHtcbiAgICAgICAgdyA9IFwieFwiO1xuICAgICAgICBncmlkWCA9IGRzO1xuICAgIH1cblxuICAgIHZhciBncmlkWDEgPSBncmlkWCArIDEsXG4gICAgICAgIGdyaWRZMSA9IGdyaWRZICsgMSxcbiAgICAgICAgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFgsXG4gICAgICAgIHNlZ21lbnRfaGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFksXG4gICAgICAgIG5vcm1hbCA9IG5ldyBWZWMzKCksXG4gICAgICAgIHZlcnRleENvdW50ID0gb2Zmc2V0O1xuXG4gICAgbm9ybWFsW3ddID0gZGVwdGggPiAwID8gMSA6IC0xO1xuXG4gICAgZnVuY3Rpb24gYWRkVmVydGV4KHgsIHksIHopIHtcbiAgICAgICAgdmFyIHZlY3RvciA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHZlY3Rvclt1XSA9IHg7XG4gICAgICAgIHZlY3Rvclt2XSA9IHk7XG4gICAgICAgIHZlY3Rvclt3XSA9IHo7XG4gICAgICAgIHZlcnRpY2VzLnB1c2godmVjdG9yKTtcbiAgICB9XG5cbiAgICBmb3IgKGl5ID0gMDsgaXkgPCBncmlkWTsgaXkrKykge1xuICAgICAgICBmb3IgKGl4ID0gMDsgaXggPCBncmlkWDsgaXgrKykge1xuICAgICAgICAgICAgYWRkVmVydGV4KFxuICAgICAgICAgICAgICAgICgoaXggKyAxKSAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmKSAqIHVkaXIsICgoaXkgKyAxKSAqIHNlZ21lbnRfaGVpZ2h0IC0gaGVpZ2h0X2hhbGYpICogdmRpcixcbiAgICAgICAgICAgICAgICBkZXB0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHV2cy5wdXNoKG5ldyBWZWMyKChpeCArIDEpIC8gZ3JpZFgsIDEgLSAoaXkgKyAxKSAvIGdyaWRZKSk7XG5cbiAgICAgICAgICAgIGFkZFZlcnRleChcbiAgICAgICAgICAgICAgICAoaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZikgKiB1ZGlyLCAoKGl5ICsgMSkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmKSAqIHZkaXIsXG4gICAgICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB1dnMucHVzaChuZXcgVmVjMihpeCAvIGdyaWRYLCAxIC0gKGl5ICsgMSkgLyBncmlkWSkpO1xuXG4gICAgICAgICAgICBhZGRWZXJ0ZXgoXG4gICAgICAgICAgICAgICAgKGl4ICogc2VnbWVudF93aWR0aCAtIHdpZHRoX2hhbGYpICogdWRpciwgKGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZikgKiB2ZGlyLFxuICAgICAgICAgICAgICAgIGRlcHRoXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdXZzLnB1c2gobmV3IFZlYzIoaXggLyBncmlkWCwgMSAtIGl5IC8gZ3JpZFkpKTtcblxuICAgICAgICAgICAgYWRkVmVydGV4KFxuICAgICAgICAgICAgICAgICgoaXggKyAxKSAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmKSAqIHVkaXIsIChpeSAqIHNlZ21lbnRfaGVpZ2h0IC0gaGVpZ2h0X2hhbGYpICogdmRpcixcbiAgICAgICAgICAgICAgICBkZXB0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHV2cy5wdXNoKG5ldyBWZWMyKChpeCArIDEpIC8gZ3JpZFgsIDEgLSBpeSAvIGdyaWRZKSk7XG5cbiAgICAgICAgICAgIGluZGljZXMucHVzaChcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhDb3VudCwgdmVydGV4Q291bnQgKyAxLCB2ZXJ0ZXhDb3VudCArIDIsXG4gICAgICAgICAgICAgICAgdmVydGV4Q291bnQsIHZlcnRleENvdW50ICsgMiwgdmVydGV4Q291bnQgKyAzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbm9ybWFscy5wdXNoKG5vcm1hbC5jbG9uZSgpLCBub3JtYWwuY2xvbmUoKSwgbm9ybWFsLmNsb25lKCksIG5vcm1hbC5jbG9uZSgpKTtcbiAgICAgICAgICAgIHZlcnRleENvdW50ICs9IDQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuTWVzaC5NZXNoQm9uZSA9IE1lc2hCb25lO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWVzaDtcbiIsInZhciBWZWMzID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjM1wiKTtcbnZhciBRdWF0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvcXVhdFwiKTtcbnZhciBNYXQ0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0NFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBVTktOT1dOID0gMDtcblxuXG5mdW5jdGlvbiBNZXNoQm9uZShwYXJlbnRJbmRleCwgbmFtZSkge1xuXG4gICAgdGhpcy5wYXJlbnRJbmRleCA9IHBhcmVudEluZGV4ICE9IHVuZGVmaW5lZCA/IHBhcmVudEluZGV4IDogLTE7XG4gICAgdGhpcy5uYW1lID0gbmFtZSAhPSB1bmRlZmluZWQgPyBuYW1lIDogXCJNZXNoQm9uZV9cIiArIFVOS05PV04rKztcblxuICAgIHRoaXMuc2tpbm5lZCA9IGZhbHNlO1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjMztcbiAgICB0aGlzLnJvdGF0aW9uID0gbmV3IFF1YXQ7XG4gICAgdGhpcy5zY2FsZSA9IG5ldyBWZWMzO1xuICAgIHRoaXMuYmluZFBvc2UgPSBuZXcgTWF0NDtcbn1cblxuXG5NZXNoQm9uZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gbmV3IE1lc2hCb25lKCkuY29weSh0aGlzKTtcbn07XG5cblxuTWVzaEJvbmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMubmFtZSA9IG90aGVyLm5hbWU7XG4gICAgdGhpcy5wYXJlbnRJbmRleCA9IG90aGVyLnBhcmVudEluZGV4O1xuXG4gICAgdGhpcy5za2lubmVkID0gb3RoZXIuc2tpbm5lZDtcbiAgICB0aGlzLnBvc2l0aW9uLmNvcHkob3RoZXIucG9zaXRpb24pO1xuICAgIHRoaXMucm90YXRpb24uY29weShvdGhlci5yb3RhdGlvbik7XG4gICAgdGhpcy5zY2FsZS5jb3B5KG90aGVyLnNjYWxlKTtcbiAgICB0aGlzLmJpbmRQb3NlLmNvcHkob3RoZXIuYmluZFBvc2UpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbk1lc2hCb25lLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAganNvbi5wYXJlbnRJbmRleCA9IHRoaXMucGFyZW50SW5kZXg7XG5cbiAgICBqc29uLnNraW5uZWQgPSB0aGlzLnNraW5uZWQ7XG4gICAganNvbi5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24udG9KU09OKGpzb24ucG9zaXRpb24pO1xuICAgIGpzb24ucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uLnRvSlNPTihqc29uLnJvdGF0aW9uKTtcbiAgICBqc29uLnNjYWxlID0gdGhpcy5zY2FsZS50b0pTT04oanNvbi5zY2FsZSk7XG4gICAganNvbi5iaW5kUG9zZSA9IHRoaXMuYmluZFBvc2UudG9KU09OKGpzb24uYmluZFBvc2UpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbk1lc2hCb25lLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICB0aGlzLm5hbWUgPSBqc29uLm5hbWU7XG4gICAgdGhpcy5wYXJlbnRJbmRleCA9IGpzb24ucGFyZW50SW5kZXg7XG5cbiAgICB0aGlzLnNraW5uZWQgPSBqc29uLnNraW5uZWQ7XG4gICAgdGhpcy5wb3NpdGlvbi5mcm9tSlNPTihqc29uLnBvc2l0aW9uKTtcbiAgICB0aGlzLnJvdGF0aW9uLmZyb21KU09OKGpzb24ucm90YXRpb24pO1xuICAgIHRoaXMuc2NhbGUuZnJvbUpTT04oanNvbi5zY2FsZSk7XG4gICAgdGhpcy5iaW5kUG9zZS5mcm9tSlNPTihqc29uLmJpbmRQb3NlKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc2hCb25lO1xuIiwidmFyIFNoYWRlciA9IHJlcXVpcmUoXCIuLi9zaGFkZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBEaWZmdXNlKCkge1xuXG4gICAgU2hhZGVyLmNhbGwodGhpcywge1xuICAgICAgICBuYW1lOiBcInNoYWRlcl9kaWZmdXNlXCIsXG4gICAgICAgIGxvYWQ6IGZhbHNlLFxuXG4gICAgICAgIGxpZ2h0czogdHJ1ZSxcbiAgICAgICAgc3BlY3VsYXI6IGZhbHNlLFxuXG4gICAgICAgIHZlcnRleDogW1xuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgdlV2O1wiLFxuXG4gICAgICAgICAgICBcInZvaWQgbWFpbigpIHtcIixcbiAgICAgICAgICAgIFwiXHR2VXYgPSB1djtcIixcbiAgICAgICAgICAgIFwiXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1wiLFxuICAgICAgICAgICAgXCJ9XCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgICAgIGZyYWdtZW50OiBbXG4gICAgICAgICAgICBcInVuaWZvcm0gdmVjMyBkaWZmdXNlQ29sb3I7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gc2FtcGxlcjJEIGRpZmZ1c2VNYXA7XCIsXG5cbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcblxuICAgICAgICAgICAgXCJ2b2lkIG1haW4oKSB7XCIsXG4gICAgICAgICAgICBcIlx0dmVjMyBkaWZmdXNlTGlnaHQgPSBQaXhlbExpZ2h0Tm9TcGVjKG5vcm1hbGl6ZSh2Tm9ybWFsKSk7XCIsXG5cbiAgICAgICAgICAgIFwiXHR2ZWM0IGZpbmFsQ29sb3IgPSB0ZXh0dXJlMkQoZGlmZnVzZU1hcCwgdlV2KTtcIixcbiAgICAgICAgICAgIFwiXHRmaW5hbENvbG9yLnh5eiAqPSBkaWZmdXNlQ29sb3I7XCIsXG5cbiAgICAgICAgICAgIFwiXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KGRpZmZ1c2VMaWdodCAqIGZpbmFsQ29sb3IueHl6LCBmaW5hbENvbG9yLncpO1wiLFxuICAgICAgICAgICAgXCJ9XCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpXG4gICAgfSk7XG59XG5cblNoYWRlci5leHRlbmQoRGlmZnVzZSk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEaWZmdXNlO1xuIiwidmFyIFNoYWRlciA9IHJlcXVpcmUoXCIuLi9zaGFkZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBOb3JtYWxEaWZmdXNlKCkge1xuXG4gICAgU2hhZGVyLmNhbGwodGhpcywge1xuICAgICAgICBuYW1lOiBcInNoYWRlcl9ub3JtYWxfZGlmZnVzZVwiLFxuICAgICAgICBsb2FkOiBmYWxzZSxcblxuICAgICAgICBsaWdodHM6IHRydWUsXG4gICAgICAgIHNwZWN1bGFyOiBmYWxzZSxcbiAgICAgICAgT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzOiB0cnVlLFxuXG4gICAgICAgIHZlcnRleDogW1xuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgdlV2O1wiLFxuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XCIsXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMyB2Qmlub3JtYWw7XCIsXG5cbiAgICAgICAgICAgIFwidm9pZCBtYWluKCkge1wiLFxuICAgICAgICAgICAgXCJcdCNpZmRlZiBVU0VfU0tJTk5JTkdcIixcbiAgICAgICAgICAgIFwiXHRcdHZlYzQgYm9uZVRhbmdlbnQgPSBib25lTWF0cml4ICogdmVjNCggdGFuZ2VudC54eXosIDAuMCApO1wiLFxuICAgICAgICAgICAgXCJcdFx0dlRhbmdlbnQgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIGJvbmVUYW5nZW50Lnh5eiApO1wiLFxuICAgICAgICAgICAgXCJcdCNlbHNlXCIsXG4gICAgICAgICAgICBcIlx0XHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogdGFuZ2VudC54eXogKTtcIixcbiAgICAgICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICAgICAgXCJcdHZVdiA9IHV2O1wiLFxuICAgICAgICAgICAgXCJcdHZCaW5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcIixcblxuICAgICAgICAgICAgXCJcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCIsXG4gICAgICAgICAgICBcIn1cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICAgICAgZnJhZ21lbnQ6IFtcbiAgICAgICAgICAgIFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2VDb2xvcjtcIixcbiAgICAgICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgZGlmZnVzZU1hcDtcIixcblxuICAgICAgICAgICAgXCJ1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gZmxvYXQgbm9ybWFsU2NhbGU7XCIsXG5cbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMzIHZUYW5nZW50O1wiLFxuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdkJpbm9ybWFsO1wiLFxuXG4gICAgICAgICAgICBcInZvaWQgbWFpbigpIHtcIixcbiAgICAgICAgICAgIFwiXHR2ZWMzIG5vcm1hbFRleCA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XCIsXG4gICAgICAgICAgICBcIlx0bm9ybWFsVGV4Lnh5ICo9IG5vcm1hbFNjYWxlO1wiLFxuXG4gICAgICAgICAgICBcIlx0bWF0MyB0c2IgPSBtYXQzKCB2VGFuZ2VudCwgdkJpbm9ybWFsLCB2Tm9ybWFsICk7XCIsXG4gICAgICAgICAgICBcIlx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUodHNiICogbm9ybWFsVGV4KTtcIixcblxuICAgICAgICAgICAgXCJcdHZlYzMgZGlmZnVzZUxpZ2h0ID0gUGl4ZWxMaWdodE5vU3BlYyhub3JtYWwpO1wiLFxuXG4gICAgICAgICAgICBcIlx0dmVjNCBmaW5hbENvbG9yID0gdGV4dHVyZTJEKGRpZmZ1c2VNYXAsIHZVdik7XCIsXG4gICAgICAgICAgICBcIlx0ZmluYWxDb2xvci54eXogKj0gZGlmZnVzZUNvbG9yO1wiLFxuXG4gICAgICAgICAgICBcIlx0Z2xfRnJhZ0NvbG9yID0gdmVjNChkaWZmdXNlTGlnaHQgKiBmaW5hbENvbG9yLnh5eiwgZmluYWxDb2xvci53KTtcIixcbiAgICAgICAgICAgIFwifVwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKVxuICAgIH0pO1xufVxuXG5TaGFkZXIuZXh0ZW5kKE5vcm1hbERpZmZ1c2UpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTm9ybWFsRGlmZnVzZTtcbiIsInZhciBTaGFkZXIgPSByZXF1aXJlKFwiLi4vc2hhZGVyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gTm9ybWFsU3BlY3VsYXIoKSB7XG5cbiAgICBTaGFkZXIuY2FsbCh0aGlzLCB7XG4gICAgICAgIG5hbWU6IFwic2hhZGVyX25vcm1hbF9zcGVjdWxhclwiLFxuICAgICAgICBsb2FkOiBmYWxzZSxcblxuICAgICAgICBmYWxsYmFjazogXCJzcGVjdWxhclwiLFxuXG4gICAgICAgIGxpZ2h0czogdHJ1ZSxcbiAgICAgICAgT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzOiB0cnVlLFxuXG4gICAgICAgIHZlcnRleDogW1xuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgdlV2O1wiLFxuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XCIsXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMyB2Qmlub3JtYWw7XCIsXG5cbiAgICAgICAgICAgIFwidm9pZCBtYWluKCkge1wiLFxuICAgICAgICAgICAgXCJcdCNpZmRlZiBVU0VfU0tJTk5JTkdcIixcbiAgICAgICAgICAgIFwiXHRcdHZlYzQgYm9uZVRhbmdlbnQgPSBib25lTWF0cml4ICogdmVjNCggdGFuZ2VudC54eXosIDAuMCApO1wiLFxuICAgICAgICAgICAgXCJcdFx0dlRhbmdlbnQgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIGJvbmVUYW5nZW50Lnh5eiApO1wiLFxuICAgICAgICAgICAgXCJcdCNlbHNlXCIsXG4gICAgICAgICAgICBcIlx0XHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogdGFuZ2VudC54eXogKTtcIixcbiAgICAgICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICAgICAgXCJcdHZVdiA9IHV2O1wiLFxuICAgICAgICAgICAgXCJcdHZCaW5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcIixcblxuICAgICAgICAgICAgXCJcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCIsXG4gICAgICAgICAgICBcIn1cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICAgICAgZnJhZ21lbnQ6IFtcbiAgICAgICAgICAgIFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2VDb2xvcjtcIixcbiAgICAgICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgZGlmZnVzZU1hcDtcIixcblxuICAgICAgICAgICAgXCJ1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gZmxvYXQgbm9ybWFsU2NhbGU7XCIsXG5cbiAgICAgICAgICAgIFwidW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XCIsXG5cbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMzIHZUYW5nZW50O1wiLFxuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdkJpbm9ybWFsO1wiLFxuXG4gICAgICAgICAgICBcInZvaWQgbWFpbigpIHtcIixcbiAgICAgICAgICAgIFwiXHR2ZWM0IGZpbmFsQ29sb3IgPSB0ZXh0dXJlMkQoZGlmZnVzZU1hcCwgdlV2KTtcIixcbiAgICAgICAgICAgIFwiXHRmaW5hbENvbG9yLnh5eiAqPSBkaWZmdXNlQ29sb3I7XCIsXG5cbiAgICAgICAgICAgIFwiXHR2ZWMzIG5vcm1hbFRleCA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XCIsXG4gICAgICAgICAgICBcIlx0bm9ybWFsVGV4Lnh5ICo9IG5vcm1hbFNjYWxlO1wiLFxuXG4gICAgICAgICAgICBcIlx0bWF0MyB0c2IgPSBtYXQzKCB2VGFuZ2VudCwgdkJpbm9ybWFsLCB2Tm9ybWFsICk7XCIsXG4gICAgICAgICAgICBcIlx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUodHNiICogbm9ybWFsVGV4KTtcIixcblxuICAgICAgICAgICAgXCJcdHZlYzMgZGlmZnVzZUxpZ2h0LCBzcGVjdWxhckxpZ2h0O1wiLFxuICAgICAgICAgICAgXCJcdFBpeGVsTGlnaHQobm9ybWFsLCB2ZWMzKGZpbmFsQ29sb3IudyksIGZpbmFsQ29sb3Iudywgc2hpbmluZXNzLCBkaWZmdXNlTGlnaHQsIHNwZWN1bGFyTGlnaHQpO1wiLFxuXG4gICAgICAgICAgICBcIlx0Z2xfRnJhZ0NvbG9yID0gdmVjNChkaWZmdXNlTGlnaHQgKiBmaW5hbENvbG9yLnh5eiArIHNwZWN1bGFyTGlnaHQgKiBmaW5hbENvbG9yLnh5eiwgMS4wKTtcIixcbiAgICAgICAgICAgIFwifVwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKVxuICAgIH0pO1xufVxuXG5TaGFkZXIuZXh0ZW5kKE5vcm1hbFNwZWN1bGFyKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vcm1hbFNwZWN1bGFyO1xuIiwidmFyIFNoYWRlciA9IHJlcXVpcmUoXCIuLi9zaGFkZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBQYXJhbGxleERpZmZ1c2UoKSB7XG5cbiAgICBTaGFkZXIuY2FsbCh0aGlzLCB7XG4gICAgICAgIG5hbWU6IFwic2hhZGVyX3BhcmFsbGV4X2RpZmZ1c2VcIixcbiAgICAgICAgbG9hZDogZmFsc2UsXG5cbiAgICAgICAgbGlnaHRzOiB0cnVlLFxuICAgICAgICBzcGVjdWxhcjogZmFsc2UsXG4gICAgICAgIE9FU19zdGFuZGFyZF9kZXJpdmF0aXZlczogdHJ1ZSxcblxuICAgICAgICB2ZXJ0ZXg6IFtcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMzIHZUYW5nZW50O1wiLFxuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdkJpbm9ybWFsO1wiLFxuXG4gICAgICAgICAgICBcInZvaWQgbWFpbigpIHtcIixcbiAgICAgICAgICAgIFwiXHQjaWZkZWYgVVNFX1NLSU5OSU5HXCIsXG4gICAgICAgICAgICBcIlx0XHR2ZWM0IGJvbmVUYW5nZW50ID0gYm9uZU1hdHJpeCAqIHZlYzQoIHRhbmdlbnQueHl6LCAwLjAgKTtcIixcbiAgICAgICAgICAgIFwiXHRcdHZUYW5nZW50ID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBib25lVGFuZ2VudC54eXogKTtcIixcbiAgICAgICAgICAgIFwiXHQjZWxzZVwiLFxuICAgICAgICAgICAgXCJcdFx0dlRhbmdlbnQgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIHRhbmdlbnQueHl6ICk7XCIsXG4gICAgICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgICAgIFwiXHR2VXYgPSB1djtcIixcbiAgICAgICAgICAgIFwiXHR2Qmlub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCB2Tm9ybWFsLCB2VGFuZ2VudCApICogdGFuZ2VudC53ICk7XCIsXG5cbiAgICAgICAgICAgIFwiXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1wiLFxuICAgICAgICAgICAgXCJ9XCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgICAgIGZyYWdtZW50OiBbXG4gICAgICAgICAgICBcInVuaWZvcm0gdmVjMyBkaWZmdXNlQ29sb3I7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gc2FtcGxlcjJEIGRpZmZ1c2VNYXA7XCIsXG5cbiAgICAgICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1wiLFxuICAgICAgICAgICAgXCJ1bmlmb3JtIGZsb2F0IG5vcm1hbFNjYWxlO1wiLFxuXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMiB2VXY7XCIsXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcIixcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMzIHZCaW5vcm1hbDtcIixcblxuICAgICAgICAgICAgXCJ2b2lkIG1haW4oKSB7XCIsXG4gICAgICAgICAgICBcIlx0dmVjMyBub3JtYWxUZXggPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1wiLFxuICAgICAgICAgICAgXCJcdG5vcm1hbFRleC54eSAqPSBub3JtYWxTY2FsZTtcIixcblxuICAgICAgICAgICAgXCJcdG1hdDMgdHNiID0gbWF0MyggdlRhbmdlbnQsIHZCaW5vcm1hbCwgdk5vcm1hbCApO1wiLFxuICAgICAgICAgICAgXCJcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKHRzYiAqIG5vcm1hbFRleCk7XCIsXG5cbiAgICAgICAgICAgIFwiXHR2ZWMzIGRpZmZ1c2VMaWdodCA9IFBpeGVsTGlnaHROb1NwZWMobm9ybWFsKTtcIixcblxuICAgICAgICAgICAgXCJcdHZlYzQgZmluYWxDb2xvciA9IHRleHR1cmUyRChkaWZmdXNlTWFwLCB2VXYpO1wiLFxuICAgICAgICAgICAgXCJcdGZpbmFsQ29sb3IueHl6ICo9IGRpZmZ1c2VDb2xvcjtcIixcblxuICAgICAgICAgICAgXCJcdGdsX0ZyYWdDb2xvciA9IHZlYzQoZGlmZnVzZUxpZ2h0ICogZmluYWxDb2xvci54eXosIGZpbmFsQ29sb3Iudyk7XCIsXG4gICAgICAgICAgICBcIn1cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIilcbiAgICB9KTtcbn1cblxuU2hhZGVyLmV4dGVuZChQYXJhbGxleERpZmZ1c2UpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFyYWxsZXhEaWZmdXNlO1xuIiwidmFyIFNoYWRlciA9IHJlcXVpcmUoXCIuLi9zaGFkZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBTcGVjdWxhcigpIHtcblxuICAgIFNoYWRlci5jYWxsKHRoaXMsIHtcbiAgICAgICAgbmFtZTogXCJzaGFkZXJfc3BlY3VsYXJcIixcbiAgICAgICAgbG9hZDogZmFsc2UsXG5cbiAgICAgICAgbGlnaHRzOiB0cnVlLFxuXG4gICAgICAgIHZlcnRleDogW1xuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgdlV2O1wiLFxuXG4gICAgICAgICAgICBcInZvaWQgbWFpbigpIHtcIixcbiAgICAgICAgICAgIFwiXHR2VXYgPSB1djtcIixcbiAgICAgICAgICAgIFwiXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1wiLFxuICAgICAgICAgICAgXCJ9XCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgICAgIGZyYWdtZW50OiBbXG4gICAgICAgICAgICBcInVuaWZvcm0gdmVjMyBkaWZmdXNlQ29sb3I7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gc2FtcGxlcjJEIGRpZmZ1c2VNYXA7XCIsXG5cbiAgICAgICAgICAgIFwidW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XCIsXG5cbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcblxuICAgICAgICAgICAgXCJ2b2lkIG1haW4oKSB7XCIsXG4gICAgICAgICAgICBcIlx0dmVjNCBmaW5hbENvbG9yID0gdGV4dHVyZTJEKGRpZmZ1c2VNYXAsIHZVdik7XCIsXG4gICAgICAgICAgICBcIlx0ZmluYWxDb2xvci54eXogKj0gZGlmZnVzZUNvbG9yO1wiLFxuXG4gICAgICAgICAgICBcIlx0dmVjMyBkaWZmdXNlTGlnaHQsIHNwZWN1bGFyTGlnaHQ7XCIsXG4gICAgICAgICAgICBcIlx0UGl4ZWxMaWdodChub3JtYWxpemUodk5vcm1hbCksIHZlYzMoZmluYWxDb2xvci53KSwgZmluYWxDb2xvci53LCBzaGluaW5lc3MsIGRpZmZ1c2VMaWdodCwgc3BlY3VsYXJMaWdodCk7XCIsXG5cbiAgICAgICAgICAgIFwiXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KGRpZmZ1c2VMaWdodCAqIGZpbmFsQ29sb3IueHl6ICsgc3BlY3VsYXJMaWdodCAqIGZpbmFsQ29sb3IueHl6LCAxLjApO1wiLFxuICAgICAgICAgICAgXCJ9XCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpXG4gICAgfSk7XG59XG5cblNoYWRlci5leHRlbmQoU3BlY3VsYXIpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU3BlY3VsYXI7XG4iLCJ2YXIgU2hhZGVyID0gcmVxdWlyZShcIi4uL3NoYWRlclwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFVubGl0KCkge1xuXG4gICAgU2hhZGVyLmNhbGwodGhpcywge1xuICAgICAgICBuYW1lOiBcInNoYWRlcl91bmxpdFwiLFxuICAgICAgICBsb2FkOiBmYWxzZSxcblxuICAgICAgICB2ZXJ0ZXg6IFtcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcblxuICAgICAgICAgICAgXCJ2b2lkIG1haW4oKSB7XCIsXG4gICAgICAgICAgICBcIlx0dlV2ID0gdXY7XCIsXG4gICAgICAgICAgICBcIlx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIixcbiAgICAgICAgICAgIFwifVwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgICAgICBmcmFnbWVudDogW1xuICAgICAgICAgICAgXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZUNvbG9yO1wiLFxuICAgICAgICAgICAgXCJ1bmlmb3JtIHNhbXBsZXIyRCBkaWZmdXNlTWFwO1wiLFxuXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMiB2VXY7XCIsXG5cbiAgICAgICAgICAgIFwidm9pZCBtYWluKCkge1wiLFxuICAgICAgICAgICAgXCJcdHZlYzQgZmluYWxDb2xvciA9IHRleHR1cmUyRChkaWZmdXNlTWFwLCB2VXYpO1wiLFxuICAgICAgICAgICAgXCJcdGZpbmFsQ29sb3IueHl6ICo9IGRpZmZ1c2VDb2xvcjtcIixcblxuICAgICAgICAgICAgXCJcdGdsX0ZyYWdDb2xvciA9IGZpbmFsQ29sb3I7XCIsXG4gICAgICAgICAgICBcIn1cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIilcbiAgICB9KTtcbn1cblxuU2hhZGVyLmV4dGVuZChVbmxpdCk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBVbmxpdDtcbiIsInZhciBTaGFkZXIgPSByZXF1aXJlKFwiLi4vc2hhZGVyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gUGFydGljbGVVbmxpdCgpIHtcblxuICAgIFNoYWRlci5jYWxsKHRoaXMsIHtcbiAgICAgICAgbmFtZTogXCJzaGFkZXJfcGFydGljbGVfdW5saXRcIixcblxuICAgICAgICB2ZXJ0ZXg6IFtcbiAgICAgICAgICAgIFwidm9pZCBtYWluKCkge1wiLFxuICAgICAgICAgICAgXCJcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCIsXG4gICAgICAgICAgICBcIn1cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICAgICAgZnJhZ21lbnQ6IFtcbiAgICAgICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgZGlmZnVzZU1hcDtcIixcblxuICAgICAgICAgICAgXCJ2b2lkIG1haW4oKSB7XCIsXG4gICAgICAgICAgICBcIlx0ZmxvYXQgYyA9IGNvcyh2QW5nbGUpO1wiLFxuICAgICAgICAgICAgXCJcdGZsb2F0IHMgPSBzaW4odkFuZ2xlKTtcIixcblxuICAgICAgICAgICAgXCJcdHZlYzIgcm90YXRlZFVWID0gdmVjMihjICogKGdsX1BvaW50Q29vcmQueCAtIDAuNSkgKyBzICogKGdsX1BvaW50Q29vcmQueSAtIDAuNSkgKyAwLjUsXCIsXG4gICAgICAgICAgICBcIlx0XHRcdFx0XHRcdCAgYyAqIChnbF9Qb2ludENvb3JkLnkgLSAwLjUpIC0gcyAqIChnbF9Qb2ludENvb3JkLnggLSAwLjUpICsgMC41KTtcIixcblxuICAgICAgICAgICAgXCJcdHZlYzQgcm90YXRlZFRleHR1cmUgPSB0ZXh0dXJlMkQoZGlmZnVzZU1hcCwgcm90YXRlZFVWKTtcIixcbiAgICAgICAgICAgIFwiXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHZQYXJ0aWNsZUNvbG9yICogcm90YXRlZFRleHR1cmUueHl6LCB2QWxwaGEgKiByb3RhdGVkVGV4dHVyZS53KTtcIixcbiAgICAgICAgICAgIFwifVwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKVxuICAgIH0pO1xufVxuXG5TaGFkZXIuZXh0ZW5kKFBhcnRpY2xlVW5saXQpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFydGljbGVVbmxpdDtcbiIsInZhciBTaGFkZXIgPSByZXF1aXJlKFwiLi4vc2hhZGVyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gUmVmbGVjdGl2ZVZlcnRleExpdCgpIHtcblxuICAgIFNoYWRlci5jYWxsKHRoaXMsIHtcbiAgICAgICAgbmFtZTogXCJzaGFkZXJfcmVmbGVjdGl2ZV92ZXJ0ZXhfbGl0XCIsXG4gICAgICAgIGxvYWQ6IGZhbHNlLFxuXG4gICAgICAgIGxpZ2h0czogdHJ1ZSxcbiAgICAgICAgdmVydGV4TGl0OiB0cnVlLFxuXG4gICAgICAgIHZlcnRleDogW1xuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgdlV2O1wiLFxuICAgICAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XCIsXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMyB2RGlmZnVzZUxpZ2h0O1wiLFxuXG4gICAgICAgICAgICBcInZvaWQgbWFpbigpIHtcIixcbiAgICAgICAgICAgIFwiXHR2ZWMzIHdvcmxkTm9ybWFsID0gbm9ybWFsaXplKG1hdDMobW9kZWxNYXRyaXhbMF0ueHl6LCBtb2RlbE1hdHJpeFsxXS54eXosIG1vZGVsTWF0cml4WzJdLnh5eikgKiBvYmplY3ROb3JtYWwpO1wiLFxuICAgICAgICAgICAgXCJcdHZlYzMgY2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUod29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbik7XCIsXG5cbiAgICAgICAgICAgIFwiXHR2UmVmbGVjdCA9IHJlZmxlY3QoY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsKTtcIixcbiAgICAgICAgICAgIFwiXHR2VXYgPSB1djtcIixcbiAgICAgICAgICAgIFwiXHRWZXJ0ZXhMaWdodCh0cmFuc2Zvcm1lZE5vcm1hbCwgd29ybGRQb3NpdGlvbi54eXosIC1tdlBvc2l0aW9uLnh5eiwgdkRpZmZ1c2VMaWdodCk7XCIsXG5cbiAgICAgICAgICAgIFwiXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1wiLFxuICAgICAgICAgICAgXCJ9XCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgICAgIGZyYWdtZW50OiBbXG4gICAgICAgICAgICBcInVuaWZvcm0gdmVjMyBkaWZmdXNlQ29sb3I7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gc2FtcGxlcjJEIGRpZmZ1c2VNYXA7XCIsXG4gICAgICAgICAgICBcInVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1wiLFxuXG4gICAgICAgICAgICBcInVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1wiLFxuICAgICAgICAgICAgXCJ1bmlmb3JtIGludCBjb21iaW5lO1wiLFxuXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMiB2VXY7XCIsXG4gICAgICAgICAgICBcInZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcIixcbiAgICAgICAgICAgIFwidmFyeWluZyB2ZWMzIHZEaWZmdXNlTGlnaHQ7XCIsXG5cbiAgICAgICAgICAgIFwidm9pZCBtYWluKCkge1wiLFxuXG4gICAgICAgICAgICBcIlx0dmVjNCBmaW5hbENvbG9yID0gdGV4dHVyZTJEKGRpZmZ1c2VNYXAsIHZVdik7XCIsXG4gICAgICAgICAgICBcIlx0ZmluYWxDb2xvci54eXogKj0gZGlmZnVzZUNvbG9yO1wiLFxuXG4gICAgICAgICAgICBcIlx0dmVjMyBjdWJlQ29sb3IgPSB0ZXh0dXJlQ3ViZShlbnZNYXAsIHZSZWZsZWN0KS54eXo7XCIsXG5cbiAgICAgICAgICAgIFwiXHRpZiAoY29tYmluZSA9PSAxKSB7XCIsXG4gICAgICAgICAgICBcIlx0XHRmaW5hbENvbG9yLnh5eiA9IG1peChmaW5hbENvbG9yLnh5eiwgY3ViZUNvbG9yLCByZWZsZWN0aXZpdHkpO1wiLFxuICAgICAgICAgICAgXCJcdH0gZWxzZSBpZiAoY29tYmluZSA9PSAyKSB7XCIsXG4gICAgICAgICAgICBcIlx0XHRmaW5hbENvbG9yLnh5eiArPSBjdWJlQ29sb3IgKiByZWZsZWN0aXZpdHk7XCIsXG4gICAgICAgICAgICBcIlx0fSBlbHNlIHtcIixcbiAgICAgICAgICAgIFwiXHRcdGZpbmFsQ29sb3IueHl6ID0gbWl4KGZpbmFsQ29sb3IueHl6LCBmaW5hbENvbG9yLnh5eiAqIGN1YmVDb2xvciwgcmVmbGVjdGl2aXR5KTtcIixcbiAgICAgICAgICAgIFwiXHR9XCIsXG5cbiAgICAgICAgICAgIFwiXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHZEaWZmdXNlTGlnaHQgKiBmaW5hbENvbG9yLnh5eiwgZmluYWxDb2xvci53KTtcIixcbiAgICAgICAgICAgIFwifVwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKVxuICAgIH0pO1xufVxuXG5TaGFkZXIuZXh0ZW5kKFJlZmxlY3RpdmVWZXJ0ZXhMaXQpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdGl2ZVZlcnRleExpdDtcbiIsInZhciBBc3NldCA9IHJlcXVpcmUoXCIuLi9hc3NldFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFNoYWRlcihvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIEFzc2V0LmNhbGwodGhpcywgb3B0cyk7XG5cbiAgICB0aGlzLmZhbGxiYWNrID0gb3B0cy5mYWxsYmFjayB8fCBcIlwiO1xuXG4gICAgdGhpcy52ZXJ0ZXggPSBvcHRzLnZlcnRleCB8fCBcInZvaWQgbWFpbih2b2lkKSB7fVwiO1xuICAgIHRoaXMuZnJhZ21lbnQgPSBvcHRzLmZyYWdtZW50IHx8IFwidm9pZCBtYWluKHZvaWQpIHt9XCI7XG5cbiAgICB0aGlzLmxpZ2h0cyA9IG9wdHMubGlnaHRzICE9IHVuZGVmaW5lZCA/IG9wdHMubGlnaHRzIDogZmFsc2U7XG4gICAgdGhpcy5zcGVjdWxhciA9IG9wdHMuc3BlY3VsYXIgIT0gdW5kZWZpbmVkID8gb3B0cy5zcGVjdWxhciA6IHRydWU7XG4gICAgdGhpcy52ZXJ0ZXhMaXQgPSBvcHRzLnZlcnRleExpdCAhPSB1bmRlZmluZWQgPyBvcHRzLnZlcnRleExpdCA6IGZhbHNlO1xuICAgIHRoaXMuc2hhZG93cyA9IG9wdHMuc2hhZG93cyAhPSB1bmRlZmluZWQgPyBvcHRzLnNoYWRvd3MgOiBmYWxzZTtcbiAgICB0aGlzLmZvZyA9IG9wdHMuZm9nICE9IHVuZGVmaW5lZCA/IG9wdHMuZm9nIDogZmFsc2U7XG5cbiAgICB0aGlzLk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA9IG9wdHMuT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzICE9IHVuZGVmaW5lZCA/IG9wdHMuT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZmFsc2U7XG59XG5cbkFzc2V0LmV4dGVuZChTaGFkZXIpO1xuXG5cblNoYWRlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIEFzc2V0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgb3RoZXIpO1xuXG4gICAgdGhpcy5mYWxsYmFjayA9IG90aGVyLmZhbGxiYWNrO1xuXG4gICAgdGhpcy52ZXJ0ZXggPSBvdGhlci52ZXJ0ZXg7XG4gICAgdGhpcy5mcmFnbWVudCA9IG90aGVyLmZyYWdtZW50O1xuXG4gICAgdGhpcy5saWdodHMgPSBvdGhlci5saWdodHM7XG4gICAgdGhpcy5zcGVjdWxhciA9IG90aGVyLnNwZWN1bGFyO1xuICAgIHRoaXMudmVydGV4TGl0ID0gb3RoZXIudmVydGV4TGl0O1xuICAgIHRoaXMuc2hhZG93cyA9IG90aGVyLnNoYWRvd3M7XG4gICAgdGhpcy5mb2cgPSBvdGhlci5mb2c7XG5cbiAgICB0aGlzLk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA9IG90aGVyLk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TaGFkZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHJhdykge1xuICAgIEFzc2V0LnByb3RvdHlwZS5wYXJzZS5jYWxsKHRoaXMsIHJhdyk7XG5cbiAgICB0aGlzLmZyb21KU09OKHJhdyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU2hhZGVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBBc3NldC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMudmVydGV4ID0gXCJcIjtcbiAgICB0aGlzLmZyYWdtZW50ID0gXCJcIjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TaGFkZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uLCBwYWNrKSB7XG4gICAganNvbiA9IEFzc2V0LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uLCBwYWNrKTtcblxuICAgIGpzb24uZmFsbGJhY2sgPSB0aGlzLmZhbGxiYWNrO1xuXG4gICAganNvbi52ZXJ0ZXggPSB0aGlzLnZlcnRleDtcbiAgICBqc29uLmZyYWdtZW50ID0gdGhpcy5mcmFnbWVudDtcblxuICAgIGpzb24ubGlnaHRzID0gdGhpcy5saWdodHM7XG4gICAganNvbi5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXI7XG4gICAganNvbi52ZXJ0ZXhMaXQgPSB0aGlzLnZlcnRleExpdDtcbiAgICBqc29uLnNoYWRvd3MgPSB0aGlzLnNoYWRvd3M7XG4gICAganNvbi5mb2cgPSB0aGlzLmZvZztcblxuICAgIGpzb24uT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzID0gdGhpcy5PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXM7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuU2hhZGVyLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQXNzZXQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLmZhbGxiYWNrID0ganNvbi5mYWxsYmFjaztcblxuICAgIHRoaXMudmVydGV4ID0ganNvbi52ZXJ0ZXg7XG4gICAgdGhpcy5mcmFnbWVudCA9IGpzb24uZnJhZ21lbnQ7XG5cbiAgICB0aGlzLmxpZ2h0cyA9IGpzb24ubGlnaHRzO1xuICAgIHRoaXMuc3BlY3VsYXIgPSBqc29uLnNwZWN1bGFyO1xuICAgIHRoaXMudmVydGV4TGl0ID0ganNvbi52ZXJ0ZXhMaXQ7XG4gICAgdGhpcy5zaGFkb3dzID0ganNvbi5zaGFkb3dzO1xuICAgIHRoaXMuZm9nID0ganNvbi5mb2c7XG5cbiAgICB0aGlzLk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA9IGpzb24uT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU2hhZGVyO1xuIiwidmFyIFVubGl0ID0gcmVxdWlyZShcIi4vbm9ybWFsL3VubGl0XCIpO1xudmFyIFZlcnRleExpdCA9IHJlcXVpcmUoXCIuL25vcm1hbC9zcGVjdWxhclwiKTtcbnZhciBEaWZmdXNlID0gcmVxdWlyZShcIi4vbm9ybWFsL2RpZmZ1c2VcIik7XG52YXIgU3BlY3VsYXIgPSByZXF1aXJlKFwiLi9ub3JtYWwvc3BlY3VsYXJcIik7XG52YXIgTm9ybWFsRGlmZnVzZSA9IHJlcXVpcmUoXCIuL25vcm1hbC9ub3JtYWxfZGlmZnVzZVwiKTtcbnZhciBOb3JtYWxTcGVjdWxhciA9IHJlcXVpcmUoXCIuL25vcm1hbC9ub3JtYWxfc3BlY3VsYXJcIik7XG52YXIgUGFyYWxsYXhEaWZmdXNlID0gcmVxdWlyZShcIi4vbm9ybWFsL3BhcmFsbGF4X2RpZmZ1c2VcIik7XG52YXIgUGFydGljbGVVbmxpdCA9IHJlcXVpcmUoXCIuL3BhcnRpY2xlL3VubGl0XCIpO1xudmFyIFJlZmxlY3RpdmVWZXJ0ZXhMaXQgPSByZXF1aXJlKFwiLi9yZWZsZWN0aXZlL3JlZmxlY3RpdmVfdmVydGV4X2xpdFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFVubGl0OiBVbmxpdCxcbiAgICBWZXJ0ZXhMaXQ6IFZlcnRleExpdCxcbiAgICBEaWZmdXNlOiBEaWZmdXNlLFxuICAgIFNwZWN1bGFyOiBTcGVjdWxhcixcbiAgICBOb3JtYWxEaWZmdXNlOiBOb3JtYWxEaWZmdXNlLFxuICAgIE5vcm1hbFNwZWN1bGFyOiBOb3JtYWxTcGVjdWxhcixcbiAgICBQYXJhbGxheERpZmZ1c2U6IFBhcmFsbGF4RGlmZnVzZSxcblxuICAgIFBhcnRpY2xlVW5saXQ6IFBhcnRpY2xlVW5saXQsXG5cbiAgICBSZWZsZWN0aXZlVmVydGV4TGl0OiBSZWZsZWN0aXZlVmVydGV4TGl0XG59O1xuIiwidmFyIEFzc2V0ID0gcmVxdWlyZShcIi4vYXNzZXRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBTcHJpdGVTaGVldChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIEFzc2V0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbkFzc2V0LmV4dGVuZChTcHJpdGVTaGVldCk7XG5cblxuU3ByaXRlU2hlZXQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICBBc3NldC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIG90aGVyKTtcbiAgICB2YXIgcmF3ID0gb3RoZXIucmF3LFxuICAgICAgICBrZXk7XG5cbiAgICBmb3IgKGtleSBpbiByYXcpIHRoaXNba2V5XSA9IHJhd1trZXldO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblNwcml0ZVNoZWV0LnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBBc3NldC5wcm90b3R5cGUucGFyc2UuY2FsbCh0aGlzLCByYXcpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHJhdykge1xuICAgICAgICBpZiAoIXRoaXNba2V5XSkge1xuICAgICAgICAgICAgdGhpc1trZXldID0gcmF3W2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTcHJpdGVTaGVldC5wYXJzZTogaW52YWxpZCBhbmltYXRpb24gbmFtZSBcIiArIGtleSArIFwiIGluIGZpbGUgXCIgKyB0aGlzLnNyYyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU3ByaXRlU2hlZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnJhdykgdGhpc1trZXldID0gbnVsbDtcbiAgICBBc3NldC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TcHJpdGVTaGVldC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24sIHBhY2spIHtcbiAgICBqc29uID0gQXNzZXQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgaWYgKChwYWNrIHx8ICF0aGlzLnNyYykgJiYgdGhpcy5yYXcpIGpzb24ucmF3ID0gSlNPTi5zdHJpbmdpZnkodGhpcy5yYXcpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblNwcml0ZVNoZWV0LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQXNzZXQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBpZiAoIWpzb24uc3JjICYmIGpzb24ucmF3KSB0aGlzLnJhdyA9IEpTT04ucGFyc2UoanNvbi5yYXcpO1xuICAgIHRoaXMucGFyc2UodGhpcy5yYXcpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU3ByaXRlU2hlZXQ7XG4iLCJ2YXIgRW51bXMgPSByZXF1aXJlKFwiLi4vZW51bXNcIik7XG52YXIgQXNzZXQgPSByZXF1aXJlKFwiLi9hc3NldFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFRleHR1cmUob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBBc3NldC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuXG4gICAgdGhpcy5pbnZXaWR0aCA9IDA7XG4gICAgdGhpcy5pbnZIZWlnaHQgPSAwO1xuXG4gICAgdGhpcy5nZW5lcmF0ZU1pcG1hcCA9IG9wdHMuZ2VuZXJhdGVNaXBtYXAgIT0gdW5kZWZpbmVkID8gISFvcHRzLmdlbmVyYXRlTWlwbWFwIDogdHJ1ZTtcbiAgICB0aGlzLmZsaXBZID0gb3B0cy5mbGlwWSAhPSB1bmRlZmluZWQgPyAhIW9wdHMuZmxpcFkgOiB0cnVlO1xuICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IG9wdHMucHJlbXVsdGlwbHlBbHBoYSAhPSB1bmRlZmluZWQgPyAhIW9wdHMucHJlbXVsdGlwbHlBbHBoYSA6IGZhbHNlO1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0gb3B0cy5hbmlzb3Ryb3B5ICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5pc290cm9weSA6IDE7XG5cbiAgICB0aGlzLmZpbHRlciA9IG9wdHMuZmlsdGVyICE9IHVuZGVmaW5lZCA/IG9wdHMuZmlsdGVyIDogRW51bXMuRmlsdGVyTW9kZS5MaW5lYXI7XG4gICAgdGhpcy5mb3JtYXQgPSBvcHRzLmZvcm1hdCAhPSB1bmRlZmluZWQgPyBvcHRzLmZvcm1hdCA6IEVudW1zLlRleHR1cmVGb3JtYXQuUkdCQTtcbiAgICB0aGlzLndyYXAgPSBvcHRzLndyYXAgIT0gdW5kZWZpbmVkID8gb3B0cy53cmFwIDogRW51bXMuVGV4dHVyZVdyYXAuUmVwZWF0O1xuXG4gICAgdGhpcy5fd2ViZ2wgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xVc2VkID0gMDtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufVxuXG5Bc3NldC5leHRlbmQoVGV4dHVyZSk7XG5cblxuVGV4dHVyZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIEFzc2V0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgb3RoZXIpO1xuXG4gICAgdGhpcy53aWR0aCA9IG90aGVyLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gb3RoZXIuaGVpZ2h0O1xuXG4gICAgdGhpcy5pbnZXaWR0aCA9IG90aGVyLmludldpZHRoO1xuICAgIHRoaXMuaW52SGVpZ2h0ID0gb3RoZXIuaW52SGVpZ2h0O1xuXG4gICAgdGhpcy5nZW5lcmF0ZU1pcG1hcCA9IG90aGVyLmdlbmVyYXRlTWlwbWFwO1xuICAgIHRoaXMuZmxpcFkgPSBvdGhlci5mbGlwWTtcbiAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBvdGhlci5wcmVtdWx0aXBseUFscGhhO1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0gb3RoZXIuYW5pc290cm9weTtcblxuICAgIHRoaXMuZmlsdGVyID0gb3RoZXIuZmlsdGVyO1xuICAgIHRoaXMuZm9ybWF0ID0gb3RoZXIuZm9ybWF0O1xuICAgIHRoaXMud3JhcCA9IG90aGVyLndyYXA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuVGV4dHVyZS5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgQXNzZXQucHJvdG90eXBlLnBhcnNlLmNhbGwodGhpcywgcmF3KTtcblxuICAgIHRoaXMud2lkdGggPSByYXcud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSByYXcuaGVpZ2h0O1xuXG4gICAgdGhpcy5pbnZXaWR0aCA9IDEgLyB0aGlzLndpZHRoO1xuICAgIHRoaXMuaW52SGVpZ2h0ID0gMSAvIHRoaXMuaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRleHR1cmUucHJvdG90eXBlLnNldE1pcG1hcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgdGhpcy5nZW5lcmF0ZU1pcG1hcCA9IHZhbHVlICE9IHVuZGVmaW5lZCA/ICEhdmFsdWUgOiAhdGhpcy5nZW5lcmF0ZU1pcG1hcDtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuVGV4dHVyZS5wcm90b3R5cGUuc2V0QW5pc290cm9weSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0gdmFsdWU7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cblRleHR1cmUucHJvdG90eXBlLnNldEZpbHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgdGhpcy5maWx0ZXIgPSB2YWx1ZTtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuVGV4dHVyZS5wcm90b3R5cGUuc2V0Rm9ybWF0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLmZvcm1hdCA9IHZhbHVlO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5UZXh0dXJlLnByb3RvdHlwZS5zZXRXcmFwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLndyYXAgPSB2YWx1ZTtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuVGV4dHVyZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24sIHBhY2spIHtcbiAgICBqc29uID0gQXNzZXQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgaWYgKChwYWNrIHx8ICF0aGlzLnNyYykgJiYgdGhpcy5yYXcpIHtcbiAgICAgICAgaWYgKHR5cGVvZih3aW5kb3cpID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBqc29uLnJhdyA9IHRoaXMucmF3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJhdyA9IHRoaXMucmF3LFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksXG4gICAgICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gcmF3LndpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHJhdy5oZWlnaHQ7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHJhdywgMCwgMCk7XG5cbiAgICAgICAgICAgIGpzb24ucmF3ID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAganNvbi53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAganNvbi5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIGpzb24uaW52V2lkdGggPSB0aGlzLmludldpZHRoO1xuICAgIGpzb24uaW52SGVpZ2h0ID0gdGhpcy5pbnZIZWlnaHQ7XG5cbiAgICBqc29uLmdlbmVyYXRlTWlwbWFwID0gdGhpcy5nZW5lcmF0ZU1pcG1hcDtcbiAgICBqc29uLmZsaXBZID0gdGhpcy5mbGlwWTtcbiAgICBqc29uLnByZW11bHRpcGx5QWxwaGEgPSB0aGlzLnByZW11bHRpcGx5QWxwaGE7XG5cbiAgICBqc29uLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG5cbiAgICBqc29uLmZpbHRlciA9IHRoaXMuZmlsdGVyO1xuICAgIGpzb24uZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAganNvbi53cmFwID0gdGhpcy53cmFwO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblRleHR1cmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBBc3NldC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGlmICghanNvbi5zcmMgJiYganNvbi5yYXcpIHtcbiAgICAgICAgaWYgKHR5cGVvZih3aW5kb3cpID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnJhdyA9IGpzb24ucmF3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlO1xuICAgICAgICAgICAgaW1hZ2Uuc3JjID0ganNvbi5yYXc7XG4gICAgICAgICAgICB0aGlzLnJhdyA9IGltYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy53aWR0aCA9IGpzb24ud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBqc29uLmhlaWdodDtcblxuICAgIHRoaXMuaW52V2lkdGggPSBqc29uLmludldpZHRoO1xuICAgIHRoaXMuaW52SGVpZ2h0ID0ganNvbi5pbnZIZWlnaHQ7XG5cbiAgICB0aGlzLmdlbmVyYXRlTWlwbWFwID0ganNvbi5nZW5lcmF0ZU1pcG1hcDtcbiAgICB0aGlzLmZsaXBZID0ganNvbi5mbGlwWTtcbiAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBqc29uLnByZW11bHRpcGx5QWxwaGE7XG5cbiAgICB0aGlzLmFuaXNvdHJvcHkgPSBqc29uLmFuaXNvdHJvcHk7XG5cbiAgICB0aGlzLmZpbHRlciA9IGpzb24uZmlsdGVyO1xuICAgIHRoaXMuZm9ybWF0ID0ganNvbi5mb3JtYXQ7XG4gICAgdGhpcy53cmFwID0ganNvbi53cmFwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dHVyZTtcbiIsInZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi9lbnVtc1wiKTtcbnZhciBBc3NldCA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gVGV4dHVyZUN1YmUob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBBc3NldC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy5taXBtYXAgPSBvcHRzLm1pcG1hcCAhPSB1bmRlZmluZWQgPyAhIW9wdHMubWlwbWFwIDogdHJ1ZTtcbiAgICB0aGlzLmZsaXBZID0gb3B0cy5mbGlwWSAhPSB1bmRlZmluZWQgPyAhIW9wdHMuZmxpcFkgOiB0cnVlO1xuICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IG9wdHMucHJlbXVsdGlwbHlBbHBoYSAhPSB1bmRlZmluZWQgPyAhIW9wdHMucHJlbXVsdGlwbHlBbHBoYSA6IGZhbHNlO1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0gb3B0cy5hbmlzb3Ryb3B5ICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5pc290cm9weSA6IDE7XG5cbiAgICB0aGlzLmZpbHRlciA9IG9wdHMuZmlsdGVyICE9IHVuZGVmaW5lZCA/IG9wdHMuZmlsdGVyIDogRW51bXMuRmlsdGVyTW9kZS5MaW5lYXI7XG4gICAgdGhpcy5mb3JtYXQgPSBvcHRzLmZvcm1hdCAhPSB1bmRlZmluZWQgPyBvcHRzLmZvcm1hdCA6IEVudW1zLlRleHR1cmVGb3JtYXQuUkdCQTtcbiAgICB0aGlzLndyYXAgPSBvcHRzLndyYXAgIT0gdW5kZWZpbmVkID8gb3B0cy53cmFwIDogRW51bXMuVGV4dHVyZVdyYXAuUmVwZWF0O1xuXG4gICAgdGhpcy5fd2ViZ2wgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xVc2VkID0gMDtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufVxuXG5Bc3NldC5leHRlbmQoVGV4dHVyZUN1YmUpO1xuXG5cblRleHR1cmVDdWJlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgQXNzZXQucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBvdGhlcik7XG5cbiAgICB0aGlzLm1pcG1hcCA9IG90aGVyLm1pcG1hcDtcbiAgICB0aGlzLmZsaXBZID0gb3RoZXIuZmxpcFk7XG4gICAgdGhpcy5wcmVtdWx0aXBseUFscGhhID0gb3RoZXIucHJlbXVsdGlwbHlBbHBoYTtcblxuICAgIHRoaXMuYW5pc290cm9weSA9IG90aGVyLmFuaXNvdHJvcHk7XG5cbiAgICB0aGlzLmZpbHRlciA9IG90aGVyLmZpbHRlcjtcbiAgICB0aGlzLmZvcm1hdCA9IG90aGVyLmZvcm1hdDtcbiAgICB0aGlzLndyYXAgPSBvdGhlci53cmFwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRleHR1cmVDdWJlLnByb3RvdHlwZS5zZXRNaXBtYXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgIHRoaXMubWlwbWFwID0gdmFsdWUgIT0gdW5kZWZpbmVkID8gISF2YWx1ZSA6ICF0aGlzLm1pcG1hcDtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuVGV4dHVyZUN1YmUucHJvdG90eXBlLnNldEFuaXNvdHJvcHkgPSBmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgIHRoaXMuYW5pc290cm9weSA9IHZhbHVlO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5UZXh0dXJlQ3ViZS5wcm90b3R5cGUuc2V0RmlsdGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLmZpbHRlciA9IHZhbHVlO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5UZXh0dXJlQ3ViZS5wcm90b3R5cGUuc2V0Rm9ybWF0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLmZvcm1hdCA9IHZhbHVlO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5UZXh0dXJlQ3ViZS5wcm90b3R5cGUuc2V0V3JhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgdGhpcy53cmFwID0gdmFsdWU7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cblRleHR1cmVDdWJlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbiwgcGFjaykge1xuICAgIGpzb24gPSBBc3NldC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBpZiAoKHBhY2sgfHwgIXRoaXMuc3JjKSAmJiB0aGlzLnJhdykge1xuICAgICAgICBpZiAodHlwZW9mKHdpbmRvdykgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGpzb24ucmF3ID0gdGhpcy5yYXc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIganNvblJhdyA9IGpzb24ucmF3IHx8IChqc29uLnJhdyA9IFtdKSxcbiAgICAgICAgICAgICAgICByYXcgPSB0aGlzLnJhdyxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICBpbCA9IHJhdy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoOyBpIDwgaWw7IGkrKykganNvblJhd1tpXSA9IGltYWdlVG9EYXRhVXJsKHJhd1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBqc29uLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICBqc29uLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAganNvbi5pbnZXaWR0aCA9IHRoaXMuaW52V2lkdGg7XG4gICAganNvbi5pbnZIZWlnaHQgPSB0aGlzLmludkhlaWdodDtcblxuICAgIGpzb24ubWlwbWFwID0gdGhpcy5taXBtYXA7XG4gICAganNvbi5mbGlwWSA9IHRoaXMuZmxpcFk7XG4gICAganNvbi5wcmVtdWx0aXBseUFscGhhID0gdGhpcy5wcmVtdWx0aXBseUFscGhhO1xuXG4gICAganNvbi5hbmlzb3Ryb3B5ID0gdGhpcy5hbmlzb3Ryb3B5O1xuXG4gICAganNvbi5maWx0ZXIgPSB0aGlzLmZpbHRlcjtcbiAgICBqc29uLmZvcm1hdCA9IHRoaXMuZm9ybWF0O1xuICAgIGpzb24ud3JhcCA9IHRoaXMud3JhcDtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5UZXh0dXJlQ3ViZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIEFzc2V0LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgaWYgKCFqc29uLnNyYyAmJiBqc29uLnJhdykge1xuICAgICAgICBpZiAodHlwZW9mKHdpbmRvdykgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMucmF3ID0ganNvbi5yYXc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIganNvblJhdyA9IGpzb24ucmF3LFxuICAgICAgICAgICAgICAgIHJhdyA9IHRoaXMucmF3LFxuICAgICAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgICAgIGlsID0ganNvblJhdy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZTtcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSBzb25SYXdbaV07XG4gICAgICAgICAgICAgICAgcmF3W2ldID0gaW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLndpZHRoID0ganNvbi53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGpzb24uaGVpZ2h0O1xuXG4gICAgdGhpcy5pbnZXaWR0aCA9IGpzb24uaW52V2lkdGg7XG4gICAgdGhpcy5pbnZIZWlnaHQgPSBqc29uLmludkhlaWdodDtcblxuICAgIHRoaXMubWlwbWFwID0ganNvbi5taXBtYXA7XG4gICAgdGhpcy5mbGlwWSA9IGpzb24uZmxpcFk7XG4gICAgdGhpcy5wcmVtdWx0aXBseUFscGhhID0ganNvbi5wcmVtdWx0aXBseUFscGhhO1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0ganNvbi5hbmlzb3Ryb3B5O1xuXG4gICAgdGhpcy5maWx0ZXIgPSBqc29uLmZpbHRlcjtcbiAgICB0aGlzLmZvcm1hdCA9IGpzb24uZm9ybWF0O1xuICAgIHRoaXMud3JhcCA9IGpzb24ud3JhcDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5mdW5jdGlvbiBpbWFnZVRvRGF0YVVybChpbWFnZSkge1xuICAgIGlmICh0eXBlb2Yod2luZG93KSA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGltYWdlO1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLFxuICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcblxuICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dHVyZUN1YmU7XG4iLCJ2YXIgQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudF9tYW5hZ2VyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gQm9uZUNvbXBvbmVudE1hbmFnZXIoKSB7XG5cbiAgICBDb21wb25lbnRNYW5hZ2VyLmNhbGwodGhpcywgMTAwMDAwMCk7XG59XG5cbkNvbXBvbmVudE1hbmFnZXIuZXh0ZW5kKEJvbmVDb21wb25lbnRNYW5hZ2VyKTtcblxuXG5Cb25lQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHJldHVybiBhLnBhcmVudEluZGV4IC0gYi5wYXJlbnRJbmRleDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBCb25lQ29tcG9uZW50TWFuYWdlcjtcbiIsInZhciBDb21wb25lbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vY29tcG9uZW50X21hbmFnZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBDYW1lcmEyRENvbXBvbmVudE1hbmFnZXIoKSB7XG5cbiAgICBDb21wb25lbnRNYW5hZ2VyLmNhbGwodGhpcyk7XG59XG5cbkNvbXBvbmVudE1hbmFnZXIuZXh0ZW5kKENhbWVyYTJEQ29tcG9uZW50TWFuYWdlcik7XG5cblxuQ2FtZXJhMkRDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5zb3J0RnVuY3Rpb24gPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgcmV0dXJuIGEuX2FjdGl2ZSA/IDEgOiBiLl9hY3RpdmUgPyAtMSA6IDA7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2FtZXJhMkRDb21wb25lbnRNYW5hZ2VyO1xuIiwidmFyIENvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRfbWFuYWdlclwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIENhbWVyYUNvbXBvbmVudE1hbmFnZXIoKSB7XG5cbiAgICBDb21wb25lbnRNYW5hZ2VyLmNhbGwodGhpcyk7XG59XG5cbkNvbXBvbmVudE1hbmFnZXIuZXh0ZW5kKENhbWVyYUNvbXBvbmVudE1hbmFnZXIpO1xuXG5cbkNhbWVyYUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnNvcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICByZXR1cm4gYS5fYWN0aXZlID8gMSA6IGIuX2FjdGl2ZSA/IC0xIDogMDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDYW1lcmFDb21wb25lbnRNYW5hZ2VyO1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvY29tcG9uZW50XCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gQ29tcG9uZW50TWFuYWdlcihvcmRlcikge1xuXG4gICAgQ2xhc3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMub3JkZXIgPSBvcmRlciB8fCAwO1xuXG4gICAgdGhpcy5zY2VuZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcbn1cblxuQ2xhc3MuZXh0ZW5kKENvbXBvbmVudE1hbmFnZXIpO1xuXG5cbkNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4sIGN0eCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgaWwgPSBjb21wb25lbnRzLmxlbmd0aDtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgICAgZm9yICg7IGkgPCBpbDsgaSsrKSBmbi5jYWxsKGN0eCwgY29tcG9uZW50c1tpXSwgaSwgY29tcG9uZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCBpbDsgaSsrKSBmbihjb21wb25lbnRzW2ldLCBpLCBjb21wb25lbnRzKTtcbiAgICB9XG59O1xuXG5cbkNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpLCBpbDtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gY29tcG9uZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBjb21wb25lbnRzW2ldLnN0YXJ0KCk7XG4gICAgZm9yIChpID0gMCwgaWwgPSBjb21wb25lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIGNvbXBvbmVudHNbaV0uZW1pdChcInN0YXJ0XCIpO1xufTtcblxuXG5Db21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpLCBpbDtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gY29tcG9uZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBjb21wb25lbnRzW2ldLmluaXQoKTtcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGNvbXBvbmVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgY29tcG9uZW50c1tpXS5lbWl0KFwiaW5pdFwiKTtcbn07XG5cblxuQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgaWwgPSBjb21wb25lbnRzLmxlbmd0aCxcbiAgICAgICAgY29tcG9uZW50O1xuXG4gICAgZm9yICg7IGkgPCBpbDsgaSsrKVxuICAgICAgICBpZiAoKGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaV0pKSBjb21wb25lbnQudXBkYXRlKCk7XG59O1xuXG5cbkNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLmNvbXBvbmVudHMuc29ydCh0aGlzLnNvcnRGdW5jdGlvbik7XG59O1xuXG5cbkNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnNvcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICByZXR1cm4gYS5faWQgLSBiLl9pZDtcbn07XG5cblxuQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmxlbmd0aCA9PT0gMDtcbn07XG5cblxuQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIGlmICghKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbXBvbmVudCkpIHtcbiAgICAgICAgTG9nLmVycm9yKHRoaXMuX2NsYXNzTmFtZSArIFwiLmFkZDogY2FuJ3QgYWRkIGFyZ3VtZW50IHRvIFwiICsgdGhpcy5fY2xhc3NOYW1lICsgXCIsIGl0J3Mgbm90IGFuIGluc3RhbmNlIG9mIENvbXBvbmVudFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgaW5kZXggPSBjb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKHRoaXMuX2NsYXNzTmFtZSArIFwiLmFkZDogQ29tcG9uZW50IGlzIGFscmVhZHkgYSBtZW1iZXIgb2YgXCIgKyB0aGlzLl9jbGFzc05hbWUpO1xuICAgIH1cbn07XG5cblxuQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIGlmICghKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbXBvbmVudCkpIHtcbiAgICAgICAgTG9nLmVycm9yKHRoaXMuX2NsYXNzTmFtZSArIFwiLnJlbW92ZTogY2FuJ3QgcmVtb3ZlIGFyZ3VtZW50IGZyb20gXCIgKyB0aGlzLl9jbGFzc05hbWUgKyBcIiwgaXQncyBub3QgYW4gaW5zdGFuY2Ugb2YgQ29tcG9uZW50XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpbmRleCA9IGNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBjb21wb25lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKHRoaXMuX2NsYXNzTmFtZSArIFwiLnJlbW92ZTogQ29tcG9uZW50IGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMuX2NsYXNzTmFtZSk7XG4gICAgfVxufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudE1hbmFnZXI7XG4iLCJ2YXIgQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudF9tYW5hZ2VyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gTGlnaHRDb21wb25lbnRNYW5hZ2VyKCkge1xuXG4gICAgQ29tcG9uZW50TWFuYWdlci5jYWxsKHRoaXMpO1xufVxuXG5Db21wb25lbnRNYW5hZ2VyLmV4dGVuZChMaWdodENvbXBvbmVudE1hbmFnZXIpO1xuXG5cbkxpZ2h0Q29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHJldHVybiBhLnR5cGUgLSBiLnR5cGU7XG59O1xuXG5cbkxpZ2h0Q29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTGlnaHRDb21wb25lbnRNYW5hZ2VyO1xuIiwidmFyIENvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRfbWFuYWdlclwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIE1lc2hBbmltYXRpb25Db21wb25lbnRNYW5hZ2VyKCkge1xuXG4gICAgQ29tcG9uZW50TWFuYWdlci5jYWxsKHRoaXMsIC05OTk5OTkpO1xufVxuXG5Db21wb25lbnRNYW5hZ2VyLmV4dGVuZChNZXNoQW5pbWF0aW9uQ29tcG9uZW50TWFuYWdlcik7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNoQW5pbWF0aW9uQ29tcG9uZW50TWFuYWdlcjtcbiIsInZhciBDb21wb25lbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vY29tcG9uZW50X21hbmFnZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBNZXNoRmlsdGVyQ29tcG9uZW50TWFuYWdlcigpIHtcblxuICAgIENvbXBvbmVudE1hbmFnZXIuY2FsbCh0aGlzKTtcbn1cblxuQ29tcG9uZW50TWFuYWdlci5leHRlbmQoTWVzaEZpbHRlckNvbXBvbmVudE1hbmFnZXIpO1xuXG5cbk1lc2hGaWx0ZXJDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5zb3J0RnVuY3Rpb24gPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgcmV0dXJuIGEubWVzaCA9PT0gYi5tZXNoID8gMSA6IC0xO1xufTtcblxuXG5NZXNoRmlsdGVyQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWVzaEZpbHRlckNvbXBvbmVudE1hbmFnZXI7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIENvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRfbWFuYWdlclwiKTtcbnZhciBTcHJpdGUgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9zcHJpdGVcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY2xhbXAgPSBNYXRoZi5jbGFtcDtcblxuXG5mdW5jdGlvbiBTcHJpdGVDb21wb25lbnRNYW5hZ2VyKCkge1xuXG4gICAgQ2xhc3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMub3JkZXIgPSAwO1xuXG4gICAgdGhpcy5zY2VuZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxheWVycyA9IFtdO1xufVxuXG5Db21wb25lbnRNYW5hZ2VyLmV4dGVuZChTcHJpdGVDb21wb25lbnRNYW5hZ2VyKTtcblxuXG5TcHJpdGVDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGZuLCBjdHgpIHtcbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5sYXllcnMsXG4gICAgICAgIGNvbXBvbmVudHMsIGksIGlsLCBqLCBqbDtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgICAgZm9yIChpID0gMCwgaWwgPSBsYXllcnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IGxheWVyc1tpXTtcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50cykgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqbCA9IGNvbXBvbmVudHMubGVuZ3RoOyBqIDwgamw7IGorKykgZm4uY2FsbChjdHgsIGNvbXBvbmVudHNbal0sIGosIGNvbXBvbmVudHMpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMCwgaWwgPSBsYXllcnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IGxheWVyc1tpXTtcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50cykgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqbCA9IGNvbXBvbmVudHMubGVuZ3RoOyBqIDwgamw7IGorKykgZm4oY29tcG9uZW50c1tqXSwgaiwgY29tcG9uZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblNwcml0ZUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxheWVycyA9IHRoaXMubGF5ZXJzLFxuICAgICAgICBjb21wb25lbnRzLCBpLCBpbCwgaiwgamw7XG5cbiAgICBmb3IgKGkgPSAwLCBpbCA9IGxheWVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGNvbXBvbmVudHMgPSBsYXllcnNbaV07XG4gICAgICAgIGlmICghY29tcG9uZW50cykgY29udGludWU7XG5cbiAgICAgICAgZm9yIChqID0gMCwgamwgPSBjb21wb25lbnRzLmxlbmd0aDsgaiA8IGpsOyBqKyspIGNvbXBvbmVudHNbal0uaW5pdCgpO1xuICAgICAgICBmb3IgKGogPSAwLCBqbCA9IGNvbXBvbmVudHMubGVuZ3RoOyBqIDwgamw7IGorKykgY29tcG9uZW50c1tqXS5lbWl0KFwiaW5pdFwiKTtcbiAgICB9XG59O1xuXG5cblNwcml0ZUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsYXllcnMgPSB0aGlzLmxheWVycyxcbiAgICAgICAgY29tcG9uZW50cywgaSwgaWwsIGosIGpsO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBsYXllcnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBjb21wb25lbnRzID0gbGF5ZXJzW2ldO1xuICAgICAgICBpZiAoIWNvbXBvbmVudHMpIGNvbnRpbnVlO1xuXG4gICAgICAgIGZvciAoaiA9IDAsIGpsID0gY29tcG9uZW50cy5sZW5ndGg7IGogPCBqbDsgaisrKSBjb21wb25lbnRzW2pdLnN0YXJ0KCk7XG4gICAgICAgIGZvciAoaiA9IDAsIGpsID0gY29tcG9uZW50cy5sZW5ndGg7IGogPCBqbDsgaisrKSBjb21wb25lbnRzW2pdLmVtaXQoXCJzdGFydFwiKTtcbiAgICB9XG59O1xuXG5cblNwcml0ZUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuXG5TcHJpdGVDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsYXllcnMgPSB0aGlzLmxheWVycyxcbiAgICAgICAgY29tcG9uZW50cywgaSwgaWw7XG5cbiAgICBmb3IgKGkgPSAwLCBpbCA9IGxheWVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGNvbXBvbmVudHMgPSBsYXllcnNbaV07XG4gICAgICAgIGlmICghY29tcG9uZW50cykgY29udGludWU7XG5cbiAgICAgICAgY29tcG9uZW50cy5zb3J0KHRoaXMuc29ydEZ1bmN0aW9uKTtcbiAgICB9XG59O1xuXG5cblNwcml0ZUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnNvcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICByZXR1cm4gYS56IC0gYi56O1xufTtcblxuXG5TcHJpdGVDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5sYXllcnMsXG4gICAgICAgIGNvbXBvbmVudHMsIGksIGlsLFxuICAgICAgICBlbXB0eSA9IHRydWU7XG5cbiAgICBmb3IgKGkgPSAwLCBpbCA9IGxheWVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGNvbXBvbmVudHMgPSBsYXllcnNbaV07XG4gICAgICAgIGlmICghY29tcG9uZW50cykgY29udGludWU7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudHMubGVuZ3RoICE9PSAwKSBlbXB0eSA9IGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGVtcHR5O1xufTtcblxuXG5TcHJpdGVDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgU3ByaXRlKSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJTcHJpdGVDb21wb25lbnRNYW5hZ2VyLmFkZDogY2FuJ3QgYWRkIGFyZ3VtZW50IHRvIFNwcml0ZUNvbXBvbmVudE1hbmFnZXIsIGl0J3Mgbm90IGFuIGluc3RhbmNlIG9mIFNwcml0ZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5sYXllcnMsXG4gICAgICAgIGNvbXBvbmVudExheWVyID0gKGNvbXBvbmVudC5sYXllciA9IGNsYW1wKGNvbXBvbmVudC5sYXllciB8fCAwLCAwLCAyMCkpLFxuICAgICAgICBjb21wb25lbnRzID0gbGF5ZXJzW2NvbXBvbmVudExheWVyXSB8fCAobGF5ZXJzW2NvbXBvbmVudExheWVyXSA9IFtdKSxcbiAgICAgICAgaW5kZXggPSBjb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKHRoaXMuX2NsYXNzTmFtZSArIFwiLmFkZDogU3ByaXRlIGlzIGFscmVhZHkgYSBtZW1iZXIgb2YgU3ByaXRlQ29tcG9uZW50TWFuYWdlclwiKTtcbiAgICB9XG59O1xuXG5cblNwcml0ZUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICBpZiAoIShjb21wb25lbnQgaW5zdGFuY2VvZiBTcHJpdGUpKSB7XG4gICAgICAgIExvZy5lcnJvcihcIlNwcml0ZUNvbXBvbmVudE1hbmFnZXIucmVtb3ZlOiBjYW4ndCByZW1vdmUgYXJndW1lbnQgZnJvbSBTcHJpdGVDb21wb25lbnRNYW5hZ2VyLCBpdCdzIG5vdCBhbiBpbnN0YW5jZSBvZiBTcHJpdGVcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGxheWVycyA9IHRoaXMubGF5ZXJzLFxuICAgICAgICBjb21wb25lbnRMYXllciA9IChjb21wb25lbnQubGF5ZXIgPSBjbGFtcChjb21wb25lbnQubGF5ZXIgfHwgMCwgMCwgMjApKSxcbiAgICAgICAgY29tcG9uZW50cyA9IGxheWVyc1tjb21wb25lbnRMYXllcl0gfHwgKGxheWVyc1tjb21wb25lbnRMYXllcl0gPSBbXSksXG4gICAgICAgIGluZGV4ID0gY29tcG9uZW50cy5pbmRleE9mKGNvbXBvbmVudCk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNvbXBvbmVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IoXCJTcHJpdGVDb21wb25lbnRNYW5hZ2VyLnJlbW92ZTogU3ByaXRlIGlzIG5vdCBhIG1lbWJlciBvZiBTcHJpdGVDb21wb25lbnRNYW5hZ2VyXCIpO1xuICAgIH1cbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTcHJpdGVDb21wb25lbnRNYW5hZ2VyO1xuIiwidmFyIENvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRfbWFuYWdlclwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFRyYW5zZm9ybTJEQ29tcG9uZW50TWFuYWdlcigpIHtcblxuICAgIENvbXBvbmVudE1hbmFnZXIuY2FsbCh0aGlzLCA5OTk5OTkpO1xufVxuXG5Db21wb25lbnRNYW5hZ2VyLmV4dGVuZChUcmFuc2Zvcm0yRENvbXBvbmVudE1hbmFnZXIpO1xuXG5cblRyYW5zZm9ybTJEQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHJldHVybiBhLmRlcHRoIC0gYi5kZXB0aDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm0yRENvbXBvbmVudE1hbmFnZXI7XG4iLCJ2YXIgQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudF9tYW5hZ2VyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gVHJhbnNmb3JtQ29tcG9uZW50TWFuYWdlcigpIHtcblxuICAgIENvbXBvbmVudE1hbmFnZXIuY2FsbCh0aGlzLCA5OTk5OTkpO1xufVxuXG5Db21wb25lbnRNYW5hZ2VyLmV4dGVuZChUcmFuc2Zvcm1Db21wb25lbnRNYW5hZ2VyKTtcblxuXG5UcmFuc2Zvcm1Db21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5zb3J0RnVuY3Rpb24gPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgcmV0dXJuIGEuZGVwdGggLSBiLmRlcHRoO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybUNvbXBvbmVudE1hbmFnZXI7XG4iLCJ2YXIgQXVkaW9DdHggPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9hdWRpb19jdHhcIik7XG52YXIgVGltZSA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL3RpbWVcIik7XG52YXIgTWF0aGYgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXRoZlwiKTtcbnZhciBWZWMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjMlwiKTtcbnZhciBWZWMzID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjM1wiKTtcbnZhciBBc3NldHMgPSByZXF1aXJlKFwiLi4vYXNzZXRzL2Fzc2V0c1wiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgbm93ID0gVGltZS5ub3csXG4gICAgY2xhbXAwMSA9IE1hdGhmLmNsYW1wMDEsXG4gICAgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmZ1bmN0aW9uIEF1ZGlvU291cmNlKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ29tcG9uZW50LmNhbGwodGhpcywgXCJBdWRpb1NvdXJjZVwiLCBvcHRzKTtcblxuICAgIHRoaXMuY2xpcCA9IG9wdHMuY2xpcDtcblxuICAgIHRoaXMuX3NvdXJjZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9nYWluID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Bhbm5lciA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZG9wcGxlckxldmVsID0gb3B0cy5kb3BwbGVyTGV2ZWwgIT0gdW5kZWZpbmVkID8gb3B0cy5kb3BwbGVyTGV2ZWwgOiAxO1xuICAgIHRoaXMuX2xvb3AgPSBvcHRzLmxvb3AgIT0gdW5kZWZpbmVkID8gISFvcHRzLmxvb3AgOiBmYWxzZTtcblxuICAgIHRoaXMubWF4RGlzdGFuY2UgPSBvcHRzLm1heERpc3RhbmNlICE9IHVuZGVmaW5lZCA/IG9wdHMubWF4RGlzdGFuY2UgOiAxNTtcbiAgICB0aGlzLm1pbkRpc3RhbmNlID0gb3B0cy5taW5EaXN0YW5jZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1pbkRpc3RhbmNlIDogMTtcblxuICAgIHRoaXMub2Zmc2V0ID0gb3B0cy5vZmZzZXQgIT0gdW5kZWZpbmVkID8gb3B0cy5vZmZzZXQgOiBuZXcgVmVjMztcblxuICAgIHRoaXMucGl0Y2ggPSBvcHRzLnBpdGNoICE9IHVuZGVmaW5lZCA/IG9wdHMucGl0Y2ggOiAwO1xuXG4gICAgdGhpcy5wbGF5T25TdGFydCA9IG9wdHMucGxheU9uU3RhcnQgIT0gdW5kZWZpbmVkID8gISFvcHRzLnBsYXlPblN0YXJ0IDogZmFsc2U7XG5cbiAgICB0aGlzLnNwcmVhZCA9IG9wdHMuc3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMuc3ByZWFkIDogMDtcblxuICAgIHRoaXMudGltZSA9IG9wdHMudGltZSAhPSB1bmRlZmluZWQgPyBvcHRzLnRpbWUgOiAwO1xuICAgIHRoaXMuX3ZvbHVtZSA9IG9wdHMudm9sdW1lICE9IHVuZGVmaW5lZCA/IG9wdHMudm9sdW1lIDogMTtcblxuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9zdGFydFRpbWUgPSAwO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLl9vbmVuZGVkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIF90aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGltZSA9IDA7XG4gICAgICAgIF90aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgfTtcbn1cblxuQ29tcG9uZW50LmV4dGVuZChBdWRpb1NvdXJjZSk7XG5cblxuZGVmaW5lUHJvcGVydHkoQXVkaW9Tb3VyY2UucHJvdG90eXBlLCBcInZvbHVtZVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92b2x1bWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl92b2x1bWUgPSBjbGFtcDAxKHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuX2dhaW4pIHRoaXMuX2dhaW4uZ2Fpbi52YWx1ZSA9IHRoaXMuX3ZvbHVtZTtcbiAgICB9XG59KTtcblxuXG5kZWZpbmVQcm9wZXJ0eShBdWRpb1NvdXJjZS5wcm90b3R5cGUsIFwibG9vcFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb29wO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbG9vcCA9ICEhdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2UpIHRoaXMuX3NvdXJjZS5sb29wID0gdGhpcy5fbG9vcDtcbiAgICB9XG59KTtcblxuXG5BdWRpb1NvdXJjZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5jbGlwID0gb3RoZXIuY2xpcDtcblxuICAgIHRoaXMuZG9wcGxlckxldmVsID0gb3RoZXIuZG9wcGxlckxldmVsO1xuICAgIHRoaXMubG9vcCA9IG90aGVyLmxvb3A7XG5cbiAgICB0aGlzLm1heERpc3RhbmNlID0gb3RoZXIubWF4RGlzdGFuY2U7XG4gICAgdGhpcy5taW5EaXN0YW5jZSA9IG90aGVyLm1pbkRpc3RhbmNlO1xuXG4gICAgdGhpcy5vZmZzZXQuY29weShvdGhlci5vZmZzZXQpO1xuICAgIHRoaXMucGFuTGV2ZWwgPSBvdGhlci5wYW5MZXZlbDtcblxuICAgIHRoaXMucGl0Y2ggPSBvdGhlci5waXRjaDtcblxuICAgIHRoaXMucGxheU9uU3RhcnQgPSBvdGhlci5wbGF5T25TdGFydDtcblxuICAgIHRoaXMuc3ByZWFkID0gb3RoZXIuc3ByZWFkO1xuXG4gICAgdGhpcy50aW1lID0gb3RoZXIudGltZTtcbiAgICB0aGlzLnZvbHVtZSA9IG90aGVyLnZvbHVtZTtcblxuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQXVkaW9Tb3VyY2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcbiAgICBpZiAodGhpcy5wbGF5aW5nKSB0aGlzLnN0b3AoKTtcblxuICAgIHRoaXMuY2xpcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zb3VyY2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZ2FpbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wYW5uZXIgPSB1bmRlZmluZWQ7XG59O1xuXG5cbkF1ZGlvU291cmNlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmICh0aGlzLnBsYXlPblN0YXJ0KSB0aGlzLnBsYXkoKTtcbn07XG5cblxudmFyIFZFQzIgPSBuZXcgVmVjMixcbiAgICBWRUMzID0gbmV3IFZlYzM7XG5BdWRpb1NvdXJjZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRvcHBsZXJMZXZlbCA9PT0gMCB8fCAhdGhpcy5wbGF5aW5nKSByZXR1cm47XG4gICAgdmFyIHRyYW5zZm9ybTJkLCB0cmFuc2Zvcm0sIGNhbWVyYSwgY2FtZXJhVHJhbnNmb3JtLCBwYW5uZXI7XG5cbiAgICBpZiAoIShjYW1lcmEgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUuZ2FtZS5jYW1lcmEpKSByZXR1cm47XG4gICAgaWYgKCEocGFubmVyID0gdGhpcy5fcGFubmVyKSkgcmV0dXJuO1xuXG4gICAgdHJhbnNmb3JtID0gdGhpcy50cmFuc2Zvcm07XG4gICAgdHJhbnNmb3JtMmQgPSB0aGlzLnRyYW5zZm9ybTJkO1xuXG4gICAgY2FtZXJhVHJhbnNmb3JtID0gY2FtZXJhLnRyYW5zZm9ybSB8fCBjYW1lcmEudHJhbnNmb3JtMmQ7XG5cbiAgICBpZiAodHJhbnNmb3JtMmQpIHtcbiAgICAgICAgVkVDMi52YWRkKHRyYW5zZm9ybTJkLnBvc2l0aW9uLCB0aGlzLm9mZnNldCk7XG4gICAgICAgIFZFQzIuc3ViKGNhbWVyYVRyYW5zZm9ybS5wb3NpdGlvbik7XG4gICAgICAgIFZFQzIuc211bCh0aGlzLmRvcHBsZXJMZXZlbCk7XG5cbiAgICAgICAgcGFubmVyLnNldFBvc2l0aW9uKFZFQzIueCwgVkVDMi55LCBjYW1lcmEub3J0aG9ncmFwaGljU2l6ZSAqIDAuNSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgVkVDMy52YWRkKHRyYW5zZm9ybS5wb3NpdGlvbiwgdGhpcy5vZmZzZXQpO1xuICAgICAgICBWRUMzLnN1YihjYW1lcmFUcmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICBWRUMzLnNtdWwodGhpcy5kb3BwbGVyTGV2ZWwpO1xuXG4gICAgICAgIHBhbm5lci5zZXRQb3NpdGlvbihWRUMzLngsIFZFQzMueSwgVkVDMy56IHx8IDApO1xuICAgIH1cbn07XG5cblxuQXVkaW9Tb3VyY2UucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAoZGVsYXksIG9mZnNldCwgZHVyYXRpb24pIHtcbiAgICBpZiAoIUF1ZGlvQ3R4KSByZXR1cm4gdGhpcztcbiAgICBpZiAoIUF1ZGlvQ3R4LlVOTE9DS0VEICYmIHRoaXMuX2xvb3ApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGxpc3RlbmVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhdWRpb2NvbnRleHR1bmxvY2tcIiwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJhdWRpb2NvbnRleHR1bmxvY2tcIiwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmNsaXAgfHwgIXRoaXMuY2xpcC5yYXcpIHJldHVybiB0aGlzO1xuICAgIHZhciB0aW1lID0gdGhpcy50aW1lLFxuICAgICAgICBjbGlwTGVuZ3RoID0gdGhpcy5jbGlwLmxlbmd0aCxcbiAgICAgICAgbWF4TGVuZ3RoID0gY2xpcExlbmd0aCAtIHRpbWU7XG5cbiAgICBkZWxheSB8fCAoZGVsYXkgPSAwKTtcbiAgICBvZmZzZXQgfHwgKG9mZnNldCA9IHRpbWUpO1xuICAgIGR1cmF0aW9uIHx8IChkdXJhdGlvbiA9IGNsaXBMZW5ndGgpO1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gPiBtYXhMZW5ndGggPyBtYXhMZW5ndGggOiBkdXJhdGlvbjtcblxuICAgIHRoaXMuX3JlZnJlc2goKTtcblxuICAgIHRoaXMucGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBub3coKTtcblxuICAgIHRoaXMudGltZSA9IG9mZnNldDtcbiAgICB0aGlzLl9zb3VyY2Uuc3RhcnQoZGVsYXksIG9mZnNldCwgZHVyYXRpb24pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkF1ZGlvU291cmNlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUF1ZGlvQ3R4IHx8ICF0aGlzLmNsaXAgfHwgIXRoaXMuY2xpcC5yYXcpIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMudGltZSA9IG5vdygpIC0gdGhpcy5fc3RhcnRUaW1lO1xuXG4gICAgdGhpcy5fc291cmNlLnN0b3AodGhpcy50aW1lKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5BdWRpb1NvdXJjZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUF1ZGlvQ3R4IHx8ICF0aGlzLmNsaXAgfHwgIXRoaXMuY2xpcC5yYXcpIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy50aW1lID0gMDtcbiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9zb3VyY2Uuc3RvcCh0aGlzLnRpbWUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkF1ZGlvU291cmNlLnByb3RvdHlwZS5fcmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc291cmNlID0gdGhpcy5fc291cmNlID0gQXVkaW9DdHguY3JlYXRlQnVmZmVyU291cmNlKCksXG4gICAgICAgIGdhaW4gPSB0aGlzLl9nYWluID0gQXVkaW9DdHguY3JlYXRlR2FpbigpLFxuICAgICAgICBwYW5uZXI7XG5cbiAgICBpZiAodGhpcy5kb3BwbGVyTGV2ZWwgPT09IDApIHtcbiAgICAgICAgZ2Fpbi5jb25uZWN0KEF1ZGlvQ3R4LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgc291cmNlLmNvbm5lY3QoZ2Fpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGFubmVyID0gdGhpcy5fcGFubmVyID0gQXVkaW9DdHguY3JlYXRlUGFubmVyKCk7XG5cbiAgICAgICAgZ2Fpbi5jb25uZWN0KEF1ZGlvQ3R4LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgcGFubmVyLmNvbm5lY3QoZ2Fpbik7XG4gICAgICAgIHNvdXJjZS5jb25uZWN0KHBhbm5lcik7XG4gICAgfVxuXG4gICAgc291cmNlLmJ1ZmZlciA9IHRoaXMuY2xpcC5yYXc7XG4gICAgc291cmNlLm9uZW5kZWQgPSB0aGlzLl9vbmVuZGVkO1xuXG4gICAgZ2Fpbi5nYWluLnZhbHVlID0gdGhpcy52b2x1bWU7XG4gICAgc291cmNlLmxvb3AgPSB0aGlzLl9sb29wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkF1ZGlvU291cmNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi5jbGlwID0gdGhpcy5jbGlwID8gdGhpcy5jbGlwLm5hbWUgOiB1bmRlZmluZWQ7XG5cbiAgICBqc29uLmRvcHBsZXJMZXZlbCA9IHRoaXMuZG9wcGxlckxldmVsO1xuICAgIGpzb24ubG9vcCA9IHRoaXMubG9vcDtcblxuICAgIGpzb24ubWF4RGlzdGFuY2UgPSB0aGlzLm1heERpc3RhbmNlO1xuICAgIGpzb24ubWluRGlzdGFuY2UgPSB0aGlzLm1pbkRpc3RhbmNlO1xuXG4gICAganNvbi5vZmZzZXQgPSB0aGlzLm9mZnNldC50b0pTT04oanNvbi5vZmZzZXQpO1xuICAgIGpzb24ucGFuTGV2ZWwgPSB0aGlzLnBhbkxldmVsO1xuXG4gICAganNvbi5waXRjaCA9IHRoaXMucGl0Y2g7XG5cbiAgICBqc29uLnBsYXlPblN0YXJ0ID0gdGhpcy5wbGF5T25TdGFydDtcblxuICAgIGpzb24uc3ByZWFkID0gdGhpcy5zcHJlYWQ7XG5cbiAgICBqc29uLnRpbWUgPSB0aGlzLnRpbWU7XG4gICAganNvbi52b2x1bWUgPSB0aGlzLnZvbHVtZTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5BdWRpb1NvdXJjZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIHRoaXMuY2xpcCA9IGpzb24uY2xpcCA/IEFzc2V0cy5nZXQoanNvbi5jbGlwKSA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZG9wcGxlckxldmVsID0ganNvbi5kb3BwbGVyTGV2ZWw7XG4gICAgdGhpcy5sb29wID0ganNvbi5sb29wO1xuXG4gICAgdGhpcy5tYXhEaXN0YW5jZSA9IGpzb24ubWF4RGlzdGFuY2U7XG4gICAgdGhpcy5taW5EaXN0YW5jZSA9IGpzb24ubWluRGlzdGFuY2U7XG5cbiAgICB0aGlzLm9mZnNldC5mcm9tSlNPTihqc29uLm9mZnNldCk7XG4gICAgdGhpcy5wYW5MZXZlbCA9IGpzb24ucGFuTGV2ZWw7XG5cbiAgICB0aGlzLnBpdGNoID0ganNvbi5waXRjaDtcblxuICAgIHRoaXMucGxheU9uU3RhcnQgPSBqc29uLnBsYXlPblN0YXJ0O1xuXG4gICAgdGhpcy5zcHJlYWQgPSBqc29uLnNwcmVhZDtcblxuICAgIHRoaXMudGltZSA9IGpzb24udGltZTtcbiAgICB0aGlzLnZvbHVtZSA9IGpzb24udm9sdW1lO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9Tb3VyY2U7XG4iLCJ2YXIgVmVjMyA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgUXVhdCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3F1YXRcIik7XG52YXIgTWF0NCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdDRcIik7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vY29tcG9uZW50XCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIFVOS05PV04gPSAwO1xuXG5cbmZ1bmN0aW9uIEJvbmUob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIkJvbmVcIiwgb3B0cyk7XG5cbiAgICB0aGlzLnBhcmVudEluZGV4ID0gb3B0cy5wYXJlbnRJbmRleCAhPSB1bmRlZmluZWQgPyBvcHRzLnBhcmVudEluZGV4IDogLTE7XG4gICAgdGhpcy5uYW1lID0gb3B0cy5uYW1lICE9IHVuZGVmaW5lZCA/IG9wdHMubmFtZSA6IFwiQm9uZV9cIiArIFVOS05PV04rKztcblxuICAgIHRoaXMuc2tpbm5lZCA9IG9wdHMuc2tpbm5lZCAhPSB1bmRlZmluZWQgPyBvcHRzLnNraW5uZWQgOiBmYWxzZTtcbiAgICB0aGlzLmJpbmRQb3NlID0gb3B0cy5iaW5kUG9zZSAhPSB1bmRlZmluZWQgPyBvcHRzLmJpbmRQb3NlIDogbmV3IE1hdDQ7XG4gICAgdGhpcy51bmlmb3JtID0gbmV3IE1hdDQ7XG5cbiAgICB0aGlzLmluaGVyaXRQb3NpdGlvbiA9IG9wdHMuaW5oZXJpdFBvc2l0aW9uICE9IHVuZGVmaW5lZCA/IG9wdHMuaW5oZXJpdFBvc2l0aW9uIDogdHJ1ZTtcbiAgICB0aGlzLmluaGVyaXRSb3RhdGlvbiA9IG9wdHMuaW5oZXJpdFJvdGF0aW9uICE9IHVuZGVmaW5lZCA/IG9wdHMuaW5oZXJpdFJvdGF0aW9uIDogdHJ1ZTtcbiAgICB0aGlzLmluaGVyaXRTY2FsZSA9IG9wdHMuaW5oZXJpdFNjYWxlICE9IHVuZGVmaW5lZCA/IG9wdHMuaW5oZXJpdFNjYWxlIDogdHJ1ZTtcbn1cblxuQ29tcG9uZW50LmV4dGVuZChCb25lKTtcblxuXG5Cb25lLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLm5hbWUgPSBvdGhlci5uYW1lO1xuICAgIHRoaXMucGFyZW50SW5kZXggPSBvdGhlci5wYXJlbnRJbmRleDtcblxuICAgIHRoaXMuc2tpbm5lZCA9IG90aGVyLnNraW5uZWQ7XG4gICAgdGhpcy5iaW5kUG9zZS5jb3B5KG90aGVyLmJpbmRQb3NlKTtcblxuICAgIHRoaXMuaW5oZXJpdFBvc2l0aW9uID0gb3RoZXIuaW5oZXJpdFBvc2l0aW9uO1xuICAgIHRoaXMuaW5oZXJpdFJvdGF0aW9uID0gb3RoZXIuaW5oZXJpdFJvdGF0aW9uO1xuICAgIHRoaXMuaW5oZXJpdFNjYWxlID0gb3RoZXIuaW5oZXJpdFNjYWxlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbnZhciBNQVQgPSBuZXcgTWF0NCxcbiAgICBQT1NJVElPTiA9IG5ldyBWZWMzLFxuICAgIFNDQUxFID0gbmV3IFZlYzMsXG4gICAgUk9UQVRJT04gPSBuZXcgUXVhdDtcbkJvbmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuc2tpbm5lZCkgcmV0dXJuO1xuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybSxcbiAgICAgICAgdW5pZm9ybSA9IHRoaXMudW5pZm9ybSxcbiAgICAgICAgcGFyZW50ID0gdHJhbnNmb3JtLnBhcmVudCxcbiAgICAgICAgaW5oZXJpdFBvc2l0aW9uID0gdGhpcy5pbmhlcml0UG9zaXRpb24sXG4gICAgICAgIGluaGVyaXRTY2FsZSA9IHRoaXMuaW5oZXJpdFNjYWxlLFxuICAgICAgICBpbmhlcml0Um90YXRpb24gPSB0aGlzLmluaGVyaXRSb3RhdGlvbjtcblxuICAgIHVuaWZvcm0uY29weSh0cmFuc2Zvcm0ubWF0cml4KTtcblxuICAgIGlmIChwYXJlbnQgJiYgdGhpcy5wYXJlbnRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgTUFULmNvcHkocGFyZW50LmJvbmUudW5pZm9ybSk7XG5cbiAgICAgICAgaWYgKCFpbmhlcml0UG9zaXRpb24gfHwgIWluaGVyaXRTY2FsZSB8fCAhaW5oZXJpdFJvdGF0aW9uKSB7XG4gICAgICAgICAgICBNQVQuZGVjb21wb3NlKFBPU0lUSU9OLCBTQ0FMRSwgUk9UQVRJT04pO1xuXG4gICAgICAgICAgICBpZiAoIWluaGVyaXRQb3NpdGlvbikgUE9TSVRJT04uc2V0KDAuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgaWYgKCFpbmhlcml0U2NhbGUpIFNDQUxFLnNldCgxLjAsIDEuMCwgMS4wKTtcbiAgICAgICAgICAgIGlmICghaW5oZXJpdFJvdGF0aW9uKSBST1RBVElPTi5zZXQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcblxuICAgICAgICAgICAgTUFULmNvbXBvc2UoUE9TSVRJT04sIFNDQUxFLCBST1RBVElPTik7XG4gICAgICAgIH1cblxuICAgICAgICB1bmlmb3JtLm1tdWwoTUFULCB1bmlmb3JtKTtcbiAgICB9XG59O1xuXG5cbkJvbmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAganNvbi5wYXJlbnRJbmRleCA9IHRoaXMucGFyZW50SW5kZXg7XG5cbiAgICBqc29uLnNraW5uZWQgPSB0aGlzLnNraW5uZWQ7XG4gICAganNvbi5iaW5kUG9zZSA9IHRoaXMuYmluZFBvc2UudG9KU09OKGpzb24uYmluZFBvc2UpO1xuXG4gICAganNvbi5pbmhlcml0UG9zaXRpb24gPSB0aGlzLmluaGVyaXRQb3NpdGlvbjtcbiAgICBqc29uLmluaGVyaXRSb3RhdGlvbiA9IHRoaXMuaW5oZXJpdFJvdGF0aW9uO1xuICAgIGpzb24uaW5oZXJpdFNjYWxlID0gdGhpcy5pbmhlcml0U2NhbGU7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuQm9uZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIHRoaXMubmFtZSA9IGpzb24ubmFtZTtcbiAgICB0aGlzLnBhcmVudEluZGV4ID0ganNvbi5wYXJlbnRJbmRleDtcblxuICAgIHRoaXMuc2tpbm5lZCA9IGpzb24uc2tpbm5lZDtcbiAgICB0aGlzLmJpbmRQb3NlLmZyb21KU09OKGpzb24uYmluZFBvc2UpO1xuXG4gICAgdGhpcy5pbmhlcml0UG9zaXRpb24gPSBqc29uLmluaGVyaXRQb3NpdGlvbjtcbiAgICB0aGlzLmluaGVyaXRSb3RhdGlvbiA9IGpzb24uaW5oZXJpdFJvdGF0aW9uO1xuICAgIHRoaXMuaW5oZXJpdFNjYWxlID0ganNvbi5pbmhlcml0U2NhbGU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBCb25lO1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0aGZcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9jb2xvclwiKTtcbnZhciBWZWMzID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjM1wiKTtcbnZhciBNYXQ0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0NFwiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZGVnc1RvUmFkcyA9IE1hdGhmLmRlZ3NUb1JhZHMsXG4gICAgY2xhbXAgPSBNYXRoZi5jbGFtcCxcbiAgICBFUFNJTE9OID0gTWF0aGYuRVBTSUxPTjtcblxuXG5mdW5jdGlvbiBDYW1lcmEob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIkNhbWVyYVwiLCBvcHRzKTtcblxuICAgIHRoaXMud2lkdGggPSA5NjA7XG4gICAgdGhpcy5oZWlnaHQgPSA2NDA7XG4gICAgdGhpcy5pbnZXaWR0aCA9IDEgLyB0aGlzLndpZHRoO1xuICAgIHRoaXMuaW52SGVpZ2h0ID0gMSAvIHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5hdXRvUmVzaXplID0gb3B0cy5hdXRvUmVzaXplICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5hdXRvUmVzaXplIDogdHJ1ZTtcbiAgICB0aGlzLmJhY2tncm91bmQgPSBvcHRzLmJhY2tncm91bmQgIT0gdW5kZWZpbmVkID8gb3B0cy5iYWNrZ3JvdW5kIDogbmV3IENvbG9yKDAuNSwgMC41LCAwLjUpO1xuXG4gICAgdGhpcy5hc3BlY3QgPSB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQ7XG4gICAgdGhpcy5mb3YgPSBvcHRzLmZvdiAhPSB1bmRlZmluZWQgPyBvcHRzLmZvdiA6IDM1O1xuXG4gICAgdGhpcy5uZWFyID0gb3B0cy5uZWFyICE9IHVuZGVmaW5lZCA/IG9wdHMubmVhciA6IDAuMDYyNTtcbiAgICB0aGlzLmZhciA9IG9wdHMuZmFyICE9IHVuZGVmaW5lZCA/IG9wdHMuZmFyIDogMTYzODQ7XG5cbiAgICB0aGlzLm9ydGhvZ3JhcGhpYyA9IG9wdHMub3J0aG9ncmFwaGljICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5vcnRob2dyYXBoaWMgOiBmYWxzZTtcbiAgICB0aGlzLm9ydGhvZ3JhcGhpY1NpemUgPSBvcHRzLm9ydGhvZ3JhcGhpY1NpemUgIT0gdW5kZWZpbmVkID8gb3B0cy5vcnRob2dyYXBoaWNTaXplIDogMjtcblxuICAgIHRoaXMubWluT3J0aG9ncmFwaGljU2l6ZSA9IG9wdHMubWluT3J0aG9ncmFwaGljU2l6ZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1pbk9ydGhvZ3JhcGhpY1NpemUgOiBFUFNJTE9OO1xuICAgIHRoaXMubWF4T3J0aG9ncmFwaGljU2l6ZSA9IG9wdHMubWF4T3J0aG9ncmFwaGljU2l6ZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1heE9ydGhvZ3JhcGhpY1NpemUgOiAxMDI0O1xuXG4gICAgdGhpcy5wcm9qZWN0aW9uID0gbmV3IE1hdDQ7XG4gICAgdGhpcy5ndWlQcm9qZWN0aW9uID0gbmV3IE1hdDQ7XG4gICAgdGhpcy52aWV3ID0gbmV3IE1hdDQ7XG5cbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbn1cblxuQ29tcG9uZW50LmV4dGVuZChDYW1lcmEpO1xuXG5cbkNhbWVyYS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy53aWR0aCA9IG90aGVyLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gb3RoZXIuaGVpZ2h0O1xuICAgIHRoaXMuYXNwZWN0ID0gb3RoZXIuYXNwZWN0O1xuXG4gICAgdGhpcy5pbnZXaWR0aCA9IDEgLyB0aGlzLndpZHRoO1xuICAgIHRoaXMuaW52SGVpZ2h0ID0gMSAvIHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5hdXRvUmVzaXplID0gb3RoZXIuYXV0b1Jlc2l6ZTtcbiAgICB0aGlzLmJhY2tncm91bmQuY29weShvdGhlci5iYWNrZ3JvdW5kKTtcblxuICAgIHRoaXMuZmFyID0gb3RoZXIuZmFyO1xuICAgIHRoaXMubmVhciA9IG90aGVyLm5lYXI7XG4gICAgdGhpcy5mb3YgPSBvdGhlci5mb3Y7XG5cbiAgICB0aGlzLm9ydGhvZ3JhcGhpYyA9IG90aGVyLm9ydGhvZ3JhcGhpYztcbiAgICB0aGlzLm9ydGhvZ3JhcGhpY1NpemUgPSBvdGhlci5vcnRob2dyYXBoaWNTaXplO1xuICAgIHRoaXMubWluT3J0aG9ncmFwaGljU2l6ZSA9IG90aGVyLm1pbk9ydGhvZ3JhcGhpY1NpemU7XG4gICAgdGhpcy5tYXhPcnRob2dyYXBoaWNTaXplID0gb3RoZXIubWF4T3J0aG9ncmFwaGljU2l6ZTtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkNhbWVyYS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcblxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgIHRoaXMuaW52V2lkdGggPSAxIC8gdGhpcy53aWR0aDtcbiAgICB0aGlzLmludkhlaWdodCA9IDEgLyB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMuYXNwZWN0ID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cbkNhbWVyYS5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcblxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmFzcGVjdCA9IHdpZHRoIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICB0aGlzLmludldpZHRoID0gMSAvIHRoaXMud2lkdGg7XG5cbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuQ2FtZXJhLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG5cbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmFzcGVjdCA9IHRoaXMud2lkdGggLyBoZWlnaHQ7XG5cbiAgICB0aGlzLmludkhlaWdodCA9IDEgLyB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5DYW1lcmEucHJvdG90eXBlLnNldEZvdiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgdGhpcy5mb3YgPSB2YWx1ZTtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuQ2FtZXJhLnByb3RvdHlwZS5zZXROZWFyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLm5lYXIgPSB2YWx1ZTtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuQ2FtZXJhLnByb3RvdHlwZS5zZXRGYXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgIHRoaXMuZmFyID0gdmFsdWU7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cbkNhbWVyYS5wcm90b3R5cGUuc2V0T3J0aG9ncmFwaGljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLm9ydGhvZ3JhcGhpYyA9ICEhdmFsdWU7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cbkNhbWVyYS5wcm90b3R5cGUudG9nZ2xlT3J0aG9ncmFwaGljID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5vcnRob2dyYXBoaWMgPSAhdGhpcy5vcnRob2dyYXBoaWM7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cbkNhbWVyYS5wcm90b3R5cGUuc2V0T3J0aG9ncmFwaGljU2l6ZSA9IGZ1bmN0aW9uIChzaXplKSB7XG5cbiAgICB0aGlzLm9ydGhvZ3JhcGhpY1NpemUgPSBjbGFtcChzaXplLCB0aGlzLm1pbk9ydGhvZ3JhcGhpY1NpemUsIHRoaXMubWF4T3J0aG9ncmFwaGljU2l6ZSk7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cbnZhciBNQVQ0ID0gbmV3IE1hdDQsXG4gICAgVkVDMyA9IG5ldyBWZWMzO1xuXG5DYW1lcmEucHJvdG90eXBlLnRvV29ybGQgPSBmdW5jdGlvbiAodiwgb3V0KSB7XG4gICAgb3V0IHx8IChvdXQgPSBuZXcgVmVjMyk7XG5cbiAgICBvdXQueCA9IDIuMCAqICh2LnggKiB0aGlzLmludldpZHRoKSAtIDEuMDtcbiAgICBvdXQueSA9IC0yLjAgKiAodi55ICogdGhpcy5pbnZIZWlnaHQpICsgMS4wO1xuICAgIG91dC50cmFuc2Zvcm1NYXQ0KE1BVDQubW11bCh0aGlzLnByb2plY3Rpb24sIHRoaXMudmlldykuaW52ZXJzZSgpKTtcbiAgICBvdXQueiA9IHRoaXMubmVhcjtcblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG5cbkNhbWVyYS5wcm90b3R5cGUudG9TY3JlZW4gPSBmdW5jdGlvbiAodiwgb3V0KSB7XG4gICAgb3V0IHx8IChvdXQgPSBuZXcgVmVjMik7XG5cbiAgICBWRUMzLmNvcHkodik7XG4gICAgVkVDMy50cmFuc2Zvcm1NYXQ0KE1BVDQubW11bCh0aGlzLnByb2plY3Rpb24sIHRoaXMudmlldykpO1xuXG4gICAgb3V0LnggPSAoKFZFQzMueCArIDEuMCkgKiAwLjUpICogdGhpcy53aWR0aDtcbiAgICBvdXQueSA9ICgoMS4wIC0gVkVDMy55KSAqIDAuNSkgKiB0aGlzLmhlaWdodDtcblxuICAgIHJldHVybiB2O1xufTtcblxuXG5DYW1lcmEucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgIGlmICghZm9yY2UgJiYgIXRoaXMuX2FjdGl2ZSkgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMubmVlZHNVcGRhdGUpIHtcblxuICAgICAgICBpZiAoIXRoaXMub3J0aG9ncmFwaGljKSB7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb24ucGVyc3BlY3RpdmUoZGVnc1RvUmFkcyh0aGlzLmZvdiksIHRoaXMuYXNwZWN0LCB0aGlzLm5lYXIsIHRoaXMuZmFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3J0aG9ncmFwaGljU2l6ZSA9IGNsYW1wKHRoaXMub3J0aG9ncmFwaGljU2l6ZSwgdGhpcy5taW5PcnRob2dyYXBoaWNTaXplLCB0aGlzLm1heE9ydGhvZ3JhcGhpY1NpemUpO1xuXG4gICAgICAgICAgICB2YXIgb3J0aG9ncmFwaGljU2l6ZSA9IHRoaXMub3J0aG9ncmFwaGljU2l6ZSxcbiAgICAgICAgICAgICAgICByaWdodCA9IG9ydGhvZ3JhcGhpY1NpemUgKiB0aGlzLmFzcGVjdCxcbiAgICAgICAgICAgICAgICBsZWZ0ID0gLXJpZ2h0LFxuICAgICAgICAgICAgICAgIHRvcCA9IG9ydGhvZ3JhcGhpY1NpemUsXG4gICAgICAgICAgICAgICAgYm90dG9tID0gLXRvcDtcblxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLm9ydGhvZ3JhcGhpYyhsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ndWlQcm9qZWN0aW9uLm9ydGhvZ3JhcGhpYygwLCB0aGlzLndpZHRoLCAwLCB0aGlzLmhlaWdodCwgLTEsIDEpO1xuXG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXcuaW52ZXJzZU1hdCgodGhpcy50cmFuc2Zvcm0gfHwgdGhpcy50cmFuc2Zvcm0yZCkubWF0cml4V29ybGQpO1xufTtcblxuXG5DYW1lcmEucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICBqc29uLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIGpzb24uYXNwZWN0ID0gdGhpcy5hc3BlY3Q7XG5cbiAgICBqc29uLmF1dG9SZXNpemUgPSB0aGlzLmF1dG9SZXNpemU7XG4gICAganNvbi5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTihqc29uLmJhY2tncm91bmQpO1xuXG4gICAganNvbi5mYXIgPSB0aGlzLmZhcjtcbiAgICBqc29uLm5lYXIgPSB0aGlzLm5lYXI7XG4gICAganNvbi5mb3YgPSB0aGlzLmZvdjtcblxuICAgIGpzb24ub3J0aG9ncmFwaGljID0gdGhpcy5vcnRob2dyYXBoaWM7XG4gICAganNvbi5vcnRob2dyYXBoaWNTaXplID0gdGhpcy5vcnRob2dyYXBoaWNTaXplO1xuICAgIGpzb24ubWluT3J0aG9ncmFwaGljU2l6ZSA9IHRoaXMubWluT3J0aG9ncmFwaGljU2l6ZTtcbiAgICBqc29uLm1heE9ydGhvZ3JhcGhpY1NpemUgPSB0aGlzLm1heE9ydGhvZ3JhcGhpY1NpemU7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuQ2FtZXJhLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy53aWR0aCA9IGpzb24ud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBqc29uLmhlaWdodDtcbiAgICB0aGlzLmFzcGVjdCA9IGpzb24uYXNwZWN0O1xuXG4gICAgdGhpcy5hdXRvUmVzaXplID0ganNvbi5hdXRvUmVzaXplO1xuICAgIHRoaXMuYmFja2dyb3VuZC5mcm9tSlNPTihqc29uLmJhY2tncm91bmQpO1xuXG4gICAgdGhpcy5mYXIgPSBqc29uLmZhcjtcbiAgICB0aGlzLm5lYXIgPSBqc29uLm5lYXI7XG4gICAgdGhpcy5mb3YgPSBqc29uLmZvdjtcblxuICAgIHRoaXMub3J0aG9ncmFwaGljID0ganNvbi5vcnRob2dyYXBoaWM7XG4gICAgdGhpcy5vcnRob2dyYXBoaWNTaXplID0ganNvbi5vcnRob2dyYXBoaWNTaXplO1xuICAgIHRoaXMubWluT3J0aG9ncmFwaGljU2l6ZSA9IGpzb24ubWluT3J0aG9ncmFwaGljU2l6ZTtcbiAgICB0aGlzLm1heE9ydGhvZ3JhcGhpY1NpemUgPSBqc29uLm1heE9ydGhvZ3JhcGhpY1NpemU7XG5cbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbWVyYTtcbiIsInZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIENvbG9yID0gcmVxdWlyZShcIi4uLy4uL21hdGgvY29sb3JcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgTWF0MzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXQzMlwiKTtcbnZhciBNYXQ0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0NFwiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY2xhbXAgPSBNYXRoZi5jbGFtcCxcbiAgICBFUFNJTE9OID0gTWF0aGYuRVBTSUxPTjtcblxuXG5mdW5jdGlvbiBDYW1lcmEyRChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENvbXBvbmVudC5jYWxsKHRoaXMsIFwiQ2FtZXJhMkRcIiwgb3B0cyk7XG5cbiAgICB0aGlzLndpZHRoID0gOTYwO1xuICAgIHRoaXMuaGVpZ2h0ID0gNjQwO1xuICAgIHRoaXMuaW52V2lkdGggPSAxIC8gdGhpcy53aWR0aDtcbiAgICB0aGlzLmludkhlaWdodCA9IDEgLyB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMuYXV0b1Jlc2l6ZSA9IG9wdHMuYXV0b1Jlc2l6ZSAhPSB1bmRlZmluZWQgPyAhIW9wdHMuYXV0b1Jlc2l6ZSA6IHRydWU7XG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gb3B0cy5iYWNrZ3JvdW5kICE9IHVuZGVmaW5lZCA/IG9wdHMuYmFja2dyb3VuZCA6IG5ldyBDb2xvcigwLjUsIDAuNSwgMC41KTtcblxuICAgIHRoaXMuYXNwZWN0ID0gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5vcnRob2dyYXBoaWNTaXplID0gb3B0cy5vcnRob2dyYXBoaWNTaXplICE9IHVuZGVmaW5lZCA/IG9wdHMub3J0aG9ncmFwaGljU2l6ZSA6IDI7XG5cbiAgICB0aGlzLm1pbk9ydGhvZ3JhcGhpY1NpemUgPSBvcHRzLm1pbk9ydGhvZ3JhcGhpY1NpemUgIT0gdW5kZWZpbmVkID8gb3B0cy5taW5PcnRob2dyYXBoaWNTaXplIDogRVBTSUxPTjtcbiAgICB0aGlzLm1heE9ydGhvZ3JhcGhpY1NpemUgPSBvcHRzLm1heE9ydGhvZ3JhcGhpY1NpemUgIT0gdW5kZWZpbmVkID8gb3B0cy5tYXhPcnRob2dyYXBoaWNTaXplIDogMTAyNDtcblxuICAgIHRoaXMucHJvamVjdGlvbiA9IG5ldyBNYXQ0O1xuICAgIHRoaXMuX3Byb2plY3Rpb24gPSBuZXcgTWF0MzI7XG4gICAgdGhpcy5ndWlQcm9qZWN0aW9uID0gbmV3IE1hdDQ7XG5cbiAgICB0aGlzLnZpZXcgPSBuZXcgTWF0NDtcbiAgICB0aGlzLl92aWV3ID0gbmV3IE1hdDMyO1xuXG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG59XG5cbkNvbXBvbmVudC5leHRlbmQoQ2FtZXJhMkQpO1xuXG5cbkNhbWVyYTJELnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLndpZHRoID0gb3RoZXIud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBvdGhlci5oZWlnaHQ7XG5cbiAgICB0aGlzLmludldpZHRoID0gMSAvIHRoaXMud2lkdGg7XG4gICAgdGhpcy5pbnZIZWlnaHQgPSAxIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICB0aGlzLmF1dG9SZXNpemUgPSBvdGhlci5hdXRvUmVzaXplO1xuICAgIHRoaXMuYmFja2dyb3VuZC5jb3B5KG90aGVyLmJhY2tncm91bmQpO1xuXG4gICAgdGhpcy5vcnRob2dyYXBoaWNTaXplID0gb3RoZXIub3J0aG9ncmFwaGljU2l6ZTtcbiAgICB0aGlzLm1pbk9ydGhvZ3JhcGhpY1NpemUgPSBvdGhlci5taW5PcnRob2dyYXBoaWNTaXplO1xuICAgIHRoaXMubWF4T3J0aG9ncmFwaGljU2l6ZSA9IG90aGVyLm1heE9ydGhvZ3JhcGhpY1NpemU7XG5cbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5DYW1lcmEyRC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcblxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgIHRoaXMuaW52V2lkdGggPSAxIC8gdGhpcy53aWR0aDtcbiAgICB0aGlzLmludkhlaWdodCA9IDEgLyB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMuYXNwZWN0ID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cbkNhbWVyYTJELnByb3RvdHlwZS5zZXRXaWR0aCA9IGZ1bmN0aW9uICh3aWR0aCkge1xuXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuYXNwZWN0ID0gd2lkdGggLyB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMuaW52V2lkdGggPSAxIC8gdGhpcy53aWR0aDtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5DYW1lcmEyRC5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5hc3BlY3QgPSB0aGlzLndpZHRoIC8gaGVpZ2h0O1xuXG4gICAgdGhpcy5pbnZIZWlnaHQgPSAxIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuQ2FtZXJhMkQucHJvdG90eXBlLnNldE9ydGhvZ3JhcGhpY1NpemUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuXG4gICAgdGhpcy5vcnRob2dyYXBoaWNTaXplID0gY2xhbXAoc2l6ZSwgdGhpcy5taW5PcnRob2dyYXBoaWNTaXplLCB0aGlzLm1heE9ydGhvZ3JhcGhpY1NpemUpO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG52YXIgTUFUMzIgPSBuZXcgTWF0MzIsXG4gICAgVkVDMiA9IG5ldyBWZWMyO1xuQ2FtZXJhMkQucHJvdG90eXBlLnRvV29ybGQgPSBmdW5jdGlvbiAodiwgb3V0KSB7XG4gICAgb3V0IHx8IChvdXQgPSBuZXcgVmVjMik7XG5cbiAgICBvdXQueCA9IDIgKiAodi54ICogdGhpcy5pbnZXaWR0aCkgLSAxO1xuICAgIG91dC55ID0gLTIgKiAodi55ICogdGhpcy5pbnZIZWlnaHQpICsgMTtcbiAgICBvdXQudHJhbnNmb3JtTWF0MzIoTUFUMzIubW11bCh0aGlzLl9wcm9qZWN0aW9uLCB0aGlzLl92aWV3KS5pbnZlcnNlKCkpO1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cblxuQ2FtZXJhMkQucHJvdG90eXBlLnRvU2NyZWVuID0gZnVuY3Rpb24gKHYsIG91dCkge1xuICAgIG91dCB8fCAob3V0ID0gbmV3IFZlYzIpO1xuXG4gICAgVkVDMi5jb3B5KHYpLnRyYW5zZm9ybU1hdDMyKE1BVDMyLm1tdWwodGhpcy5fcHJvamVjdGlvbiwgdGhpcy5fdmlldykpO1xuXG4gICAgb3V0LnggPSAoKFZFQzIueCArIDEpICogMC41KSAqIHRoaXMud2lkdGg7XG4gICAgb3V0LnkgPSAoKDEgLSBWRUMyLnkpICogMC41KSAqIHRoaXMuaGVpZ2h0O1xuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cblxuQ2FtZXJhMkQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX2FjdGl2ZSkgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMubmVlZHNVcGRhdGUpIHtcbiAgICAgICAgdmFyIG9ydGhvZ3JhcGhpY1NpemUgPSB0aGlzLm9ydGhvZ3JhcGhpY1NpemUsXG4gICAgICAgICAgICByaWdodCA9IG9ydGhvZ3JhcGhpY1NpemUgKiB0aGlzLmFzcGVjdCxcbiAgICAgICAgICAgIGxlZnQgPSAtcmlnaHQsXG4gICAgICAgICAgICB0b3AgPSBvcnRob2dyYXBoaWNTaXplLFxuICAgICAgICAgICAgYm90dG9tID0gLXRvcDtcblxuICAgICAgICB0aGlzLnByb2plY3Rpb24ub3J0aG9ncmFwaGljKGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgLTEsIDEpO1xuICAgICAgICB0aGlzLl9wcm9qZWN0aW9uLmZyb21NYXQ0KHRoaXMucHJvamVjdGlvbik7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmd1aVByb2plY3Rpb24ub3J0aG9ncmFwaGljKDAsIHRoaXMud2lkdGgsIDAsIHRoaXMuaGVpZ2h0LCAtMSwgMSk7XG4gICAgfVxuXG4gICAgdGhpcy52aWV3LmludmVyc2VNYXQoKHRoaXMudHJhbnNmb3JtIHx8IHRoaXMudHJhbnNmb3JtMmQpLm1hdHJpeFdvcmxkKTtcbiAgICB0aGlzLl92aWV3LmZyb21NYXQ0KHRoaXMudmlldyk7XG59O1xuXG5cbkNhbWVyYTJELnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAganNvbi5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIGpzb24uYXV0b1Jlc2l6ZSA9IHRoaXMuYXV0b1Jlc2l6ZTtcbiAgICBqc29uLmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKGpzb24uYmFja2dyb3VuZCk7XG5cbiAgICBqc29uLm9ydGhvZ3JhcGhpY1NpemUgPSB0aGlzLm9ydGhvZ3JhcGhpY1NpemU7XG4gICAganNvbi5taW5PcnRob2dyYXBoaWNTaXplID0gdGhpcy5taW5PcnRob2dyYXBoaWNTaXplO1xuICAgIGpzb24ubWF4T3J0aG9ncmFwaGljU2l6ZSA9IHRoaXMubWF4T3J0aG9ncmFwaGljU2l6ZTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5DYW1lcmEyRC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIHRoaXMud2lkdGggPSBqc29uLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0ganNvbi5oZWlnaHQ7XG5cbiAgICB0aGlzLmF1dG9SZXNpemUgPSBqc29uLmF1dG9SZXNpemU7XG4gICAgdGhpcy5iYWNrZ3JvdW5kLmZyb21KU09OKGpzb24uYmFja2dyb3VuZCk7XG5cbiAgICB0aGlzLm9ydGhvZ3JhcGhpY1NpemUgPSBqc29uLm9ydGhvZ3JhcGhpY1NpemU7XG4gICAgdGhpcy5taW5PcnRob2dyYXBoaWNTaXplID0ganNvbi5taW5PcnRob2dyYXBoaWNTaXplO1xuICAgIHRoaXMubWF4T3J0aG9ncmFwaGljU2l6ZSA9IGpzb24ubWF4T3J0aG9ncmFwaGljU2l6ZTtcblxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2FtZXJhMkQ7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdXRpbFwiKTtcbnZhciBMb2cgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY2FtZWxpemUgPSB1dGlsLmNhbWVsaXplO1xuXG5cbmZ1bmN0aW9uIENvbXBvbmVudCh0eXBlLCBvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcbiAgICBpZiAoIXR5cGUpIExvZy5lcnJvcihcIkNvbXBvbmVudCBkZWZpbmVkIHdpdGhvdXQgYSB0eXBlLCB1c2UgQ29tcG9uZW50LmNhbGwodGhpcywgXFxcIkNvbXBvbmVudE5hbWVcXFwiLCB7IHN5bmM6IEJvb2xlYW4sIGpzb246IEJvb2xlYW4gfSlcIik7XG5cbiAgICBDbGFzcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fdHlwZSA9IHR5cGUgfHwgXCJVbmtub3duQ29tcG9uZW50XCI7XG4gICAgdGhpcy5fbmFtZSA9IGNhbWVsaXplKHRoaXMuX3R5cGUsIHRydWUpO1xuXG4gICAgdGhpcy5zeW5jID0gb3B0cy5zeW5jICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5zeW5jIDogZmFsc2U7XG4gICAgdGhpcy5qc29uID0gb3B0cy5qc29uICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5qc29uIDogdHJ1ZTtcblxuICAgIHRoaXMuZ2FtZU9iamVjdCA9IHVuZGVmaW5lZDtcbn1cblxuQ2xhc3MuZXh0ZW5kKENvbXBvbmVudCk7XG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnN5bmMgPSBvdGhlci5zeW5jO1xuICAgIHRoaXMuanNvbiA9IG90aGVyLmpzb247XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkNvbXBvbmVudC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMub2ZmKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5nYW1lT2JqZWN0KSB7XG4gICAgICAgIExvZy5lcnJvcihcIkNvbXBvbmVudC5kZXN0cm95OiBjYW4ndCBkZXN0cm95IENvbXBvbmVudCBpZiBpdCdzIG5vdCBhZGRlZCB0byBhIEdhbWVPYmplY3RcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuZ2FtZU9iamVjdC5yZW1vdmVDb21wb25lbnQodGhpcyk7XG4gICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKTtcblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Db21wb25lbnQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuZ2FtZU9iamVjdCkge1xuICAgICAgICBMb2cuZXJyb3IoXCJDb21wb25lbnQucmVtb3ZlOiBjYW4ndCByZW1vdmUgQ29tcG9uZW50IGlmIGl0J3Mgbm90IGFkZGVkIHRvIGEgR2FtZU9iamVjdFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5nYW1lT2JqZWN0LnJlbW92ZUNvbXBvbmVudCh0aGlzLCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDbGFzcy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLl90eXBlID0gdGhpcy5fdHlwZTtcbiAgICBqc29uLnN5bmMgPSB0aGlzLnN5bmM7XG4gICAganNvbi5qc29uID0gdGhpcy5qc29uO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkNvbXBvbmVudC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENsYXNzLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5zeW5jID0ganNvbi5zeW5jO1xuICAgIHRoaXMuanNvbiA9IGpzb24uanNvbjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudDtcbiIsInZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBHVUlFbGVtZW50KHR5cGUsIG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ29tcG9uZW50LmNhbGwodGhpcywgdHlwZSB8fCBcIkdVSUVsZW1lbnRcIiwgb3B0cyk7XG59XG5cbkNvbXBvbmVudC5leHRlbmQoR1VJRWxlbWVudCk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBHVUlFbGVtZW50O1xuIiwidmFyIFJlY3QgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9yZWN0XCIpO1xudmFyIENvbG9yID0gcmVxdWlyZShcIi4uLy4uL21hdGgvY29sb3JcIik7XG52YXIgRW51bXMgPSByZXF1aXJlKFwiLi4vZW51bXNcIik7XG52YXIgQXNzZXRzID0gcmVxdWlyZShcIi4uL2Fzc2V0cy9hc3NldHNcIik7XG52YXIgR1VJRWxlbWVudCA9IHJlcXVpcmUoXCIuL2d1aV9lbGVtZW50XCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEZvbnRTdHlsZSA9IEVudW1zLkZvbnRTdHlsZSxcbiAgICBUZXh0QW5jaG9yID0gRW51bXMuVGV4dEFuY2hvcjtcblxuXG5mdW5jdGlvbiBHVUlUZXh0KG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgR1VJRWxlbWVudC5jYWxsKHRoaXMsIFwiR1VJVGV4dFwiLCBvcHRzKTtcblxuICAgIHRoaXMudGV4dCA9IG9wdHMudGV4dCAhPSB1bmRlZmluZWQgPyBvcHRzLnRleHQgOiBcIlwiO1xuXG4gICAgdGhpcy5mb250ID0gb3B0cy5mb250IHx8IFwiQXJpYWxcIjtcbiAgICB0aGlzLmZvbnRTaXplID0gb3B0cy5mb250U2l6ZSB8fCAxNjtcbiAgICB0aGlzLmZvbnRTdHlsZSA9IG9wdHMuZm9udFN0eWxlIHx8IEZvbnRTdHlsZS5Ob3JtYWw7XG4gICAgdGhpcy5saW5lSGVpZ2h0ID0gb3B0cy5saW5lSGVpZ2h0IHx8IDI0O1xuICAgIHRoaXMubGluZVNwYWNpbmcgPSBvcHRzLmxpbmVTcGFjaW5nIHx8IDA7XG5cbiAgICB0aGlzLmNvbG9yID0gb3B0cy5jb2xvciAhPSB1bmRlZmluZWQgPyBvcHRzLmNvbG9yIDogbmV3IENvbG9yKDEsIDEsIDEpO1xuICAgIHRoaXMub2Zmc2V0ID0gb3B0cy5vZmZzZXQgIT0gdW5kZWZpbmVkID8gb3B0cy5vZmZzZXQgOiBuZXcgVmVjMjtcblxuICAgIHRoaXMuYWxpZ25tZW50ID0gb3B0cy5hbGlnbm1lbnQgfHwgVGV4dEFuY2hvci5NaWRkbGVMZWZ0O1xufVxuXG5HVUlFbGVtZW50LmV4dGVuZChHVUlUZXh0KTtcblxuXG5HVUlUZXh0LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnRleHQgPSBvdGhlci50ZXh0O1xuXG4gICAgdGhpcy5mb250ID0gb3RoZXIuZm9udDtcbiAgICB0aGlzLmZvbnRTaXplID0gb3RoZXIuZm9udFNpemU7XG4gICAgdGhpcy5mb250U3R5bGUgPSBvdGhlci5mb250U3R5bGU7XG4gICAgdGhpcy5saW5lSGVpZ2h0ID0gb3RoZXIubGluZUhlaWdodDtcbiAgICB0aGlzLmxpbmVTcGFjaW5nID0gb3RoZXIubGluZVNwYWNpbmc7XG5cbiAgICB0aGlzLmNvbG9yLmNvcHkob3RoZXIuY29sb3IpO1xuICAgIHRoaXMub2Zmc2V0LmNvcHkob3RoZXIub2Zmc2V0KTtcblxuICAgIHRoaXMuYWxpZ25tZW50ID0gb3RoZXIuYWxpZ25tZW50O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSVRleHQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IEdVSUVsZW1lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi50ZXh0ID0gdGhpcy50ZXh0O1xuXG4gICAganNvbi5mb250ID0gdGhpcy5mb250O1xuICAgIGpzb24uZm9udFNpemUgPSB0aGlzLmZvbnRTaXplO1xuICAgIGpzb24uZm9udFN0eWxlID0gdGhpcy5mb250U3R5bGU7XG4gICAganNvbi5saW5lSGVpZ2h0ID0gdGhpcy5saW5lSGVpZ2h0O1xuICAgIGpzb24ubGluZVNwYWNpbmcgPSB0aGlzLmxpbmVTcGFjaW5nO1xuXG4gICAganNvbi5jb2xvciA9IHRoaXMuY29sb3IudG9KU09OKGpzb24uY29sb3IpO1xuICAgIGpzb24ub2Zmc2V0ID0gdGhpcy5vZmZzZXQudG9KU09OKGpzb24ub2Zmc2V0KTtcblxuICAgIGpzb24uYWxpZ25tZW50ID0gdGhpcy5hbGlnbm1lbnQ7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuR1VJVGV4dC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIEdVSUVsZW1lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnRleHQgPSBqc29uLnRleHQ7XG5cbiAgICB0aGlzLmZvbnQgPSBqc29uLmZvbnQ7XG4gICAgdGhpcy5mb250U2l6ZSA9IGpzb24uZm9udFNpemU7XG4gICAgdGhpcy5mb250U3R5bGUgPSBqc29uLmZvbnRTdHlsZTtcbiAgICB0aGlzLmxpbmVIZWlnaHQgPSBqc29uLmxpbmVIZWlnaHQ7XG4gICAgdGhpcy5saW5lU3BhY2luZyA9IGpzb24ubGluZVNwYWNpbmc7XG5cbiAgICB0aGlzLmNvbG9yLmZyb21KU09OKGpzb24uY29sb3IpO1xuICAgIHRoaXMub2Zmc2V0LmZyb21KU09OKGpzb24ub2Zmc2V0KTtcblxuICAgIHRoaXMuYWxpZ25tZW50ID0gdGhpcy5hbGlnbm1lbnQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBHVUlUZXh0O1xuIiwidmFyIFJlY3QgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9yZWN0XCIpO1xudmFyIENvbG9yID0gcmVxdWlyZShcIi4uLy4uL21hdGgvY29sb3JcIik7XG52YXIgQXNzZXRzID0gcmVxdWlyZShcIi4uL2Fzc2V0cy9hc3NldHNcIik7XG52YXIgR1VJRWxlbWVudCA9IHJlcXVpcmUoXCIuL2d1aV9lbGVtZW50XCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gR1VJVGV4dHVyZShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIEdVSUVsZW1lbnQuY2FsbCh0aGlzLCBcIkdVSVRleHR1cmVcIiwgb3B0cyk7XG5cbiAgICB0aGlzLnRleHR1cmUgPSBvcHRzLnRleHR1cmU7XG4gICAgdGhpcy5jb2xvciA9IG9wdHMuY29sb3IgIT0gdW5kZWZpbmVkID8gb3B0cy5jb2xvciA6IG5ldyBDb2xvcigxLCAxLCAxKTtcbiAgICB0aGlzLnBvc2l0aW9uID0gb3B0cy5wb3NpdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uIDogbmV3IFJlY3Q7XG5cbiAgICB0aGlzLnggPSBvcHRzLnggfHwgMDtcbiAgICB0aGlzLnkgPSBvcHRzLnkgfHwgMDtcbiAgICB0aGlzLncgPSBvcHRzLncgfHwgMTtcbiAgICB0aGlzLmggPSBvcHRzLmggfHwgMTtcblxuICAgIHRoaXMuYWxwaGEgPSBvcHRzLmFscGhhICE9IHVuZGVmaW5lZCA/IG9wdHMuYWxwaGEgOiAxO1xufVxuXG5HVUlFbGVtZW50LmV4dGVuZChHVUlUZXh0dXJlKTtcblxuXG5HVUlUZXh0dXJlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnRleHR1cmUgPSBvdGhlci50ZXh0dXJlO1xuICAgIHRoaXMuY29sb3IuY29weShvdGhlci5jb2xvcik7XG4gICAgdGhpcy5wb3NpdGlvbi5jb3B5KG90aGVyLnBvc2l0aW9uKTtcblxuICAgIHRoaXMueCA9IG90aGVyLng7XG4gICAgdGhpcy55ID0gb3RoZXIueTtcbiAgICB0aGlzLncgPSBvdGhlci53O1xuICAgIHRoaXMuaCA9IG90aGVyLmg7XG5cbiAgICB0aGlzLmFscGhhID0gb3RoZXIuYWxwaGE7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJVGV4dHVyZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgR1VJRWxlbWVudC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMudGV4dHVyZSA9IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlUZXh0dXJlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBHVUlFbGVtZW50LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24udGV4dHVyZSA9IHRoaXMudGV4dHVyZSA/IHRoaXMudGV4dHVyZS5uYW1lIDogdW5kZWZpbmVkO1xuICAgIGpzb24uY29sb3IgPSB0aGlzLmNvbG9yLnRvSlNPTihqc29uLmNvbG9yKTtcbiAgICBqc29uLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50b0pTT04oanNvbi5wb3NpdGlvbik7XG5cbiAgICBqc29uLnggPSB0aGlzLng7XG4gICAganNvbi55ID0gdGhpcy55O1xuICAgIGpzb24udyA9IHRoaXMudztcbiAgICBqc29uLmggPSB0aGlzLmg7XG5cbiAgICBqc29uLmFscGhhID0gdGhpcy5hbHBoYTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5HVUlUZXh0dXJlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgR1VJRWxlbWVudC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIHRoaXMudGV4dHVyZSA9IGpzb24udGV4dHVyZSA/IEFzc2V0cy5nZXQoanNvbi50ZXh0dXJlKSA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbG9yLmZyb21KU09OKGpzb24uY29sb3IpO1xuICAgIHRoaXMucG9zaXRpb24uZnJvbUpTT04oanNvbi5wb3NpdGlvbik7XG5cbiAgICB0aGlzLnggPSBqc29uLng7XG4gICAgdGhpcy55ID0ganNvbi55O1xuICAgIHRoaXMudyA9IGpzb24udztcbiAgICB0aGlzLmggPSBqc29uLmg7XG5cbiAgICB0aGlzLmFscGhhID0ganNvbi5hbHBoYTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEdVSVRleHR1cmU7XG4iLCJ2YXIgRW51bXMgPSByZXF1aXJlKFwiLi4vZW51bXNcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzNcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9jb2xvclwiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY29zID0gTWF0aC5jb3MsXG4gICAgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cblxuZnVuY3Rpb24gTGlnaHQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIkxpZ2h0XCIsIG9wdHMpO1xuXG4gICAgdGhpcy50eXBlID0gb3B0cy50eXBlICE9IHVuZGVmaW5lZCA/IG9wdHMudHlwZSA6IEVudW1zLkxpZ2h0VHlwZS5Qb2ludDtcblxuICAgIHRoaXMudmlzaWJsZSA9IG9wdHMudmlzaWJsZSAhPSB1bmRlZmluZWQgPyAhIW9wdHMudmlzaWJsZSA6IHRydWU7XG4gICAgdGhpcy5vbmx5U2hhZG93ID0gb3B0cy5vbmx5U2hhZG93ICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5vbmx5U2hhZG93IDogZmFsc2U7XG4gICAgdGhpcy5jYXN0U2hhZG93ID0gb3B0cy5jYXN0U2hhZG93ICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5jYXN0U2hhZG93IDogdHJ1ZTtcblxuICAgIHRoaXMuY29sb3IgPSBvcHRzLmNvbG9yICE9IHVuZGVmaW5lZCA/IG9wdHMuY29sb3IgOiBuZXcgQ29sb3IoMSwgMSwgMSk7XG4gICAgdGhpcy5lbmVyZ3kgPSBvcHRzLmVuZXJneSAhPSB1bmRlZmluZWQgPyBvcHRzLmVuZXJneSA6IDE7XG4gICAgdGhpcy5kaXN0YW5jZSA9IG9wdHMuZGlzdGFuY2UgIT0gdW5kZWZpbmVkID8gb3B0cy5kaXN0YW5jZSA6IDA7XG5cbiAgICB0aGlzLl9hbmdsZUNvcyA9IDA7XG4gICAgdGhpcy5fYW5nbGUgPSAwO1xuICAgIHRoaXMuYW5nbGUgPSBvcHRzLmFuZ2xlICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5nbGUgOiBNYXRoLlBJICogMC4wNjI1O1xuICAgIHRoaXMuZXhwb25lbnQgPSBvcHRzLmV4cG9uZW50ICE9IHVuZGVmaW5lZCA/IG9wdHMuZXhwb25lbnQgOiAxMDtcblxuICAgIHRoaXMudGFyZ2V0ID0gb3B0cy50YXJnZXQgIT0gdW5kZWZpbmVkID8gb3B0cy50YXJnZXQgOiBuZXcgVmVjMztcbn1cblxuQ29tcG9uZW50LmV4dGVuZChMaWdodCk7XG5cblxuZGVmaW5lUHJvcGVydHkoTGlnaHQucHJvdG90eXBlLCBcImFuZ2xlXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuZ2xlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYW5nbGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fYW5nbGVDb3MgPSBjb3ModmFsdWUpO1xuICAgIH1cbn0pO1xuXG5cbkxpZ2h0LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnR5cGUgPSBvdGhlci50eXBlO1xuXG4gICAgdGhpcy52aXNpYmxlID0gb3RoZXIudmlzaWJsZTtcbiAgICB0aGlzLm9ubHlTaGFkb3cgPSBvdGhlci5vbmx5U2hhZG93O1xuICAgIHRoaXMuY2FzdFNoYWRvdyA9IG90aGVyLmNhc3RTaGFkb3c7XG5cbiAgICB0aGlzLmNvbG9yLmNvcHkob3RoZXIuY29sb3IpO1xuICAgIHRoaXMuZW5lcmd5ID0gb3RoZXIuZW5lcmd5O1xuICAgIHRoaXMuZGlzdGFuY2UgPSBvdGhlci5kaXN0YW5jZTtcbiAgICB0aGlzLmFuZ2xlID0gb3RoZXIuYW5nbGU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuTGlnaHQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLnR5cGUgPSB0aGlzLnR5cGU7XG5cbiAgICBqc29uLnZpc2libGUgPSB0aGlzLnZpc2libGU7XG4gICAganNvbi5vbmx5U2hhZG93ID0gdGhpcy5vbmx5U2hhZG93O1xuICAgIGpzb24uY2FzdFNoYWRvdyA9IHRoaXMuY2FzdFNoYWRvdztcblxuICAgIGpzb24uY29sb3IgPSB0aGlzLmNvbG9yLnRvSlNPTihqc29uLmNvbG9yKTtcbiAgICBqc29uLmVuZXJneSA9IHRoaXMuZW5lcmd5O1xuICAgIGpzb24uZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlO1xuICAgIGpzb24uYW5nbGUgPSB0aGlzLmFuZ2xlO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkxpZ2h0LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy50eXBlID0ganNvbi50eXBlO1xuXG4gICAgdGhpcy52aXNpYmxlID0ganNvbi52aXNpYmxlO1xuICAgIHRoaXMub25seVNoYWRvdyA9IGpzb24ub25seVNoYWRvdztcbiAgICB0aGlzLmNhc3RTaGFkb3cgPSBqc29uLmNhc3RTaGFkb3c7XG5cbiAgICB0aGlzLmNvbG9yLmZyb21KU09OKGpzb24uY29sb3IpO1xuICAgIHRoaXMuZW5lcmd5ID0ganNvbi5lbmVyZ3k7XG4gICAgdGhpcy5kaXN0YW5jZSA9IGpzb24uZGlzdGFuY2U7XG4gICAgdGhpcy5hbmdsZSA9IGpzb24uYW5nbGU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBMaWdodDtcbiIsInZhciBUaW1lID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdGltZVwiKTtcbnZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIE1hdDQgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXQ0XCIpO1xudmFyIFZlYzMgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMzXCIpO1xudmFyIFF1YXQgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9xdWF0XCIpO1xudmFyIEFzc2V0cyA9IHJlcXVpcmUoXCIuLi9hc3NldHMvYXNzZXRzXCIpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcbnZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi9lbnVtc1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjbGFtcDAxID0gTWF0aGYuY2xhbXAwMSxcbiAgICBhYnMgPSBNYXRoLmFicyxcbiAgICBXcmFwTW9kZSA9IEVudW1zLldyYXBNb2RlO1xuXG5cbmZ1bmN0aW9uIE1lc2hBbmltYXRpb24ob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIk1lc2hBbmltYXRpb25cIiwgb3B0cyk7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSBvcHRzLmN1cnJlbnQgIT0gdW5kZWZpbmVkID8gb3B0cy5jdXJyZW50IDogXCJpZGxlXCI7XG4gICAgdGhpcy5tb2RlID0gb3B0cy5tb2RlICE9IHVuZGVmaW5lZCA/IG9wdHMubW9kZSA6IFdyYXBNb2RlLkxvb3A7XG5cbiAgICB0aGlzLnJhdGUgPSBvcHRzLnJhdGUgIT0gdW5kZWZpbmVkID8gb3B0cy5yYXRlIDogMSAvIDI0O1xuXG4gICAgdGhpcy5fdGltZSA9IDA7XG4gICAgdGhpcy5fZnJhbWUgPSAwO1xuICAgIHRoaXMuX2xhc3RGcmFtZSA9IDA7XG4gICAgdGhpcy5fb3JkZXIgPSAxO1xuXG4gICAgdGhpcy5wbGF5aW5nID0gdGhpcy5zaGVldCA/IHRydWUgOiBmYWxzZTtcbn1cblxuQ29tcG9uZW50LmV4dGVuZChNZXNoQW5pbWF0aW9uKTtcblxuXG5NZXNoQW5pbWF0aW9uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSBvdGhlci5jdXJyZW50O1xuICAgIHRoaXMubW9kZSA9IG90aGVyLm1vZGU7XG5cbiAgICB0aGlzLnJhdGUgPSBvdGhlci5yYXRlO1xuXG4gICAgdGhpcy5fdGltZSA9IG90aGVyLl90aW1lO1xuICAgIHRoaXMuX2ZyYW1lID0gb3RoZXIuX2ZyYW1lO1xuICAgIHRoaXMuX2xhc3RGcmFtZSA9IG90aGVyLl9sYXN0RnJhbWU7XG4gICAgdGhpcy5fb3JkZXIgPSBvdGhlci5fb3JkZXI7XG5cbiAgICB0aGlzLnBsYXlpbmcgPSBvdGhlci5wbGF5aW5nO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbk1lc2hBbmltYXRpb24ucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAobmFtZSwgbW9kZSwgcmF0ZSkge1xuICAgIHZhciBtZXNoRmlsdGVyID0gdGhpcy5tZXNoRmlsdGVyO1xuICAgIGlmICgodGhpcy5wbGF5aW5nICYmIHRoaXMuY3VycmVudCA9PT0gbmFtZSkgfHwgIW1lc2hGaWx0ZXIgfHwgIW1lc2hGaWx0ZXIubWVzaC5hbmltYXRpb25zW25hbWVdKSByZXR1cm4gdGhpcztcblxuICAgIHRoaXMuY3VycmVudCA9IG5hbWU7XG4gICAgdGhpcy5yYXRlID0gcmF0ZSAhPSB1bmRlZmluZWQgPyByYXRlIDogKHJhdGUgPSB0aGlzLnJhdGUpO1xuICAgIHRoaXMubW9kZSA9IG1vZGUgfHwgKG1vZGUgPSB0aGlzLm1vZGUpO1xuICAgIHRoaXMuX2ZyYW1lID0gMDtcbiAgICB0aGlzLl9sYXN0RnJhbWUgPSAwO1xuICAgIHRoaXMuX29yZGVyID0gMTtcbiAgICB0aGlzLl90aW1lID0gMDtcblxuICAgIHRoaXMucGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5lbWl0KFwicGxheVwiLCBuYW1lLCBtb2RlLCByYXRlKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5NZXNoQW5pbWF0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYgKHRoaXMucGxheWluZykgdGhpcy5lbWl0KFwic3RvcFwiKTtcbiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9mcmFtZSA9IDA7XG4gICAgdGhpcy5fbGFzdEZyYW1lID0gMDtcbiAgICB0aGlzLl9vcmRlciA9IDE7XG4gICAgdGhpcy5fdGltZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxudmFyIFBPU0lUSU9OID0gbmV3IFZlYzMsXG4gICAgTEFTVF9QT1NJVElPTiA9IG5ldyBWZWMzLFxuICAgIFJPVEFUSU9OID0gbmV3IFF1YXQsXG4gICAgTEFTVF9ST1RBVElPTiA9IG5ldyBRdWF0LFxuICAgIFNDQUxFID0gbmV3IFZlYzMsXG4gICAgTEFTVF9TQ0FMRSA9IG5ldyBWZWMzLFxuICAgIE1BVDQgPSBuZXcgTWF0NDtcblxuTWVzaEFuaW1hdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5wbGF5aW5nKSByZXR1cm47XG4gICAgdmFyIG1lc2hGaWx0ZXIgPSB0aGlzLm1lc2hGaWx0ZXIsXG4gICAgICAgIG1lc2hCb25lcywgbWVzaCwgYm9uZXNMZW5ndGgsIGFscGhhID0gMC4wLFxuICAgICAgICBib25lQ3VycmVudCwgYm9uZVRyYW5zZm9ybSwgdW5pZm9ybSwgcGFyZW50SW5kZXgsIGJvbmVGcmFtZSwgbGFzdEJvbmVGcmFtZSwgcG9zLCByb3QsIHNjbCxcbiAgICAgICAgY3VycmVudCwgZHQsIGNvdW50LCBsZW5ndGgsIG9yZGVyLCBmcmFtZSwgbGFzdEZyYW1lLCBtb2RlLCBmcmFtZVN0YXRlLCBsYXN0RnJhbWVTdGF0ZSwgaTtcblxuICAgIGlmICghbWVzaEZpbHRlcikgcmV0dXJuO1xuICAgIG1lc2hCb25lcyA9IG1lc2hGaWx0ZXIuX2JvbmVzO1xuXG4gICAgbWVzaCA9IG1lc2hGaWx0ZXIubWVzaDtcbiAgICBpZiAoIW1lc2gpIHJldHVybjtcblxuICAgIGlmICghKGJvbmVzTGVuZ3RoID0gbWVzaEJvbmVzLmxlbmd0aCkpIHJldHVybjtcbiAgICBpID0gYm9uZXNMZW5ndGg7XG5cbiAgICBjdXJyZW50ID0gbWVzaC5hbmltYXRpb25zW3RoaXMuY3VycmVudF07XG4gICAgaWYgKCFjdXJyZW50KSByZXR1cm47XG5cbiAgICBkdCA9IFRpbWUuZGVsdGE7XG4gICAgb3JkZXIgPSB0aGlzLl9vcmRlcjtcbiAgICBmcmFtZSA9IHRoaXMuX2ZyYW1lO1xuICAgIGxhc3RGcmFtZSA9IHRoaXMuX2xhc3RGcmFtZTtcbiAgICBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgaWYgKCF0aGlzLnJhdGUgfHwgdGhpcy5yYXRlID09PSBJbmZpbml0eSB8fCB0aGlzLnJhdGUgPCAwKSB7XG4gICAgICAgIGZyYW1lID0gYWJzKGZyYW1lKSAlIGN1cnJlbnQubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3RpbWUgKz0gZHQ7XG4gICAgICAgIGNvdW50ID0gdGhpcy5fdGltZSAvIHRoaXMucmF0ZTtcbiAgICAgICAgYWxwaGEgPSBjb3VudDtcblxuICAgICAgICBpZiAoY291bnQgPj0gMSkge1xuICAgICAgICAgICAgbGFzdEZyYW1lID0gZnJhbWU7XG4gICAgICAgICAgICBhbHBoYSA9IDAuMDtcblxuICAgICAgICAgICAgdGhpcy5fdGltZSA9IDA7XG4gICAgICAgICAgICBsZW5ndGggPSBjdXJyZW50Lmxlbmd0aDtcbiAgICAgICAgICAgIGZyYW1lICs9IChvcmRlciAqIChjb3VudCB8IDApKTtcblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFdyYXBNb2RlLkxvb3ApIHtcbiAgICAgICAgICAgICAgICBmcmFtZSA9IGZyYW1lICUgbGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBXcmFwTW9kZS5PbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yZGVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZSA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBXcmFwTW9kZS5QaW5nUG9uZykge1xuICAgICAgICAgICAgICAgIGlmIChvcmRlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JkZXIgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yZGVyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gV3JhcE1vZGUuQ2xhbXApIHtcbiAgICAgICAgICAgICAgICBpZiAob3JkZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZSA+PSBsZW5ndGgpIGZyYW1lID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUgPCAwKSBmcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWxwaGEgPSBjbGFtcDAxKGFscGhhKTtcbiAgICBmcmFtZVN0YXRlID0gY3VycmVudFtmcmFtZV07XG4gICAgbGFzdEZyYW1lU3RhdGUgPSBjdXJyZW50W2xhc3RGcmFtZV0gfHwgZnJhbWVTdGF0ZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYm9uZUN1cnJlbnQgPSBtZXNoQm9uZXNbaV07XG5cbiAgICAgICAgYm9uZVRyYW5zZm9ybSA9IGJvbmVDdXJyZW50LnRyYW5zZm9ybTtcbiAgICAgICAgdW5pZm9ybSA9IGJvbmVDdXJyZW50LnVuaWZvcm07XG4gICAgICAgIHBhcmVudEluZGV4ID0gYm9uZUN1cnJlbnQucGFyZW50SW5kZXg7XG4gICAgICAgIHBvcyA9IGJvbmVUcmFuc2Zvcm0ucG9zaXRpb247XG4gICAgICAgIHJvdCA9IGJvbmVUcmFuc2Zvcm0ucm90YXRpb247XG4gICAgICAgIHNjbCA9IGJvbmVUcmFuc2Zvcm0uc2NhbGU7XG5cbiAgICAgICAgYm9uZUZyYW1lID0gZnJhbWVTdGF0ZVtpXTtcbiAgICAgICAgbGFzdEJvbmVGcmFtZSA9IGxhc3RGcmFtZVN0YXRlW2ldO1xuXG4gICAgICAgIExBU1RfUE9TSVRJT04ueCA9IGxhc3RCb25lRnJhbWVbMF07XG4gICAgICAgIExBU1RfUE9TSVRJT04ueSA9IGxhc3RCb25lRnJhbWVbMV07XG4gICAgICAgIExBU1RfUE9TSVRJT04ueiA9IGxhc3RCb25lRnJhbWVbMl07XG5cbiAgICAgICAgTEFTVF9ST1RBVElPTi54ID0gbGFzdEJvbmVGcmFtZVszXTtcbiAgICAgICAgTEFTVF9ST1RBVElPTi55ID0gbGFzdEJvbmVGcmFtZVs0XTtcbiAgICAgICAgTEFTVF9ST1RBVElPTi56ID0gbGFzdEJvbmVGcmFtZVs1XTtcbiAgICAgICAgTEFTVF9ST1RBVElPTi53ID0gbGFzdEJvbmVGcmFtZVs2XTtcblxuICAgICAgICBMQVNUX1NDQUxFLnggPSBsYXN0Qm9uZUZyYW1lWzddO1xuICAgICAgICBMQVNUX1NDQUxFLnkgPSBsYXN0Qm9uZUZyYW1lWzhdO1xuICAgICAgICBMQVNUX1NDQUxFLnogPSBsYXN0Qm9uZUZyYW1lWzldO1xuXG4gICAgICAgIFBPU0lUSU9OLnggPSBib25lRnJhbWVbMF07XG4gICAgICAgIFBPU0lUSU9OLnkgPSBib25lRnJhbWVbMV07XG4gICAgICAgIFBPU0lUSU9OLnogPSBib25lRnJhbWVbMl07XG5cbiAgICAgICAgUk9UQVRJT04ueCA9IGJvbmVGcmFtZVszXTtcbiAgICAgICAgUk9UQVRJT04ueSA9IGJvbmVGcmFtZVs0XTtcbiAgICAgICAgUk9UQVRJT04ueiA9IGJvbmVGcmFtZVs1XTtcbiAgICAgICAgUk9UQVRJT04udyA9IGJvbmVGcmFtZVs2XTtcblxuICAgICAgICBTQ0FMRS54ID0gYm9uZUZyYW1lWzddO1xuICAgICAgICBTQ0FMRS55ID0gYm9uZUZyYW1lWzhdO1xuICAgICAgICBTQ0FMRS56ID0gYm9uZUZyYW1lWzldO1xuXG4gICAgICAgIHBvcy52bGVycChMQVNUX1BPU0lUSU9OLCBQT1NJVElPTiwgYWxwaGEpO1xuICAgICAgICByb3QucWxlcnAoTEFTVF9ST1RBVElPTiwgUk9UQVRJT04sIGFscGhhKTtcbiAgICAgICAgc2NsLnZsZXJwKExBU1RfU0NBTEUsIFNDQUxFLCBhbHBoYSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZnJhbWUgPSBmcmFtZTtcbiAgICB0aGlzLl9sYXN0RnJhbWUgPSBsYXN0RnJhbWU7XG59O1xuXG5cbk1lc2hBbmltYXRpb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLmN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAganNvbi5tb2RlID0gdGhpcy5tb2RlO1xuXG4gICAganNvbi5yYXRlID0gdGhpcy5yYXRlO1xuXG4gICAganNvbi5fdGltZSA9IHRoaXMuX3RpbWU7XG4gICAganNvbi5fZnJhbWUgPSB0aGlzLl9mcmFtZTtcbiAgICBqc29uLl9vcmRlciA9IHRoaXMuX29yZGVyO1xuXG4gICAganNvbi5wbGF5aW5nID0gdGhpcy5wbGF5aW5nO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbk1lc2hBbmltYXRpb24ucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSBqc29uLmN1cnJlbnQ7XG4gICAgdGhpcy5tb2RlID0ganNvbi5tb2RlO1xuXG4gICAgdGhpcy5yYXRlID0ganNvbi5yYXRlO1xuXG4gICAgdGhpcy5fdGltZSA9IGpzb24uX3RpbWU7XG4gICAgdGhpcy5fZnJhbWUgPSBqc29uLl9mcmFtZTtcbiAgICB0aGlzLl9vcmRlciA9IGpzb24uX29yZGVyO1xuXG4gICAgdGhpcy5wbGF5aW5nID0ganNvbi5wbGF5aW5nO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWVzaEFuaW1hdGlvbjtcbiIsInZhciBBc3NldHMgPSByZXF1aXJlKFwiLi4vYXNzZXRzL2Fzc2V0c1wiKTtcbnZhciBHYW1lT2JqZWN0ID0gcmVxdWlyZShcIi4uL2dhbWVfb2JqZWN0XCIpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcbnZhciBCb25lID0gcmVxdWlyZShcIi4vYm9uZVwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQGNsYXNzIE1lc2hGaWx0ZXJcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICogQGJyaWVmIGJhc2UgY2xhc3MgZm9yIGhhbmRsaW5nIG1lc2hlc1xuICogQHBhcmFtIE9iamVjdCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIE1lc2hGaWx0ZXIob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIk1lc2hGaWx0ZXJcIiwgb3B0cyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTWVzaCBtZXNoXG4gICAgICogQG1lbWJlcm9mIE1lc2hGaWx0ZXJcbiAgICAgKi9cbiAgICB0aGlzLm1lc2ggPSBvcHRzLm1lc2ggIT0gdW5kZWZpbmVkID8gb3B0cy5tZXNoIDogdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE1hdGVyaWFsIG1hdGVyaWFsXG4gICAgICogQG1lbWJlcm9mIE1lc2hGaWx0ZXJcbiAgICAgKi9cbiAgICB0aGlzLm1hdGVyaWFsID0gb3B0cy5tYXRlcmlhbCAhPSB1bmRlZmluZWQgPyBvcHRzLm1hdGVyaWFsIDogdW5kZWZpbmVkO1xuXG5cbiAgICB0aGlzLl9ib25lcyA9IFtdO1xuICAgIHRoaXMuX3dlYmdsTWVzaEluaXR0ZWQgPSBmYWxzZTtcbn1cblxuQ29tcG9uZW50LmV4dGVuZChNZXNoRmlsdGVyKTtcblxuXG5NZXNoRmlsdGVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLm1lc2ggPSBvdGhlci5tZXNoO1xuICAgIHRoaXMubWF0ZXJpYWwgPSBvdGhlci5tYXRlcmlhbDtcblxuICAgIHRoaXMuX2JvbmVzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fd2ViZ2xNZXNoSW5pdHRlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbk1lc2hGaWx0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtLFxuICAgICAgICBib25lcyA9IHRoaXMuX2JvbmVzLFxuICAgICAgICBtZXNoQm9uZXMgPSB0aGlzLm1lc2guYm9uZXMsXG4gICAgICAgIHN1YkdhbWVPYmplY3QsIG1lc2hCb25lLCBib25lLCBwYXJlbnQsXG4gICAgICAgIGkgPSBtZXNoQm9uZXMubGVuZ3RoO1xuXG4gICAgaWYgKCFpKSByZXR1cm47XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG1lc2hCb25lID0gbWVzaEJvbmVzW2ldO1xuXG4gICAgICAgIHN1YkdhbWVPYmplY3QgPSBuZXcgR2FtZU9iamVjdCgpLmFkZENvbXBvbmVudHMoXG4gICAgICAgICAgICBuZXcgQm9uZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogbWVzaEJvbmUubmFtZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRJbmRleDogbWVzaEJvbmUucGFyZW50SW5kZXgsXG5cbiAgICAgICAgICAgICAgICBza2lubmVkOiBtZXNoQm9uZS5za2lubmVkLFxuICAgICAgICAgICAgICAgIGJpbmRQb3NlOiBtZXNoQm9uZS5iaW5kUG9zZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgVHJhbnNmb3JtKHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbWVzaEJvbmUucG9zaXRpb24uY2xvbmUoKSxcbiAgICAgICAgICAgICAgICByb3RhdGlvbjogbWVzaEJvbmUucm90YXRpb24uY2xvbmUoKSxcbiAgICAgICAgICAgICAgICBzY2FsZTogbWVzaEJvbmUuc2NhbGUuY2xvbmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgc3ViR2FtZU9iamVjdC5uYW1lID0gbWVzaEJvbmUubmFtZTtcbiAgICAgICAgYm9uZXNbaV0gPSBzdWJHYW1lT2JqZWN0LmJvbmU7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtLmFkZENoaWxkKGJvbmVzWzBdLnRyYW5zZm9ybSk7XG5cbiAgICBpID0gbWVzaEJvbmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGJvbmUgPSBib25lc1tpXTtcbiAgICAgICAgcGFyZW50ID0gYm9uZXNbYm9uZS5wYXJlbnRJbmRleF07XG4gICAgICAgIGlmICghcGFyZW50KSBjb250aW51ZTtcblxuICAgICAgICBwYXJlbnQudHJhbnNmb3JtLmFkZENoaWxkKGJvbmUudHJhbnNmb3JtKTtcbiAgICB9XG59O1xuXG5cbk1lc2hGaWx0ZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubWVzaCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1hdGVyaWFsID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fYm9uZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLl93ZWJnbE1lc2hJbml0dGVkID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuTWVzaEZpbHRlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gQ29tcG9uZW50LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24ubWVzaCA9IHRoaXMubWVzaCA/IHRoaXMubWVzaC5uYW1lIDogdW5kZWZpbmVkO1xuICAgIGpzb24ubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsID8gdGhpcy5tYXRlcmlhbC5uYW1lIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbk1lc2hGaWx0ZXIucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLm1lc2ggPSBqc29uLm1lc2ggPyBBc3NldHMuZ2V0KGpzb24ubWVzaCkgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXRlcmlhbCA9IGpzb24ubWF0ZXJpYWwgPyBBc3NldHMuZ2V0KGpzb24ubWF0ZXJpYWwpIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fYm9uZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLl93ZWJnbE1lc2hJbml0dGVkID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNoRmlsdGVyO1xuIiwidmFyIERldmljZSA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2RldmljZVwiKTtcbnZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIFZlYzMgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMzXCIpO1xudmFyIElucHV0ID0gcmVxdWlyZShcIi4uL2lucHV0L2lucHV0XCIpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBwb3cgPSBNYXRoLnBvdyxcbiAgICBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIHNpbiA9IE1hdGguc2luLFxuICAgIGNvcyA9IE1hdGguY29zLFxuICAgIHRhbiA9IE1hdGgudGFuLFxuICAgIGF0YW4yID0gTWF0aC5hdGFuMixcbiAgICBtaW4gPSBNYXRoLm1pbixcbiAgICBtYXggPSBNYXRoLm1heCxcbiAgICBQSSA9IE1hdGguUEksXG4gICAgTUlOX1BPTE9SID0gMCxcbiAgICBNQVhfUE9MT1IgPSBQSSxcblxuICAgIGRlZ3NUb1JhZHMgPSBNYXRoZi5kZWdzVG9SYWRzLFxuICAgIEVQU0lMT04gPSBNYXRoZi5FUFNJTE9OLFxuXG4gICAgTk9ORSA9IDEsXG4gICAgUk9UQVRFID0gMixcbiAgICBQQU4gPSAzO1xuXG5cbmZ1bmN0aW9uIE9yYml0Q29udHJvbChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENvbXBvbmVudC5jYWxsKHRoaXMsIFwiT3JiaXRDb250cm9sXCIsIG9wdHMpO1xuXG4gICAgdGhpcy5zcGVlZCA9IG9wdHMuc3BlZWQgPiBFUFNJTE9OID8gb3B0cy5zcGVlZCA6IDE7XG4gICAgdGhpcy56b29tU3BlZWQgPSBvcHRzLnpvb21TcGVlZCA+IEVQU0lMT04gPyBvcHRzLnpvb21TcGVlZCA6IDI7XG5cbiAgICB0aGlzLmFsbG93Wm9vbSA9IG9wdHMuYWxsb3dab29tICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5hbGxvd1pvb20gOiB0cnVlO1xuICAgIHRoaXMuYWxsb3dQYW4gPSBvcHRzLmFsbG93UGFuICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5hbGxvd1BhbiA6IHRydWU7XG4gICAgdGhpcy5hbGxvd1JvdGF0ZSA9IG9wdHMuYWxsb3dSb3RhdGUgIT0gdW5kZWZpbmVkID8gISFvcHRzLmFsbG93Um90YXRlIDogdHJ1ZTtcblxuICAgIHRoaXMudGFyZ2V0ID0gb3B0cy50YXJnZXQgfHwgbmV3IFZlYzM7XG5cbiAgICB0aGlzLl9vZmZzZXQgPSBuZXcgVmVjMztcbiAgICB0aGlzLl9wYW4gPSBuZXcgVmVjMztcbiAgICB0aGlzLl9zY2FsZSA9IDE7XG4gICAgdGhpcy5fdGhldGFEZWx0YSA9IDA7XG4gICAgdGhpcy5fcGhpRGVsdGEgPSAwO1xuICAgIHRoaXMuX3N0YXRlID0gTk9ORTtcbn1cblxuQ29tcG9uZW50LmV4dGVuZChPcmJpdENvbnRyb2wpO1xuXG5cbk9yYml0Q29udHJvbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5PcmJpdENvbnRyb2wucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYgKERldmljZS5tb2JpbGUpIHtcbiAgICAgICAgSW5wdXQub24oXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25Ub3VjaFN0YXJ0LCB0aGlzKTtcbiAgICAgICAgSW5wdXQub24oXCJ0b3VjaGVuZFwiLCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xuICAgICAgICBJbnB1dC5vbihcInRvdWNobW92ZVwiLCB0aGlzLm9uVG91Y2hNb3ZlLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBJbnB1dC5vbihcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXAsIHRoaXMpO1xuICAgICAgICBJbnB1dC5vbihcIm1vdXNlZG93blwiLCB0aGlzLm9uTW91c2VEb3duLCB0aGlzKTtcbiAgICAgICAgSW5wdXQub24oXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7XG4gICAgICAgIElucHV0Lm9uKFwibW91c2V3aGVlbFwiLCB0aGlzLm9uTW91c2VXaGVlbCwgdGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVPcmJpdCgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbk9yYml0Q29udHJvbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKERldmljZS5tb2JpbGUpIHtcbiAgICAgICAgSW5wdXQub24oXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25Ub3VjaFN0YXJ0LCB0aGlzKTtcbiAgICAgICAgSW5wdXQub24oXCJ0b3VjaGVuZFwiLCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xuICAgICAgICBJbnB1dC5vbihcInRvdWNobW92ZVwiLCB0aGlzLm9uVG91Y2hNb3ZlLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBJbnB1dC5vZmYoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwLCB0aGlzKTtcbiAgICAgICAgSW5wdXQub2ZmKFwibW91c2Vkb3duXCIsIHRoaXMub25Nb3VzZURvd24sIHRoaXMpO1xuICAgICAgICBJbnB1dC5vZmYoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7XG4gICAgICAgIElucHV0Lm9mZihcIm1vdXNld2hlZWxcIiwgdGhpcy5vbk1vdXNlV2hlZWwsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5PcmJpdENvbnRyb2wucHJvdG90eXBlLm9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuZ3RoID0gSW5wdXQudG91Y2hlcy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gUk9UQVRFO1xuICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSAyICYmIHRoaXMuYWxsb3dQYW4pIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBQQU47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBOT05FO1xuICAgIH1cbn07XG5cblxudmFyIExFRlRfTU9VU0UgPSBcIm1vdXNlMFwiLFxuICAgIE1JRERMRV9NT1VTRSA9IFwibW91c2UxXCI7XG5PcmJpdENvbnRyb2wucHJvdG90eXBlLm9uTW91c2VEb3duID0gZnVuY3Rpb24gKGJ1dHRvbikge1xuXG4gICAgaWYgKGJ1dHRvbiA9PT0gTEVGVF9NT1VTRSAmJiB0aGlzLmFsbG93Um90YXRlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gUk9UQVRFO1xuICAgIH0gZWxzZSBpZiAoYnV0dG9uID09PSBNSURETEVfTU9VU0UgJiYgdGhpcy5hbGxvd1Bhbikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFBBTjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IE5PTkU7XG4gICAgfVxufTtcblxuXG5PcmJpdENvbnRyb2wucHJvdG90eXBlLm9uVG91Y2hFbmQgPSBPcmJpdENvbnRyb2wucHJvdG90eXBlLm9uTW91c2VVcCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMuX3N0YXRlID0gTk9ORTtcbn07XG5cblxuT3JiaXRDb250cm9sLnByb3RvdHlwZS5vblRvdWNoTW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdXBkYXRlID0gZmFsc2UsXG4gICAgICAgIHRvdWNoID0gSW5wdXQudG91Y2hlc1swXSxcbiAgICAgICAgZGVsdGEgPSB0b3VjaC5kZWx0YSxcbiAgICAgICAgY2FtZXJhO1xuXG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSBST1RBVEUpIHtcbiAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgY2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cbiAgICAgICAgdGhpcy5fdGhldGFEZWx0YSArPSAyICogUEkgKiBkZWx0YS54ICogY2FtZXJhLmludldpZHRoICogdGhpcy5zcGVlZDtcbiAgICAgICAgdGhpcy5fcGhpRGVsdGEgLT0gMiAqIFBJICogZGVsdGEueSAqIGNhbWVyYS5pbnZIZWlnaHQgKiB0aGlzLnNwZWVkO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IFBBTikge1xuICAgICAgICB1cGRhdGUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMucGFuKGRlbHRhKTtcbiAgICB9XG5cbiAgICB1cGRhdGUgJiYgdGhpcy51cGRhdGVPcmJpdCgpO1xufTtcblxuXG5PcmJpdENvbnRyb2wucHJvdG90eXBlLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB1cGRhdGUgPSBmYWxzZSxcbiAgICAgICAgbW91c2VEZWx0YSA9IElucHV0Lm1vdXNlRGVsdGEsXG4gICAgICAgIGNhbWVyYTtcblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gUk9UQVRFKSB7XG4gICAgICAgIHVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG4gICAgICAgIHRoaXMuX3RoZXRhRGVsdGEgKz0gMiAqIFBJICogbW91c2VEZWx0YS54ICogY2FtZXJhLmludldpZHRoICogdGhpcy5zcGVlZDtcbiAgICAgICAgdGhpcy5fcGhpRGVsdGEgLT0gMiAqIFBJICogbW91c2VEZWx0YS55ICogY2FtZXJhLmludkhlaWdodCAqIHRoaXMuc3BlZWQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gUEFOKSB7XG4gICAgICAgIHVwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5wYW4obW91c2VEZWx0YSk7XG4gICAgfVxuXG4gICAgdXBkYXRlICYmIHRoaXMudXBkYXRlT3JiaXQoKTtcbn07XG5cblxuT3JiaXRDb250cm9sLnByb3RvdHlwZS5vbk1vdXNlV2hlZWwgPSBmdW5jdGlvbiAobW91c2VXaGVlbCkge1xuICAgIGlmICghdGhpcy5hbGxvd1pvb20pIHJldHVybjtcbiAgICB2YXIgdXBkYXRlID0gZmFsc2U7XG5cbiAgICBpZiAobW91c2VXaGVlbCA+IDApIHtcbiAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2NhbGUgKj0gcG93KDAuOTUsIHRoaXMuem9vbVNwZWVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zY2FsZSAvPSBwb3coMC45NSwgdGhpcy56b29tU3BlZWQpO1xuICAgIH1cblxuICAgIHVwZGF0ZSAmJiB0aGlzLnVwZGF0ZU9yYml0KCk7XG59O1xuXG5cbk9yYml0Q29udHJvbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbnZhciBwYW5PZmZzZXQgPSBuZXcgVmVjMztcbk9yYml0Q29udHJvbC5wcm90b3R5cGUucGFuID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgdmFyIHBhbiA9IHRoaXMuX3BhbixcbiAgICAgICAgY2FtZXJhID0gdGhpcy5jYW1lcmEsXG4gICAgICAgIHRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtLFxuICAgICAgICB0ZSA9IHRyYW5zZm9ybS5tYXRyaXhXb3JsZC5lbGVtZW50cyxcbiAgICAgICAgcG9zaXRpb24gPSB0cmFuc2Zvcm0ucG9zaXRpb24sXG4gICAgICAgIHRhcmdldERpc3RhbmNlO1xuXG4gICAgcGFuT2Zmc2V0LnZzdWIocG9zaXRpb24sIHRoaXMudGFyZ2V0KTtcbiAgICB0YXJnZXREaXN0YW5jZSA9IHBhbk9mZnNldC5sZW5ndGgoKTtcblxuICAgIGlmICghY2FtZXJhLm9ydGhvZ3JhcGhpYykge1xuICAgICAgICB0YXJnZXREaXN0YW5jZSAqPSB0YW4oZGVnc1RvUmFkcyhjYW1lcmEuZm92ICogMC41KSk7XG5cbiAgICAgICAgcGFuT2Zmc2V0LnNldCh0ZVswXSwgdGVbMV0sIHRlWzJdKS5zbXVsKC0yICogZGVsdGEueCAqIHRhcmdldERpc3RhbmNlICogY2FtZXJhLmludldpZHRoKTtcbiAgICAgICAgcGFuLmFkZChwYW5PZmZzZXQpO1xuXG4gICAgICAgIHBhbk9mZnNldC5zZXQodGVbNF0sIHRlWzVdLCB0ZVs2XSkuc211bCgyICogZGVsdGEueSAqIHRhcmdldERpc3RhbmNlICogY2FtZXJhLmludkhlaWdodCk7XG4gICAgICAgIHBhbi5hZGQocGFuT2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXREaXN0YW5jZSAqPSBjYW1lcmEub3J0aG9ncmFwaGljU2l6ZSAqIDAuNTtcblxuICAgICAgICBwYW5PZmZzZXQuc2V0KHRlWzBdLCB0ZVsxXSwgdGVbMl0pLnNtdWwoLTIgKiBkZWx0YS54ICogdGFyZ2V0RGlzdGFuY2UgKiBjYW1lcmEuaW52V2lkdGgpO1xuICAgICAgICBwYW4uYWRkKHBhbk9mZnNldCk7XG5cbiAgICAgICAgcGFuT2Zmc2V0LnNldCh0ZVs0XSwgdGVbNV0sIHRlWzZdKS5zbXVsKDIgKiBkZWx0YS55ICogdGFyZ2V0RGlzdGFuY2UgKiBjYW1lcmEuaW52SGVpZ2h0KTtcbiAgICAgICAgcGFuLmFkZChwYW5PZmZzZXQpO1xuICAgIH1cbn07XG5cblxuT3JiaXRDb250cm9sLnByb3RvdHlwZS51cGRhdGVPcmJpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy50cmFuc2Zvcm0sXG4gICAgICAgIHBvc2l0aW9uID0gdHJhbnNmb3JtLnBvc2l0aW9uLFxuICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgICAgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0LFxuICAgICAgICBwYW4gPSB0aGlzLl9wYW4sXG4gICAgICAgIHRoZXRhLCBwaGksIHJhZGl1cztcblxuICAgIG9mZnNldC52c3ViKHBvc2l0aW9uLCB0YXJnZXQpO1xuICAgIHRoZXRhID0gYXRhbjIob2Zmc2V0LngsIG9mZnNldC55KTtcbiAgICBwaGkgPSBhdGFuMihzcXJ0KG9mZnNldC54ICogb2Zmc2V0LnggKyBvZmZzZXQueSAqIG9mZnNldC55KSwgb2Zmc2V0LnopO1xuXG4gICAgdGhldGEgKz0gdGhpcy5fdGhldGFEZWx0YTtcbiAgICBwaGkgKz0gdGhpcy5fcGhpRGVsdGE7XG5cbiAgICBwaGkgPSBtYXgoTUlOX1BPTE9SLCBtaW4oTUFYX1BPTE9SLCBwaGkpKTtcbiAgICBwaGkgPSBtYXgoRVBTSUxPTiwgbWluKFBJIC0gRVBTSUxPTiwgcGhpKSk7XG5cbiAgICByYWRpdXMgPSBvZmZzZXQubGVuZ3RoKCkgKiB0aGlzLl9zY2FsZTtcblxuICAgIHRhcmdldC5hZGQocGFuKTtcblxuICAgIG9mZnNldC54ID0gcmFkaXVzICogc2luKHBoaSkgKiBzaW4odGhldGEpO1xuICAgIG9mZnNldC55ID0gcmFkaXVzICogc2luKHBoaSkgKiBjb3ModGhldGEpO1xuICAgIG9mZnNldC56ID0gcmFkaXVzICogY29zKHBoaSk7XG5cbiAgICBwb3NpdGlvbi52YWRkKHRhcmdldCwgb2Zmc2V0KTtcbiAgICB0cmFuc2Zvcm0ubG9va0F0KHRhcmdldCk7XG5cbiAgICB0aGlzLl9zY2FsZSA9IDE7XG4gICAgdGhpcy5fdGhldGFEZWx0YSA9IDA7XG4gICAgdGhpcy5fcGhpRGVsdGEgPSAwO1xuICAgIHBhbi5zZXQoMCwgMCwgMCk7XG59O1xuXG5cbk9yYml0Q29udHJvbC5wcm90b3R5cGUuc2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuXG4gICAgdGhpcy50YXJnZXQuY29weSh0YXJnZXQpO1xuICAgIHRoaXMudHJhbnNmb3JtLmxvb2tBdCh0aGlzLnRhcmdldCk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gT3JiaXRDb250cm9sO1xuIiwidmFyIE9iamVjdFBvb2wgPSByZXF1aXJlKFwiLi4vLi4vLi4vYmFzZS9vYmplY3RfcG9vbFwiKTtcbnZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2NsYXNzXCIpO1xudmFyIE1hdGhmID0gcmVxdWlyZShcIi4uLy4uLy4uL21hdGgvbWF0aGZcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tYXRoL3ZlYzNcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vLi4vbWF0aC9jb2xvclwiKTtcbnZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi8uLi9lbnVtc1wiKTtcbnZhciBBc3NldHMgPSByZXF1aXJlKFwiLi4vLi4vYXNzZXRzL2Fzc2V0c1wiKTtcbnZhciBUd2VlbiA9IHJlcXVpcmUoXCIuL3R3ZWVuXCIpO1xudmFyIFBhcnRpY2xlID0gcmVxdWlyZShcIi4vcGFydGljbGVcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgRW1pdHRlclR5cGUgPSBFbnVtcy5FbWl0dGVyVHlwZSxcblxuICAgIFBJID0gTWF0aC5QSSxcbiAgICBUV09fUEkgPSBQSSAqIDIsXG5cbiAgICByYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICByYW5kSW50ID0gTWF0aGYucmFuZEludCxcbiAgICByYW5kRmxvYXQgPSBNYXRoZi5yYW5kRmxvYXQsXG4gICAgY2xhbXBUb3AgPSBNYXRoZi5jbGFtcFRvcCxcbiAgICBzcXJ0ID0gTWF0aC5zcXJ0LFxuXG4gICAgUEFSVElDTEVfUE9PTCA9IEVtaXR0ZXIuUEFSVElDTEVfUE9PTCA9IG5ldyBPYmplY3RQb29sKFBhcnRpY2xlKTtcblxuXG5mdW5jdGlvbiBFbWl0dGVyKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ2xhc3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuc29ydCA9IG9wdHMuc29ydCAhPSB1bmRlZmluZWQgPyBvcHRzLnNvcnQgOiB0cnVlO1xuXG4gICAgdGhpcy5wb3NpdGlvblR5cGUgPSBvcHRzLnBvc2l0aW9uVHlwZSAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uVHlwZSA6IEVtaXR0ZXJUeXBlLkJveDtcbiAgICB0aGlzLnZlbG9jaXR5VHlwZSA9IG9wdHMudmVsb2NpdHlUeXBlICE9IHVuZGVmaW5lZCA/IG9wdHMudmVsb2NpdHlUeXBlIDogRW1pdHRlclR5cGUuQm94O1xuXG4gICAgdGhpcy5tYXRlcmlhbCA9IG9wdHMubWF0ZXJpYWwgIT0gdW5kZWZpbmVkID8gb3B0cy5tYXRlcmlhbCA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMucG9zaXRpb25TcHJlYWQgPSBvcHRzLnBvc2l0aW9uU3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMucG9zaXRpb25TcHJlYWQgOiBuZXcgVmVjMygwLjUsIDAuNSwgMC41KTtcbiAgICB0aGlzLnBvc2l0aW9uUmFkaXVzID0gb3B0cy5wb3NpdGlvblJhZGl1cyAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uUmFkaXVzIDogMC41O1xuXG4gICAgdGhpcy5zcGVlZCA9IG9wdHMuc3BlZWQgIT0gdW5kZWZpbmVkID8gb3B0cy5zcGVlZCA6IDA7XG4gICAgdGhpcy5zcGVlZFNwcmVhZCA9IG9wdHMuc3BlZWRTcHJlYWQgIT0gdW5kZWZpbmVkID8gb3B0cy5zcGVlZFNwcmVhZCA6IDA7XG5cbiAgICB0aGlzLnBhcnRpY2xlU3lzdGVtID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy53b3JsZFNwYWNlID0gb3B0cy53b3JsZFNwYWNlICE9IHVuZGVmaW5lZCA/IG9wdHMud29ybGRTcGFjZSA6IHRydWU7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gb3B0cy5wb3NpdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uIDogbmV3IFZlYzM7XG5cbiAgICB0aGlzLm1pbkVtaXNzaW9uID0gb3B0cy5taW5FbWlzc2lvbiAhPSB1bmRlZmluZWQgPyBvcHRzLm1pbkVtaXNzaW9uIDogMTtcbiAgICB0aGlzLm1heEVtaXNzaW9uID0gb3B0cy5tYXhFbWlzc2lvbiAhPSB1bmRlZmluZWQgPyBvcHRzLm1heEVtaXNzaW9uIDogMjtcblxuICAgIHRoaXMubWluTGlmZSA9IG9wdHMubWluTGlmZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1pbkxpZmUgOiAxO1xuICAgIHRoaXMubWF4TGlmZSA9IG9wdHMubWF4TGlmZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1heExpZmUgOiAyO1xuXG4gICAgdGhpcy5taW5TaXplID0gb3B0cy5taW5TaXplICE9IHVuZGVmaW5lZCA/IG9wdHMubWluU2l6ZSA6IDAuMTtcbiAgICB0aGlzLm1heFNpemUgPSBvcHRzLm1heFNpemUgIT0gdW5kZWZpbmVkID8gb3B0cy5tYXhTaXplIDogMC41O1xuXG4gICAgdGhpcy5zaXplVHdlZW4gPSBuZXcgVHdlZW4ob3B0cy5zaXplVHdlZW4pO1xuICAgIHRoaXMuYWxwaGFUd2VlbiA9IG5ldyBUd2VlbihvcHRzLmFscGhhVHdlZW4pO1xuICAgIHRoaXMuY29sb3JUd2VlbiA9IG5ldyBUd2VlbihvcHRzLmNvbG9yVHdlZW4pO1xuXG4gICAgdGhpcy52ZWxvY2l0eSA9IG9wdHMudmVsb2NpdHkgIT0gdW5kZWZpbmVkID8gb3B0cy52ZWxvY2l0eSA6IG5ldyBWZWMzO1xuICAgIHRoaXMudmVsb2NpdHlTcHJlYWQgPSBvcHRzLnZlbG9jaXR5U3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMudmVsb2NpdHlTcHJlYWQgOiBuZXcgVmVjMztcblxuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gb3B0cy5hY2NlbGVyYXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5hY2NlbGVyYXRpb24gOiBuZXcgVmVjMztcbiAgICB0aGlzLmFjY2VsZXJhdGlvblNwcmVhZCA9IG9wdHMuYWNjZWxlcmF0aW9uU3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMuYWNjZWxlcmF0aW9uU3ByZWFkIDogbmV3IFZlYzM7XG5cbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IG9wdHMuYW5ndWxhclZlbG9jaXR5ICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5ndWxhclZlbG9jaXR5IDogMDtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eVNwcmVhZCA9IG9wdHMuYW5ndWxhclZlbG9jaXR5U3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5ndWxhclZlbG9jaXR5U3ByZWFkIDogMDtcblxuICAgIHRoaXMuYW5ndWxhckFjY2VsZXJhdGlvbiA9IG9wdHMuYW5ndWxhckFjY2VsZXJhdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLmFuZ3VsYXJBY2NlbGVyYXRpb24gOiAwO1xuICAgIHRoaXMuYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCA9IG9wdHMuYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCAhPSB1bmRlZmluZWQgPyBvcHRzLmFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQgOiAwO1xuXG4gICAgdGhpcy5yYW5kb21BbmdsZSA9IG9wdHMucmFuZG9tQW5nbGUgIT0gdW5kZWZpbmVkID8gb3B0cy5yYW5kb21BbmdsZSA6IHRydWU7XG5cbiAgICB0aGlzLmVtaXNzaW9uUmF0ZSA9IG9wdHMuZW1pc3Npb25SYXRlICE9IHVuZGVmaW5lZCA/IG9wdHMuZW1pc3Npb25SYXRlIDogMSAvIDYwO1xuXG4gICAgdGhpcy5jb2xvciA9IG9wdHMuY29sb3IgIT0gdW5kZWZpbmVkID8gb3B0cy5jb2xvciA6IG5ldyBDb2xvcjtcbiAgICB0aGlzLmNvbG9yU3ByZWFkID0gb3B0cy5jb2xvclNwcmVhZCAhPSB1bmRlZmluZWQgPyBvcHRzLmNvbG9yU3ByZWFkIDogbmV3IENvbG9yO1xuXG4gICAgdGhpcy50aW1lID0gb3B0cy50aW1lICE9IHVuZGVmaW5lZCA/IG9wdHMudGltZSA6IDA7XG4gICAgdGhpcy5fdGltZSA9IDA7XG5cbiAgICB0aGlzLmR1cmF0aW9uID0gb3B0cy5kdXJhdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLmR1cmF0aW9uIDogMDtcblxuICAgIHRoaXMubG9vcCA9IG9wdHMubG9vcCAhPSB1bmRlZmluZWQgPyBvcHRzLmxvb3AgOiB0cnVlO1xuXG4gICAgdGhpcy5wbGF5aW5nID0gb3B0cy5wbGF5aW5nICE9IHVuZGVmaW5lZCA/IG9wdHMucGxheWluZyA6IHRydWU7XG4gICAgdGhpcy5lbWl0dGluZyA9IG9wdHMuZW1pdHRpbmcgIT0gdW5kZWZpbmVkID8gb3B0cy5lbWl0dGluZyA6IHRydWU7XG5cbiAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xuXG4gICAgdGhpcy5fd2ViZ2xJbml0dGVkID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fd2ViZ2xWZXJ0ZXhCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xQYXJ0aWNsZUJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbFBhcnRpY2xlQ29sb3JCdWZmZXIgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl93ZWJnbFZlcnRleEFycmF5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsUGFydGljbGVBcnJheSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbFBhcnRpY2xlQ29sb3JBcnJheSA9IHVuZGVmaW5lZDtcbn1cblxuQ2xhc3MuZXh0ZW5kKEVtaXR0ZXIpO1xuXG5cbkVtaXR0ZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMuc29ydCA9IG90aGVyLnNvcnQ7XG5cbiAgICB0aGlzLnBvc2l0aW9uVHlwZSA9IG90aGVyLnBvc2l0aW9uVHlwZTtcbiAgICB0aGlzLnZlbG9jaXR5VHlwZSA9IG90aGVyLnZlbG9jaXR5VHlwZTtcblxuICAgIHRoaXMubWF0ZXJpYWwgPSBvdGhlci5tYXRlcmlhbDtcblxuICAgIHRoaXMucG9zaXRpb24uY29weShvdGhlci5wb3NpdGlvbik7XG4gICAgdGhpcy5wb3NpdGlvblNwcmVhZC5jb3B5KG90aGVyLnBvc2l0aW9uU3ByZWFkKTtcbiAgICB0aGlzLnBvc2l0aW9uUmFkaXVzID0gb3RoZXIucG9zaXRpb25SYWRpdXM7XG5cbiAgICB0aGlzLnNwZWVkID0gb3RoZXIuc3BlZWQ7XG4gICAgdGhpcy5zcGVlZFNwcmVhZCA9IG90aGVyLnNwZWVkU3ByZWFkO1xuXG4gICAgdGhpcy53b3JsZFNwYWNlID0gb3RoZXIud29ybGRTcGFjZTtcblxuICAgIHRoaXMubWluRW1pc3Npb24gPSBvdGhlci5taW5FbWlzc2lvbjtcbiAgICB0aGlzLm1heEVtaXNzaW9uID0gb3RoZXIubWF4RW1pc3Npb247XG5cbiAgICB0aGlzLm1pbkxpZmUgPSBvdGhlci5taW5MaWZlO1xuICAgIHRoaXMubWF4TGlmZSA9IG90aGVyLm1heExpZmU7XG5cbiAgICB0aGlzLm1pblNpemUgPSBvdGhlci5taW5TaXplO1xuICAgIHRoaXMubWF4U2l6ZSA9IG90aGVyLm1heFNpemU7XG5cbiAgICB0aGlzLnNpemVUd2Vlbi5jb3B5KG90aGVyLnNpemVUd2Vlbik7XG4gICAgdGhpcy5hbHBoYVR3ZWVuLmNvcHkob3RoZXIuYWxwaGFUd2Vlbik7XG4gICAgdGhpcy5jb2xvclR3ZWVuLmNvcHkob3RoZXIuY29sb3JUd2Vlbik7XG5cbiAgICB0aGlzLnZlbG9jaXR5LmNvcHkob3RoZXIudmVsb2NpdHkpO1xuICAgIHRoaXMudmVsb2NpdHlTcHJlYWQuY29weShvdGhlci52ZWxvY2l0eVNwcmVhZCk7XG5cbiAgICB0aGlzLmFjY2VsZXJhdGlvbi5jb3B5KG90aGVyLmFjY2VsZXJhdGlvbik7XG4gICAgdGhpcy5hY2NlbGVyYXRpb25TcHJlYWQuY29weShvdGhlci5hY2NlbGVyYXRpb25TcHJlYWQpO1xuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgPSBvdGhlci5hbmd1bGFyVmVsb2NpdHk7XG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHlTcHJlYWQgPSBvdGhlci5hbmd1bGFyVmVsb2NpdHlTcHJlYWQ7XG5cbiAgICB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24gPSBvdGhlci5hbmd1bGFyQWNjZWxlcmF0aW9uO1xuICAgIHRoaXMuYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCA9IG90aGVyLmFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQ7XG5cbiAgICB0aGlzLnJhbmRvbUFuZ2xlID0gb3RoZXIucmFuZG9tQW5nbGU7XG5cbiAgICB0aGlzLmVtaXNzaW9uUmF0ZSA9IG90aGVyLmVtaXNzaW9uUmF0ZTtcblxuICAgIHRoaXMuY29sb3IuY29weShvdGhlci5jb2xvcik7XG4gICAgdGhpcy5jb2xvclNwcmVhZC5jb3B5KG90aGVyLmNvbG9yU3ByZWFkKTtcblxuICAgIHRoaXMudGltZSA9IG90aGVyLnRpbWU7XG4gICAgdGhpcy5fdGltZSA9IG90aGVyLl90aW1lO1xuXG4gICAgdGhpcy5kdXJhdGlvbiA9IG90aGVyLmR1cmF0aW9uO1xuICAgIHRoaXMubG9vcCA9IG90aGVyLmxvb3A7XG4gICAgdGhpcy5wbGF5aW5nID0gb3RoZXIucGxheWluZztcbiAgICB0aGlzLmVtaXR0aW5nID0gb3RoZXIuZW1pdHRpbmc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuRW1pdHRlci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMudGltZSA9IDA7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmVtaXR0aW5nID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5FbWl0dGVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFydGljbGVzID0gdGhpcy5wYXJ0aWNsZXMsXG4gICAgICAgIGkgPSBwYXJ0aWNsZXMubGVuZ3RoO1xuXG4gICAgdGhpcy50aW1lID0gMDtcbiAgICB0aGlzLl90aW1lID0gMDtcbiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXR0aW5nID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSBQQVJUSUNMRV9QT09MLnJlbW92ZU9iamVjdChwYXJ0aWNsZXNbaV0pO1xuICAgIHBhcnRpY2xlcy5sZW5ndGggPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbnZhciBWRUMgPSBuZXcgVmVjMztcbkVtaXR0ZXIucHJvdG90eXBlLnNwYXduID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMucGFydGljbGVTeXN0ZW0udHJhbnNmb3JtIHx8IHRoaXMucGFydGljbGVTeXN0ZW0udHJhbnNmb3JtMmQsXG4gICAgICAgIHRyYW5zZm9ybVBvc2l0aW9uID0gdHJhbnNmb3JtLnRvV29ybGQoVkVDLnNldCgwLCAwLCAwKSksXG4gICAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IHRyYW5zZm9ybS5tYXRyaXhXb3JsZCxcblxuICAgICAgICBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIHBvc2l0aW9uU3ByZWFkID0gdGhpcy5wb3NpdGlvblNwcmVhZCxcbiAgICAgICAgcG9zaXRpb25SYWRpdXMgPSB0aGlzLnBvc2l0aW9uUmFkaXVzLFxuXG4gICAgICAgIHNwZWVkID0gdGhpcy5zcGVlZCxcbiAgICAgICAgc3BlZWRTcHJlYWQgPSB0aGlzLnNwZWVkU3ByZWFkLFxuXG4gICAgICAgIHBhcnRpY2xlcyA9IHRoaXMucGFydGljbGVzLFxuICAgICAgICBudW1QYXJ0aWNsZTJEcyA9IHBhcnRpY2xlcy5sZW5ndGgsXG5cbiAgICAgICAgd29ybGRTcGFjZSA9IHRoaXMud29ybGRTcGFjZSxcbiAgICAgICAgcmFuZG9tQW5nbGUgPSB0aGlzLnJhbmRvbUFuZ2xlLFxuXG4gICAgICAgIGNvbG9yID0gdGhpcy5jb2xvcixcbiAgICAgICAgY29sb3JTcHJlYWQgPSB0aGlzLmNvbG9yU3ByZWFkLFxuICAgICAgICB1c2VSYW5kQ29sb3IgPSBjb2xvclNwcmVhZC5sZW5ndGhTcSgpID4gMCxcblxuICAgICAgICB2ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHksXG4gICAgICAgIHZlbG9jaXR5U3ByZWFkID0gdGhpcy52ZWxvY2l0eVNwcmVhZCxcblxuICAgICAgICBhY2NlbGVyYXRpb24gPSB0aGlzLmFjY2VsZXJhdGlvbixcbiAgICAgICAgYWNjZWxlcmF0aW9uU3ByZWFkID0gdGhpcy5hY2NlbGVyYXRpb25TcHJlYWQsXG5cbiAgICAgICAgYW5ndWxhclZlbG9jaXR5ID0gdGhpcy5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgIGFuZ3VsYXJWZWxvY2l0eVNwcmVhZCA9IHRoaXMuYW5ndWxhclZlbG9jaXR5U3ByZWFkLFxuXG4gICAgICAgIGFuZ3VsYXJBY2NlbGVyYXRpb24gPSB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24sXG4gICAgICAgIGFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQgPSB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQsXG5cbiAgICAgICAgbWluTGlmZSA9IHRoaXMubWluTGlmZSxcbiAgICAgICAgbWF4TGlmZSA9IHRoaXMubWF4TGlmZSxcblxuICAgICAgICBtaW5TaXplID0gdGhpcy5taW5TaXplLFxuICAgICAgICBtYXhTaXplID0gdGhpcy5tYXhTaXplLFxuXG4gICAgICAgIHBvc2l0aW9uVHlwZSA9IHRoaXMucG9zaXRpb25UeXBlLFxuICAgICAgICB2ZWxvY2l0eVR5cGUgPSB0aGlzLnZlbG9jaXR5VHlwZSxcblxuICAgICAgICBsaW1pdCA9IGNsYW1wVG9wKG51bVBhcnRpY2xlMkRzICsgY291bnQsIEVtaXR0ZXIuTUFYX1BBUlRJQ0xFUykgLSBudW1QYXJ0aWNsZTJEcyxcbiAgICAgICAgcG9zeCwgcG9zeSwgcG9zeiwgdmVsLCBhY2MsIHBvcywgY29sLCB4LCB5LCB6LCBsZW4sIHIsIGR4LCBkeSwgZHosIHNwZCwgcGFydGljbGU7XG5cbiAgICBpZiAocG9zaXRpb25UeXBlICE9PSBFbWl0dGVyVHlwZS5Cb3gpIHtcbiAgICAgICAgcG9zeCA9IHJhbmRGbG9hdCgtcG9zaXRpb25TcHJlYWQueCwgcG9zaXRpb25TcHJlYWQueCk7XG4gICAgICAgIHBvc3kgPSByYW5kRmxvYXQoLXBvc2l0aW9uU3ByZWFkLnksIHBvc2l0aW9uU3ByZWFkLnkpO1xuICAgICAgICBwb3N6ID0gcmFuZEZsb2F0KC1wb3NpdGlvblNwcmVhZC56LCBwb3NpdGlvblNwcmVhZC56KTtcbiAgICB9XG5cbiAgICB3aGlsZSAobGltaXQtLSkge1xuICAgICAgICBwYXJ0aWNsZSA9IFBBUlRJQ0xFX1BPT0wuY3JlYXRlKCk7XG4gICAgICAgIHBvcyA9IHBhcnRpY2xlLnBvc2l0aW9uO1xuICAgICAgICB2ZWwgPSBwYXJ0aWNsZS52ZWxvY2l0eTtcbiAgICAgICAgYWNjID0gcGFydGljbGUuYWNjZWxlcmF0aW9uO1xuICAgICAgICBjb2wgPSBwYXJ0aWNsZS5jb2xvcjtcblxuICAgICAgICBjb2wuciA9IGNvbG9yLnI7XG4gICAgICAgIGNvbC5nID0gY29sb3IuZztcbiAgICAgICAgY29sLmIgPSBjb2xvci5iO1xuXG4gICAgICAgIGlmICh1c2VSYW5kQ29sb3IpIHtcbiAgICAgICAgICAgIGNvbC5yICs9IGNvbG9yU3ByZWFkLnIgKiByYW5kb20oKTtcbiAgICAgICAgICAgIGNvbC5nICs9IGNvbG9yU3ByZWFkLmcgKiByYW5kb20oKTtcbiAgICAgICAgICAgIGNvbC5iICs9IGNvbG9yU3ByZWFkLmIgKiByYW5kb20oKTtcbiAgICAgICAgICAgIGNvbC5jbm9ybWFsaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod29ybGRTcGFjZSkge1xuICAgICAgICAgICAgcG9zLnggPSBwb3NpdGlvbi54ICsgdHJhbnNmb3JtUG9zaXRpb24ueDtcbiAgICAgICAgICAgIHBvcy55ID0gcG9zaXRpb24ueSArIHRyYW5zZm9ybVBvc2l0aW9uLnk7XG4gICAgICAgICAgICBwb3MueiA9IHBvc2l0aW9uLnogKyB0cmFuc2Zvcm1Qb3NpdGlvbi56O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zLnggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgcG9zLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgcG9zLnogPSBwb3NpdGlvbi56O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uVHlwZSA9PT0gRW1pdHRlclR5cGUuQm94KSB7XG4gICAgICAgICAgICBwb3MueCArPSByYW5kRmxvYXQoLXBvc2l0aW9uU3ByZWFkLngsIHBvc2l0aW9uU3ByZWFkLngpO1xuICAgICAgICAgICAgcG9zLnkgKz0gcmFuZEZsb2F0KC1wb3NpdGlvblNwcmVhZC55LCBwb3NpdGlvblNwcmVhZC55KTtcbiAgICAgICAgICAgIHBvcy56ICs9IHJhbmRGbG9hdCgtcG9zaXRpb25TcHJlYWQueiwgcG9zaXRpb25TcHJlYWQueik7XG4gICAgICAgIH0gZWxzZSB7IC8vRW1pdHRlclR5cGUuU3BoZXJlXG4gICAgICAgICAgICB4ID0gcmFuZEZsb2F0KC0xLCAxKTtcbiAgICAgICAgICAgIHkgPSByYW5kRmxvYXQoLTEsIDEpO1xuICAgICAgICAgICAgeiA9IHJhbmRGbG9hdCgtMSwgMSk7XG5cbiAgICAgICAgICAgIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICAgICAgICAgIGxlbiA9IGxlbiAhPT0gMCA/IDEgLyBzcXJ0KGxlbikgOiBsZW47XG5cbiAgICAgICAgICAgIHBvcy54ICs9IHBvc3ggKyB4ICogbGVuICogcG9zaXRpb25SYWRpdXM7XG4gICAgICAgICAgICBwb3MueSArPSBwb3N5ICsgeSAqIGxlbiAqIHBvc2l0aW9uUmFkaXVzO1xuICAgICAgICAgICAgcG9zLnogKz0gcG9zeiArIHogKiBsZW4gKiBwb3NpdGlvblJhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2ZWxvY2l0eVR5cGUgPT09IEVtaXR0ZXJUeXBlLkJveCkge1xuICAgICAgICAgICAgdmVsLnggPSB2ZWxvY2l0eS54ICsgcmFuZEZsb2F0KC12ZWxvY2l0eVNwcmVhZC54LCB2ZWxvY2l0eVNwcmVhZC54KTtcbiAgICAgICAgICAgIHZlbC55ID0gdmVsb2NpdHkueSArIHJhbmRGbG9hdCgtdmVsb2NpdHlTcHJlYWQueSwgdmVsb2NpdHlTcHJlYWQueSk7XG4gICAgICAgICAgICB2ZWwueiA9IHZlbG9jaXR5LnogKyByYW5kRmxvYXQoLXZlbG9jaXR5U3ByZWFkLnosIHZlbG9jaXR5U3ByZWFkLnopO1xuICAgICAgICB9IGVsc2UgeyAvL0VtaXR0ZXJUeXBlLlNwaGVyZVxuICAgICAgICAgICAgaWYgKHdvcmxkU3BhY2UpIHtcbiAgICAgICAgICAgICAgICBkeCA9IHBvcy54IC0gKHBvc2l0aW9uLnggKyB0cmFuc2Zvcm1Qb3NpdGlvbi54KTtcbiAgICAgICAgICAgICAgICBkeSA9IHBvcy55IC0gKHBvc2l0aW9uLnkgKyB0cmFuc2Zvcm1Qb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICBkeiA9IHBvcy56IC0gKHBvc2l0aW9uLnogKyB0cmFuc2Zvcm1Qb3NpdGlvbi56KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHggPSBwb3MueCAtIHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgZHkgPSBwb3MueSAtIHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgZHogPSBwb3MueiAtIHBvc2l0aW9uLno7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGQgPSBzcGVlZCArIHJhbmRGbG9hdCgtc3BlZWRTcHJlYWQsIHNwZWVkU3ByZWFkKTtcblxuICAgICAgICAgICAgciA9IGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejtcbiAgICAgICAgICAgIHIgPSByICE9PSAwID8gMSAvIHNxcnQocikgOiByO1xuXG4gICAgICAgICAgICB2ZWwueCA9IGR4ICogciAqIHNwZDtcbiAgICAgICAgICAgIHZlbC55ID0gZHkgKiByICogc3BkO1xuICAgICAgICAgICAgdmVsLnogPSBkeiAqIHIgKiBzcGQ7XG4gICAgICAgIH1cbiAgICAgICAgdmVsLnRyYW5zZm9ybU1hdDRSb3RhdGlvbih0cmFuc2Zvcm1NYXRyaXgpO1xuXG4gICAgICAgIGFjYy54ID0gYWNjZWxlcmF0aW9uLnggKyByYW5kRmxvYXQoLWFjY2VsZXJhdGlvblNwcmVhZC54LCBhY2NlbGVyYXRpb25TcHJlYWQueCk7XG4gICAgICAgIGFjYy55ID0gYWNjZWxlcmF0aW9uLnkgKyByYW5kRmxvYXQoLWFjY2VsZXJhdGlvblNwcmVhZC55LCBhY2NlbGVyYXRpb25TcHJlYWQueSk7XG4gICAgICAgIGFjYy56ID0gYWNjZWxlcmF0aW9uLnogKyByYW5kRmxvYXQoLWFjY2VsZXJhdGlvblNwcmVhZC56LCBhY2NlbGVyYXRpb25TcHJlYWQueik7XG5cbiAgICAgICAgcGFydGljbGUuYW5ndWxhclZlbG9jaXR5ID0gYW5ndWxhclZlbG9jaXR5ICsgcmFuZEZsb2F0KC1hbmd1bGFyVmVsb2NpdHlTcHJlYWQsIGFuZ3VsYXJWZWxvY2l0eVNwcmVhZCk7XG4gICAgICAgIHBhcnRpY2xlLmFuZ3VsYXJBY2NlbGVyYXRpb24gPSBhbmd1bGFyQWNjZWxlcmF0aW9uICsgcmFuZEZsb2F0KC1hbmd1bGFyQWNjZWxlcmF0aW9uU3ByZWFkLCBhbmd1bGFyQWNjZWxlcmF0aW9uU3ByZWFkKTtcblxuICAgICAgICBwYXJ0aWNsZS5hbHBoYSA9IDE7XG4gICAgICAgIHBhcnRpY2xlLmFuZ2xlID0gcmFuZG9tQW5nbGUgPyByYW5kb20oKSAqIFRXT19QSSA6IDA7XG4gICAgICAgIHBhcnRpY2xlLmxpZmVUaW1lID0gMDtcbiAgICAgICAgcGFydGljbGUubGlmZSA9IHJhbmRGbG9hdChtaW5MaWZlLCBtYXhMaWZlKTtcbiAgICAgICAgcGFydGljbGUuc2l6ZSA9IHJhbmRGbG9hdChtaW5TaXplLCBtYXhTaXplKTtcblxuICAgICAgICBwYXJ0aWNsZXMucHVzaChwYXJ0aWNsZSk7XG4gICAgfVxufTtcblxuXG5FbWl0dGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBpZiAoIXRoaXMucGxheWluZykgcmV0dXJuO1xuICAgIHZhciBwYXJ0aWNsZXMgPSB0aGlzLnBhcnRpY2xlcyxcbiAgICAgICAgc2l6ZVR3ZWVuID0gdGhpcy5zaXplVHdlZW4sXG4gICAgICAgIGFscGhhVHdlZW4gPSB0aGlzLmFscGhhVHdlZW4sXG4gICAgICAgIGNvbG9yVHdlZW4gPSB0aGlzLmNvbG9yVHdlZW4sXG4gICAgICAgIHNpemVUd2VlblVwZGF0ZSA9IHNpemVUd2Vlbi50aW1lcy5sZW5ndGggPiAwLFxuICAgICAgICBhbHBoYVR3ZWVuVXBkYXRlID0gYWxwaGFUd2Vlbi50aW1lcy5sZW5ndGggPiAwLFxuICAgICAgICBjb2xvclR3ZWVuVXBkYXRlID0gY29sb3JUd2Vlbi50aW1lcy5sZW5ndGggPiAwLFxuICAgICAgICBwYXJ0aWNsZSwgbGlmZSwgY291bnQsXG4gICAgICAgIGk7XG5cbiAgICB0aGlzLnRpbWUgKz0gZHQ7XG4gICAgdGhpcy5fdGltZSArPSBkdDtcbiAgICBjb3VudCA9IHRoaXMuX3RpbWUgLyB0aGlzLmVtaXNzaW9uUmF0ZTtcblxuICAgIGlmICh0aGlzLmVtaXR0aW5nICYmIGNvdW50ID49IDEpIHtcbiAgICAgICAgdGhpcy5fdGltZSA9IDA7XG4gICAgICAgIHRoaXMuc3Bhd24ocmFuZEludCh0aGlzLm1pbkVtaXNzaW9uLCB0aGlzLm1heEVtaXNzaW9uKSAqIChjb3VudCB8IDApKTtcblxuICAgICAgICBpZiAoIXRoaXMubG9vcCAmJiB0aGlzLnRpbWUgPiB0aGlzLmR1cmF0aW9uKSB0aGlzLmVtaXR0aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaSA9IHBhcnRpY2xlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwYXJ0aWNsZSA9IHBhcnRpY2xlc1tpXTtcbiAgICAgICAgcGFydGljbGUudXBkYXRlKGR0KTtcbiAgICAgICAgbGlmZSA9IHBhcnRpY2xlLmxpZmVUaW1lIC8gcGFydGljbGUubGlmZTtcblxuICAgICAgICBpZiAoc2l6ZVR3ZWVuVXBkYXRlKSBwYXJ0aWNsZS5zaXplID0gc2l6ZVR3ZWVuLnVwZGF0ZShsaWZlKTtcbiAgICAgICAgaWYgKGFscGhhVHdlZW5VcGRhdGUpIHBhcnRpY2xlLmFscGhhID0gYWxwaGFUd2Vlbi51cGRhdGUobGlmZSk7XG4gICAgICAgIGlmIChjb2xvclR3ZWVuVXBkYXRlKSBjb2xvclR3ZWVuLnVwZGF0ZShsaWZlLCBwYXJ0aWNsZS5jb2xvcik7XG5cbiAgICAgICAgaWYgKGxpZmUgPiAxKSB7XG4gICAgICAgICAgICBQQVJUSUNMRV9QT09MLnJlbW92ZU9iamVjdChwYXJ0aWNsZSk7XG4gICAgICAgICAgICBwYXJ0aWNsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmVtaXR0aW5nICYmIHBhcnRpY2xlcy5sZW5ndGggPT09IDApIHRoaXMucGxheWluZyA9IGZhbHNlO1xufTtcblxuXG5FbWl0dGVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDbGFzcy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLnR5cGUgPSAxO1xuXG4gICAganNvbi5zb3J0ID0gdGhpcy5zb3J0O1xuXG4gICAganNvbi5wb3NpdGlvblR5cGUgPSB0aGlzLnBvc2l0aW9uVHlwZTtcbiAgICBqc29uLnZlbG9jaXR5VHlwZSA9IHRoaXMudmVsb2NpdHlUeXBlO1xuXG4gICAganNvbi5tYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWwgPyB0aGlzLm1hdGVyaWFsLm5hbWUgOiB1bmRlZmluZWQ7XG5cbiAgICBqc29uLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50b0pTT04oanNvbi5wb3NpdGlvbik7XG4gICAganNvbi5wb3NpdGlvblNwcmVhZCA9IHRoaXMucG9zaXRpb25TcHJlYWQudG9KU09OKGpzb24ucG9zaXRpb25TcHJlYWQpO1xuICAgIGpzb24ucG9zaXRpb25SYWRpdXMgPSB0aGlzLnBvc2l0aW9uUmFkaXVzO1xuXG4gICAganNvbi5zcGVlZCA9IHRoaXMuc3BlZWQ7XG4gICAganNvbi5zcGVlZFNwcmVhZCA9IHRoaXMuc3BlZWRTcHJlYWQ7XG5cbiAgICBqc29uLndvcmxkU3BhY2UgPSB0aGlzLndvcmxkU3BhY2U7XG5cbiAgICBqc29uLm1pbkVtaXNzaW9uID0gdGhpcy5taW5FbWlzc2lvbjtcbiAgICBqc29uLm1heEVtaXNzaW9uID0gdGhpcy5tYXhFbWlzc2lvbjtcblxuICAgIGpzb24ubWluTGlmZSA9IHRoaXMubWluTGlmZTtcbiAgICBqc29uLm1heExpZmUgPSB0aGlzLm1heExpZmU7XG5cbiAgICBqc29uLm1pblNpemUgPSB0aGlzLm1pblNpemU7XG4gICAganNvbi5tYXhTaXplID0gdGhpcy5tYXhTaXplO1xuXG4gICAganNvbi5zaXplVHdlZW4gPSB0aGlzLnNpemVUd2Vlbi50b0pTT04oanNvbi5zaXplVHdlZW4pO1xuICAgIGpzb24uYWxwaGFUd2VlbiA9IHRoaXMuYWxwaGFUd2Vlbi50b0pTT04oanNvbi5hbHBoYVR3ZWVuKTtcbiAgICBqc29uLmNvbG9yVHdlZW4gPSB0aGlzLmNvbG9yVHdlZW4udG9KU09OKGpzb24uY29sb3JUd2Vlbik7XG5cbiAgICBqc29uLnZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eS50b0pTT04oanNvbi52ZWxvY2l0eSk7XG4gICAganNvbi52ZWxvY2l0eVNwcmVhZCA9IHRoaXMudmVsb2NpdHlTcHJlYWQudG9KU09OKGpzb24udmVsb2NpdHlTcHJlYWQpO1xuXG4gICAganNvbi5hY2NlbGVyYXRpb24gPSB0aGlzLmFjY2VsZXJhdGlvbi50b0pTT04oanNvbi5hY2NlbGVyYXRpb24pO1xuICAgIGpzb24uYWNjZWxlcmF0aW9uU3ByZWFkID0gdGhpcy5hY2NlbGVyYXRpb25TcHJlYWQudG9KU09OKGpzb24uYWNjZWxlcmF0aW9uU3ByZWFkKTtcblxuICAgIGpzb24uYW5ndWxhclZlbG9jaXR5ID0gdGhpcy5hbmd1bGFyVmVsb2NpdHk7XG4gICAganNvbi5hbmd1bGFyQWNjZWxlcmF0aW9uID0gdGhpcy5hbmd1bGFyQWNjZWxlcmF0aW9uO1xuXG4gICAganNvbi5hbmd1bGFyVmVsb2NpdHlTcHJlYWQgPSB0aGlzLmFuZ3VsYXJWZWxvY2l0eVNwcmVhZDtcbiAgICBqc29uLnJhbmRvbUFuZ2xlID0gdGhpcy5yYW5kb21BbmdsZTtcblxuICAgIGpzb24uZW1pc3Npb25SYXRlID0gdGhpcy5lbWlzc2lvblJhdGU7XG5cbiAgICBqc29uLmNvbG9yID0gdGhpcy5jb2xvci50b0pTT04oanNvbi5jb2xvcik7XG4gICAganNvbi5jb2xvclNwcmVhZCA9IHRoaXMuY29sb3JTcHJlYWQudG9KU09OKGpzb24uY29sb3JTcHJlYWQpO1xuXG4gICAganNvbi50aW1lID0gdGhpcy50aW1lO1xuICAgIGpzb24uX3RpbWUgPSB0aGlzLl90aW1lO1xuXG4gICAganNvbi5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XG4gICAganNvbi5sb29wID0gdGhpcy5sb29wO1xuICAgIGpzb24ucGxheWluZyA9IHRoaXMucGxheWluZztcbiAgICBqc29uLmVtaXR0aW5nID0gdGhpcy5lbWl0dGluZztcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5FbWl0dGVyLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnNvcnQgPSBqc29uLnNvcnQ7XG5cbiAgICB0aGlzLnBvc2l0aW9uVHlwZSA9IGpzb24ucG9zaXRpb25UeXBlO1xuICAgIHRoaXMudmVsb2NpdHlUeXBlID0ganNvbi52ZWxvY2l0eVR5cGU7XG5cbiAgICB0aGlzLm1hdGVyaWFsID0ganNvbi5tYXRlcmlhbCA/IEFzc2V0cy5oYXNoW2pzb24ubWF0ZXJpYWxdIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5wb3NpdGlvbi5mcm9tSlNPTihqc29uLnBvc2l0aW9uKTtcbiAgICB0aGlzLnBvc2l0aW9uU3ByZWFkLmZyb21KU09OKGpzb24ucG9zaXRpb25TcHJlYWQpO1xuICAgIHRoaXMucG9zaXRpb25SYWRpdXMgPSBqc29uLnBvc2l0aW9uUmFkaXVzO1xuXG4gICAgdGhpcy5zcGVlZCA9IGpzb24uc3BlZWQ7XG4gICAgdGhpcy5zcGVlZFNwcmVhZCA9IGpzb24uc3BlZWRTcHJlYWQ7XG5cbiAgICB0aGlzLndvcmxkU3BhY2UgPSBqc29uLndvcmxkU3BhY2U7XG5cbiAgICB0aGlzLm1pbkVtaXNzaW9uID0ganNvbi5taW5FbWlzc2lvbjtcbiAgICB0aGlzLm1heEVtaXNzaW9uID0ganNvbi5tYXhFbWlzc2lvbjtcblxuICAgIHRoaXMubWluTGlmZSA9IGpzb24ubWluTGlmZTtcbiAgICB0aGlzLm1heExpZmUgPSBqc29uLm1heExpZmU7XG5cbiAgICB0aGlzLm1pblNpemUgPSBqc29uLm1pblNpemU7XG4gICAgdGhpcy5tYXhTaXplID0ganNvbi5tYXhTaXplO1xuXG4gICAgdGhpcy5zaXplVHdlZW4uZnJvbUpTT04oanNvbi5zaXplVHdlZW4pO1xuICAgIHRoaXMuYWxwaGFUd2Vlbi5mcm9tSlNPTihqc29uLmFscGhhVHdlZW4pO1xuICAgIHRoaXMuY29sb3JUd2Vlbi5mcm9tSlNPTihqc29uLmNvbG9yVHdlZW4pO1xuXG4gICAgdGhpcy52ZWxvY2l0eS5mcm9tSlNPTihqc29uLnZlbG9jaXR5KTtcbiAgICB0aGlzLnZlbG9jaXR5U3ByZWFkLmZyb21KU09OKGpzb24udmVsb2NpdHlTcHJlYWQpO1xuXG4gICAgdGhpcy5hY2NlbGVyYXRpb24uZnJvbUpTT04oanNvbi5hY2NlbGVyYXRpb24pO1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uU3ByZWFkLmZyb21KU09OKGpzb24uYWNjZWxlcmF0aW9uU3ByZWFkKTtcblxuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0ganNvbi5hbmd1bGFyVmVsb2NpdHk7XG4gICAgdGhpcy5hbmd1bGFyQWNjZWxlcmF0aW9uID0ganNvbi5hbmd1bGFyQWNjZWxlcmF0aW9uO1xuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHlTcHJlYWQgPSBqc29uLmFuZ3VsYXJWZWxvY2l0eVNwcmVhZDtcbiAgICB0aGlzLnJhbmRvbUFuZ2xlID0ganNvbi5yYW5kb21BbmdsZTtcblxuICAgIHRoaXMuZW1pc3Npb25SYXRlID0ganNvbi5lbWlzc2lvblJhdGU7XG5cbiAgICB0aGlzLmNvbG9yLmZyb21KU09OKGpzb24uY29sb3IpO1xuICAgIHRoaXMuY29sb3JTcHJlYWQuZnJvbUpTT04oanNvbi5jb2xvclNwcmVhZCk7XG5cbiAgICB0aGlzLnRpbWUgPSBqc29uLnRpbWU7XG4gICAgdGhpcy5fdGltZSA9IGpzb24uX3RpbWU7XG5cbiAgICB0aGlzLmR1cmF0aW9uID0ganNvbi5kdXJhdGlvbjtcbiAgICB0aGlzLmxvb3AgPSBqc29uLmxvb3A7XG4gICAgdGhpcy5wbGF5aW5nID0ganNvbi5wbGF5aW5nO1xuICAgIHRoaXMuZW1pdHRpbmcgPSBqc29uLmVtaXR0aW5nO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkVtaXR0ZXIuTUFYX1BBUlRJQ0xFUyA9IDEwMjQ7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xuIiwidmFyIE9iamVjdFBvb2wgPSByZXF1aXJlKFwiLi4vLi4vLi4vYmFzZS9vYmplY3RfcG9vbFwiKTtcbnZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2NsYXNzXCIpO1xudmFyIE1hdGhmID0gcmVxdWlyZShcIi4uLy4uLy4uL21hdGgvbWF0aGZcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vLi4vbWF0aC9jb2xvclwiKTtcbnZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi8uLi9lbnVtc1wiKTtcbnZhciBBc3NldHMgPSByZXF1aXJlKFwiLi4vLi4vYXNzZXRzL2Fzc2V0c1wiKTtcbnZhciBUd2VlbiA9IHJlcXVpcmUoXCIuL3R3ZWVuXCIpO1xudmFyIFBhcnRpY2xlMkQgPSByZXF1aXJlKFwiLi9wYXJ0aWNsZV8yZFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBFbWl0dGVyVHlwZSA9IEVudW1zLkVtaXR0ZXJUeXBlLFxuXG4gICAgUEkgPSBNYXRoLlBJLFxuICAgIFRXT19QSSA9IFBJICogMixcblxuICAgIHJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgIHJhbmRJbnQgPSBNYXRoZi5yYW5kSW50LFxuICAgIHJhbmRGbG9hdCA9IE1hdGhmLnJhbmRGbG9hdCxcbiAgICBjbGFtcFRvcCA9IE1hdGhmLmNsYW1wVG9wLFxuICAgIGNvcyA9IE1hdGguY29zLFxuICAgIHNpbiA9IE1hdGguc2luLFxuICAgIHNxcnQgPSBNYXRoLnNxcnQsXG5cbiAgICBQQVJUSUNMRV9QT09MID0gRW1pdHRlcjJELlBBUlRJQ0xFX1BPT0wgPSBuZXcgT2JqZWN0UG9vbChQYXJ0aWNsZTJEKTtcblxuXG5mdW5jdGlvbiBFbWl0dGVyMkQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDbGFzcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5wb3NpdGlvblR5cGUgPSBvcHRzLnBvc2l0aW9uVHlwZSAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uVHlwZSA6IEVtaXR0ZXJUeXBlLkJveDtcbiAgICB0aGlzLnZlbG9jaXR5VHlwZSA9IG9wdHMudmVsb2NpdHlUeXBlICE9IHVuZGVmaW5lZCA/IG9wdHMudmVsb2NpdHlUeXBlIDogRW1pdHRlclR5cGUuQm94O1xuXG4gICAgdGhpcy5tYXRlcmlhbCA9IG9wdHMubWF0ZXJpYWwgIT0gdW5kZWZpbmVkID8gb3B0cy5tYXRlcmlhbCA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMucG9zaXRpb25TcHJlYWQgPSBvcHRzLnBvc2l0aW9uU3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMucG9zaXRpb25TcHJlYWQgOiBuZXcgVmVjMigwLjUsIDAuNSk7XG4gICAgdGhpcy5wb3NpdGlvblJhZGl1cyA9IG9wdHMucG9zaXRpb25SYWRpdXMgIT0gdW5kZWZpbmVkID8gb3B0cy5wb3NpdGlvblJhZGl1cyA6IDAuNTtcblxuICAgIHRoaXMuc3BlZWQgPSBvcHRzLnNwZWVkICE9IHVuZGVmaW5lZCA/IG9wdHMuc3BlZWQgOiAwO1xuICAgIHRoaXMuc3BlZWRTcHJlYWQgPSBvcHRzLnNwZWVkU3ByZWFkICE9IHVuZGVmaW5lZCA/IG9wdHMuc3BlZWRTcHJlYWQgOiAwO1xuXG4gICAgdGhpcy5wYXJ0aWNsZVN5c3RlbSA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMud29ybGRTcGFjZSA9IG9wdHMud29ybGRTcGFjZSAhPSB1bmRlZmluZWQgPyBvcHRzLndvcmxkU3BhY2UgOiB0cnVlO1xuXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdHMucG9zaXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5wb3NpdGlvbiA6IG5ldyBWZWMyO1xuXG4gICAgdGhpcy5taW5FbWlzc2lvbiA9IG9wdHMubWluRW1pc3Npb24gIT0gdW5kZWZpbmVkID8gb3B0cy5taW5FbWlzc2lvbiA6IDE7XG4gICAgdGhpcy5tYXhFbWlzc2lvbiA9IG9wdHMubWF4RW1pc3Npb24gIT0gdW5kZWZpbmVkID8gb3B0cy5tYXhFbWlzc2lvbiA6IDI7XG5cbiAgICB0aGlzLm1pbkxpZmUgPSBvcHRzLm1pbkxpZmUgIT0gdW5kZWZpbmVkID8gb3B0cy5taW5MaWZlIDogMTtcbiAgICB0aGlzLm1heExpZmUgPSBvcHRzLm1heExpZmUgIT0gdW5kZWZpbmVkID8gb3B0cy5tYXhMaWZlIDogMjtcblxuICAgIHRoaXMubWluU2l6ZSA9IG9wdHMubWluU2l6ZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1pblNpemUgOiAwLjE7XG4gICAgdGhpcy5tYXhTaXplID0gb3B0cy5tYXhTaXplICE9IHVuZGVmaW5lZCA/IG9wdHMubWF4U2l6ZSA6IDAuNTtcblxuICAgIHRoaXMuc2l6ZVR3ZWVuID0gbmV3IFR3ZWVuKG9wdHMuc2l6ZVR3ZWVuKTtcbiAgICB0aGlzLmFscGhhVHdlZW4gPSBuZXcgVHdlZW4ob3B0cy5hbHBoYVR3ZWVuKTtcbiAgICB0aGlzLmNvbG9yVHdlZW4gPSBuZXcgVHdlZW4ob3B0cy5jb2xvclR3ZWVuKTtcblxuICAgIHRoaXMudmVsb2NpdHkgPSBvcHRzLnZlbG9jaXR5ICE9IHVuZGVmaW5lZCA/IG9wdHMudmVsb2NpdHkgOiBuZXcgVmVjMjtcbiAgICB0aGlzLnZlbG9jaXR5U3ByZWFkID0gb3B0cy52ZWxvY2l0eVNwcmVhZCAhPSB1bmRlZmluZWQgPyBvcHRzLnZlbG9jaXR5U3ByZWFkIDogbmV3IFZlYzI7XG5cbiAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IG9wdHMuYWNjZWxlcmF0aW9uICE9IHVuZGVmaW5lZCA/IG9wdHMuYWNjZWxlcmF0aW9uIDogbmV3IFZlYzI7XG4gICAgdGhpcy5hY2NlbGVyYXRpb25TcHJlYWQgPSBvcHRzLmFjY2VsZXJhdGlvblNwcmVhZCAhPSB1bmRlZmluZWQgPyBvcHRzLmFjY2VsZXJhdGlvblNwcmVhZCA6IG5ldyBWZWMyO1xuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgPSBvcHRzLmFuZ3VsYXJWZWxvY2l0eSAhPSB1bmRlZmluZWQgPyBvcHRzLmFuZ3VsYXJWZWxvY2l0eSA6IDA7XG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHlTcHJlYWQgPSBvcHRzLmFuZ3VsYXJWZWxvY2l0eVNwcmVhZCAhPSB1bmRlZmluZWQgPyBvcHRzLmFuZ3VsYXJWZWxvY2l0eVNwcmVhZCA6IDA7XG5cbiAgICB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24gPSBvcHRzLmFuZ3VsYXJBY2NlbGVyYXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5hbmd1bGFyQWNjZWxlcmF0aW9uIDogMDtcbiAgICB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQgPSBvcHRzLmFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQgIT0gdW5kZWZpbmVkID8gb3B0cy5hbmd1bGFyQWNjZWxlcmF0aW9uU3ByZWFkIDogMDtcblxuICAgIHRoaXMucmFuZG9tQW5nbGUgPSBvcHRzLnJhbmRvbUFuZ2xlICE9IHVuZGVmaW5lZCA/IG9wdHMucmFuZG9tQW5nbGUgOiB0cnVlO1xuXG4gICAgdGhpcy5lbWlzc2lvblJhdGUgPSBvcHRzLmVtaXNzaW9uUmF0ZSAhPSB1bmRlZmluZWQgPyBvcHRzLmVtaXNzaW9uUmF0ZSA6IDEgLyA2MDtcblxuICAgIHRoaXMuY29sb3IgPSBvcHRzLmNvbG9yICE9IHVuZGVmaW5lZCA/IG9wdHMuY29sb3IgOiBuZXcgQ29sb3I7XG4gICAgdGhpcy5jb2xvclNwcmVhZCA9IG9wdHMuY29sb3JTcHJlYWQgIT0gdW5kZWZpbmVkID8gb3B0cy5jb2xvclNwcmVhZCA6IG5ldyBDb2xvcjtcblxuICAgIHRoaXMudGltZSA9IG9wdHMudGltZSAhPSB1bmRlZmluZWQgPyBvcHRzLnRpbWUgOiAwO1xuICAgIHRoaXMuX3RpbWUgPSAwO1xuXG4gICAgdGhpcy5kdXJhdGlvbiA9IG9wdHMuZHVyYXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5kdXJhdGlvbiA6IDA7XG5cbiAgICB0aGlzLmxvb3AgPSBvcHRzLmxvb3AgIT0gdW5kZWZpbmVkID8gb3B0cy5sb29wIDogdHJ1ZTtcblxuICAgIHRoaXMucGxheWluZyA9IG9wdHMucGxheWluZyAhPSB1bmRlZmluZWQgPyBvcHRzLnBsYXlpbmcgOiB0cnVlO1xuICAgIHRoaXMuZW1pdHRpbmcgPSBvcHRzLmVtaXR0aW5nICE9IHVuZGVmaW5lZCA/IG9wdHMuZW1pdHRpbmcgOiB0cnVlO1xuXG4gICAgdGhpcy5wYXJ0aWNsZXMgPSBbXTtcblxuICAgIHRoaXMuX3dlYmdsSW5pdHRlZCA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuX3dlYmdsVmVydGV4QnVmZmVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsUGFydGljbGVCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xQYXJ0aWNsZUNvbG9yQnVmZmVyID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fd2ViZ2xWZXJ0ZXhBcnJheSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbFBhcnRpY2xlQXJyYXkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fd2ViZ2xQYXJ0aWNsZUNvbG9yQXJyYXkgPSB1bmRlZmluZWQ7XG59XG5cbkNsYXNzLmV4dGVuZChFbWl0dGVyMkQpO1xuXG5cbkVtaXR0ZXIyRC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5wb3NpdGlvblR5cGUgPSBvdGhlci5wb3NpdGlvblR5cGU7XG4gICAgdGhpcy52ZWxvY2l0eVR5cGUgPSBvdGhlci52ZWxvY2l0eVR5cGU7XG5cbiAgICB0aGlzLm1hdGVyaWFsID0gb3RoZXIubWF0ZXJpYWw7XG5cbiAgICB0aGlzLnBvc2l0aW9uLmNvcHkob3RoZXIucG9zaXRpb24pO1xuICAgIHRoaXMucG9zaXRpb25TcHJlYWQuY29weShvdGhlci5wb3NpdGlvblNwcmVhZCk7XG4gICAgdGhpcy5wb3NpdGlvblJhZGl1cyA9IG90aGVyLnBvc2l0aW9uUmFkaXVzO1xuXG4gICAgdGhpcy5zcGVlZCA9IG90aGVyLnNwZWVkO1xuICAgIHRoaXMuc3BlZWRTcHJlYWQgPSBvdGhlci5zcGVlZFNwcmVhZDtcblxuICAgIHRoaXMud29ybGRTcGFjZSA9IG90aGVyLndvcmxkU3BhY2U7XG5cbiAgICB0aGlzLm1pbkVtaXNzaW9uID0gb3RoZXIubWluRW1pc3Npb247XG4gICAgdGhpcy5tYXhFbWlzc2lvbiA9IG90aGVyLm1heEVtaXNzaW9uO1xuXG4gICAgdGhpcy5taW5MaWZlID0gb3RoZXIubWluTGlmZTtcbiAgICB0aGlzLm1heExpZmUgPSBvdGhlci5tYXhMaWZlO1xuXG4gICAgdGhpcy5taW5TaXplID0gb3RoZXIubWluU2l6ZTtcbiAgICB0aGlzLm1heFNpemUgPSBvdGhlci5tYXhTaXplO1xuXG4gICAgdGhpcy5zaXplVHdlZW4uY29weShvdGhlci5zaXplVHdlZW4pO1xuICAgIHRoaXMuYWxwaGFUd2Vlbi5jb3B5KG90aGVyLmFscGhhVHdlZW4pO1xuICAgIHRoaXMuY29sb3JUd2Vlbi5jb3B5KG90aGVyLmNvbG9yVHdlZW4pO1xuXG4gICAgdGhpcy52ZWxvY2l0eS5jb3B5KG90aGVyLnZlbG9jaXR5KTtcbiAgICB0aGlzLnZlbG9jaXR5U3ByZWFkLmNvcHkob3RoZXIudmVsb2NpdHlTcHJlYWQpO1xuXG4gICAgdGhpcy5hY2NlbGVyYXRpb24uY29weShvdGhlci5hY2NlbGVyYXRpb24pO1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uU3ByZWFkLmNvcHkob3RoZXIuYWNjZWxlcmF0aW9uU3ByZWFkKTtcblxuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gb3RoZXIuYW5ndWxhclZlbG9jaXR5O1xuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5U3ByZWFkID0gb3RoZXIuYW5ndWxhclZlbG9jaXR5U3ByZWFkO1xuXG4gICAgdGhpcy5hbmd1bGFyQWNjZWxlcmF0aW9uID0gb3RoZXIuYW5ndWxhckFjY2VsZXJhdGlvbjtcbiAgICB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb25TcHJlYWQgPSBvdGhlci5hbmd1bGFyQWNjZWxlcmF0aW9uU3ByZWFkO1xuXG4gICAgdGhpcy5yYW5kb21BbmdsZSA9IG90aGVyLnJhbmRvbUFuZ2xlO1xuXG4gICAgdGhpcy5lbWlzc2lvblJhdGUgPSBvdGhlci5lbWlzc2lvblJhdGU7XG5cbiAgICB0aGlzLmNvbG9yLmNvcHkob3RoZXIuY29sb3IpO1xuICAgIHRoaXMuY29sb3JTcHJlYWQuY29weShvdGhlci5jb2xvclNwcmVhZCk7XG5cbiAgICB0aGlzLnRpbWUgPSBvdGhlci50aW1lO1xuICAgIHRoaXMuX3RpbWUgPSBvdGhlci5fdGltZTtcblxuICAgIHRoaXMuZHVyYXRpb24gPSBvdGhlci5kdXJhdGlvbjtcbiAgICB0aGlzLmxvb3AgPSBvdGhlci5sb29wO1xuICAgIHRoaXMucGxheWluZyA9IG90aGVyLnBsYXlpbmc7XG4gICAgdGhpcy5lbWl0dGluZyA9IG90aGVyLmVtaXR0aW5nO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkVtaXR0ZXIyRC5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMudGltZSA9IDA7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmVtaXR0aW5nID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5FbWl0dGVyMkQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJ0aWNsZXMgPSB0aGlzLnBhcnRpY2xlcyxcbiAgICAgICAgaSA9IHBhcnRpY2xlcy5sZW5ndGg7XG5cbiAgICB0aGlzLnRpbWUgPSAwO1xuICAgIHRoaXMuX3RpbWUgPSAwO1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdHRpbmcgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIFBBUlRJQ0xFX1BPT0wucmVtb3ZlT2JqZWN0KHBhcnRpY2xlc1tpXSk7XG4gICAgcGFydGljbGVzLmxlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxudmFyIFZFQyA9IG5ldyBWZWMyO1xuRW1pdHRlcjJELnByb3RvdHlwZS5zcGF3biA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnBhcnRpY2xlU3lzdGVtLnRyYW5zZm9ybSB8fCB0aGlzLnBhcnRpY2xlU3lzdGVtLnRyYW5zZm9ybTJkLFxuICAgICAgICB0cmFuc2Zvcm1Qb3NpdGlvbiA9IHRyYW5zZm9ybS50b1dvcmxkKFZFQy5zZXQoMCwgMCkpLFxuXG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbixcbiAgICAgICAgcG9zaXRpb25TcHJlYWQgPSB0aGlzLnBvc2l0aW9uU3ByZWFkLFxuICAgICAgICBwb3NpdGlvblJhZGl1cyA9IHRoaXMucG9zaXRpb25SYWRpdXMsXG5cbiAgICAgICAgc3BlZWQgPSB0aGlzLnNwZWVkLFxuICAgICAgICBzcGVlZFNwcmVhZCA9IHRoaXMuc3BlZWRTcHJlYWQsXG5cbiAgICAgICAgcGFydGljbGVzID0gdGhpcy5wYXJ0aWNsZXMsXG4gICAgICAgIG51bVBhcnRpY2xlMkRzID0gcGFydGljbGVzLmxlbmd0aCxcblxuICAgICAgICB3b3JsZFNwYWNlID0gdGhpcy53b3JsZFNwYWNlLFxuICAgICAgICByYW5kb21BbmdsZSA9IHRoaXMucmFuZG9tQW5nbGUsXG5cbiAgICAgICAgY29sb3IgPSB0aGlzLmNvbG9yLFxuICAgICAgICBjb2xvclNwcmVhZCA9IHRoaXMuY29sb3JTcHJlYWQsXG4gICAgICAgIHVzZVJhbmRDb2xvciA9IGNvbG9yU3ByZWFkLmxlbmd0aFNxKCkgPiAwLFxuXG4gICAgICAgIHZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSxcbiAgICAgICAgdmVsb2NpdHlTcHJlYWQgPSB0aGlzLnZlbG9jaXR5U3ByZWFkLFxuXG4gICAgICAgIGFjY2VsZXJhdGlvbiA9IHRoaXMuYWNjZWxlcmF0aW9uLFxuICAgICAgICBhY2NlbGVyYXRpb25TcHJlYWQgPSB0aGlzLmFjY2VsZXJhdGlvblNwcmVhZCxcblxuICAgICAgICBhbmd1bGFyVmVsb2NpdHkgPSB0aGlzLmFuZ3VsYXJWZWxvY2l0eSxcbiAgICAgICAgYW5ndWxhclZlbG9jaXR5U3ByZWFkID0gdGhpcy5hbmd1bGFyVmVsb2NpdHlTcHJlYWQsXG5cbiAgICAgICAgYW5ndWxhckFjY2VsZXJhdGlvbiA9IHRoaXMuYW5ndWxhckFjY2VsZXJhdGlvbixcbiAgICAgICAgYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCA9IHRoaXMuYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCxcblxuICAgICAgICBtaW5MaWZlID0gdGhpcy5taW5MaWZlLFxuICAgICAgICBtYXhMaWZlID0gdGhpcy5tYXhMaWZlLFxuXG4gICAgICAgIG1pblNpemUgPSB0aGlzLm1pblNpemUsXG4gICAgICAgIG1heFNpemUgPSB0aGlzLm1heFNpemUsXG5cbiAgICAgICAgcG9zaXRpb25UeXBlID0gdGhpcy5wb3NpdGlvblR5cGUsXG4gICAgICAgIHZlbG9jaXR5VHlwZSA9IHRoaXMudmVsb2NpdHlUeXBlLFxuXG4gICAgICAgIGxpbWl0ID0gY2xhbXBUb3AobnVtUGFydGljbGUyRHMgKyBjb3VudCwgRW1pdHRlcjJELk1BWF9QQVJUSUNMRVMpIC0gbnVtUGFydGljbGUyRHMsXG4gICAgICAgIHBvc3gsIHBvc3ksIHZlbCwgYWNjLCBwb3MsIGNvbCwgYW5nbGUsIHUsIHIsIGR4LCBkeSwgc3BkLCBwYXJ0aWNsZTtcblxuICAgIGlmIChwb3NpdGlvblR5cGUgPT09IEVtaXR0ZXJUeXBlLkNpcmNsZSB8fCBwb3NpdGlvblR5cGUgPT09IEVtaXR0ZXJUeXBlLkNpcmNsZUVkZ2UpIHtcbiAgICAgICAgcG9zeCA9IHJhbmRGbG9hdCgtcG9zaXRpb25TcHJlYWQueCwgcG9zaXRpb25TcHJlYWQueCk7XG4gICAgICAgIHBvc3kgPSByYW5kRmxvYXQoLXBvc2l0aW9uU3ByZWFkLnksIHBvc2l0aW9uU3ByZWFkLnkpO1xuICAgIH1cblxuICAgIHdoaWxlIChsaW1pdC0tKSB7XG4gICAgICAgIHBhcnRpY2xlID0gUEFSVElDTEVfUE9PTC5jcmVhdGUoKTtcbiAgICAgICAgcG9zID0gcGFydGljbGUucG9zaXRpb247XG4gICAgICAgIHZlbCA9IHBhcnRpY2xlLnZlbG9jaXR5O1xuICAgICAgICBhY2MgPSBwYXJ0aWNsZS5hY2NlbGVyYXRpb247XG4gICAgICAgIGNvbCA9IHBhcnRpY2xlLmNvbG9yO1xuXG4gICAgICAgIGNvbC5yID0gY29sb3IucjtcbiAgICAgICAgY29sLmcgPSBjb2xvci5nO1xuICAgICAgICBjb2wuYiA9IGNvbG9yLmI7XG5cbiAgICAgICAgaWYgKHVzZVJhbmRDb2xvcikge1xuICAgICAgICAgICAgY29sLnIgKz0gY29sb3JTcHJlYWQuciAqIHJhbmRvbSgpO1xuICAgICAgICAgICAgY29sLmcgKz0gY29sb3JTcHJlYWQuZyAqIHJhbmRvbSgpO1xuICAgICAgICAgICAgY29sLmIgKz0gY29sb3JTcHJlYWQuYiAqIHJhbmRvbSgpO1xuICAgICAgICAgICAgY29sLmNub3JtYWxpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3b3JsZFNwYWNlKSB7XG4gICAgICAgICAgICBwb3MueCA9IHBvc2l0aW9uLnggKyB0cmFuc2Zvcm1Qb3NpdGlvbi54O1xuICAgICAgICAgICAgcG9zLnkgPSBwb3NpdGlvbi55ICsgdHJhbnNmb3JtUG9zaXRpb24ueTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcy54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgIHBvcy55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvblR5cGUgPT09IEVtaXR0ZXJUeXBlLkJveCkge1xuICAgICAgICAgICAgcG9zLnggKz0gcmFuZEZsb2F0KC1wb3NpdGlvblNwcmVhZC54LCBwb3NpdGlvblNwcmVhZC54KTtcbiAgICAgICAgICAgIHBvcy55ICs9IHJhbmRGbG9hdCgtcG9zaXRpb25TcHJlYWQueSwgcG9zaXRpb25TcHJlYWQueSk7XG4gICAgICAgIH0gZWxzZSB7IC8vRW1pdHRlclR5cGUuQ2lyY2xlXG4gICAgICAgICAgICBhbmdsZSA9IFRXT19QSSAqIHJhbmRvbSgpO1xuICAgICAgICAgICAgdSA9IHJhbmRvbSgpICsgcmFuZG9tKCk7XG4gICAgICAgICAgICByID0gdSA+IDEgPyAyIC0gdSA6IHU7XG5cbiAgICAgICAgICAgIHBvcy54ICs9IHBvc3ggKyByICogY29zKGFuZ2xlKSAqIHBvc2l0aW9uUmFkaXVzO1xuICAgICAgICAgICAgcG9zLnkgKz0gcG9zeSArIHIgKiBzaW4oYW5nbGUpICogcG9zaXRpb25SYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmVsb2NpdHlUeXBlID09PSBFbWl0dGVyVHlwZS5Cb3gpIHtcbiAgICAgICAgICAgIHZlbC54ID0gdmVsb2NpdHkueCArIHJhbmRGbG9hdCgtdmVsb2NpdHlTcHJlYWQueCwgdmVsb2NpdHlTcHJlYWQueCk7XG4gICAgICAgICAgICB2ZWwueSA9IHZlbG9jaXR5LnkgKyByYW5kRmxvYXQoLXZlbG9jaXR5U3ByZWFkLnksIHZlbG9jaXR5U3ByZWFkLnkpO1xuICAgICAgICB9IGVsc2UgeyAvL0VtaXR0ZXJUeXBlLkNpcmNsZVxuICAgICAgICAgICAgaWYgKHdvcmxkU3BhY2UpIHtcbiAgICAgICAgICAgICAgICBkeCA9IHBvcy54IC0gKHBvc2l0aW9uLnggKyB0cmFuc2Zvcm1Qb3NpdGlvbi54KTtcbiAgICAgICAgICAgICAgICBkeSA9IHBvcy55IC0gKHBvc2l0aW9uLnkgKyB0cmFuc2Zvcm1Qb3NpdGlvbi55KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHggPSBwb3MueCAtIHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgZHkgPSBwb3MueSAtIHBvc2l0aW9uLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGQgPSBzcGVlZCArIHJhbmRGbG9hdCgtc3BlZWRTcHJlYWQsIHNwZWVkU3ByZWFkKTtcblxuICAgICAgICAgICAgciA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICAgICAgciA9IHIgIT09IDAgPyAxIC8gc3FydChyKSA6IHI7XG5cbiAgICAgICAgICAgIHZlbC54ID0gZHggKiByICogc3BkO1xuICAgICAgICAgICAgdmVsLnkgPSBkeSAqIHIgKiBzcGQ7XG4gICAgICAgIH1cblxuICAgICAgICBhY2MueCA9IGFjY2VsZXJhdGlvbi54ICsgcmFuZEZsb2F0KC1hY2NlbGVyYXRpb25TcHJlYWQueCwgYWNjZWxlcmF0aW9uU3ByZWFkLngpO1xuICAgICAgICBhY2MueSA9IGFjY2VsZXJhdGlvbi55ICsgcmFuZEZsb2F0KC1hY2NlbGVyYXRpb25TcHJlYWQueSwgYWNjZWxlcmF0aW9uU3ByZWFkLnkpO1xuXG4gICAgICAgIHBhcnRpY2xlLmFuZ3VsYXJWZWxvY2l0eSA9IGFuZ3VsYXJWZWxvY2l0eSArIHJhbmRGbG9hdCgtYW5ndWxhclZlbG9jaXR5U3ByZWFkLCBhbmd1bGFyVmVsb2NpdHlTcHJlYWQpO1xuICAgICAgICBwYXJ0aWNsZS5hbmd1bGFyQWNjZWxlcmF0aW9uID0gYW5ndWxhckFjY2VsZXJhdGlvbiArIHJhbmRGbG9hdCgtYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCwgYW5ndWxhckFjY2VsZXJhdGlvblNwcmVhZCk7XG5cbiAgICAgICAgcGFydGljbGUuYWxwaGEgPSAxO1xuICAgICAgICBwYXJ0aWNsZS5hbmdsZSA9IHJhbmRvbUFuZ2xlID8gcmFuZG9tKCkgKiBUV09fUEkgOiAwO1xuICAgICAgICBwYXJ0aWNsZS5saWZlVGltZSA9IDA7XG4gICAgICAgIHBhcnRpY2xlLmxpZmUgPSByYW5kRmxvYXQobWluTGlmZSwgbWF4TGlmZSk7XG4gICAgICAgIHBhcnRpY2xlLnNpemUgPSByYW5kRmxvYXQobWluU2l6ZSwgbWF4U2l6ZSk7XG5cbiAgICAgICAgcGFydGljbGVzLnB1c2gocGFydGljbGUpO1xuICAgIH1cbn07XG5cblxuRW1pdHRlcjJELnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBpZiAoIXRoaXMucGxheWluZykgcmV0dXJuO1xuICAgIHZhciBwYXJ0aWNsZXMgPSB0aGlzLnBhcnRpY2xlcyxcbiAgICAgICAgc2l6ZVR3ZWVuID0gdGhpcy5zaXplVHdlZW4sXG4gICAgICAgIGFscGhhVHdlZW4gPSB0aGlzLmFscGhhVHdlZW4sXG4gICAgICAgIGNvbG9yVHdlZW4gPSB0aGlzLmNvbG9yVHdlZW4sXG4gICAgICAgIHNpemVUd2VlblVwZGF0ZSA9IHNpemVUd2Vlbi50aW1lcy5sZW5ndGggPiAwLFxuICAgICAgICBhbHBoYVR3ZWVuVXBkYXRlID0gYWxwaGFUd2Vlbi50aW1lcy5sZW5ndGggPiAwLFxuICAgICAgICBjb2xvclR3ZWVuVXBkYXRlID0gY29sb3JUd2Vlbi50aW1lcy5sZW5ndGggPiAwLFxuICAgICAgICBwYXJ0aWNsZSwgbGlmZSwgY291bnQsXG4gICAgICAgIGk7XG5cbiAgICB0aGlzLnRpbWUgKz0gZHQ7XG4gICAgdGhpcy5fdGltZSArPSBkdDtcbiAgICBjb3VudCA9IHRoaXMuX3RpbWUgLyB0aGlzLmVtaXNzaW9uUmF0ZTtcblxuICAgIGlmICh0aGlzLmVtaXR0aW5nICYmIGNvdW50ID49IDEpIHtcbiAgICAgICAgdGhpcy5fdGltZSA9IDA7XG4gICAgICAgIHRoaXMuc3Bhd24ocmFuZEludCh0aGlzLm1pbkVtaXNzaW9uLCB0aGlzLm1heEVtaXNzaW9uKSAqIChjb3VudCB8IDApKTtcblxuICAgICAgICBpZiAoIXRoaXMubG9vcCAmJiB0aGlzLnRpbWUgPiB0aGlzLmR1cmF0aW9uKSB0aGlzLmVtaXR0aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaSA9IHBhcnRpY2xlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwYXJ0aWNsZSA9IHBhcnRpY2xlc1tpXTtcbiAgICAgICAgcGFydGljbGUudXBkYXRlKGR0KTtcbiAgICAgICAgbGlmZSA9IHBhcnRpY2xlLmxpZmVUaW1lIC8gcGFydGljbGUubGlmZTtcblxuICAgICAgICBpZiAoc2l6ZVR3ZWVuVXBkYXRlKSBwYXJ0aWNsZS5zaXplID0gc2l6ZVR3ZWVuLnVwZGF0ZShsaWZlKTtcbiAgICAgICAgaWYgKGFscGhhVHdlZW5VcGRhdGUpIHBhcnRpY2xlLmFscGhhID0gYWxwaGFUd2Vlbi51cGRhdGUobGlmZSk7XG4gICAgICAgIGlmIChjb2xvclR3ZWVuVXBkYXRlKSBjb2xvclR3ZWVuLnVwZGF0ZShsaWZlLCBwYXJ0aWNsZS5jb2xvcik7XG5cbiAgICAgICAgaWYgKGxpZmUgPiAxKSB7XG4gICAgICAgICAgICBQQVJUSUNMRV9QT09MLnJlbW92ZU9iamVjdChwYXJ0aWNsZSk7XG4gICAgICAgICAgICBwYXJ0aWNsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZW1pdHRpbmcgJiYgcGFydGljbGVzLmxlbmd0aCA9PT0gMCkgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG59O1xuXG5cbkVtaXR0ZXIyRC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gQ2xhc3MucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi50eXBlID0gMTtcblxuICAgIGpzb24ucG9zaXRpb25UeXBlID0gdGhpcy5wb3NpdGlvblR5cGU7XG4gICAganNvbi52ZWxvY2l0eVR5cGUgPSB0aGlzLnZlbG9jaXR5VHlwZTtcblxuICAgIGpzb24ubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsID8gdGhpcy5tYXRlcmlhbC5uYW1lIDogdW5kZWZpbmVkO1xuXG4gICAganNvbi5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24udG9KU09OKGpzb24ucG9zaXRpb24pO1xuICAgIGpzb24ucG9zaXRpb25TcHJlYWQgPSB0aGlzLnBvc2l0aW9uU3ByZWFkLnRvSlNPTihqc29uLnBvc2l0aW9uU3ByZWFkKTtcbiAgICBqc29uLnBvc2l0aW9uUmFkaXVzID0gdGhpcy5wb3NpdGlvblJhZGl1cztcblxuICAgIGpzb24uc3BlZWQgPSB0aGlzLnNwZWVkO1xuICAgIGpzb24uc3BlZWRTcHJlYWQgPSB0aGlzLnNwZWVkU3ByZWFkO1xuXG4gICAganNvbi53b3JsZFNwYWNlID0gdGhpcy53b3JsZFNwYWNlO1xuXG4gICAganNvbi5taW5FbWlzc2lvbiA9IHRoaXMubWluRW1pc3Npb247XG4gICAganNvbi5tYXhFbWlzc2lvbiA9IHRoaXMubWF4RW1pc3Npb247XG5cbiAgICBqc29uLm1pbkxpZmUgPSB0aGlzLm1pbkxpZmU7XG4gICAganNvbi5tYXhMaWZlID0gdGhpcy5tYXhMaWZlO1xuXG4gICAganNvbi5taW5TaXplID0gdGhpcy5taW5TaXplO1xuICAgIGpzb24ubWF4U2l6ZSA9IHRoaXMubWF4U2l6ZTtcblxuICAgIGpzb24uc2l6ZVR3ZWVuID0gdGhpcy5zaXplVHdlZW4udG9KU09OKGpzb24uc2l6ZVR3ZWVuKTtcbiAgICBqc29uLmFscGhhVHdlZW4gPSB0aGlzLmFscGhhVHdlZW4udG9KU09OKGpzb24uYWxwaGFUd2Vlbik7XG4gICAganNvbi5jb2xvclR3ZWVuID0gdGhpcy5jb2xvclR3ZWVuLnRvSlNPTihqc29uLmNvbG9yVHdlZW4pO1xuXG4gICAganNvbi52ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHkudG9KU09OKGpzb24udmVsb2NpdHkpO1xuICAgIGpzb24udmVsb2NpdHlTcHJlYWQgPSB0aGlzLnZlbG9jaXR5U3ByZWFkLnRvSlNPTihqc29uLnZlbG9jaXR5U3ByZWFkKTtcblxuICAgIGpzb24uYWNjZWxlcmF0aW9uID0gdGhpcy5hY2NlbGVyYXRpb24udG9KU09OKGpzb24uYWNjZWxlcmF0aW9uKTtcbiAgICBqc29uLmFjY2VsZXJhdGlvblNwcmVhZCA9IHRoaXMuYWNjZWxlcmF0aW9uU3ByZWFkLnRvSlNPTihqc29uLmFjY2VsZXJhdGlvblNwcmVhZCk7XG5cbiAgICBqc29uLmFuZ3VsYXJWZWxvY2l0eSA9IHRoaXMuYW5ndWxhclZlbG9jaXR5O1xuICAgIGpzb24uYW5ndWxhckFjY2VsZXJhdGlvbiA9IHRoaXMuYW5ndWxhckFjY2VsZXJhdGlvbjtcblxuICAgIGpzb24uYW5ndWxhclZlbG9jaXR5U3ByZWFkID0gdGhpcy5hbmd1bGFyVmVsb2NpdHlTcHJlYWQ7XG4gICAganNvbi5yYW5kb21BbmdsZSA9IHRoaXMucmFuZG9tQW5nbGU7XG5cbiAgICBqc29uLmVtaXNzaW9uUmF0ZSA9IHRoaXMuZW1pc3Npb25SYXRlO1xuXG4gICAganNvbi5jb2xvciA9IHRoaXMuY29sb3IudG9KU09OKGpzb24uY29sb3IpO1xuICAgIGpzb24uY29sb3JTcHJlYWQgPSB0aGlzLmNvbG9yU3ByZWFkLnRvSlNPTihqc29uLmNvbG9yU3ByZWFkKTtcblxuICAgIGpzb24udGltZSA9IHRoaXMudGltZTtcbiAgICBqc29uLl90aW1lID0gdGhpcy5fdGltZTtcblxuICAgIGpzb24uZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgIGpzb24ubG9vcCA9IHRoaXMubG9vcDtcbiAgICBqc29uLnBsYXlpbmcgPSB0aGlzLnBsYXlpbmc7XG4gICAganNvbi5lbWl0dGluZyA9IHRoaXMuZW1pdHRpbmc7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuRW1pdHRlcjJELnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnBvc2l0aW9uVHlwZSA9IGpzb24ucG9zaXRpb25UeXBlO1xuICAgIHRoaXMudmVsb2NpdHlUeXBlID0ganNvbi52ZWxvY2l0eVR5cGU7XG5cbiAgICB0aGlzLm1hdGVyaWFsID0ganNvbi5tYXRlcmlhbCA/IEFzc2V0cy5nZXQoanNvbi5tYXRlcmlhbCkgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnBvc2l0aW9uLmZyb21KU09OKGpzb24ucG9zaXRpb24pO1xuICAgIHRoaXMucG9zaXRpb25TcHJlYWQuZnJvbUpTT04oanNvbi5wb3NpdGlvblNwcmVhZCk7XG4gICAgdGhpcy5wb3NpdGlvblJhZGl1cyA9IGpzb24ucG9zaXRpb25SYWRpdXM7XG5cbiAgICB0aGlzLnNwZWVkID0ganNvbi5zcGVlZDtcbiAgICB0aGlzLnNwZWVkU3ByZWFkID0ganNvbi5zcGVlZFNwcmVhZDtcblxuICAgIHRoaXMud29ybGRTcGFjZSA9IGpzb24ud29ybGRTcGFjZTtcblxuICAgIHRoaXMubWluRW1pc3Npb24gPSBqc29uLm1pbkVtaXNzaW9uO1xuICAgIHRoaXMubWF4RW1pc3Npb24gPSBqc29uLm1heEVtaXNzaW9uO1xuXG4gICAgdGhpcy5taW5MaWZlID0ganNvbi5taW5MaWZlO1xuICAgIHRoaXMubWF4TGlmZSA9IGpzb24ubWF4TGlmZTtcblxuICAgIHRoaXMubWluU2l6ZSA9IGpzb24ubWluU2l6ZTtcbiAgICB0aGlzLm1heFNpemUgPSBqc29uLm1heFNpemU7XG5cbiAgICB0aGlzLnNpemVUd2Vlbi5mcm9tSlNPTihqc29uLnNpemVUd2Vlbik7XG4gICAgdGhpcy5hbHBoYVR3ZWVuLmZyb21KU09OKGpzb24uYWxwaGFUd2Vlbik7XG4gICAgdGhpcy5jb2xvclR3ZWVuLmZyb21KU09OKGpzb24uY29sb3JUd2Vlbik7XG5cbiAgICB0aGlzLnZlbG9jaXR5LmZyb21KU09OKGpzb24udmVsb2NpdHkpO1xuICAgIHRoaXMudmVsb2NpdHlTcHJlYWQuZnJvbUpTT04oanNvbi52ZWxvY2l0eVNwcmVhZCk7XG5cbiAgICB0aGlzLmFjY2VsZXJhdGlvbi5mcm9tSlNPTihqc29uLmFjY2VsZXJhdGlvbik7XG4gICAgdGhpcy5hY2NlbGVyYXRpb25TcHJlYWQuZnJvbUpTT04oanNvbi5hY2NlbGVyYXRpb25TcHJlYWQpO1xuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgPSBqc29uLmFuZ3VsYXJWZWxvY2l0eTtcbiAgICB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24gPSBqc29uLmFuZ3VsYXJBY2NlbGVyYXRpb247XG5cbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eVNwcmVhZCA9IGpzb24uYW5ndWxhclZlbG9jaXR5U3ByZWFkO1xuICAgIHRoaXMucmFuZG9tQW5nbGUgPSBqc29uLnJhbmRvbUFuZ2xlO1xuXG4gICAgdGhpcy5lbWlzc2lvblJhdGUgPSBqc29uLmVtaXNzaW9uUmF0ZTtcblxuICAgIHRoaXMuY29sb3IuZnJvbUpTT04oanNvbi5jb2xvcik7XG4gICAgdGhpcy5jb2xvclNwcmVhZC5mcm9tSlNPTihqc29uLmNvbG9yU3ByZWFkKTtcblxuICAgIHRoaXMudGltZSA9IGpzb24udGltZTtcbiAgICB0aGlzLl90aW1lID0ganNvbi5fdGltZTtcblxuICAgIHRoaXMuZHVyYXRpb24gPSBqc29uLmR1cmF0aW9uO1xuICAgIHRoaXMubG9vcCA9IGpzb24ubG9vcDtcbiAgICB0aGlzLnBsYXlpbmcgPSBqc29uLnBsYXlpbmc7XG4gICAgdGhpcy5lbWl0dGluZyA9IGpzb24uZW1pdHRpbmc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuRW1pdHRlcjJELk1BWF9QQVJUSUNMRVMgPSAxMDI0O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjJEO1xuIiwidmFyIFZlYzMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbWF0aC92ZWMzXCIpO1xudmFyIENvbG9yID0gcmVxdWlyZShcIi4uLy4uLy4uL21hdGgvY29sb3JcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBQYXJ0aWNsZSgpIHtcblxuICAgIHRoaXMueiA9IDE7XG4gICAgdGhpcy5hbHBoYSA9IDE7XG5cbiAgICB0aGlzLmxpZmVUaW1lID0gMDtcbiAgICB0aGlzLmxpZmUgPSAxO1xuXG4gICAgdGhpcy5zaXplID0gMTtcblxuICAgIHRoaXMuY29sb3IgPSBuZXcgQ29sb3I7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlYzM7XG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWMzO1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gbmV3IFZlYzM7XG5cbiAgICB0aGlzLmFuZ2xlID0gMDtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IDA7XG4gICAgdGhpcy5hbmd1bGFyQWNjZWxlcmF0aW9uID0gMDtcbn1cblxuXG5QYXJ0aWNsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgdmFyIHBvcyA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIHZlbCA9IHRoaXMudmVsb2NpdHksXG4gICAgICAgIGFjYyA9IHRoaXMuYWNjZWxlcmF0aW9uO1xuXG4gICAgcG9zLnggKz0gdmVsLnggKiBkdDtcbiAgICBwb3MueSArPSB2ZWwueSAqIGR0O1xuICAgIHBvcy56ICs9IHZlbC56ICogZHQ7XG5cbiAgICB2ZWwueCArPSBhY2MueCAqIGR0O1xuICAgIHZlbC55ICs9IGFjYy55ICogZHQ7XG4gICAgdmVsLnogKz0gYWNjLnogKiBkdDtcblxuICAgIHRoaXMuYW5nbGUgKz0gdGhpcy5hbmd1bGFyVmVsb2NpdHkgKiBkdDtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSArPSB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24gKiBkdDtcblxuICAgIHRoaXMubGlmZVRpbWUgKz0gZHQ7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFydGljbGU7XG4iLCJ2YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vLi4vbWF0aC9jb2xvclwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFBhcnRpY2xlMkQoKSB7XG5cbiAgICB0aGlzLmFscGhhID0gMTtcblxuICAgIHRoaXMubGlmZVRpbWUgPSAwO1xuICAgIHRoaXMubGlmZSA9IDE7XG5cbiAgICB0aGlzLnNpemUgPSAxO1xuXG4gICAgdGhpcy5jb2xvciA9IG5ldyBDb2xvcjtcblxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjMjtcbiAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IFZlYzI7XG4gICAgdGhpcy5hY2NlbGVyYXRpb24gPSBuZXcgVmVjMjtcblxuICAgIHRoaXMuYW5nbGUgPSAwO1xuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gMDtcbiAgICB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24gPSAwO1xufVxuXG5cblBhcnRpY2xlMkQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHZhciBwb3MgPSB0aGlzLnBvc2l0aW9uLFxuICAgICAgICB2ZWwgPSB0aGlzLnZlbG9jaXR5LFxuICAgICAgICBhY2MgPSB0aGlzLmFjY2VsZXJhdGlvbjtcblxuICAgIHBvcy54ICs9IHZlbC54ICogZHQ7XG4gICAgcG9zLnkgKz0gdmVsLnkgKiBkdDtcblxuICAgIHZlbC54ICs9IGFjYy54ICogZHQ7XG4gICAgdmVsLnkgKz0gYWNjLnkgKiBkdDtcblxuICAgIHRoaXMuYW5nbGUgKz0gdGhpcy5hbmd1bGFyVmVsb2NpdHkgKiBkdDtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSArPSB0aGlzLmFuZ3VsYXJBY2NlbGVyYXRpb24gKiBkdDtcblxuICAgIHRoaXMubGlmZVRpbWUgKz0gZHQ7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFydGljbGUyRDtcbiIsInZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2NsYXNzXCIpO1xudmFyIFRpbWUgPSByZXF1aXJlKFwiLi4vLi4vLi4vYmFzZS90aW1lXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2xvZ1wiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50XCIpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9lbWl0dGVyXCIpO1xudmFyIEVtaXR0ZXIyRCA9IHJlcXVpcmUoXCIuL2VtaXR0ZXJfMmRcIik7XG52YXIgVHdlZW4gPSByZXF1aXJlKFwiLi90d2VlblwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQGNsYXNzIFBhcnRpY2xlU3lzdGVtXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqIEBicmllZiAyZCBwYXJ0aWNsZSBlbWl0dGVyXG4gKiBAcGFyYW0gT2JqZWN0IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gUGFydGljbGVTeXN0ZW0ob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBcIlBhcnRpY2xlU3lzdGVtXCIsIG9wdHMpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IEJvb2xlYW4gcGxheWluZ1xuICAgICAqIEBtZW1iZXJvZiBQYXJ0aWNsZVN5c3RlbVxuICAgICAqL1xuICAgIHRoaXMucGxheWluZyA9IG9wdHMucGxheWluZyAhPSB1bmRlZmluZWQgPyBvcHRzLnBsYXlpbmcgOiB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IEFycmF5IGVtaXR0ZXJzXG4gICAgICogQG1lbWJlcm9mIFBhcnRpY2xlU3lzdGVtXG4gICAgICovXG4gICAgdGhpcy5lbWl0dGVycyA9IFtdO1xuICAgIHRoaXMuX2VtaXR0ZXJIYXNoID0ge307XG4gICAgdGhpcy5fZW1pdHRlckpTT05IYXNoID0ge307XG5cbiAgICBpZiAob3B0cy5lbWl0dGVyKSB0aGlzLmFkZEVtaXR0ZXIob3B0cy5lbWl0dGVyKTtcbiAgICBpZiAob3B0cy5lbWl0dGVycykgdGhpcy5hZGQuYXBwbHkodGhpcywgb3B0cy5lbWl0dGVycyk7XG59XG5cblBhcnRpY2xlU3lzdGVtLnR5cGUgPSBcIlBhcnRpY2xlU3lzdGVtXCI7XG5Db21wb25lbnQuZXh0ZW5kKFBhcnRpY2xlU3lzdGVtKTtcblxuXG5QYXJ0aWNsZVN5c3RlbS5FbWl0dGVyID0gRW1pdHRlcjtcblBhcnRpY2xlU3lzdGVtLkVtaXR0ZXIyRCA9IEVtaXR0ZXIyRDtcblBhcnRpY2xlU3lzdGVtLlR3ZWVuID0gVHdlZW47XG5cblxuUGFydGljbGVTeXN0ZW0ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgZW1pdHRlcnMgPSB0aGlzLmVtaXR0ZXJzLFxuICAgICAgICBvdGhlckVtaXR0ZXJzID0gb3RoZXIuZW1pdHRlcnMsXG4gICAgICAgIGkgPSBvdGhlckVtaXR0ZXJzLmxlbmd0aCxcbiAgICAgICAgaiA9IGVtaXR0ZXJzLmxlbmd0aCxcbiAgICAgICAgZW1pdHRlciwgb3RoZXJFbWl0dGVyO1xuXG4gICAgd2hpbGUgKGktLSA+IGopIHRoaXMucmVtb3ZlRW1pdHRlcihlbWl0dGVyc1tpXSk7XG5cbiAgICBpID0gb3RoZXJFbWl0dGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvdGhlckVtaXR0ZXIgPSBvdGhlckVtaXR0ZXJzW2ldO1xuXG4gICAgICAgIGlmICgoZW1pdHRlciA9IGVtaXR0ZXJzW2ldKSkge1xuICAgICAgICAgICAgaWYgKChlbWl0dGVyLl9jbGFzc05hbWUgPT09IG90aGVyRW1pdHRlci5fY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIG90aGVyRW1pdHRlcnNbaV0uY29weShvdGhlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRW1pdHRlcihlbWl0dGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEVtaXR0ZXIob3RoZXJFbWl0dGVyLmNsb25lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRFbWl0dGVyKG90aGVyRW1pdHRlci5jbG9uZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnBsYXlpbmcgPSBvdGhlci5wbGF5aW5nO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblBhcnRpY2xlU3lzdGVtLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmNsZWFyLmNhbGwodGhpcyk7XG4gICAgdmFyIGVtaXR0ZXJzID0gdGhpcy5lbWl0dGVycyxcbiAgICAgICAgaSA9IGVtaXR0ZXJzLmxlbmd0aDtcbiAgICA7XG5cbiAgICB3aGlsZSAoaS0tKSBlbWl0dGVyc1tpXS5jbGVhcigpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QYXJ0aWNsZVN5c3RlbS5wcm90b3R5cGUuYWRkRW1pdHRlciA9IGZ1bmN0aW9uIChlbWl0dGVyKSB7XG4gICAgdmFyIGVtaXR0ZXJzID0gdGhpcy5lbWl0dGVycyxcbiAgICAgICAgaW5kZXggPSBlbWl0dGVycy5pbmRleE9mKGVtaXR0ZXIpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBpZiAoZW1pdHRlci5wYXJ0aWNsZVN5c3RlbSkgZW1pdHRlciA9IGVtaXR0ZXIuY2xvbmUoKTtcblxuICAgICAgICBlbWl0dGVyLnBhcnRpY2xlU3lzdGVtID0gdGhpcztcbiAgICAgICAgZW1pdHRlcnMucHVzaChlbWl0dGVyKTtcbiAgICAgICAgdGhpcy5fZW1pdHRlckhhc2hbZW1pdHRlci5faWRdID0gZW1pdHRlcjtcbiAgICAgICAgaWYgKGVtaXR0ZXIuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2VtaXR0ZXJIYXNoW2VtaXR0ZXIuX2pzb25JZF0gPSBlbWl0dGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIlBhcnRpY2xlU3lzdGVtLmFkZEVtaXR0ZXI6IFBhcnRpY2xlU3lzdGVtIGFscmVhZHkgaGFzIHBhc3NlZCBFbWl0dGVyXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QYXJ0aWNsZVN5c3RlbS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkRW1pdHRlcihhcmd1bWVudHNbaV0pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QYXJ0aWNsZVN5c3RlbS5wcm90b3R5cGUucmVtb3ZlRW1pdHRlciA9IGZ1bmN0aW9uIChlbWl0dGVyKSB7XG4gICAgdmFyIGVtaXR0ZXJzID0gdGhpcy5lbWl0dGVycyxcbiAgICAgICAgaW5kZXggPSBlbWl0dGVycy5pbmRleE9mKGVtaXR0ZXIpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBlbWl0dGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLl9lbWl0dGVySGFzaFtlbWl0dGVyLl9pZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChlbWl0dGVyLl9qc29uSWQgIT09IC0xKSB0aGlzLl9lbWl0dGVySGFzaFtlbWl0dGVyLl9qc29uSWRdID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGVtaXR0ZXIuY2xlYXIoKTtcbiAgICAgICAgZW1pdHRlci5wYXJ0aWNsZVN5c3RlbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZW1pdHRlci50cmFuc2Zvcm0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUGFydGljbGVTeXN0ZW0ucmVtb3ZlRW1pdHRlcjogUGFydGljbGVTeXN0ZW0gZG9lcyBub3QgaGF2ZSBwYXNzZWQgRW1pdHRlclwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUGFydGljbGVTeXN0ZW0ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLnJlbW92ZUVtaXR0ZXIoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUGFydGljbGVTeXN0ZW0ucHJvdG90eXBlLmZpbmRFbWl0dGVyQnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2VtaXR0ZXJIYXNoW2lkXTtcbn07XG5cblxuUGFydGljbGVTeXN0ZW0ucHJvdG90eXBlLmZpbmRFbWl0dGVyQnlKU09OSWQgPSBmdW5jdGlvbiAoaWQpIHtcblxuICAgIHJldHVybiB0aGlzLl9lbWl0dGVySlNPTkhhc2hbaWRdO1xufTtcblxuXG4vKipcbiAqIEBtZXRob2QgcGxheVxuICogQG1lbWJlcm9mIFBhcnRpY2xlU3lzdGVtXG4gKi9cblBhcnRpY2xlU3lzdGVtLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbWl0dGVycyA9IHRoaXMuZW1pdHRlcnMsXG4gICAgICAgIGkgPSBlbWl0dGVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSBlbWl0dGVyc1tpXS5wbGF5KCk7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QYXJ0aWNsZVN5c3RlbS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5wbGF5aW5nKSByZXR1cm47XG5cbiAgICB2YXIgZHQgPSBUaW1lLmRlbHRhLFxuICAgICAgICBlbWl0dGVycyA9IHRoaXMuZW1pdHRlcnMsXG4gICAgICAgIGVtaXR0ZXIsIHBsYXlpbmcgPSBmYWxzZSxcbiAgICAgICAgaSA9IGVtaXR0ZXJzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgZW1pdHRlciA9IGVtaXR0ZXJzW2ldO1xuICAgICAgICBlbWl0dGVyLnVwZGF0ZShkdCk7XG4gICAgICAgIGlmIChlbWl0dGVyLnBsYXlpbmcpIHBsYXlpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucGxheWluZyA9IHBsYXlpbmc7XG59O1xuXG5cblBhcnRpY2xlU3lzdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBlbWl0dGVycyA9IHRoaXMuZW1pdHRlcnMsXG4gICAgICAgIGpzb25FbWl0dGVycyA9IGpzb24uZW1pdHRlcnMgfHwgKGpzb24uZW1pdHRlcnMgPSBbXSksXG4gICAgICAgIGkgPSBlbWl0dGVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGpzb25FbWl0dGVyc1tpXSA9IGVtaXR0ZXJzW2ldLnRvSlNPTihqc29uRW1pdHRlcnNbaV0pO1xuICAgIH1cbiAgICBqc29uLnBsYXlpbmcgPSB0aGlzLnBsYXlpbmc7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuUGFydGljbGVTeXN0ZW0ucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGpzb25FbWl0dGVycyA9IGpzb24uZW1pdHRlcnMsXG4gICAgICAgIGVtaXR0ZXIsIGpzb25FbWl0dGVyLFxuICAgICAgICBpID0ganNvbkVtaXR0ZXJzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAganNvbkVtaXR0ZXIgPSBqc29uRW1pdHRlcnNbaV07XG5cbiAgICAgICAgaWYgKChlbWl0dGVyID0gdGhpcy5maW5kRW1pdHRlckJ5SlNPTklkKGpzb25FbWl0dGVyLl9pZCkpKSB7XG4gICAgICAgICAgICBlbWl0dGVyLmZyb21KU09OKGpzb25FbWl0dGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRW1pdHRlcihDbGFzcy5mcm9tSlNPTihqc29uRW1pdHRlcikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMucGxheWluZyA9IGpzb24ucGxheWluZztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRpY2xlU3lzdGVtO1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgTWF0aGYgPSByZXF1aXJlKFwiLi4vLi4vLi4vbWF0aC9tYXRoZlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgdGhpcy50aW1lcyA9IG9wdHMudGltZXMgfHwgW107XG4gICAgdGhpcy52YWx1ZXMgPSBvcHRzLnZhbHVlcyB8fCBbXTtcbn1cblxuXG5Ud2Vlbi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy50aW1lcyA9IG90aGVyLnRpbWVzLnNsaWNlKCk7XG4gICAgdGhpcy52YWx1ZXMgPSBvdGhlci52YWx1ZXMuc2xpY2UoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Ud2Vlbi5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLnRpbWVzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZXMubGVuZ3RoID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Ud2Vlbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRpbWUsIG91dCkge1xuICAgIHZhciB0aW1lcyA9IHRoaXMudGltZXMsXG4gICAgICAgIHZhbHVlcyA9IHRoaXMudmFsdWVzLFxuICAgICAgICBuID0gdGltZXMubGVuZ3RoLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgdDtcblxuICAgIHdoaWxlIChpIDwgbiAmJiB0aW1lID4gdGltZXNbaV0pIGkrKztcblxuICAgIGlmIChpID09PSAwKSByZXR1cm4gdmFsdWVzWzBdO1xuICAgIGlmIChpID09PSBuKSByZXR1cm4gdmFsdWVzW24gLSAxXTtcblxuICAgIHQgPSAodGltZSAtIHRpbWVzW2kgLSAxXSkgLyAodGltZXNbaV0gLSB0aW1lc1tpIC0gMV0pO1xuXG4gICAgaWYgKG91dCkgcmV0dXJuIG91dC5jb3B5KHZhbHVlc1tpIC0gMV0pLmxlcnAodmFsdWVzW2ldLCB0KTtcbiAgICByZXR1cm4gdmFsdWVzW2kgLSAxXSArIHQgKiAodmFsdWVzW2ldIC0gdmFsdWVzW2kgLSAxXSk7XG59O1xuXG5cblR3ZWVuLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG4gICAgdmFyIHRpbWVzID0gdGhpcy50aW1lcyxcbiAgICAgICAgdmFsdWVzID0gdGhpcy52YWx1ZXMsXG4gICAgICAgIGpzb25UaW1lcyA9IGpzb24udGltZXMgfHwgKGpzb24udGltZXMgPSBbXSksXG4gICAgICAgIGpzb25WYWx1ZXMgPSBqc29uLnZhbHVlcyB8fCAoanNvbi52YWx1ZXMgPSBbXSksXG4gICAgICAgIGk7XG5cbiAgICBpID0gdGltZXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIGpzb25UaW1lc1tpXSA9IHRpbWVzW2ldO1xuXG4gICAgaSA9IHZhbHVlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkganNvblZhbHVlc1tpXSA9IHZhbHVlc1tpXS50b0pTT04gPyB2YWx1ZXNbaV0udG9KU09OKGpzb25WYWx1ZXNbaV0pIDogdmFsdWVzW2ldO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblR3ZWVuLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgdmFyIHRpbWVzID0gdGhpcy50aW1lcyxcbiAgICAgICAgdmFsdWVzID0gdGhpcy52YWx1ZXMsXG4gICAgICAgIGpzb25UaW1lcyA9IGpzb24udGltZXMsXG4gICAgICAgIGpzb25WYWx1ZXMgPSBqc29uLnZhbHVlcyxcbiAgICAgICAgaTtcblxuICAgIGkgPSBqc29uVGltZXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHRpbWVzW2ldID0gZnJvbUpTT04oanNvblRpbWVzW2ldKTtcblxuICAgIGkgPSBqc29uVmFsdWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB2YWx1ZXNbaV0gPSBmcm9tSlNPTihqc29uVmFsdWVzW2ldKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5mdW5jdGlvbiBmcm9tSlNPTihqc29uKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBDbGFzcy5fY2xhc3NlcyxcbiAgICAgICAgbWF0aENsYXNzZXMgPSBNYXRoZi5fY2xhc3NlcztcblxuICAgIGlmICh0eXBlb2YoanNvbikgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfSBlbHNlIGlmIChtYXRoQ2xhc3Nlc1tqc29uLl9jbGFzc05hbWVdKSB7XG4gICAgICAgIHJldHVybiBNYXRoZi5mcm9tSlNPTihqc29uKTtcbiAgICB9IGVsc2UgaWYgKGNsYXNzZXNbanNvbi5fY2xhc3NOYW1lXSkge1xuICAgICAgICByZXR1cm4gQ2xhc3MuZnJvbUpTT04oanNvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBUd2VlbjtcbiIsInZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2NsYXNzXCIpO1xudmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIFZlYzMgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMzXCIpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcbnZhciBQaHlzMkQgPSByZXF1aXJlKFwiLi4vLi4vcGh5czJkL3BoeXMyZFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFJpZ2lkQm9keTJEKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ29tcG9uZW50LmNhbGwodGhpcywgXCJSaWdpZEJvZHkyRFwiLCBvcHRzKTtcblxuICAgIHRoaXMuYm9keSA9IG5ldyBQaHlzMkQuUDJSaWdpZGJvZHkob3B0cyk7XG59XG5cbkNsYXNzLmV4dGVuZChSaWdpZEJvZHkyRCwgQ29tcG9uZW50KTtcblxuXG5SaWdpZEJvZHkyRC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5ib2R5Lm9mZihcImNvbGxpZGVcIiwgb25Db2xsaWRlLCB0aGlzKTtcbiAgICB0aGlzLmJvZHkub2ZmKFwiY29sbGlkaW5nXCIsIG9uQ29sbGlkaW5nLCB0aGlzKTtcbiAgICB0aGlzLmJvZHkgPSBvdGhlci5ib2R5LmNsb25lKCk7XG4gICAgdGhpcy5ib2R5Lm9uKFwiY29sbGlkZVwiLCBvbkNvbGxpZGUsIHRoaXMpO1xuICAgIHRoaXMuYm9keS5vbihcImNvbGxpZGluZ1wiLCBvbkNvbGxpZGluZywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUmlnaWRCb2R5MkQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuYm9keS5vZmYoXCJjb2xsaWRlXCIsIG9uQ29sbGlkZSwgdGhpcyk7XG4gICAgdGhpcy5ib2R5Lm9mZihcImNvbGxpZGluZ1wiLCBvbkNvbGxpZGluZywgdGhpcyk7XG4gICAgdGhpcy5ib2R5LnVzZXJEYXRhID0gdW5kZWZpbmVkO1xufTtcblxuXG5SaWdpZEJvZHkyRC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZHksXG4gICAgICAgIGdhbWVPYmplY3QgPSB0aGlzLmdhbWVPYmplY3QsXG4gICAgICAgIHRyYW5zZm9ybSA9IGdhbWVPYmplY3QudHJhbnNmb3JtLFxuICAgICAgICB0cmFuc2Zvcm0yZCA9IGdhbWVPYmplY3QudHJhbnNmb3JtMmQ7XG5cbiAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIGJvZHkucG9zaXRpb24uY29weSh0cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICBib2R5LnJvdGF0aW9uID0gdHJhbnNmb3JtLnJvdGF0aW9uLnJvdGF0aW9uWigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJvZHkucG9zaXRpb24uY29weSh0cmFuc2Zvcm0yZC5wb3NpdGlvbik7XG4gICAgICAgIGJvZHkucm90YXRpb24gPSB0cmFuc2Zvcm0yZC5yb3RhdGlvbjtcbiAgICB9XG5cbiAgICBib2R5LmluaXQoKTtcbiAgICBib2R5LnVzZXJEYXRhID0gdGhpcztcbiAgICBib2R5Lm9uKFwiY29sbGlkZVwiLCBvbkNvbGxpZGUsIHRoaXMpO1xuICAgIGJvZHkub24oXCJjb2xsaWRpbmdcIiwgb25Db2xsaWRpbmcsIHRoaXMpO1xufTtcblxuXG52YXIgekF4aXMgPSBuZXcgVmVjMygwLjAsIDAuMCwgMS4wKTtcblJpZ2lkQm9keTJELnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZHksXG4gICAgICAgIGdhbWVPYmplY3QgPSB0aGlzLmdhbWVPYmplY3QsXG4gICAgICAgIHRyYW5zZm9ybSA9IGdhbWVPYmplY3QudHJhbnNmb3JtLFxuICAgICAgICB0cmFuc2Zvcm0yZCA9IGdhbWVPYmplY3QudHJhbnNmb3JtMmQ7XG5cbiAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIHRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5KGJvZHkucG9zaXRpb24pO1xuICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24uZnJvbUF4aXNBbmdsZSh6QXhpcywgYm9keS5yb3RhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNmb3JtMmQucG9zaXRpb24uY29weShib2R5LnBvc2l0aW9uKTtcbiAgICAgICAgdHJhbnNmb3JtMmQucm90YXRpb24gPSBib2R5LnJvdGF0aW9uO1xuICAgIH1cbn07XG5cblxuUmlnaWRCb2R5MkQucHJvdG90eXBlLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiAoZm9yY2UsIHdvcmxkUG9pbnQpIHtcblxuICAgIHRoaXMuYm9keS5hcHBseUZvcmNlKGZvcmNlLCB3b3JsZFBvaW50KTtcbn07XG5cblxuUmlnaWRCb2R5MkQucHJvdG90eXBlLmFwcGx5VG9ycXVlID0gZnVuY3Rpb24gKHRvcnF1ZSkge1xuXG4gICAgdGhpcy5ib2R5LmFwcGx5VG9ycXVlKHRvcnF1ZSk7XG59O1xuXG5cblJpZ2lkQm9keTJELnByb3RvdHlwZS5hcHBseUltcHVsc2UgPSBmdW5jdGlvbiAoaW1wdWxzZSwgd29ybGRQb2ludCkge1xuXG4gICAgdGhpcy5ib2R5LmFwcGx5SW1wdWxzZShpbXB1bHNlLCB3b3JsZFBvaW50KTtcbn07XG5cblxuUmlnaWRCb2R5MkQucHJvdG90eXBlLmFwcGx5VmVsb2NpdHkgPSBmdW5jdGlvbiAodmVsb2NpdHkpIHtcblxuICAgIHRoaXMuYm9keS5hcHBseVZlbG9jaXR5KHZlbG9jaXR5KTtcbn07XG5cblxuUmlnaWRCb2R5MkQucHJvdG90eXBlLmFwcGx5QW5ndWxhclZlbG9jaXR5ID0gZnVuY3Rpb24gKGFuZ3VsYXJWZWxvY2l0eSkge1xuXG4gICAgdGhpcy5ib2R5LmFwcGx5QW5ndWxhclZlbG9jaXR5KGFuZ3VsYXJWZWxvY2l0eSk7XG59O1xuXG5cblJpZ2lkQm9keTJELnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi5ib2R5ID0gdGhpcy5ib2R5LnRvSlNPTihqc29uLmJvZHkpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblJpZ2lkQm9keTJELnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5ib2R5LmZyb21KU09OKGpzb24uYm9keSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuZnVuY3Rpb24gb25Db2xsaWRlKGJvZHksIHNpLCBzaikge1xuICAgIGlmICghYm9keS51c2VyRGF0YSkgcmV0dXJuO1xuXG4gICAgdGhpcy5lbWl0KFwiY29sbGlkZVwiLCBib2R5LnVzZXJEYXRhLCBib2R5LCBzaSwgc2opO1xufTtcblxuXG5mdW5jdGlvbiBvbkNvbGxpZGluZyhib2R5LCBzaSwgc2opIHtcbiAgICBpZiAoIWJvZHkudXNlckRhdGEpIHJldHVybjtcblxuICAgIHRoaXMuZW1pdChcImNvbGxpZGluZ1wiLCBib2R5LnVzZXJEYXRhLCBib2R5LCBzaSwgc2opO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJpZ2lkQm9keTJEO1xuIiwidmFyIEVudW1zID0gcmVxdWlyZShcIi4uL2VudW1zXCIpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcbnZhciBBc3NldHMgPSByZXF1aXJlKFwiLi4vYXNzZXRzL2Fzc2V0c1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFNwcml0ZShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENvbXBvbmVudC5jYWxsKHRoaXMsIFwiU3ByaXRlXCIsIG9wdHMpO1xuXG4gICAgdGhpcy52aXNpYmxlID0gb3B0cy52aXNpYmxlICE9IHVuZGVmaW5lZCA/ICEhb3B0cy52aXNpYmxlIDogdHJ1ZTtcbiAgICB0aGlzLmJsZW5kaW5nID0gb3B0cy5ibGVuZGluZyAhPSB1bmRlZmluZWQgPyBvcHRzLmJsZW5kaW5nIDogRW51bXMuQmxlbmRpbmcuRGVmYXVsdDtcblxuICAgIHRoaXMubGF5ZXIgPSBvcHRzLmxheWVyICE9IHVuZGVmaW5lZCA/IG9wdHMubGF5ZXIgOiAwO1xuICAgIHRoaXMueiA9IG9wdHMueiAhPSB1bmRlZmluZWQgPyBvcHRzLnogOiAwO1xuXG4gICAgdGhpcy5hbHBoYSA9IG9wdHMuYWxwaGEgIT0gdW5kZWZpbmVkID8gb3B0cy5hbHBoYSA6IDE7XG5cbiAgICB0aGlzLm1hdGVyaWFsID0gb3B0cy5tYXRlcmlhbCAhPSB1bmRlZmluZWQgPyBvcHRzLm1hdGVyaWFsIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy53aWR0aCA9IG9wdHMud2lkdGggfHwgMTtcbiAgICB0aGlzLmhlaWdodCA9IG9wdHMuaGVpZ2h0IHx8IDE7XG5cbiAgICB0aGlzLnggPSBvcHRzLnggfHwgMDtcbiAgICB0aGlzLnkgPSBvcHRzLnkgfHwgMDtcbiAgICB0aGlzLncgPSBvcHRzLncgfHwgMTtcbiAgICB0aGlzLmggPSBvcHRzLmggfHwgMTtcblxuICAgIHRoaXMuX3dlYmdsSW5pdHRlZCA9IGZhbHNlO1xufVxuXG5Db21wb25lbnQuZXh0ZW5kKFNwcml0ZSk7XG5cblxuU3ByaXRlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnZpc2libGUgPSBvdGhlci52aXNpYmxlO1xuICAgIHRoaXMuYmxlbmRpbmcgPSBvdGhlci5ibGVuZGluZztcblxuICAgIHRoaXMubGF5ZXIgPSBvdGhlci5sYXllcjtcbiAgICB0aGlzLnogPSBvdGhlci56O1xuXG4gICAgdGhpcy5hbHBoYSA9IG90aGVyLmFscGhhO1xuXG4gICAgdGhpcy5tYXRlcmlhbCA9IG90aGVyLm1hdGVyaWFsO1xuXG4gICAgdGhpcy53aWR0aCA9IG90aGVyLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gb3RoZXIuaGVpZ2h0O1xuXG4gICAgdGhpcy54ID0gb3RoZXIueDtcbiAgICB0aGlzLnkgPSBvdGhlci55O1xuICAgIHRoaXMudyA9IG90aGVyLnc7XG4gICAgdGhpcy5oID0gb3RoZXIuaDtcblxuICAgIHRoaXMuX3dlYmdsSW5pdHRlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblNwcml0ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5tYXRlcmlhbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbEluaXR0ZWQgPSBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TcHJpdGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLnZpc2libGUgPSB0aGlzLnZpc2libGU7XG4gICAganNvbi5ibGVuZGluZyA9IHRoaXMuYmxlbmRpbmc7XG5cbiAgICBqc29uLmxheWVyID0gdGhpcy5sYXllcjtcbiAgICBqc29uLnogPSB0aGlzLno7XG5cbiAgICBqc29uLmFscGhhID0gdGhpcy5hbHBoYTtcblxuICAgIGpzb24ubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsID8gdGhpcy5tYXRlcmlhbC5uYW1lIDogdW5kZWZpbmVkO1xuXG4gICAganNvbi53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAganNvbi5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIGpzb24ueCA9IHRoaXMueDtcbiAgICBqc29uLnkgPSB0aGlzLnk7XG4gICAganNvbi53ID0gdGhpcy53O1xuICAgIGpzb24uaCA9IHRoaXMuaDtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5TcHJpdGUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnZpc2libGUgPSBqc29uLnZpc2libGU7XG4gICAgdGhpcy5ibGVuZGluZyA9IGpzb24uYmxlbmRpbmc7XG5cbiAgICB0aGlzLmxheWVyID0ganNvbi5sYXllcjtcbiAgICB0aGlzLnogPSBqc29uLno7XG5cbiAgICB0aGlzLmFscGhhID0ganNvbi5hbHBoYTtcblxuICAgIHRoaXMubWF0ZXJpYWwgPSBqc29uLm1hdGVyaWFsID8gQXNzZXRzLmdldChqc29uLm1hdGVyaWFsKSA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMud2lkdGggPSBqc29uLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0ganNvbi5oZWlnaHQ7XG5cbiAgICB0aGlzLnggPSBqc29uLng7XG4gICAgdGhpcy55ID0ganNvbi55O1xuICAgIHRoaXMudyA9IGpzb24udztcbiAgICB0aGlzLmggPSBqc29uLmg7XG5cbiAgICB0aGlzLl93ZWJnbEluaXR0ZWQgPSBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcml0ZTtcbiIsInZhciBUaW1lID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdGltZVwiKTtcbnZhciBBc3NldHMgPSByZXF1aXJlKFwiLi4vYXNzZXRzL2Fzc2V0c1wiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG52YXIgRW51bXMgPSByZXF1aXJlKFwiLi4vZW51bXNcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYWJzID0gTWF0aC5hYnMsXG4gICAgV3JhcE1vZGUgPSBFbnVtcy5XcmFwTW9kZTtcblxuXG4vKipcbiAqIEBjbGFzcyBTcHJpdGVBbmltYXRpb25cbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICogQGJyaWVmIGJhc2UgY2xhc3MgZm9yIGhhbmRsaW5nIHNwcml0ZSBhbmltYXRpb24gc2hlZXRzXG4gKiBAcGFyYW0gT2JqZWN0IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gU3ByaXRlQW5pbWF0aW9uKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ29tcG9uZW50LmNhbGwodGhpcywgXCJTcHJpdGVBbmltYXRpb25cIiwgb3B0cyk7XG5cbiAgICB0aGlzLnNoZWV0ID0gb3B0cy5zaGVldCAhPSB1bmRlZmluZWQgPyBvcHRzLnNoZWV0IDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5jdXJyZW50ID0gb3B0cy5jdXJyZW50ICE9IHVuZGVmaW5lZCA/IG9wdHMuY3VycmVudCA6IFwiaWRsZVwiO1xuICAgIHRoaXMubW9kZSA9IG9wdHMubW9kZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1vZGUgOiBXcmFwTW9kZS5Mb29wO1xuXG4gICAgdGhpcy5yYXRlID0gb3B0cy5yYXRlICE9IHVuZGVmaW5lZCA/IG9wdHMucmF0ZSA6IDEgLyAyNDtcblxuICAgIHRoaXMuX3RpbWUgPSAwO1xuICAgIHRoaXMuX2ZyYW1lID0gMDtcbiAgICB0aGlzLl9vcmRlciA9IDE7XG5cbiAgICB0aGlzLnBsYXlpbmcgPSB0aGlzLnNoZWV0ID8gdHJ1ZSA6IGZhbHNlO1xufVxuXG5Db21wb25lbnQuZXh0ZW5kKFNwcml0ZUFuaW1hdGlvbik7XG5cblxuU3ByaXRlQW5pbWF0aW9uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnNoZWV0ID0gb3RoZXIuc2hlZXQ7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSBvdGhlci5jdXJyZW50O1xuICAgIHRoaXMubW9kZSA9IG90aGVyLm1vZGU7XG5cbiAgICB0aGlzLnJhdGUgPSBvdGhlci5yYXRlO1xuXG4gICAgdGhpcy5fdGltZSA9IG90aGVyLl90aW1lO1xuICAgIHRoaXMuX2ZyYW1lID0gb3RoZXIuX2ZyYW1lO1xuICAgIHRoaXMuX29yZGVyID0gb3RoZXIuX29yZGVyO1xuXG4gICAgdGhpcy5wbGF5aW5nID0gb3RoZXIucGxheWluZztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TcHJpdGVBbmltYXRpb24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuc2hlZXQgPSB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU3ByaXRlQW5pbWF0aW9uLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKG5hbWUsIG1vZGUsIHJhdGUpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybiB0aGlzO1xuICAgIGlmICgodGhpcy5wbGF5aW5nICYmIHRoaXMuY3VycmVudCA9PT0gbmFtZSkgfHwgIXRoaXMuc2hlZXRbbmFtZV0pIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy5jdXJyZW50ID0gbmFtZTtcbiAgICB0aGlzLnJhdGUgPSByYXRlICE9IHVuZGVmaW5lZCA/IHJhdGUgOiAocmF0ZSA9IHRoaXMucmF0ZSk7XG4gICAgdGhpcy5tb2RlID0gbW9kZSB8fCAobW9kZSA9IHRoaXMubW9kZSk7XG4gICAgdGhpcy5fZnJhbWUgPSAwO1xuICAgIHRoaXMuX29yZGVyID0gMTtcbiAgICB0aGlzLl90aW1lID0gMDtcblxuICAgIHRoaXMucGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5lbWl0KFwicGxheVwiLCBuYW1lLCBtb2RlLCByYXRlKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TcHJpdGVBbmltYXRpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZiAodGhpcy5wbGF5aW5nKSB0aGlzLmVtaXQoXCJzdG9wXCIpO1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2ZyYW1lID0gMDtcbiAgICB0aGlzLl9vcmRlciA9IDE7XG4gICAgdGhpcy5fdGltZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU3ByaXRlQW5pbWF0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnBsYXlpbmcpIHJldHVybjtcbiAgICB2YXIgc3ByaXRlID0gdGhpcy5zcHJpdGUsXG4gICAgICAgIHNoZWV0ID0gdGhpcy5zaGVldCxcbiAgICAgICAgY3VycmVudCA9IHNoZWV0W3RoaXMuY3VycmVudF0sXG4gICAgICAgIHJhdGUsIGR0LCBjb3VudCwgbGVuZ3RoLCBvcmRlciwgZnJhbWUsIG1vZGUsIGFuaW1hdGlvbjtcblxuICAgIGlmICghc3ByaXRlIHx8ICFzaGVldCB8fCAhY3VycmVudCkgcmV0dXJuO1xuXG4gICAgcmF0ZSA9IHRoaXMucmF0ZTtcbiAgICBkdCA9IFRpbWUuZGVsdGE7XG4gICAgb3JkZXIgPSB0aGlzLl9vcmRlcjtcbiAgICBmcmFtZSA9IHRoaXMuX2ZyYW1lO1xuICAgIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICBpZiAoIXJhdGUgfHwgcmF0ZSA9PT0gSW5maW5pdHkgfHwgcmF0ZSA8IDApIHtcbiAgICAgICAgZnJhbWUgPSBhYnMoZnJhbWUpICUgY3VycmVudC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGltZSArPSBkdDtcbiAgICAgICAgY291bnQgPSB0aGlzLl90aW1lIC8gcmF0ZTtcblxuICAgICAgICBpZiAoY291bnQgPj0gMSkge1xuICAgICAgICAgICAgdGhpcy5fdGltZSA9IDA7XG4gICAgICAgICAgICBsZW5ndGggPSBjdXJyZW50Lmxlbmd0aDtcbiAgICAgICAgICAgIGZyYW1lICs9IChvcmRlciAqIChjb3VudCB8IDApKTtcblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFdyYXBNb2RlLkxvb3ApIHtcbiAgICAgICAgICAgICAgICBmcmFtZSA9IGZyYW1lICUgbGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBXcmFwTW9kZS5PbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yZGVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZSA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBXcmFwTW9kZS5QaW5nUG9uZykge1xuICAgICAgICAgICAgICAgIGlmIChvcmRlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JkZXIgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yZGVyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gV3JhcE1vZGUuQ2xhbXApIHtcbiAgICAgICAgICAgICAgICBpZiAob3JkZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZSA+PSBsZW5ndGgpIGZyYW1lID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUgPCAwKSBmcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYW5pbWF0aW9uID0gY3VycmVudFtmcmFtZV07XG4gICAgc3ByaXRlLnggPSBhbmltYXRpb25bMF07XG4gICAgc3ByaXRlLnkgPSBhbmltYXRpb25bMV07XG4gICAgc3ByaXRlLncgPSBhbmltYXRpb25bMl07XG4gICAgc3ByaXRlLmggPSBhbmltYXRpb25bM107XG5cbiAgICB0aGlzLl9mcmFtZSA9IGZyYW1lO1xufTtcblxuXG5TcHJpdGVBbmltYXRpb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLnNoZWV0ID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQubmFtZSA6IHVuZGVmaW5lZDtcblxuICAgIGpzb24uY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICBqc29uLm1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICBqc29uLnJhdGUgPSB0aGlzLnJhdGU7XG5cbiAgICBqc29uLl90aW1lID0gdGhpcy5fdGltZTtcbiAgICBqc29uLl9mcmFtZSA9IHRoaXMuX2ZyYW1lO1xuICAgIGpzb24uX29yZGVyID0gdGhpcy5fb3JkZXI7XG5cbiAgICBqc29uLnBsYXlpbmcgPSB0aGlzLnBsYXlpbmc7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuU3ByaXRlQW5pbWF0aW9uLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5zaGVldCA9IGpzb24uc2hlZXQgPyBBc3NldHMuZ2V0KGpzb24uc2hlZXQpIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5jdXJyZW50ID0ganNvbi5jdXJyZW50O1xuICAgIHRoaXMubW9kZSA9IGpzb24ubW9kZTtcblxuICAgIHRoaXMucmF0ZSA9IGpzb24ucmF0ZTtcblxuICAgIHRoaXMuX3RpbWUgPSBqc29uLl90aW1lO1xuICAgIHRoaXMuX2ZyYW1lID0ganNvbi5fZnJhbWU7XG4gICAgdGhpcy5fb3JkZXIgPSBqc29uLl9vcmRlcjtcblxuICAgIHRoaXMucGxheWluZyA9IGpzb24ucGxheWluZztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcml0ZUFuaW1hdGlvbjtcbiIsInZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIFZlYzMgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMzXCIpO1xudmFyIFF1YXQgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9xdWF0XCIpO1xudmFyIE1hdDMgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXQzXCIpO1xudmFyIE1hdDQgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXQ0XCIpO1xudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcbnZhciBMb2cgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgRVBTSUxPTiA9IE1hdGhmLkVQU0lMT047XG5cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuICAgIG9wdHMuc3luYyA9IG9wdHMuc3luYyAhPSB1bmRlZmluZWQgPyBvcHRzLnN5bmMgOiB0cnVlO1xuXG4gICAgQ29tcG9uZW50LmNhbGwodGhpcywgXCJUcmFuc2Zvcm1cIiwgb3B0cyk7XG5cbiAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIHRoaXMuZGVwdGggPSAwO1xuXG4gICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdHMucG9zaXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5wb3NpdGlvbiA6IG5ldyBWZWMzO1xuICAgIHRoaXMucm90YXRpb24gPSBvcHRzLnJvdGF0aW9uICE9IHVuZGVmaW5lZCA/IG9wdHMucm90YXRpb24gOiBuZXcgUXVhdDtcbiAgICB0aGlzLnNjYWxlID0gb3B0cy5zY2FsZSAhPSB1bmRlZmluZWQgPyBvcHRzLnNjYWxlIDogbmV3IFZlYzMoMSwgMSwgMSk7XG5cbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXQ0O1xuICAgIHRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0NDtcblxuICAgIHRoaXMubW9kZWxWaWV3ID0gbmV3IE1hdDQ7XG4gICAgdGhpcy5ub3JtYWxNYXRyaXggPSBuZXcgTWF0Mztcbn1cblxuQ29tcG9uZW50LmV4dGVuZChUcmFuc2Zvcm0pO1xuXG5cblRyYW5zZm9ybS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBjaGlsZHJlbiA9IG90aGVyLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgdGhpcy5wb3NpdGlvbi5jb3B5KG90aGVyLnBvc2l0aW9uKTtcbiAgICB0aGlzLnNjYWxlLmNvcHkob3RoZXIuc2NhbGUpO1xuICAgIHRoaXMucm90YXRpb24uY29weShvdGhlci5yb3RhdGlvbik7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLmFkZENoaWxkKGNoaWxkcmVuW2ldLmdhbWVPYmplY3QuY2xvbmUoKS50cmFuc2Zvcm0pO1xuICAgIGlmIChvdGhlci5wYXJlbnQpIG90aGVyLnBhcmVudC5hZGRDaGlsZCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmNsZWFyLmNhbGwodGhpcyk7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGRyZW5baV0pO1xuXG4gICAgdGhpcy5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG4gICAgdGhpcy5zY2FsZS5zZXQoMSwgMSwgMSk7XG4gICAgdGhpcy5yb3RhdGlvbi5zZXQoMCwgMCwgMCwgMSk7XG5cbiAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIHRoaXMuZGVwdGggPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybS5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2ZWMgPSBuZXcgVmVjMztcblxuICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNsYXRpb24sIHJlbGF0aXZlVG8pIHtcbiAgICAgICAgdmVjLmNvcHkodHJhbnNsYXRpb24pO1xuXG4gICAgICAgIGlmIChyZWxhdGl2ZVRvIGluc3RhbmNlb2YgVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICB2ZWMudHJhbnNmb3JtUXVhdChyZWxhdGl2ZVRvLnJvdGF0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZVRvIGluc3RhbmNlb2YgUXVhdCkge1xuICAgICAgICAgICAgdmVjLnRyYW5zZm9ybVF1YXQocmVsYXRpdmVUbyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBvc2l0aW9uLmFkZCh2ZWMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZlYyA9IG5ldyBWZWMzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyb3RhdGlvbiwgcmVsYXRpdmVUbykge1xuICAgICAgICB2ZWMuY29weShyb3RhdGlvbik7XG5cbiAgICAgICAgaWYgKHJlbGF0aXZlVG8gaW5zdGFuY2VvZiBUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIHZlYy50cmFuc2Zvcm1RdWF0KHJlbGF0aXZlVG8ucm90YXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlVG8gaW5zdGFuY2VvZiBRdWF0KSB7XG4gICAgICAgICAgICB2ZWMudHJhbnNmb3JtUXVhdChyZWxhdGl2ZVRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucm90YXRpb24ucm90YXRlKHZlYy54LCB2ZWMueSwgdmVjLnopO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5sb29rQXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1hdCA9IG5ldyBNYXQ0LFxuICAgICAgICB2ZWMgPSBuZXcgVmVjMyxcbiAgICAgICAgZHVwID0gbmV3IFZlYzMoMC4wLCAwLjAsIDEuMCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgdXApIHtcbiAgICAgICAgdXAgPSB1cCB8fCBkdXA7XG5cbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdmVjLnNldCgwLjAsIDAuMCwgMC4wKS50cmFuc2Zvcm1NYXQ0KHRhcmdldC5tYXRyaXhXb3JsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ZWMuY29weSh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0Lmxvb2tBdCh0aGlzLnBvc2l0aW9uLCB2ZWMsIHVwKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbi5mcm9tTWF0NChtYXQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5mb2xsb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldCA9IG5ldyBWZWMzLFxuICAgICAgICBwb3NpdGlvbiA9IG5ldyBWZWMzLFxuICAgICAgICBkZWx0YSA9IG5ldyBWZWMzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0cmFuc2Zvcm0sIHNwZWVkKSB7XG4gICAgICAgIHBvc2l0aW9uLnNldCgwLjAsIDAuMCwgMC4wKS50cmFuc2Zvcm1NYXQ0KHRoaXMubWF0cml4V29ybGQpO1xuICAgICAgICB0YXJnZXQuc2V0KDAuMCwgMC4wLCAwLjApLnRyYW5zZm9ybU1hdDQodHJhbnNmb3JtLm1hdHJpeFdvcmxkKTtcblxuICAgICAgICBkZWx0YS52c3ViKHRhcmdldCwgcG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChkZWx0YS5sZW5ndGhTcSgpID4gRVBTSUxPTikgdGhpcy5wb3NpdGlvbi5hZGQoZGVsdGEuc211bChzcGVlZCkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCwgb3RoZXJzKSB7XG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSB7XG4gICAgICAgIExvZy5lcnJvcihcIlRyYW5zZm9ybS5hZGQ6IGNhblxcJ3QgYWRkIHBhc3NlZCBhcmd1bWVudCwgaXQgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRyYW5zZm9ybVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihjaGlsZCksXG4gICAgICAgIHJvb3QsIGRlcHRoLCBzY2VuZTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGNoaWxkLnBhcmVudCkgY2hpbGQucGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcblxuICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcblxuICAgICAgICByb290ID0gdGhpcztcbiAgICAgICAgZGVwdGggPSAwO1xuXG4gICAgICAgIHdoaWxlIChyb290LnBhcmVudCkge1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucGFyZW50O1xuICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC5yb290ID0gcm9vdDtcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcblxuICAgICAgICB1cGRhdGVEZXB0aCh0aGlzLCBkZXB0aCk7XG4gICAgICAgIGlmICghb3RoZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lT2JqZWN0ICYmIChzY2VuZSA9IHRoaXMuZ2FtZU9iamVjdC5zY2VuZSkpIHtcbiAgICAgICAgICAgICAgICBzY2VuZS5jb21wb25lbnRNYW5hZ2Vycy5UcmFuc2Zvcm0uc29ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiVHJhbnNmb3JtLmFkZDogY2hpbGQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgVHJhbnNmb3JtXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLmFkZENoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpLCBpbCwgc2NlbmU7XG5cbiAgICBmb3IgKGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB0aGlzLmFkZENoaWxkKGFyZ3VtZW50c1tpXSwgdHJ1ZSk7XG4gICAgaWYgKHRoaXMuZ2FtZU9iamVjdCAmJiAoc2NlbmUgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUpKSB7XG4gICAgICAgIHNjZW5lLmNvbXBvbmVudE1hbmFnZXJzLlRyYW5zZm9ybS5zb3J0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkLCBvdGhlcnMpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICBpbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLFxuICAgICAgICByb290LCBkZXB0aCwgc2NlbmU7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICByb290ID0gdGhpcztcbiAgICAgICAgZGVwdGggPSAwO1xuXG4gICAgICAgIHdoaWxlIChyb290LnBhcmVudCkge1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucGFyZW50O1xuICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC5yb290ID0gY2hpbGQ7XG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG5cbiAgICAgICAgdXBkYXRlRGVwdGgodGhpcywgZGVwdGgpO1xuICAgICAgICBpZiAoIW90aGVycykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZU9iamVjdCAmJiAoc2NlbmUgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUpKSB7XG4gICAgICAgICAgICAgICAgc2NlbmUuY29tcG9uZW50TWFuYWdlcnMuVHJhbnNmb3JtLnNvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIlRyYW5zZm9ybS5yZW1vdmU6IGNoaWxkIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIFRyYW5zZm9ybVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5yZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSwgaWwsIHNjZW5lO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5yZW1vdmVDaGlsZChhcmd1bWVudHNbaV0sIHRydWUpO1xuICAgIGlmICh0aGlzLmdhbWVPYmplY3QgJiYgKHNjZW5lID0gdGhpcy5nYW1lT2JqZWN0LnNjZW5lKSkge1xuICAgICAgICBzY2VuZS5jb21wb25lbnRNYW5hZ2Vycy5UcmFuc2Zvcm0uc29ydCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5kZXRhY2hDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVDaGlsZChjaGlsZHJlbltpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcblxuICAgIHJldHVybiAhIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xufTtcblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICAgIGlmIChjaGlsZC5nYW1lT2JqZWN0Lm5hbWUgPT09IG5hbWUpIHJldHVybiBjaGlsZC5nYW1lT2JqZWN0O1xuICAgICAgICBpZiAoKGNoaWxkID0gY2hpbGQuZmluZChuYW1lKSkpIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnRvV29ybGQgPSBmdW5jdGlvbiAodikge1xuXG4gICAgcmV0dXJuIHYudHJhbnNmb3JtTWF0NCh0aGlzLm1hdHJpeFdvcmxkKTtcbn07XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS50b0xvY2FsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXQgPSBuZXcgTWF0NDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuXG4gICAgICAgIHJldHVybiB2LnRyYW5zZm9ybU1hdDQobWF0LmludmVyc2VNYXQodGhpcy5tYXRyaXhXb3JsZCkpO1xuICAgIH07XG59KCk7XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1hdHJpeCA9IHRoaXMubWF0cml4LFxuICAgICAgICBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuICAgIG1hdHJpeC5jb21wb3NlKHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUsIHRoaXMucm90YXRpb24pO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLm1hdHJpeFdvcmxkLm1tdWwocGFyZW50Lm1hdHJpeFdvcmxkLCBtYXRyaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWF0cml4V29ybGQuY29weShtYXRyaXgpO1xuICAgIH1cbn07XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS51cGRhdGVNYXRyaWNlcyA9IGZ1bmN0aW9uICh2aWV3TWF0cml4KSB7XG5cbiAgICB0aGlzLm1vZGVsVmlldy5tbXVsKHZpZXdNYXRyaXgsIHRoaXMubWF0cml4V29ybGQpO1xuICAgIHRoaXMubm9ybWFsTWF0cml4LmludmVyc2VNYXQ0KHRoaXMubW9kZWxWaWV3KS50cmFuc3Bvc2UoKTtcbn07XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGpzb25DaGlsZHJlbiA9IGpzb24uY2hpbGRyZW4gfHwgKGpzb24uY2hpbGRyZW4gPSBbXSksXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSBqc29uQ2hpbGRyZW5baV0gPSBjaGlsZHJlbltpXS5faWQ7XG5cbiAgICBqc29uLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50b0pTT04oanNvbi5wb3NpdGlvbik7XG4gICAganNvbi5zY2FsZSA9IHRoaXMuc2NhbGUudG9KU09OKGpzb24uc2NhbGUpO1xuICAgIGpzb24ucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uLnRvSlNPTihqc29uLnJvdGF0aW9uKTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGNoaWxkcmVuID0ganNvbi5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgY2hpbGQsIHNjZW5lO1xuXG4gICAgaWYgKHRoaXMuZ2FtZU9iamVjdCAmJiAoc2NlbmUgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUpKSB7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGNoaWxkID0gc2NlbmUuZmluZENvbXBvbmVudEJ5SlNPTklkKGNoaWxkcmVuW2ldKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NoaWxkKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbmNlKFwic3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNjZW5lID0gdGhpcy5nYW1lT2JqZWN0LnNjZW5lO1xuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBzY2VuZS5maW5kQ29tcG9uZW50QnlKU09OSWQoY2hpbGRyZW5baV0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NoaWxkKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMucG9zaXRpb24uZnJvbUpTT04oanNvbi5wb3NpdGlvbik7XG4gICAgdGhpcy5zY2FsZS5mcm9tSlNPTihqc29uLnNjYWxlKTtcbiAgICB0aGlzLnJvdGF0aW9uLmZyb21KU09OKGpzb24ucm90YXRpb24pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZURlcHRoKHRyYW5zZm9ybSwgZGVwdGgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0cmFuc2Zvcm0uY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB0cmFuc2Zvcm0uZGVwdGggPSBkZXB0aDtcblxuICAgIHdoaWxlIChpLS0pIHVwZGF0ZURlcHRoKGNoaWxkcmVuW2ldLCBkZXB0aCArIDEpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0aGZcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgTWF0MzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXQzMlwiKTtcbnZhciBNYXQzID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0M1wiKTtcbnZhciBNYXQ0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0NFwiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRcIik7XG52YXIgQ29uZmlnID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY29uZmlnXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBFUFNJTE9OID0gTWF0aGYuRVBTSUxPTjtcblxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0yRChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcbiAgICBvcHRzLnN5bmMgPSBvcHRzLnN5bmMgIT0gdW5kZWZpbmVkID8gb3B0cy5zeW5jIDogdHJ1ZTtcblxuICAgIENvbXBvbmVudC5jYWxsKHRoaXMsIFwiVHJhbnNmb3JtMkRcIiwgb3B0cyk7XG5cbiAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIHRoaXMuZGVwdGggPSAwO1xuXG4gICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdHMucG9zaXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5wb3NpdGlvbiA6IG5ldyBWZWMyO1xuICAgIHRoaXMucm90YXRpb24gPSBvcHRzLnJvdGF0aW9uICE9IHVuZGVmaW5lZCA/IG9wdHMucm90YXRpb24gOiAwO1xuICAgIHRoaXMuc2NhbGUgPSBvcHRzLnNjYWxlICE9IHVuZGVmaW5lZCA/IG9wdHMuc2NhbGUgOiBuZXcgVmVjMigxLCAxKTtcblxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdDQ7XG4gICAgdGhpcy5tYXRyaXhXb3JsZCA9IG5ldyBNYXQ0O1xuXG4gICAgdGhpcy5tb2RlbFZpZXcgPSBuZXcgTWF0NDtcbiAgICB0aGlzLm5vcm1hbE1hdHJpeCA9IG5ldyBNYXQzO1xufVxuXG5Db21wb25lbnQuZXh0ZW5kKFRyYW5zZm9ybTJEKTtcblxuXG5UcmFuc2Zvcm0yRC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBjaGlsZHJlbiA9IG90aGVyLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgdGhpcy5wb3NpdGlvbi5jb3B5KG90aGVyLnBvc2l0aW9uKTtcbiAgICB0aGlzLnNjYWxlLmNvcHkob3RoZXIuc2NhbGUpO1xuICAgIHRoaXMucm90YXRpb24gPSBvdGhlci5yb3RhdGlvbjtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkQ2hpbGQoY2hpbGRyZW5baV0uZ2FtZU9iamVjdC5jbG9uZSgpLnRyYW5zZm9ybSk7XG4gICAgaWYgKG90aGVyLnBhcmVudCkgb3RoZXIucGFyZW50LmFkZENoaWxkKHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmNsZWFyLmNhbGwodGhpcyk7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGRyZW5baV0pO1xuXG4gICAgdGhpcy5wb3NpdGlvbi5zZXQoMCwgMCk7XG4gICAgdGhpcy5zY2FsZS5zZXQoMSwgMSk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IDA7XG5cbiAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIHRoaXMuZGVwdGggPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZlYyA9IG5ldyBWZWMyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0cmFuc2xhdGlvbiwgcmVsYXRpdmVUbykge1xuICAgICAgICB2ZWMuY29weSh0cmFuc2xhdGlvbik7XG5cbiAgICAgICAgaWYgKHJlbGF0aXZlVG8gaW5zdGFuY2VvZiBUcmFuc2Zvcm0yRCkge1xuICAgICAgICAgICAgdmVjLnRyYW5zZm9ybUFuZ2xlKHJlbGF0aXZlVG8ucm90YXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlVG8pIHtcbiAgICAgICAgICAgIHZlYy50cmFuc2Zvcm1BbmdsZShyZWxhdGl2ZVRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG9zaXRpb24uYWRkKHZlYyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0oKTtcblxuXG5UcmFuc2Zvcm0yRC5wcm90b3R5cGUucm90YXRlID0gZnVuY3Rpb24gKHJvdGF0aW9uLCByZWxhdGl2ZVRvKSB7XG5cbiAgICBpZiAocmVsYXRpdmVUbyBpbnN0YW5jZW9mIFRyYW5zZm9ybTJEKSB7XG4gICAgICAgIHJvdGF0aW9uICs9IHJlbGF0aXZlVG8ucm90YXRpb247XG4gICAgfSBlbHNlIGlmIChyZWxhdGl2ZVRvKSB7XG4gICAgICAgIHJvdGF0aW9uICs9IHJlbGF0aXZlVG87XG4gICAgfVxuXG4gICAgdGhpcy5yb3RhdGlvbiArPSByb3RhdGlvbjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5UcmFuc2Zvcm0yRC5wcm90b3R5cGUubG9va0F0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXQgPSBuZXcgTWF0MzIsXG4gICAgICAgIHZlYyA9IG5ldyBWZWMyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcblxuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgVHJhbnNmb3JtMkQpIHtcbiAgICAgICAgICAgIHZlYy5jb3B5KHRhcmdldC5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ZWMuY29weSh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0Lmxvb2tBdCh0aGlzLnBvc2l0aW9uLCB2ZWMpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uID0gbWF0LmdldFJvdGF0aW9uKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0oKTtcblxuXG5UcmFuc2Zvcm0yRC5wcm90b3R5cGUuZm9sbG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0YXJnZXQgPSBuZXcgVmVjMixcbiAgICAgICAgcG9zaXRpb24gPSBuZXcgVmVjMixcbiAgICAgICAgZGVsdGEgPSBuZXcgVmVjMjtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNmb3JtLCBzcGVlZCkge1xuICAgICAgICBwb3NpdGlvbi5zZXQoMCwgMCkudHJhbnNmb3JtTWF0NCh0aGlzLm1hdHJpeFdvcmxkKTtcbiAgICAgICAgdGFyZ2V0LnNldCgwLCAwKS50cmFuc2Zvcm1NYXQ0KHRyYW5zZm9ybS5tYXRyaXhXb3JsZCk7XG5cbiAgICAgICAgZGVsdGEudnN1Yih0YXJnZXQsIHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAoZGVsdGEubGVuZ3RoU3EoKSA+IEVQU0lMT04pIHRoaXMucG9zaXRpb24uYWRkKGRlbHRhLnNtdWwoc3BlZWQpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufSgpO1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCwgb3RoZXJzKSB7XG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBUcmFuc2Zvcm0yRCkpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiVHJhbnNmb3JtMkQuYWRkOiBjYW5cXCd0IGFkZCBwYXNzZWQgYXJndW1lbnQsIGl0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUcmFuc2Zvcm0yRFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihjaGlsZCksXG4gICAgICAgIHJvb3QsIGRlcHRoLCBzY2VuZTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGNoaWxkLnBhcmVudCkgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG5cbiAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cbiAgICAgICAgcm9vdCA9IHRoaXM7XG4gICAgICAgIGRlcHRoID0gMDtcblxuICAgICAgICB3aGlsZSAocm9vdC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnBhcmVudDtcbiAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQucm9vdCA9IHJvb3Q7XG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG5cbiAgICAgICAgdXBkYXRlRGVwdGgodGhpcywgZGVwdGgpO1xuICAgICAgICBpZiAoIW90aGVycykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZU9iamVjdCAmJiAoc2NlbmUgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUpKSB7XG4gICAgICAgICAgICAgICAgc2NlbmUuY29tcG9uZW50TWFuYWdlcnMuVHJhbnNmb3JtMkQuc29ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiVHJhbnNmb3JtMkQuYWRkOiBjaGlsZCBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBUcmFuc2Zvcm0yRFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuVHJhbnNmb3JtMkQucHJvdG90eXBlLmFkZENoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpLCBpbCwgc2NlbmU7XG5cbiAgICBmb3IgKGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB0aGlzLmFkZENoaWxkKGFyZ3VtZW50c1tpXSwgdHJ1ZSk7XG4gICAgaWYgKHRoaXMuZ2FtZU9iamVjdCAmJiAoc2NlbmUgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUpKSB7XG4gICAgICAgIHNjZW5lLmNvbXBvbmVudE1hbmFnZXJzLlRyYW5zZm9ybTJELnNvcnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCwgb3RoZXJzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbixcbiAgICAgICAgaW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKGNoaWxkKSxcbiAgICAgICAgcm9vdCwgZGVwdGgsIHNjZW5lO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgcm9vdCA9IHRoaXM7XG4gICAgICAgIGRlcHRoID0gMDtcblxuICAgICAgICB3aGlsZSAocm9vdC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnBhcmVudDtcbiAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQucm9vdCA9IGNoaWxkO1xuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuXG4gICAgICAgIHVwZGF0ZURlcHRoKHRoaXMsIGRlcHRoKTtcbiAgICAgICAgaWYgKCFvdGhlcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbWVPYmplY3QgJiYgKHNjZW5lID0gdGhpcy5nYW1lT2JqZWN0LnNjZW5lKSkge1xuICAgICAgICAgICAgICAgIHNjZW5lLmNvbXBvbmVudE1hbmFnZXJzLlRyYW5zZm9ybTJELnNvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIlRyYW5zZm9ybTJELnJlbW92ZTogY2hpbGQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgVHJhbnNmb3JtMkRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS5yZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSwgaWwsIHNjZW5lO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5yZW1vdmVDaGlsZChhcmd1bWVudHNbaV0sIHRydWUpO1xuICAgIGlmICh0aGlzLmdhbWVPYmplY3QgJiYgKHNjZW5lID0gdGhpcy5nYW1lT2JqZWN0LnNjZW5lKSkge1xuICAgICAgICBzY2VuZS5jb21wb25lbnRNYW5hZ2Vycy5UcmFuc2Zvcm0yRC5zb3J0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5UcmFuc2Zvcm0yRC5wcm90b3R5cGUuZGV0YWNoQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVDaGlsZChjaGlsZHJlbltpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS5oYXNDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuXG4gICAgcmV0dXJuICEhfnRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICBpZiAoY2hpbGQuZ2FtZU9iamVjdC5uYW1lID09PSBuYW1lKSByZXR1cm4gY2hpbGQ7XG4gICAgICAgIGlmICgoY2hpbGQgPSBjaGlsZC5maW5kKG5hbWUpKSkgcmV0dXJuIGNoaWxkO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS50b1dvcmxkID0gZnVuY3Rpb24gKHYpIHtcblxuICAgIHJldHVybiB2LnRyYW5zZm9ybU1hdDQodGhpcy5tYXRyaXhXb3JsZCk7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS50b0xvY2FsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXQgPSBuZXcgTWF0NDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuXG4gICAgICAgIHJldHVybiB2LnRyYW5zZm9ybU1hdDQobWF0LmludmVyc2VNYXQodGhpcy5tYXRyaXhXb3JsZCkpO1xuICAgIH07XG59KCk7XG5cblxuVHJhbnNmb3JtMkQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWF0ID0gbmV3IE1hdDMyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hdHJpeCA9IHRoaXMubWF0cml4LFxuICAgICAgICAgICAgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cbiAgICAgICAgbWF0cml4LmZyb21NYXQzMihtYXQuY29tcG9zZSh0aGlzLnBvc2l0aW9uLCB0aGlzLnNjYWxlLCB0aGlzLnJvdGF0aW9uKSk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5tYXRyaXhXb3JsZC5tbXVsKHBhcmVudC5tYXRyaXhXb3JsZCwgbWF0cml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWF0cml4V29ybGQuY29weShtYXRyaXgpO1xuICAgICAgICB9XG4gICAgfTtcbn0oKTtcblxuXG5UcmFuc2Zvcm0yRC5wcm90b3R5cGUudXBkYXRlTWF0cmljZXMgPSBmdW5jdGlvbiAodmlld01hdHJpeCkge1xuXG4gICAgdGhpcy5tb2RlbFZpZXcubW11bCh2aWV3TWF0cml4LCB0aGlzLm1hdHJpeFdvcmxkKTtcbiAgICB0aGlzLm5vcm1hbE1hdHJpeC5pbnZlcnNlTWF0NCh0aGlzLm1vZGVsVmlldykudHJhbnNwb3NlKCk7XG59O1xuXG5cblRyYW5zZm9ybTJELnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGpzb25DaGlsZHJlbiA9IGpzb24uY2hpbGRyZW4gfHwgKGpzb24uY2hpbGRyZW4gPSBbXSksXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSBqc29uQ2hpbGRyZW5baV0gPSBjaGlsZHJlbltpXS5faWQ7XG5cbiAgICBqc29uLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50b0pTT04oanNvbi5wb3NpdGlvbik7XG4gICAganNvbi5zY2FsZSA9IHRoaXMuc2NhbGUudG9KU09OKGpzb24uc2NhbGUpO1xuICAgIGpzb24ucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uXG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuVHJhbnNmb3JtMkQucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGNoaWxkcmVuID0ganNvbi5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgY2hpbGQsIHNjZW5lO1xuXG4gICAgaWYgKHRoaXMuZ2FtZU9iamVjdCAmJiAoc2NlbmUgPSB0aGlzLmdhbWVPYmplY3Quc2NlbmUpKSB7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGNoaWxkID0gc2NlbmUuZmluZENvbXBvbmVudEJ5SlNPTklkKGNoaWxkcmVuW2ldKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NoaWxkKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbmNlKFwic3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNjZW5lID0gdGhpcy5nYW1lT2JqZWN0LnNjZW5lO1xuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBzY2VuZS5maW5kQ29tcG9uZW50QnlKU09OSWQoY2hpbGRyZW5baV0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NoaWxkKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMucG9zaXRpb24uZnJvbUpTT04oanNvbi5wb3NpdGlvbik7XG4gICAgdGhpcy5zY2FsZS5mcm9tSlNPTihqc29uLnNjYWxlKTtcbiAgICB0aGlzLnJvdGF0aW9uID0ganNvbi5yb3RhdGlvbjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5mdW5jdGlvbiB1cGRhdGVEZXB0aCh0cmFuc2Zvcm0sIGRlcHRoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdHJhbnNmb3JtLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgdHJhbnNmb3JtLmRlcHRoID0gZGVwdGg7XG4gICAgd2hpbGUgKGktLSkgdXBkYXRlRGVwdGgoY2hpbGRyZW5baV0sIGRlcHRoICsgMSk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm0yRDtcbiIsInZhciBFbnVtID0gcmVxdWlyZShcIi4uL2Jhc2UvZW51bVwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEF4aXNUeXBlOiBuZXcgRW51bShcIkJ1dHRvbiBNb3VzZSBNb3VzZVdoZWVsIFRvdWNoIEpveXN0aWNrXCIpLFxuXG4gICAgQmxlbmRpbmc6IG5ldyBFbnVtKFwiRGVmYXVsdCBOb25lIEFkZGl0aXZlIFN1YnRyYWN0aXZlIE11bGlwbHkgQ3VzdG9tXCIpLFxuICAgIFNpZGU6IG5ldyBFbnVtKFwiRnJvbnQgQmFjayBCb3RoXCIpLFxuXG4gICAgQ3VsbEZhY2U6IG5ldyBFbnVtKFwiTm9uZSBCYWNrIEZyb250IEZyb250QmFja1wiKSxcblxuICAgIEVtaXR0ZXJUeXBlOiBuZXcgRW51bShcIkNpcmNsZSBCb3ggU3BoZXJlXCIpLFxuXG4gICAgTGlnaHRUeXBlOiBuZXcgRW51bShcIlBvaW50IERpcmVjdGlvbmFsIFNwb3QgSGVtaVwiKSxcblxuICAgIFRleHRDbGlwcGluZzogbmV3IEVudW0oXCJPdmVyZmxvdyBDbGlwXCIpLFxuICAgIFRleHRBbmNob3I6IG5ldyBFbnVtKFwiTGVmdCBDZW50ZXIgUmlnaHRcIiksXG5cbiAgICBTaGFkb3dNYXBUeXBlOiBuZXcgRW51bShcIkJhc2ljU2hhZG93TWFwIFBDRlNoYWRvd01hcCBQQ0ZTb2Z0U2hhZG93TWFwXCIpLFxuXG4gICAgRmlsdGVyTW9kZTogbmV3IEVudW0oXCJOb25lIExpbmVhclwiKSxcbiAgICBUZXh0dXJlRm9ybWF0OiBuZXcgRW51bShcIlJHQiBSR0JBIEx1bWluYW5jZSBBbHBoYSBMdW1pbmFuY2VBbHBoYVwiKSxcbiAgICBUZXh0dXJlV3JhcDogbmV3IEVudW0oXCJSZXBlYXQgQ2xhbXAgTWlycm9yUmVwZWF0XCIpLFxuXG4gICAgV3JhcE1vZGU6IG5ldyBFbnVtKFwiT25jZSBMb29wIFBpbmdQb25nIENsYW1wXCIpXG59O1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgTG9vcCA9IHJlcXVpcmUoXCIuL2xvb3BcIik7XG52YXIgU2NlbmUgPSByZXF1aXJlKFwiLi4vc2NlbmVcIik7XG52YXIgR1VJID0gcmVxdWlyZShcIi4uL2d1aS9ndWlcIik7XG52YXIgTG9nID0gcmVxdWlyZShcIi4vLi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBCYXNlR2FtZSgpIHtcblxuICAgIENsYXNzLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLl9sb29wID0gbmV3IExvb3AodGhpcy5sb29wLCB0aGlzKTtcblxuICAgIHRoaXMuZ3VpcyA9IFtdO1xuICAgIHRoaXMuX2d1aUhhc2ggPSB7fTtcbiAgICB0aGlzLl9ndWlKU09OSGFzaCA9IHt9O1xuICAgIHRoaXMuX2d1aU5hbWVIYXNoID0ge307XG5cbiAgICB0aGlzLnNjZW5lcyA9IFtdO1xuICAgIHRoaXMuX3NjZW5lSGFzaCA9IHt9O1xuICAgIHRoaXMuX3NjZW5lSlNPTkhhc2ggPSB7fTtcbiAgICB0aGlzLl9zY2VuZU5hbWVIYXNoID0ge307XG59XG5cbkNsYXNzLmV4dGVuZChCYXNlR2FtZSk7XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLl9sb29wLnJlc3VtZSgpO1xuICAgIHRoaXMuZW1pdChcImluaXRcIik7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY2VuZXMgPSB0aGlzLnNjZW5lcyxcbiAgICAgICAgaSA9IHNjZW5lcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLnJlbW92ZVNjZW5lKHNjZW5lc1tpXSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkJhc2VHYW1lLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKTtcbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmFkZFNjZW5lID0gZnVuY3Rpb24gKHNjZW5lKSB7XG4gICAgaWYgKCEoc2NlbmUgaW5zdGFuY2VvZiBTY2VuZSkpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiQmFzZUdhbWUuYWRkU2NlbmU6IGNhbid0IGFkZCBhcmd1bWVudCB0byBCYXNlR2FtZSwgaXQncyBub3QgYW4gaW5zdGFuY2Ugb2YgU2NlbmVcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgc2NlbmVIYXNoID0gdGhpcy5fc2NlbmVIYXNoLFxuICAgICAgICBzY2VuZU5hbWVIYXNoID0gdGhpcy5fc2NlbmVOYW1lSGFzaCxcbiAgICAgICAgbmFtZSA9IHNjZW5lLm5hbWUsXG4gICAgICAgIGlkID0gc2NlbmUuX2lkLFxuICAgICAgICBqc29uO1xuXG4gICAgaWYgKCFzY2VuZU5hbWVIYXNoW25hbWVdICYmICFzY2VuZUhhc2hbaWRdKSB7XG4gICAgICAgIGpzb24gPSBzY2VuZS50b0pTT04oKTtcblxuICAgICAgICBzY2VuZU5hbWVIYXNoW25hbWVdID0ganNvbjtcbiAgICAgICAgc2NlbmVIYXNoW2lkXSA9IGpzb247XG4gICAgICAgIHRoaXMuc2NlbmVzLnB1c2goanNvbik7XG4gICAgICAgIGlmIChzY2VuZS5fanNvbklkICE9PSAtMSkgdGhpcy5fc2NlbmVKU09OSGFzaFtzY2VuZS5fanNvbklkXSA9IGpzb247XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiYWRkU2NlbmVcIiwgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiQmFzZUdhbWUuYWRkU2NlbmU6IFNjZW5lIGlzIGFscmVhZHkgYSBtZW1iZXIgb2YgQmFzZUdhbWVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkJhc2VHYW1lLnByb3RvdHlwZS5hZGRTY2VuZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGksIGlsO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5hZGRTY2VuZShhcmd1bWVudHNbaV0pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5CYXNlR2FtZS5wcm90b3R5cGUucmVtb3ZlU2NlbmUgPSBmdW5jdGlvbiAoc2NlbmUpIHtcbiAgICBpZiAodHlwZW9mKHNjZW5lKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzY2VuZSA9IHRoaXMuX3NjZW5lTmFtZUhhc2hbc2NlbmVdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKHNjZW5lKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBzY2VuZSA9IHRoaXMuX3NjZW5lSGFzaFtzY2VuZV07XG4gICAgfVxuICAgIHZhciBzY2VuZXMgPSB0aGlzLnNjZW5lcyxcbiAgICAgICAgc2NlbmVIYXNoID0gdGhpcy5fc2NlbmVIYXNoLFxuICAgICAgICBzY2VuZU5hbWVIYXNoID0gdGhpcy5fc2NlbmVOYW1lSGFzaCxcbiAgICAgICAgbmFtZSA9IHNjZW5lLm5hbWUsXG4gICAgICAgIGlkID0gc2NlbmUuX2lkLFxuICAgICAgICBqc29uO1xuXG4gICAgaWYgKHNjZW5lTmFtZUhhc2hbbmFtZV0gJiYgc2NlbmVIYXNoW2lkXSkge1xuICAgICAgICBqc29uID0gc2NlbmVOYW1lSGFzaFtuYW1lXTtcblxuICAgICAgICBzY2VuZU5hbWVIYXNoW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICBzY2VuZUhhc2hbaWRdID0gdW5kZWZpbmVkO1xuICAgICAgICBzY2VuZXMuc3BsaWNlKHNjZW5lcy5pbmRleE9mKGpzb24pLCAxKTtcbiAgICAgICAgaWYgKGpzb24uX2pzb25JZCAhPT0gLTEpIHRoaXMuX3NjZW5lSlNPTkhhc2hbanNvbi5fanNvbklkXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLmVtaXQoXCJyZW1vdmVTY2VuZVwiLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IoXCJCYXNlR2FtZS5yZW1vdmVTY2VuZTogU2NlbmUgbm90IGEgbWVtYmVyIG9mIEJhc2VHYW1lXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5CYXNlR2FtZS5wcm90b3R5cGUucmVtb3ZlU2NlbmVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpLCBpbDtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHRoaXMucmVtb3ZlU2NlbmUoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmFkZEdVSSA9IGZ1bmN0aW9uIChndWkpIHtcbiAgICBpZiAoIShndWkgaW5zdGFuY2VvZiBHVUkpKSB7XG4gICAgICAgIExvZy5lcnJvcihcIkJhc2VHYW1lLmFkZEdVSTogY2FuJ3QgYWRkIGFyZ3VtZW50IHRvIEJhc2VHYW1lLCBpdCdzIG5vdCBhbiBpbnN0YW5jZSBvZiBHVUlcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgZ3VpSGFzaCA9IHRoaXMuX2d1aUhhc2gsXG4gICAgICAgIGd1aU5hbWVIYXNoID0gdGhpcy5fZ3VpTmFtZUhhc2gsXG4gICAgICAgIG5hbWUgPSBndWkubmFtZSxcbiAgICAgICAgaWQgPSBndWkuX2lkLFxuICAgICAgICBqc29uO1xuXG4gICAgaWYgKCFndWlOYW1lSGFzaFtuYW1lXSAmJiAhZ3VpSGFzaFtpZF0pIHtcbiAgICAgICAganNvbiA9IGd1aS50b0pTT04oKTtcblxuICAgICAgICBndWlOYW1lSGFzaFtuYW1lXSA9IGpzb247XG4gICAgICAgIGd1aUhhc2hbaWRdID0ganNvbjtcbiAgICAgICAgdGhpcy5ndWlzLnB1c2goanNvbik7XG4gICAgICAgIGlmIChndWkuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2d1aUpTT05IYXNoW2d1aS5fanNvbklkXSA9IGpzb247XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiYWRkR1VJXCIsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkJhc2VHYW1lLmFkZEdVSTogR1VJIGlzIGFscmVhZHkgYSBtZW1iZXIgb2YgQmFzZUdhbWVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkJhc2VHYW1lLnByb3RvdHlwZS5hZGRHVUlzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkR1VJKGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkJhc2VHYW1lLnByb3RvdHlwZS5yZW1vdmVHVUkgPSBmdW5jdGlvbiAoZ3VpKSB7XG4gICAgaWYgKHR5cGVvZihndWkpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGd1aSA9IHRoaXMuX2d1aU5hbWVIYXNoW2d1aV07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoZ3VpKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBndWkgPSB0aGlzLl9ndWlIYXNoW2d1aV07XG4gICAgfVxuICAgIHZhciBndWlzID0gdGhpcy5ndWlzLFxuICAgICAgICBndWlIYXNoID0gdGhpcy5fZ3VpSGFzaCxcbiAgICAgICAgZ3VpTmFtZUhhc2ggPSB0aGlzLl9ndWlOYW1lSGFzaCxcbiAgICAgICAgbmFtZSA9IGd1aS5uYW1lLFxuICAgICAgICBpZCA9IGd1aS5faWQsXG4gICAgICAgIGpzb247XG5cbiAgICBpZiAoZ3VpTmFtZUhhc2hbbmFtZV0gJiYgZ3VpSGFzaFtpZF0pIHtcbiAgICAgICAganNvbiA9IGd1aU5hbWVIYXNoW25hbWVdO1xuXG4gICAgICAgIGd1aU5hbWVIYXNoW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICBndWlIYXNoW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZ3Vpcy5zcGxpY2UoZ3Vpcy5pbmRleE9mKGpzb24pLCAxKTtcbiAgICAgICAgaWYgKGpzb24uX2pzb25JZCAhPT0gLTEpIHRoaXMuX2d1aUpTT05IYXNoW2pzb24uX2pzb25JZF0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlR1VJXCIsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkJhc2VHYW1lLnJlbW92ZUdVSTogR1VJIG5vdCBhIG1lbWJlciBvZiBCYXNlR2FtZVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLnJlbW92ZUdVSXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVHVUkoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmZpbmRTY2VuZUJ5TmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cbiAgICByZXR1cm4gdGhpcy5fc2NlbmVOYW1lSGFzaFtuYW1lXTtcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmZpbmRTY2VuZUJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcblxuICAgIHJldHVybiB0aGlzLl9zY2VuZUhhc2hbaWRdO1xufTtcblxuXG5CYXNlR2FtZS5wcm90b3R5cGUuZmluZFNjZW5lQnlKU09OSWQgPSBmdW5jdGlvbiAoaWQpIHtcblxuICAgIHJldHVybiB0aGlzLl9zY2VuZUpTT05IYXNoW2lkXTtcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5fbG9vcC5wYXVzZSgpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5CYXNlR2FtZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5fbG9vcC5yZXN1bWUoKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLmxvb3AgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLmVtaXQoXCJ1cGRhdGVcIiwgVGltZS5zaW5jZVN0YXJ0KTtcbn07XG5cblxuQmFzZUdhbWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcbiAgICB2YXIgc2NlbmVzID0gdGhpcy5zY2VuZXMsXG4gICAgICAgIGpzb25TY2VuZXMgPSBqc29uLnNjZW5lcyB8fCAoanNvbi5zY2VuZXMgPSBbXSksXG4gICAgICAgIGkgPSBzY2VuZXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkganNvblNjZW5lc1tpXSA9IHNjZW5lc1tpXTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5CYXNlR2FtZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENsYXNzLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBqc29uU2NlbmVzID0ganNvbi5zY2VuZXMsXG4gICAgICAgIHNjZW5lLCBqc29uU2NlbmUsXG4gICAgICAgIGkgPSBqc29uU2NlbmVzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAganNvblNjZW5lID0ganNvblNjZW5lc1tpXTtcblxuICAgICAgICBpZiAoKHNjZW5lID0gdGhpcy5maW5kU2NlbmVCeUpTT05JZChqc29uU2NlbmUuX2lkKSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU2NlbmUoc2NlbmUpLmFkZFNjZW5lKGpzb25TY2VuZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZFNjZW5lKGpzb25TY2VuZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlR2FtZTtcbiIsInZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2NsYXNzXCIpO1xudmFyIERldmljZSA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2RldmljZVwiKTtcbnZhciBUaW1lID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdGltZVwiKTtcbnZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIENvbmZpZyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jhc2UvY29uZmlnXCIpO1xudmFyIEJhc2VHYW1lID0gcmVxdWlyZShcIi4vYmFzZV9nYW1lXCIpO1xudmFyIENhbnZhcyA9IHJlcXVpcmUoXCIuLi9yZW5kZXJlci9jYW52YXNcIik7XG52YXIgUmVuZGVyZXIgPSByZXF1aXJlKFwiLi4vcmVuZGVyZXIvcmVuZGVyZXJcIik7XG52YXIgR2FtZU9iamVjdCA9IHJlcXVpcmUoXCIuLi9nYW1lX29iamVjdFwiKTtcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9jb21wb25lbnRcIik7XG52YXIgU2NlbmUgPSByZXF1aXJlKFwiLi4vc2NlbmVcIik7XG52YXIgSW5wdXQgPSByZXF1aXJlKFwiLi4vaW5wdXQvaW5wdXRcIik7XG52YXIgSGFuZGxlciA9IHJlcXVpcmUoXCIuLi9pbnB1dC9oYW5kbGVyXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jhc2UvbG9nXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gR2FtZShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcbiAgICBDb25maWcuZnJvbUpTT04ob3B0cyk7XG5cbiAgICBCYXNlR2FtZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5faGFuZGxlciA9IEhhbmRsZXI7XG4gICAgdGhpcy5pbnB1dCA9IElucHV0O1xuXG4gICAgdGhpcy5ndWkgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnNjZW5lID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2FtZXJhID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKG9wdHMuY2FudmFzKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKG9wdHMucmVuZGVyZXIpO1xufVxuXG5CYXNlR2FtZS5leHRlbmQoR2FtZSk7XG5cblxuR2FtZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FudmFzID0gdGhpcy5jYW52YXM7XG5cbiAgICBjYW52YXMuaW5pdCgpO1xuICAgIHRoaXMucmVuZGVyZXIuaW5pdChjYW52YXMpO1xuICAgIEhhbmRsZXIuc2V0RWxlbWVudChjYW52YXMuZWxlbWVudCk7XG5cbiAgICB0aGlzLl9sb29wLnJlc3VtZSgpO1xuICAgIHRoaXMuZW1pdChcImluaXRcIik7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR2FtZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lLnByb3RvdHlwZS5zZXRHVUkgPSBmdW5jdGlvbiAoZ3VpKSB7XG4gICAgaWYgKHR5cGVvZihndWkpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGd1aSA9IHRoaXMuX2d1aU5hbWVIYXNoW2d1aV07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoZ3VpKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBndWkgPSB0aGlzLmd1aXNbZ3VpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZ3VpTmFtZUhhc2hbZ3VpLm5hbWVdICYmIHRoaXMuX2d1aUhhc2hbZ3VpLl9pZF0pIHtcbiAgICAgICAgaWYgKHRoaXMuZ3VpKSB0aGlzLmd1aS5kZXN0cm95KCk7XG5cbiAgICAgICAgZ3VpID0gQ2xhc3MuZnJvbUpTT04oZ3VpKTtcbiAgICAgICAgdGhpcy5ndWkgPSBndWk7XG5cbiAgICAgICAgZ3VpLmdhbWUgPSB0aGlzO1xuXG4gICAgICAgIGd1aS5pbml0KCk7XG4gICAgICAgIGd1aS5lbWl0KFwiaW5pdFwiKTtcblxuICAgICAgICBndWkuc3RhcnQoKTtcbiAgICAgICAgZ3VpLmVtaXQoXCJzdGFydFwiKTtcblxuICAgICAgICB0aGlzLmVtaXQoXCJzZXRHVUlcIiwgdGhpcy5ndWkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdhbWUuc2V0R1VJOiBHVUkgaXMgbm90IGEgbWVtYmVyIG9mIEdhbWVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdhbWUucHJvdG90eXBlLnNldFNjZW5lID0gZnVuY3Rpb24gKHNjZW5lKSB7XG4gICAgaWYgKHR5cGVvZihzY2VuZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc2NlbmUgPSB0aGlzLl9zY2VuZU5hbWVIYXNoW3NjZW5lXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihzY2VuZSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgc2NlbmUgPSB0aGlzLnNjZW5lc1tzY2VuZV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3NjZW5lTmFtZUhhc2hbc2NlbmUubmFtZV0gJiYgdGhpcy5fc2NlbmVIYXNoW3NjZW5lLl9pZF0pIHtcbiAgICAgICAgaWYgKHRoaXMuc2NlbmUpIHRoaXMuc2NlbmUuZGVzdHJveSgpO1xuXG4gICAgICAgIHNjZW5lID0gQ2xhc3MuZnJvbUpTT04oc2NlbmUpO1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG5cbiAgICAgICAgc2NlbmUuZ2FtZSA9IHRoaXM7XG5cbiAgICAgICAgc2NlbmUuaW5pdCgpO1xuICAgICAgICBzY2VuZS5lbWl0KFwiaW5pdFwiKTtcblxuICAgICAgICBzY2VuZS5zdGFydCgpO1xuICAgICAgICBzY2VuZS5lbWl0KFwic3RhcnRcIik7XG5cbiAgICAgICAgdGhpcy5lbWl0KFwic2V0U2NlbmVcIiwgdGhpcy5zY2VuZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR2FtZS5zZXRTY2VuZTogU2NlbmUgaXMgbm90IGEgbWVtYmVyIG9mIEdhbWVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdhbWUucHJvdG90eXBlLnNldENhbWVyYSA9IGZ1bmN0aW9uIChnYW1lT2JqZWN0KSB7XG4gICAgaWYgKCEoZ2FtZU9iamVjdCBpbnN0YW5jZW9mIEdhbWVPYmplY3QpKSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdhbWUuc2V0Q2FtZXJhOiBjYW4ndCBzZXQgYXJndW1lbnQgdG8gR2FtZSdzIEFjdGl2ZSBDYW1lcmEsIGl0J3Mgbm90IGFuIGluc3RhbmNlIG9mIEdhbWVPYmplY3RcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgc2NlbmUgPSB0aGlzLnNjZW5lLFxuICAgICAgICBsYXN0Q2FtZXJhID0gdGhpcy5jYW1lcmEsXG4gICAgICAgIGluZGV4O1xuXG4gICAgaWYgKCFzY2VuZSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJHYW1lLnNldENhbWVyYTogY2FuJ3Qgc2V0IGNhbWVyYSB3aXRob3V0IGFuIGFjdGl2ZSBzY2VuZSwgdXNlIEdhbWUuc2V0U2NlbmUgZmlyc3RcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGluZGV4ID0gc2NlbmUuZ2FtZU9iamVjdHMuaW5kZXhPZihnYW1lT2JqZWN0KTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIExvZy53YXJuKFwiR2FtZS5zZXRDYW1lcmE6IEdhbWVPYmplY3QgaXMgbm90IGEgbWVtYmVyIG9mIHRoZSBhY3RpdmUgU2NlbmUsIGFkZGluZyBpdC4uLlwiKTtcbiAgICAgICAgc2NlbmUuYWRkR2FtZU9iamVjdChnYW1lT2JqZWN0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbWVyYSA9IGdhbWVPYmplY3QuY2FtZXJhIHx8IGdhbWVPYmplY3QuY2FtZXJhMmQ7XG5cbiAgICBpZiAodGhpcy5jYW1lcmEpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIGlmIChsYXN0Q2FtZXJhKSBsYXN0Q2FtZXJhLl9hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmVtaXQoXCJzZXRDYW1lcmFcIiwgdGhpcy5jYW1lcmEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdhbWUuc2V0Q2FtZXJhOiBHYW1lT2JqZWN0IGRvZXMndCBoYXZlIGEgQ2FtZXJhIG9yIGEgQ2FtZXJhMkQgQ29tcG9uZW50XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lLnByb3RvdHlwZS5sb29wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW1lcmEgPSB0aGlzLmNhbWVyYSxcbiAgICAgICAgc2NlbmUgPSB0aGlzLnNjZW5lLFxuICAgICAgICBndWkgPSB0aGlzLmd1aSxcbiAgICAgICAgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgVGltZS51cGRhdGUoKTtcbiAgICBJbnB1dC51cGRhdGUoKTtcblxuICAgIHRoaXMuZW1pdChcInVwZGF0ZVwiLCBUaW1lLnNpbmNlU3RhcnQpO1xuICAgIGlmIChyZW5kZXJlciAmJiBjYW1lcmEpIHtcblxuICAgICAgICBpZiAoc2NlbmUpIHtcbiAgICAgICAgICAgIHNjZW5lLnVwZGF0ZSgpO1xuICAgICAgICAgICAgc2NlbmUuZW1pdChcInVwZGF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3VpKSB7XG4gICAgICAgICAgICBndWkuYXNwZWN0ID0gY2FtZXJhLmFzcGVjdDtcbiAgICAgICAgICAgIGd1aS53aWR0aCA9IGNhbWVyYS53aWR0aDtcbiAgICAgICAgICAgIGd1aS5oZWlnaHQgPSBjYW1lcmEuaGVpZ2h0O1xuICAgICAgICAgICAgZ3VpLmludldpZHRoID0gY2FtZXJhLmludldpZHRoO1xuICAgICAgICAgICAgZ3VpLmludkhlaWdodCA9IGNhbWVyYS5pbnZIZWlnaHQ7XG5cbiAgICAgICAgICAgIGd1aS51cGRhdGUoKTtcbiAgICAgICAgICAgIGd1aS5lbWl0KFwidXBkYXRlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyZXIucmVuZGVyKGNhbWVyYSwgc2NlbmUsIGd1aSk7XG4gICAgfVxuICAgIHRoaXMuZW1pdChcImxhdGVVcGRhdGVcIiwgVGltZS5zaW5jZVN0YXJ0KTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWU7XG4iLCJ2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvcmVxdWVzdF9hbmltYXRpb25fZnJhbWVcIik7XG52YXIgTG9nID0gcmVxdWlyZShcIi4vLi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBMb29wKGNhbGxiYWNrLCBjdHgpIHtcbiAgICBjdHggfHwgKGN0eCA9IHRoaXMpO1xuXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY3R4ID0gY3R4IHx8IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3J1biA9IGZ1bmN0aW9uIChtcykge1xuXG4gICAgICAgIGlmIChfdGhpcy5jYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2suY2FsbChjdHgsIG1zKTtcblxuICAgICAgICAgICAgaWYgKCFfdGhpcy5wYXVzZWQpIF90aGlzLl9wdW1wKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuTG9vcC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5jYWxsYmFjaykge1xuICAgICAgICBMb2cud2FybihcIkxvb3AucmVzdW1lOiBjYW4ndCBydW4gbG9vcCB3aXRob3V0IGNhbGxiYWNrXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wdW1wKCk7XG59O1xuXG5cbkxvb3AucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xufTtcblxuXG5Mb29wLnByb3RvdHlwZS5pc1J1bm5pbmcgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gIXRoaXMucGF1c2VkO1xufTtcblxuXG5Mb29wLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiB0aGlzLnBhdXNlZDtcbn07XG5cblxuTG9vcC5wcm90b3R5cGUuX3B1bXAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fcnVuKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBMb29wO1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uL2Jhc2UvY2xhc3NcIik7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9jb21wb25lbnRcIik7XG52YXIgTG9nID0gcmVxdWlyZShcIi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgR2FtZU9iamVjdFxuICogQGV4dGVuZHMgQ2xhc3NcbiAqIEBtZW1iZXJvZiBPZGluXG4gKiBAYnJpZWYgQmFzZSBjbGFzcyBmb3IgZW50aXRpZXMgaW4gc2NlbmVzXG4gKiBAcGFyYW0gT2JqZWN0IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gR2FtZU9iamVjdChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENsYXNzLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLm5hbWUgPSBvcHRzLm5hbWUgIT0gdW5kZWZpbmVkID8gb3B0cy5uYW1lIDogXCJHYW1lT2JqZWN0X1wiICsgdGhpcy5faWQ7XG5cbiAgICB0aGlzLnNjZW5lID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy50YWdzID0gW107XG5cbiAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcbiAgICB0aGlzLl9jb21wb25lbnRUeXBlID0ge307XG4gICAgdGhpcy5fY29tcG9uZW50SGFzaCA9IHt9O1xuICAgIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoID0ge307XG5cbiAgICBpZiAob3B0cy50YWcpIHRoaXMuYWRkVGFnKG9wdHMudGFnKTtcbiAgICBpZiAob3B0cy50YWdzKSB0aGlzLmFkZFRhZ3MuYXBwbHkodGhpcywgb3B0cy50YWdzKTtcblxuICAgIGlmIChvcHRzLmNvbXBvbmVudHMpIHRoaXMuYWRkQ29tcG9uZW50cy5hcHBseSh0aGlzLCBvcHRzLmNvbXBvbmVudHMpO1xufVxuXG5DbGFzcy5leHRlbmQoR2FtZU9iamVjdCk7XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBvdGhlckNvbXBvbmVudHMgPSBvdGhlci5jb21wb25lbnRzLFxuICAgICAgICB0YWdzID0gb3RoZXIudGFncyxcbiAgICAgICAgb3RoZXJDb21wb25lbnQsIGNvbXBvbmVudCxcbiAgICAgICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICBpZiAoIW90aGVyLmhhc0NvbXBvbmVudChjb21wb25lbnQuX2NsYXNzTmFtZSkpIHRoaXMucmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgaSA9IG90aGVyQ29tcG9uZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvdGhlckNvbXBvbmVudCA9IG90aGVyQ29tcG9uZW50c1tpXTtcblxuICAgICAgICBpZiAoKGNvbXBvbmVudCA9IHRoaXMuZ2V0Q29tcG9uZW50KG90aGVyQ29tcG9uZW50Ll90eXBlKSkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5jb3B5KG90aGVyQ29tcG9uZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG90aGVyQ29tcG9uZW50LmNsb25lKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaSA9IHRhZ3MubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkVGFnKHRhZ3NbaV0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICB0YWdzID0gdGhpcy50YWdzLFxuICAgICAgICBjb21wb25lbnRMZW5ndGggPSBjb21wb25lbnRzLmxlbmd0aCxcbiAgICAgICAgaTtcblxuICAgIGkgPSBjb21wb25lbnRMZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgY29tcG9uZW50c1tpXS5jbGVhcigpO1xuXG4gICAgaSA9IHRhZ3MubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlVGFnKHRhZ3NbaV0pO1xuXG4gICAgaSA9IGNvbXBvbmVudExlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB0aGlzLnJlbW92ZUNvbXBvbmVudChjb21wb25lbnRzW2ldKTtcblxuICAgIHRoaXMub2ZmKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuc2NlbmUpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR2FtZU9iamVjdC5kZXN0cm95OiBjYW4ndCBkZXN0cm95IEdhbWVPYmplY3QgaWYgaXQncyBub3QgYWRkZWQgdG8gYSBTY2VuZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVHYW1lT2JqZWN0KHRoaXMpO1xuICAgIHRoaXMuZW1pdChcImRlc3Ryb3lcIik7XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zY2VuZSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJHYW1lT2JqZWN0LnJlbW92ZTogY2FuJ3QgcmVtb3ZlIEdhbWVPYmplY3QgaWYgaXQncyBub3QgYWRkZWQgdG8gYSBTY2VuZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVHYW1lT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lT2JqZWN0LnByb3RvdHlwZS5hZGRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgdmFyIHRhZ3MgPSB0aGlzLnRhZ3M7XG5cbiAgICBpZiAodGFncy5pbmRleE9mKHRhZykgPT09IC0xKSB0YWdzLnB1c2godGFnKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lT2JqZWN0LnByb3RvdHlwZS5hZGRUYWdzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkVGFnKGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLnJlbW92ZVRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICB2YXIgdGFncyA9IHRoaXMudGFncyxcbiAgICAgICAgaW5kZXggPSB0YWdzLmluZGV4T2YodGFnKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHRhZ3Muc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lT2JqZWN0LnByb3RvdHlwZS5yZW1vdmVUYWdzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlVGFnKGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmhhc1RhZyA9IGZ1bmN0aW9uICh0YWcpIHtcblxuICAgIHJldHVybiB0aGlzLnRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMTtcbn07XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUuYWRkQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgb3RoZXJzKSB7XG4gICAgaWYgKHR5cGVvZihjb21wb25lbnQpID09PSBcInN0cmluZ1wiKSBjb21wb25lbnQgPSBuZXcgQ2xhc3MuX2NsYXNzZXNbY29tcG9uZW50XTtcbiAgICBpZiAoIShjb21wb25lbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpKSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdhbWVPYmplY3QuYWRkQ29tcG9uZW50OiBjYW4ndCBhZGQgcGFzc2VkIGFyZ3VtZW50LCBpdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQ29tcG9uZW50XCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBjb21wb25lbnQuX25hbWUsXG4gICAgICAgIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGNvbXAsIGksIGo7XG5cblxuICAgIGlmICghdGhpc1tuYW1lXSkge1xuICAgICAgICBpZiAoY29tcG9uZW50LmdhbWVPYmplY3QpIGNvbXBvbmVudCA9IGNvbXBvbmVudC5jbG9uZSgpO1xuXG4gICAgICAgIGNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlW2NvbXBvbmVudC5fdHlwZV0gPSBjb21wb25lbnQ7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEhhc2hbY29tcG9uZW50Ll9pZF0gPSBjb21wb25lbnQ7XG4gICAgICAgIGlmIChjb21wb25lbnQuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2NvbXBvbmVudC5fanNvbklkXSA9IGNvbXBvbmVudDtcblxuICAgICAgICBjb21wb25lbnQuZ2FtZU9iamVjdCA9IHRoaXM7XG4gICAgICAgIHRoaXNbbmFtZV0gPSBjb21wb25lbnQ7XG5cbiAgICAgICAgaWYgKCFvdGhlcnMpIHtcbiAgICAgICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBjb21wID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaiA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIGNvbXBbY29tcG9uZW50c1tqXS5fbmFtZV0gPSBjb21wb25lbnRzW2pdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21wb25lbnQuaW5pdCgpO1xuICAgICAgICAgICAgY29tcG9uZW50LmVtaXQoXCJpbml0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiYWRkXCIgKyBjb21wb25lbnQuX3R5cGUsIGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuZW1pdChcImFkZENvbXBvbmVudFwiLCBjb21wb25lbnQpO1xuICAgICAgICBjb21wb25lbnQuZW1pdChcImFkZFwiLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5zY2VuZSkgdGhpcy5zY2VuZS5fYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR2FtZU9iamVjdC5hZGRDb21wb25lbnQ6IEdhbWVPYmplY3QgYWxyZWFkeSBoYXMgYShuKSBcIiArIGNvbXBvbmVudC5fdHlwZSArIFwiIENvbXBvbmVudFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUuYWRkQ29tcG9uZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgY29tcG9uZW50LCBuYW1lLFxuICAgICAgICBpLCBqO1xuXG4gICAgaSA9IGxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB0aGlzLmFkZENvbXBvbmVudChhcmd1bWVudHNbaV0sIHRydWUpO1xuXG4gICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgaWYgKCFjb21wb25lbnQpIGNvbnRpbnVlO1xuXG4gICAgICAgIGogPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAgbmFtZSA9IGNvbXBvbmVudHNbal0uX25hbWU7XG4gICAgICAgICAgICBjb21wb25lbnRbbmFtZV0gPSBjb21wb25lbnRzW2pdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgY29tcG9uZW50LmluaXQoKTtcbiAgICAgICAgY29tcG9uZW50LmVtaXQoXCJpbml0XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lT2JqZWN0LnByb3RvdHlwZS5yZW1vdmVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBjbGVhciwgb3RoZXJzKSB7XG4gICAgaWYgKHR5cGVvZihjb21wb25lbnQpID09PSBcInN0cmluZ1wiKSBjb21wb25lbnQgPSB0aGlzLmdldENvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGlmICghKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbXBvbmVudCkpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR2FtZU9iamVjdC5yZW1vdmVDb21wb25lbnQ6IGNhbid0IHJlbW92ZSBwYXNzZWQgYXJndW1lbnQsIGl0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBDb21wb25lbnRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IGNvbXBvbmVudC5fbmFtZSxcbiAgICAgICAgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgY29tcCwgaSwgajtcblxuICAgIGlmICh0aGlzW25hbWVdKSB7XG4gICAgICAgIGNvbXBvbmVudC5lbWl0KFwicmVtb3ZlXCIsIHRoaXMpO1xuICAgICAgICB0aGlzLmVtaXQoXCJyZW1vdmVcIiArIGNvbXBvbmVudC5fdHlwZSwgY29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlQ29tcG9uZW50XCIsIGNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKCFvdGhlcnMpIHtcbiAgICAgICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBjb21wID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaiA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGNvbXBvbmVudHNbal0uX25hbWUpIGNvbXBbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9uZW50cy5zcGxpY2UoY29tcG9uZW50cy5pbmRleE9mKGNvbXBvbmVudCksIDEpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlW2NvbXBvbmVudC5fdHlwZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEhhc2hbY29tcG9uZW50Ll9pZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjb21wb25lbnQuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2NvbXBvbmVudC5fanNvbklkXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBjb21wb25lbnQuZ2FtZU9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGhpcy5zY2VuZSkgdGhpcy5zY2VuZS5fcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgIGlmIChjbGVhcikgY29tcG9uZW50LmNsZWFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR2FtZU9iamVjdC5yZW1vdmVDb21wb25lbnQ6IEdhbWVPYmplY3QgZG9lcyBub3QgaGF2ZSBhKG4pIFwiICsgdHlwZSArIFwiIENvbXBvbmVudFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUucmVtb3ZlQ29tcG9uZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgdG9SZW1vdmUgPSBhcmd1bWVudHMsXG4gICAgICAgIGNvbXBvbmVudCwgbmFtZSxcbiAgICAgICAgaSwgajtcblxuICAgIGkgPSBsZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVDb21wb25lbnQoYXJndW1lbnRzW2ldLCBudWxsLCB0cnVlKTtcblxuICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgIGlmICghY29tcG9uZW50KSBjb250aW51ZTtcblxuICAgICAgICBuYW1lID0gY29tcG9uZW50Ll9uYW1lO1xuICAgICAgICBqID0gdG9SZW1vdmUubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gdG9SZW1vdmVbaV0uX25hbWUpIGNvbXBvbmVudFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HYW1lT2JqZWN0LnByb3RvdHlwZS5nZXRDb21wb25lbnQgPSBmdW5jdGlvbiAodHlwZSkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudFR5cGVbdHlwZV07XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmhhc0NvbXBvbmVudCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICA7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmIChjb21wb25lbnRzW2ldLl90eXBlID09PSB0eXBlKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybSB8fCB0aGlzLnRyYW5zZm9ybTJkLFxuICAgICAgICBjaGlsZHJlbiwgY2hpbGQsIGk7XG5cbiAgICBpZiAoIXRyYW5zZm9ybSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGNoaWxkcmVuID0gdHJhbnNmb3JtLmNoaWxkcmVuO1xuICAgIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgICAgaWYgKGNoaWxkLmdhbWVPYmplY3QubmFtZSA9PT0gbmFtZSkgcmV0dXJuIGNoaWxkLmdhbWVPYmplY3Q7XG4gICAgICAgIGlmICgoY2hpbGQgPSBjaGlsZC5maW5kKG5hbWUpKSkgcmV0dXJuIGNoaWxkO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmZpbmRDb21wb25lbnRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG5cbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50SGFzaFtpZF07XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmZpbmRDb21wb25lbnRCeUpTT05JZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2lkXTtcbn07XG5cblxuR2FtZU9iamVjdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gQ2xhc3MucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBqc29uQ29tcG9uZW50cyA9IGpzb24uY29tcG9uZW50cyB8fCAoanNvbi5jb21wb25lbnRzID0gW10pLFxuICAgICAgICB0YWdzID0gdGhpcy50YWdzLFxuICAgICAgICBqc29uVGFncyA9IGpzb24udGFncyB8fCAoanNvbi50YWdzID0gW10pLFxuICAgICAgICBjb21wb25lbnQsXG4gICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKChjb21wb25lbnQgPSBjb21wb25lbnRzW2ldKS5qc29uKSBqc29uQ29tcG9uZW50c1tpXSA9IGNvbXBvbmVudC50b0pTT04oanNvbkNvbXBvbmVudHNbaV0pO1xuICAgIH1cbiAgICBpID0gdGFncy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkganNvblRhZ3NbaV0gPSB0YWdzW2ldO1xuXG4gICAganNvbi5uYW1lID0gdGhpcy5uYW1lO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkdhbWVPYmplY3QucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDbGFzcy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcbiAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAganNvbkNvbXBvbmVudHMgPSBqc29uLmNvbXBvbmVudHMgfHwgKGpzb24uY29tcG9uZW50cyA9IFtdKSxcbiAgICAgICAgY29tcG9uZW50LCBqc29uQ29tcG9uZW50LCB0YWcsXG4gICAgICAgIHRhZ3MgPSB0aGlzLnRhZ3MsXG4gICAgICAgIGpzb25UYWdzID0ganNvbi50YWdzIHx8IChqc29uLnRhZ3MgPSBbXSksXG4gICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aCxcbiAgICAgICAgaGFzLCB0eXBlLCBqO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICB0eXBlID0gY29tcG9uZW50Ll90eXBlO1xuICAgICAgICBoYXMgPSBmYWxzZTtcblxuICAgICAgICBqID0ganNvbkNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICBqc29uQ29tcG9uZW50ID0ganNvbkNvbXBvbmVudHNbaV07XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0ganNvbkNvbXBvbmVudC5fdHlwZSkgaGFzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzKSB0aGlzLnJlbW92ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgIH1cblxuICAgIGkgPSBqc29uQ29tcG9uZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoIShqc29uQ29tcG9uZW50ID0ganNvbkNvbXBvbmVudHNbaV0pKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoKGNvbXBvbmVudCA9IHRoaXMuZmluZENvbXBvbmVudEJ5SlNPTklkKGpzb25Db21wb25lbnQuX2lkKSkgfHwgKGNvbXBvbmVudCA9IHRoaXMuZ2V0Q29tcG9uZW50KGpzb25Db21wb25lbnQuX3R5cGUpKSkge1xuICAgICAgICAgICAgY29tcG9uZW50LmZyb21KU09OKGpzb25Db21wb25lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoQ2xhc3MuZnJvbUpTT04oanNvbkNvbXBvbmVudCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaSA9IGpzb25UYWdzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICh0YWdzLmluZGV4T2YoKHRhZyA9IGpzb25UYWdzW2ldKSkgPT09IC0xKSB0YWdzLnB1c2godGFnKTtcbiAgICB9XG5cbiAgICB0aGlzLm5hbWUgPSBqc29uLm5hbWU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lT2JqZWN0O1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgR1VJQ29tcG9uZW50ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvZ3VpX2NvbXBvbmVudFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIEdVSUNvbXBvbmVudE1hbmFnZXIob3JkZXIpIHtcblxuICAgIENsYXNzLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLm9yZGVyID0gb3JkZXIgfHwgMDtcblxuICAgIHRoaXMuZ3VpID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29tcG9uZW50cyA9IFtdO1xufVxuXG5DbGFzcy5leHRlbmQoR1VJQ29tcG9uZW50TWFuYWdlcik7XG5cblxuR1VJQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmbiwgY3R4KSB7XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBpbCA9IGNvbXBvbmVudHMubGVuZ3RoO1xuXG4gICAgaWYgKGN0eCkge1xuICAgICAgICBmb3IgKDsgaSA8IGlsOyBpKyspIGZuLmNhbGwoY3R4LCBjb21wb25lbnRzW2ldLCBpLCBjb21wb25lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IGlsOyBpKyspIGZuKGNvbXBvbmVudHNbaV0sIGksIGNvbXBvbmVudHMpO1xuICAgIH1cbn07XG5cblxuR1VJQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBpbCA9IGNvbXBvbmVudHMubGVuZ3RoO1xuXG4gICAgZm9yICg7IGkgPCBpbDsgaSsrKSBjb21wb25lbnRzW2ldLnN0YXJ0KCk7XG59O1xuXG5cbkdVSUNvbXBvbmVudE1hbmFnZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBpbCA9IGNvbXBvbmVudHMubGVuZ3RoO1xuXG4gICAgZm9yICg7IGkgPCBpbDsgaSsrKSBjb21wb25lbnRzW2ldLmluaXQoKTtcbn07XG5cblxuR1VJQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgaWwgPSBjb21wb25lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoOyBpIDwgaWw7IGkrKykgY29tcG9uZW50c1tpXS51cGRhdGUoKTtcbn07XG5cblxuR1VJQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMuY29tcG9uZW50cy5zb3J0KHRoaXMuc29ydEZ1bmN0aW9uKTtcbn07XG5cblxuR1VJQ29tcG9uZW50TWFuYWdlci5wcm90b3R5cGUuc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHJldHVybiBhLl9pZCAtIGIuX2lkO1xufTtcblxuXG5HVUlDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMubGVuZ3RoID09PSAwO1xufTtcblxuXG5HVUlDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgR1VJQ29tcG9uZW50KSkge1xuICAgICAgICBMb2cuZXJyb3IodGhpcy5fY2xhc3NOYW1lICsgXCIuYWRkOiBjYW4ndCBhZGQgYXJndW1lbnQgdG8gXCIgKyB0aGlzLl9jbGFzc05hbWUgKyBcIiwgaXQncyBub3QgYW4gaW5zdGFuY2Ugb2YgR1VJQ29tcG9uZW50XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBpbmRleCA9IGNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBjb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IodGhpcy5fY2xhc3NOYW1lICsgXCIuYWRkOiBHVUlDb21wb25lbnQgaXMgYWxyZWFkeSBhIG1lbWJlciBvZiBcIiArIHRoaXMuX2NsYXNzTmFtZSk7XG4gICAgfVxufTtcblxuXG5HVUlDb21wb25lbnRNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgR1VJQ29tcG9uZW50KSkge1xuICAgICAgICBMb2cuZXJyb3IodGhpcy5fY2xhc3NOYW1lICsgXCIucmVtb3ZlOiBjYW4ndCByZW1vdmUgYXJndW1lbnQgZnJvbSBcIiArIHRoaXMuX2NsYXNzTmFtZSArIFwiLCBpdCdzIG5vdCBhbiBpbnN0YW5jZSBvZiBHVUlDb21wb25lbnRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGluZGV4ID0gY29tcG9uZW50cy5pbmRleE9mKGNvbXBvbmVudCk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNvbXBvbmVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IodGhpcy5fY2xhc3NOYW1lICsgXCIucmVtb3ZlOiBHVUlDb21wb25lbnQgaXMgbm90IGEgbWVtYmVyIG9mIFwiICsgdGhpcy5fY2xhc3NOYW1lKTtcbiAgICB9XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gR1VJQ29tcG9uZW50TWFuYWdlcjtcbiIsInZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2NsYXNzXCIpO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vLi4vLi4vYmFzZS91dGlsXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjYW1lbGl6ZSA9IHV0aWwuY2FtZWxpemU7XG5cblxuZnVuY3Rpb24gR1VJQ29tcG9uZW50KHR5cGUsIG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuICAgIGlmICghdHlwZSkgTG9nLmVycm9yKFwiR1VJQ29tcG9uZW50IGRlZmluZWQgd2l0aG91dCBhIHR5cGUsIHVzZSBHVUlDb21wb25lbnQuY2FsbCh0aGlzLCBcXFwiR1VJQ29tcG9uZW50TmFtZVxcXCIsIHsgc3luYzogQm9vbGVhbiwganNvbjogQm9vbGVhbiB9KVwiKTtcblxuXG4gICAgQ2xhc3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuX3R5cGUgPSB0eXBlIHx8IFwiVW5rbm93bkdVSUNvbXBvbmVudFwiO1xuICAgIHRoaXMuX25hbWUgPSBjYW1lbGl6ZSh0aGlzLl90eXBlLCB0cnVlKTtcblxuICAgIHRoaXMuc3luYyA9IG9wdHMuc3luYyAhPSB1bmRlZmluZWQgPyAhIW9wdHMuc3luYyA6IGZhbHNlO1xuICAgIHRoaXMuanNvbiA9IG9wdHMuanNvbiAhPSB1bmRlZmluZWQgPyAhIW9wdHMuanNvbiA6IHRydWU7XG5cbiAgICB0aGlzLmd1aU9iamVjdCA9IHVuZGVmaW5lZDtcbn1cblxuQ2xhc3MuZXh0ZW5kKEdVSUNvbXBvbmVudCk7XG5cblxuR1VJQ29tcG9uZW50LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5cbkdVSUNvbXBvbmVudC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cblxuR1VJQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cblxuR1VJQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMub2ZmKCk7XG59O1xuXG5cbkdVSUNvbXBvbmVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuZ3VpT2JqZWN0KSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdVSUNvbXBvbmVudC5kZXN0cm95OiBjYW4ndCBkZXN0cm95IEdVSUNvbXBvbmVudCBpZiBpdCdzIG5vdCBhZGRlZCB0byBhIEdhbWVPYmplY3RcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuZ3VpT2JqZWN0LnJlbW92ZUdVSUNvbXBvbmVudCh0aGlzLCB0cnVlKTtcbiAgICB0aGlzLmVtaXQoXCJkZXN0cm95XCIpO1xuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSUNvbXBvbmVudC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5ndWlPYmplY3QpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR1VJQ29tcG9uZW50LmRlc3Ryb3k6IGNhbid0IGRlc3Ryb3kgR1VJQ29tcG9uZW50IGlmIGl0J3Mgbm90IGFkZGVkIHRvIGEgR2FtZU9iamVjdFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5ndWlPYmplY3QucmVtb3ZlR1VJQ29tcG9uZW50KHRoaXMsIHRydWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlDb21wb25lbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24uX3R5cGUgPSB0aGlzLl90eXBlO1xuICAgIGpzb24uc3luYyA9IHRoaXMuc3luYztcbiAgICBqc29uLmpzb24gPSB0aGlzLmpzb247XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuR1VJQ29tcG9uZW50LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnN5bmMgPSBqc29uLnN5bmM7XG4gICAgdGhpcy5qc29uID0ganNvbi5qc29uO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gR1VJQ29tcG9uZW50O1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4uLy4uLy4uL21hdGgvbWF0aGZcIik7XG52YXIgUmVjdCA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tYXRoL3JlY3RcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgTWF0MzIgPSByZXF1aXJlKFwiLi4vLi4vLi4vbWF0aC9tYXQzMlwiKTtcbnZhciBNYXQzID0gcmVxdWlyZShcIi4uLy4uLy4uL21hdGgvbWF0M1wiKTtcbnZhciBNYXQ0ID0gcmVxdWlyZShcIi4uLy4uLy4uL21hdGgvbWF0NFwiKTtcbnZhciBHVUlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9ndWlfY29tcG9uZW50XCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBFUFNJTE9OID0gTWF0aGYuRVBTSUxPTjtcblxuXG5mdW5jdGlvbiBHVUlUcmFuc2Zvcm0ob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG4gICAgb3B0cy5zeW5jID0gb3B0cy5zeW5jICE9IHVuZGVmaW5lZCA/IG9wdHMuc3luYyA6IHRydWU7XG5cbiAgICBHVUlDb21wb25lbnQuY2FsbCh0aGlzLCBcIkdVSVRyYW5zZm9ybVwiLCBvcHRzKTtcblxuICAgIHRoaXMucm9vdCA9IHRoaXM7XG4gICAgdGhpcy5kZXB0aCA9IDA7XG5cbiAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gb3B0cy5wb3NpdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uIDogbmV3IFJlY3Q7XG4gICAgdGhpcy5yb3RhdGlvbiA9IG9wdHMucm90YXRpb24gIT0gdW5kZWZpbmVkID8gb3B0cy5yb3RhdGlvbiA6IDA7XG4gICAgdGhpcy5zY2FsZSA9IG9wdHMuc2NhbGUgIT0gdW5kZWZpbmVkID8gb3B0cy5zY2FsZSA6IG5ldyBWZWMyKDEsIDEpO1xuXG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0MzI7XG4gICAgdGhpcy5tYXRyaXhXb3JsZCA9IG5ldyBNYXQzMjtcblxuICAgIHRoaXMubW9kZWxWaWV3ID0gbmV3IE1hdDQ7XG4gICAgdGhpcy5fbWF0cmljZXNOZWVkc1VwZGF0ZSA9IGZhbHNlO1xufVxuXG5HVUlDb21wb25lbnQuZXh0ZW5kKEdVSVRyYW5zZm9ybSk7XG5cblxuR1VJVHJhbnNmb3JtLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gb3RoZXIuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB0aGlzLnBvc2l0aW9uLmNvcHkob3RoZXIucG9zaXRpb24pO1xuICAgIHRoaXMuc2NhbGUuY29weShvdGhlci5zY2FsZSk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IG90aGVyLnJvdGF0aW9uO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5hZGRDaGlsZChjaGlsZHJlbltpXS5ndWlPYmplY3QuY2xvbmUoKS5ndWlUcmFuc2Zvcm0pO1xuICAgIGlmIChvdGhlci5wYXJlbnQpIG90aGVyLnBhcmVudC5hZGRDaGlsZCh0aGlzKTtcblxuICAgIHRoaXMuX21hdHJpY2VzTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSVRyYW5zZm9ybS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgR1VJQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkcmVuW2ldKTtcblxuICAgIHRoaXMucG9zaXRpb24uc2V0KDAsIDAsIDAsIDApO1xuICAgIHRoaXMuc2NhbGUuc2V0KDEsIDEpO1xuICAgIHRoaXMucm90YXRpb24gPSAwO1xuXG4gICAgdGhpcy5yb290ID0gdGhpcztcbiAgICB0aGlzLmRlcHRoID0gMDtcblxuICAgIHRoaXMuX21hdHJpY2VzTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSVRyYW5zZm9ybS5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2ZWMgPSBuZXcgVmVjMjtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNsYXRpb24sIHJlbGF0aXZlVG8pIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcblxuICAgICAgICB2ZWMuY29weSh0cmFuc2xhdGlvbik7XG5cbiAgICAgICAgaWYgKHJlbGF0aXZlVG8gaW5zdGFuY2VvZiBHVUlUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIHZlYy50cmFuc2Zvcm1BbmdsZShyZWxhdGl2ZVRvLnJvdGF0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZVRvKSB7XG4gICAgICAgICAgICB2ZWMudHJhbnNmb3JtQW5nbGUocmVsYXRpdmVUbyk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbi54ICs9IHZlYy54O1xuICAgICAgICBwb3NpdGlvbi55ICs9IHZlYy55O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuR1VJVHJhbnNmb3JtLnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbiAocm90YXRpb24sIHJlbGF0aXZlVG8pIHtcblxuICAgIGlmIChyZWxhdGl2ZVRvIGluc3RhbmNlb2YgR1VJVHJhbnNmb3JtKSB7XG4gICAgICAgIHJvdGF0aW9uICs9IHJlbGF0aXZlVG8ucm90YXRpb247XG4gICAgfSBlbHNlIGlmIChyZWxhdGl2ZVRvKSB7XG4gICAgICAgIHJvdGF0aW9uICs9IHJlbGF0aXZlVG87XG4gICAgfVxuXG4gICAgdGhpcy5yb3RhdGlvbiArPSByb3RhdGlvbjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLmxvb2tBdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWF0ID0gbmV3IE1hdDMyLFxuICAgICAgICB2ZWMgPSBuZXcgVmVjMixcbiAgICAgICAgdmVjXzIgPSBuZXcgVmVjMjtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG5cbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEdVSVRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdmVjLmNvcHkodGFyZ2V0LnBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlYy5jb3B5KHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXQubG9va0F0KHRoaXMucG9zaXRpb24uY2VudGVyKHZlY18yKSwgdmVjKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG1hdC5nZXRSb3RhdGlvbigpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cblxuR1VJVHJhbnNmb3JtLnByb3RvdHlwZS5mb2xsb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldCA9IG5ldyBWZWMyLFxuICAgICAgICBwb3MgPSBuZXcgVmVjMixcbiAgICAgICAgZGVsdGEgPSBuZXcgVmVjMjtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNmb3JtLCBzcGVlZCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xuXG4gICAgICAgIHBvcy5zZXQoMCwgMCkudHJhbnNmb3JtTWF0MzIodGhpcy5tYXRyaXhXb3JsZCk7XG4gICAgICAgIHRhcmdldC5zZXQoMCwgMCkudHJhbnNmb3JtTWF0MzIodHJhbnNmb3JtLm1hdHJpeFdvcmxkKTtcblxuICAgICAgICBkZWx0YS52c3ViKHRhcmdldCwgcG9zKTtcblxuICAgICAgICBpZiAoZGVsdGEubGVuZ3RoU3EoKSA+IEVQU0lMT04pIHtcbiAgICAgICAgICAgIHBvc2l0aW9uLnggKz0gZGVsdGEueCAqIHNwZWVkO1xuICAgICAgICAgICAgcG9zaXRpb24ueSArPSBkZWx0YS55ICogc3BlZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufSgpO1xuXG5cbkdVSVRyYW5zZm9ybS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQsIG90aGVycykge1xuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgR1VJVHJhbnNmb3JtKSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJHVUlUcmFuc2Zvcm0uYWRkOiBjYW5cXCd0IGFkZCBwYXNzZWQgYXJndW1lbnQsIGl0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBHVUlUcmFuc2Zvcm1cIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICBpbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLFxuICAgICAgICByb290LCBkZXB0aCwgZ3VpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBpZiAoY2hpbGQucGFyZW50KSBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcblxuICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcblxuICAgICAgICByb290ID0gdGhpcztcbiAgICAgICAgZGVwdGggPSAwO1xuXG4gICAgICAgIHdoaWxlIChyb290LnBhcmVudCkge1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucGFyZW50O1xuICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC5yb290ID0gcm9vdDtcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcblxuICAgICAgICB1cGRhdGVEZXB0aCh0aGlzLCBkZXB0aCk7XG4gICAgICAgIGlmICghb3RoZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ndWlPYmplY3QgJiYgKGd1aSA9IHRoaXMuZ3VpT2JqZWN0Lmd1aSkpIHtcbiAgICAgICAgICAgICAgICBndWkuY29tcG9uZW50TWFuYWdlcnMuR1VJVHJhbnNmb3JtLnNvcnQodGhpcy5zb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdVSVRyYW5zZm9ybS5hZGQ6IGNoaWxkIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIEdVSVRyYW5zZm9ybVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJVHJhbnNmb3JtLnByb3RvdHlwZS5hZGRDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSwgaWwsIGd1aTtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHRoaXMuYWRkQ2hpbGQoYXJndW1lbnRzW2ldLCB0cnVlKTtcbiAgICBpZiAodGhpcy5ndWlPYmplY3QgJiYgKGd1aSA9IHRoaXMuZ3VpT2JqZWN0Lmd1aSkpIHtcbiAgICAgICAgZ3VpLmNvbXBvbmVudE1hbmFnZXJzLkdVSVRyYW5zZm9ybS5zb3J0KHRoaXMuc29ydCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkLCBvdGhlcnMpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICBpbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLFxuICAgICAgICByb290LCBkZXB0aCwgZ3VpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgcm9vdCA9IHRoaXM7XG4gICAgICAgIGRlcHRoID0gMDtcblxuICAgICAgICB3aGlsZSAocm9vdC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnBhcmVudDtcbiAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQucm9vdCA9IGNoaWxkO1xuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuXG4gICAgICAgIHVwZGF0ZURlcHRoKHRoaXMsIGRlcHRoKTtcbiAgICAgICAgaWYgKCFvdGhlcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmd1aU9iamVjdCAmJiAoZ3VpID0gdGhpcy5ndWlPYmplY3QuZ3VpKSkge1xuICAgICAgICAgICAgICAgIGd1aS5jb21wb25lbnRNYW5hZ2Vycy5HVUlUcmFuc2Zvcm0uc29ydCh0aGlzLnNvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR1VJVHJhbnNmb3JtLnJlbW92ZTogY2hpbGQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgR1VJVHJhbnNmb3JtXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLnJlbW92ZUNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpLCBpbCwgZ3VpO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5yZW1vdmVDaGlsZChhcmd1bWVudHNbaV0sIHRydWUpO1xuICAgIGlmICh0aGlzLmd1aU9iamVjdCAmJiAoZ3VpID0gdGhpcy5ndWlPYmplY3QuZ3VpKSkge1xuICAgICAgICBndWkuY29tcG9uZW50TWFuYWdlcnMuR1VJVHJhbnNmb3JtLnNvcnQodGhpcy5zb3J0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSVRyYW5zZm9ybS5wcm90b3R5cGUuZGV0YWNoQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVDaGlsZChjaGlsZHJlbltpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSVRyYW5zZm9ybS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcblxuICAgIHJldHVybiAhIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICAgIGlmIChjaGlsZC5ndWlPYmplY3QubmFtZSA9PT0gbmFtZSkgcmV0dXJuIGNoaWxkO1xuICAgICAgICBpZiAoKGNoaWxkID0gY2hpbGQuZmluZChuYW1lKSkpIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLnRvV29ybGQgPSBmdW5jdGlvbiAodikge1xuXG4gICAgcmV0dXJuIHYudHJhbnNmb3JtTWF0MzIodGhpcy5tYXRyaXhXb3JsZCk7XG59O1xuXG5cbkdVSVRyYW5zZm9ybS5wcm90b3R5cGUudG9Mb2NhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWF0ID0gbmV3IE1hdDMyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG5cbiAgICAgICAgcmV0dXJuIHYudHJhbnNmb3JtTWF0MzIobWF0LmludmVyc2VNYXQodGhpcy5tYXRyaXhXb3JsZCkpO1xuICAgIH07XG59KCk7XG5cblxuR1VJVHJhbnNmb3JtLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1hdHJpeCA9IHRoaXMubWF0cml4LFxuICAgICAgICBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuICAgIG1hdHJpeC5jb21wb3NlKHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUsIHRoaXMucm90YXRpb24pO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLm1hdHJpeFdvcmxkLm1tdWwocGFyZW50Lm1hdHJpeFdvcmxkLCBtYXRyaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWF0cml4V29ybGQuY29weShtYXRyaXgpO1xuICAgIH1cblxuICAgIHRoaXMuX21hdHJpY2VzTmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLnVwZGF0ZU1hdHJpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXQgPSBuZXcgTWF0NDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodmlld01hdHJpeCkge1xuICAgICAgICBpZiAoIXRoaXMuX21hdHJpY2VzTmVlZHNVcGRhdGUpIHJldHVybjtcblxuICAgICAgICB0aGlzLm1vZGVsVmlldy5tbXVsKHZpZXdNYXRyaXgsIG1hdC5mcm9tTWF0MzIodGhpcy5tYXRyaXhXb3JsZCkpO1xuICAgICAgICB0aGlzLl9tYXRyaWNlc05lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgfTtcbn0oKTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IEdVSUNvbXBvbmVudC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbixcbiAgICAgICAganNvbkNoaWxkcmVuID0ganNvbi5jaGlsZHJlbiB8fCAoanNvbi5jaGlsZHJlbiA9IFtdKSxcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIGpzb25DaGlsZHJlbltpXSA9IGNoaWxkcmVuW2ldLl9pZDtcblxuICAgIGpzb24ucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLnRvSlNPTihqc29uLnBvc2l0aW9uKTtcbiAgICBqc29uLnNjYWxlID0gdGhpcy5zY2FsZS50b0pTT04oanNvbi5zY2FsZSk7XG4gICAganNvbi5yb3RhdGlvbiA9IHRoaXMucm90YXRpb25cblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5HVUlUcmFuc2Zvcm0ucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBHVUlDb21wb25lbnQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGNoaWxkcmVuID0ganNvbi5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgY2hpbGQsIGd1aTtcblxuICAgIGlmICh0aGlzLmd1aU9iamVjdCAmJiAoZ3VpID0gdGhpcy5ndWlPYmplY3QuZ3VpKSkge1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBjaGlsZCA9IGd1aS5maW5kR1VJQ29tcG9uZW50QnlKU09OSWQoY2hpbGRyZW5baV0pO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzQ2hpbGQoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uY2UoXCJzdGFydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ3VpID0gdGhpcy5ndWlPYmplY3QuZ3VpO1xuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBndWkuZmluZEdVSUNvbXBvbmVudEJ5SlNPTklkKGNoaWxkcmVuW2ldKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXNDaGlsZChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnBvc2l0aW9uLmZyb21KU09OKGpzb24ucG9zaXRpb24pO1xuICAgIHRoaXMuc2NhbGUuZnJvbUpTT04oanNvbi5zY2FsZSk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IGpzb24ucm90YXRpb247XG5cbiAgICB0aGlzLl9tYXRyaWNlc05lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5mdW5jdGlvbiB1cGRhdGVEZXB0aCh0cmFuc2Zvcm0sIGRlcHRoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdHJhbnNmb3JtLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgdHJhbnNmb3JtLmRlcHRoID0gZGVwdGg7XG4gICAgd2hpbGUgKGktLSkgdXBkYXRlRGVwdGgoY2hpbGRyZW5baV0sIGRlcHRoICsgMSk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBHVUlUcmFuc2Zvcm07XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBHVUlPYmplY3QgPSByZXF1aXJlKFwiLi9ndWlfb2JqZWN0XCIpO1xudmFyIEdVSUNvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRfbWFuYWdlcnMvZ3VpX2NvbXBvbmVudF9tYW5hZ2VyXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogR1VJcyBtYW5hZ2UgR1VJT2JqZWN0cyBhbmQgdGhlaXIgR1VJQ29tcG9uZW50c1xuICogQGNsYXNzIE9kaW4uR1VJXG4gKiBAZXh0ZW5kcyBPZGluLkNsYXNzXG4gKiBAcGFyYW0gT2JqZWN0IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gR1VJKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ2xhc3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuZ2FtZSA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMubmFtZSA9IG9wdHMubmFtZSAhPSB1bmRlZmluZWQgPyBvcHRzLm5hbWUgOiBcIkdVSV9cIiArIHRoaXMuX2lkO1xuXG4gICAgdGhpcy53aWR0aCA9IDk2MDtcbiAgICB0aGlzLmhlaWdodCA9IDY0MDtcbiAgICB0aGlzLmFzcGVjdCA9IHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcbiAgICB0aGlzLmludldpZHRoID0gMSAvIHRoaXMud2lkdGg7XG4gICAgdGhpcy5pbnZIZWlnaHQgPSAxIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICB0aGlzLmd1aU9iamVjdHMgPSBbXTtcbiAgICB0aGlzLl9ndWlPYmplY3RIYXNoID0ge307XG4gICAgdGhpcy5fZ3VpT2JqZWN0SlNPTkhhc2ggPSB7fTtcblxuICAgIHRoaXMuY29tcG9uZW50TWFuYWdlcnMgPSB7fTtcbiAgICB0aGlzLl9jb21wb25lbnRNYW5hZ2VyVHlwZXMgPSBbXTtcbiAgICB0aGlzLl9jb21wb25lbnRIYXNoID0ge307XG4gICAgdGhpcy5fY29tcG9uZW50SlNPTkhhc2ggPSB7fTtcblxuICAgIGlmIChvcHRzLmd1aU9iamVjdHMpIHRoaXMuYWRkR1VJT2JqZWN0cy5hcHBseSh0aGlzLCBvcHRzLmd1aU9iamVjdHMpO1xufVxuXG5DbGFzcy5leHRlbmQoR1VJKTtcblxuXG5HVUkucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgb3RoZXJHVUlPYmplY3RzID0gb3RoZXIuZ3VpT2JqZWN0cyxcbiAgICAgICAgaSA9IG90aGVyR1VJT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgdGhpcy5uYW1lID0gb3RoZXIubmFtZSArIFwiLlwiICsgdGhpcy5faWQ7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLmFkZEdVSU9iamVjdChvdGhlckdVSU9iamVjdHNbaV0uY2xvbmUoKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBndWlPYmplY3RzID0gdGhpcy5ndWlPYmplY3RzLFxuICAgICAgICBpLCBpbDtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gZ3VpT2JqZWN0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBndWlPYmplY3RzW2ldLmVtaXQoXCJpbml0XCIpO1xufTtcblxuXG5HVUkucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRNYW5hZ2VyVHlwZXMgPSB0aGlzLl9jb21wb25lbnRNYW5hZ2VyVHlwZXMsXG4gICAgICAgIGd1aU9iamVjdHMgPSB0aGlzLmd1aU9iamVjdHMsXG4gICAgICAgIGksIGlsO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBjb21wb25lbnRNYW5hZ2VyVHlwZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykgY29tcG9uZW50TWFuYWdlclR5cGVzW2ldLnN0YXJ0KCk7XG4gICAgZm9yIChpID0gMCwgaWwgPSBndWlPYmplY3RzLmxlbmd0aDsgaSA8IGlsOyBpKyspIGd1aU9iamVjdHNbaV0uZW1pdChcInN0YXJ0XCIpO1xufTtcblxuXG5HVUkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29tcG9uZW50TWFuYWdlclR5cGVzID0gdGhpcy5fY29tcG9uZW50TWFuYWdlclR5cGVzLFxuICAgICAgICBpLCBpbDtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gY29tcG9uZW50TWFuYWdlclR5cGVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIGNvbXBvbmVudE1hbmFnZXJUeXBlc1tpXS51cGRhdGUoKTtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZ3VpT2JqZWN0cyA9IHRoaXMuZ3VpT2JqZWN0cyxcbiAgICAgICAgaSA9IGd1aU9iamVjdHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVHVUlPYmplY3QoZ3VpT2JqZWN0c1tpXSwgdHJ1ZSk7XG5cbiAgICB0aGlzLm9mZigpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMuZW1pdChcImRlc3Ryb3lcIik7XG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSS5wcm90b3R5cGUuYWRkR1VJT2JqZWN0ID0gZnVuY3Rpb24gKGd1aU9iamVjdCkge1xuICAgIGlmICghKGd1aU9iamVjdCBpbnN0YW5jZW9mIEdVSU9iamVjdCkpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR1VJLmFkZEdVSU9iamVjdDogY2FuJ3QgYWRkIGFyZ3VtZW50IHRvIEdVSSwgaXQncyBub3QgYW4gaW5zdGFuY2Ugb2YgR1VJT2JqZWN0XCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIGd1aU9iamVjdHMgPSB0aGlzLmd1aU9iamVjdHMsXG4gICAgICAgIGluZGV4ID0gZ3VpT2JqZWN0cy5pbmRleE9mKGd1aU9iamVjdCksXG4gICAgICAgIGNvbXBvbmVudHMsIHRyYW5zZm9ybSwgY2hpbGRyZW4sIGNoaWxkLFxuICAgICAgICBpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBpZiAoZ3VpT2JqZWN0Lmd1aSkgZ3VpT2JqZWN0Lmd1aS5yZW1vdmVHVUlPYmplY3QoZ3VpT2JqZWN0KTtcblxuICAgICAgICBndWlPYmplY3RzLnB1c2goZ3VpT2JqZWN0KTtcbiAgICAgICAgdGhpcy5fZ3VpT2JqZWN0SGFzaFtndWlPYmplY3QuX2lkXSA9IGd1aU9iamVjdDtcbiAgICAgICAgaWYgKGd1aU9iamVjdC5fanNvbklkICE9PSAtMSkgdGhpcy5fZ3VpT2JqZWN0SlNPTkhhc2hbZ3VpT2JqZWN0Ll9qc29uSWRdID0gZ3VpT2JqZWN0O1xuXG4gICAgICAgIGd1aU9iamVjdC5ndWkgPSB0aGlzO1xuXG4gICAgICAgIGNvbXBvbmVudHMgPSBndWlPYmplY3QuY29tcG9uZW50cztcbiAgICAgICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB0aGlzLl9hZGRHVUlDb21wb25lbnQoY29tcG9uZW50c1tpXSk7XG5cbiAgICAgICAgaWYgKCh0cmFuc2Zvcm0gPSBndWlPYmplY3QuZ3VpVHJhbnNmb3JtKSkge1xuICAgICAgICAgICAgaSA9IChjaGlsZHJlbiA9IHRyYW5zZm9ybS5jaGlsZHJlbikubGVuZ3RoO1xuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKChjaGlsZCA9IGNoaWxkcmVuW2ldLmd1aU9iamVjdCkgJiYgIXRoaXMuaGFzR1VJT2JqZWN0KGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEdVSU9iamVjdChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZ2FtZSkgZ3VpT2JqZWN0LmVtaXQoXCJpbml0XCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJhZGRHVUlPYmplY3RcIiwgZ3VpT2JqZWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IoXCJHVUkuYWRkR1VJT2JqZWN0OiBHVUlPYmplY3QgaXMgYWxyZWFkeSBhIG1lbWJlciBvZiBHVUlcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSS5wcm90b3R5cGUuYWRkR1VJT2JqZWN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIGlsID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoOyBpIDwgaWw7IGkrKykgdGhpcy5hZGRHVUlPYmplY3QoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJLnByb3RvdHlwZS5fYWRkR1VJQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIGlmICghY29tcG9uZW50KSByZXR1cm47XG4gICAgdmFyIHR5cGUgPSBjb21wb25lbnQuX3R5cGUsXG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJzID0gdGhpcy5jb21wb25lbnRNYW5hZ2VycyxcbiAgICAgICAgY29tcG9uZW50TWFuYWdlciA9IGNvbXBvbmVudE1hbmFnZXJzW3R5cGVdLFxuICAgICAgICBjb21wb25lbnRNYW5hZ2VyVHlwZXMgPSB0aGlzLl9jb21wb25lbnRNYW5hZ2VyVHlwZXMsXG4gICAgICAgIGlzTmV3ID0gIWNvbXBvbmVudE1hbmFnZXI7XG5cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgY29tcG9uZW50TWFuYWdlciA9IGNvbXBvbmVudE1hbmFnZXJzW3R5cGVdID0gbmV3IChDbGFzcy5fY2xhc3Nlc1t0eXBlICsgXCJHVUlDb21wb25lbnRNYW5hZ2VyXCJdIHx8IEdVSUNvbXBvbmVudE1hbmFnZXIpO1xuICAgICAgICBjb21wb25lbnRNYW5hZ2VyVHlwZXMucHVzaChjb21wb25lbnRNYW5hZ2VyKTtcbiAgICAgICAgY29tcG9uZW50TWFuYWdlclR5cGVzLnNvcnQoc29ydEdVSUNvbXBvbmVudE1hbmFnZXJUeXBlcyk7XG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXIuZ3VpID0gdGhpcztcbiAgICB9XG5cbiAgICBjb21wb25lbnRNYW5hZ2VyLmFkZChjb21wb25lbnQpO1xuICAgIGNvbXBvbmVudE1hbmFnZXIuc29ydCgpO1xuXG4gICAgdGhpcy5fY29tcG9uZW50SGFzaFtjb21wb25lbnQuX2lkXSA9IGNvbXBvbmVudDtcbiAgICBpZiAoY29tcG9uZW50Ll9qc29uSWQgIT09IC0xKSB0aGlzLl9jb21wb25lbnRKU09OSGFzaFtjb21wb25lbnQuX2pzb25JZF0gPSBjb21wb25lbnQ7XG5cbiAgICB0aGlzLmVtaXQoXCJhZGRcIiArIHR5cGUsIGNvbXBvbmVudCk7XG4gICAgdGhpcy5lbWl0KFwiYWRkR1VJQ29tcG9uZW50XCIsIGNvbXBvbmVudCk7XG5cbiAgICBpZiAodGhpcy5nYW1lKSB7XG4gICAgICAgIGNvbXBvbmVudC5zdGFydCgpO1xuICAgICAgICBjb21wb25lbnQuZW1pdChcInN0YXJ0XCIpO1xuICAgIH1cbn07XG5cblxuZnVuY3Rpb24gc29ydEdVSUNvbXBvbmVudE1hbmFnZXJUeXBlcyhhLCBiKSB7XG5cbiAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG59XG5cblxuR1VJLnByb3RvdHlwZS5yZW1vdmVHVUlPYmplY3QgPSBmdW5jdGlvbiAoZ3VpT2JqZWN0LCBjbGVhcikge1xuICAgIGlmICghKGd1aU9iamVjdCBpbnN0YW5jZW9mIEdVSU9iamVjdCkpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR1VJLnJlbW92ZUdVSU9iamVjdDogY2FuJ3QgcmVtb3ZlIGFyZ3VtZW50IGZyb20gR1VJLCBpdCdzIG5vdCBhbiBpbnN0YW5jZSBvZiBHVUlPYmplY3RcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgZ3VpT2JqZWN0cyA9IHRoaXMuZ3VpT2JqZWN0cyxcbiAgICAgICAgaW5kZXggPSBndWlPYmplY3RzLmluZGV4T2YoZ3VpT2JqZWN0KSxcbiAgICAgICAgY29tcG9uZW50cywgdHJhbnNmb3JtLCBjaGlsZHJlbiwgY2hpbGQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG5cbiAgICAgICAgZ3VpT2JqZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLl9ndWlPYmplY3RIYXNoW2d1aU9iamVjdC5faWRdID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZ3VpT2JqZWN0Ll9qc29uSWQgIT09IC0xKSB0aGlzLl9ndWlPYmplY3RKU09OSGFzaFtndWlPYmplY3QuX2pzb25JZF0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgZ3VpT2JqZWN0Lmd1aSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBjb21wb25lbnRzID0gZ3VpT2JqZWN0LmNvbXBvbmVudHM7XG4gICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkgdGhpcy5fcmVtb3ZlR1VJQ29tcG9uZW50KGNvbXBvbmVudHNbaV0sIGNsZWFyKTtcblxuICAgICAgICBpZiAoKHRyYW5zZm9ybSA9IGd1aU9iamVjdC5ndWlUcmFuc2Zvcm0pKSB7XG4gICAgICAgICAgICBpID0gKGNoaWxkcmVuID0gdHJhbnNmb3JtLmNoaWxkcmVuKS5sZW5ndGg7XG5cbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKGNoaWxkID0gY2hpbGRyZW5baV0uZ3VpT2JqZWN0KSAmJiB0aGlzLmhhc0dVSU9iamVjdChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVHVUlPYmplY3QoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdChcInJlbW92ZUdVSU9iamVjdFwiLCBndWlPYmplY3QpO1xuICAgICAgICBndWlPYmplY3QuZW1pdChcInJlbW92ZVwiLCBndWlPYmplY3QpO1xuICAgICAgICBpZiAoY2xlYXIpIGd1aU9iamVjdC5jbGVhcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdVSS5yZW1vdmVHVUlPYmplY3Q6IEdVSU9iamVjdCBpcyBub3QgYSBtZW1iZXIgb2YgR1VJXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUkucHJvdG90eXBlLnJlbW92ZUdVSU9iamVjdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKDsgaSA8IGlsOyBpKyspIHRoaXMucmVtb3ZlR1VJT2JqZWN0KGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSS5wcm90b3R5cGUuX3JlbW92ZUdVSUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGNsZWFyKSB7XG4gICAgaWYgKCFjb21wb25lbnQpIHJldHVybjtcbiAgICB2YXIgdHlwZSA9IGNvbXBvbmVudC5fdHlwZSxcbiAgICAgICAgY29tcG9uZW50TWFuYWdlcnMgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXJzLFxuICAgICAgICBjb21wb25lbnRNYW5hZ2VyID0gY29tcG9uZW50TWFuYWdlcnNbdHlwZV0sXG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJUeXBlcyA9IHRoaXMuX2NvbXBvbmVudE1hbmFnZXJUeXBlcztcblxuICAgIGNvbXBvbmVudE1hbmFnZXIucmVtb3ZlKGNvbXBvbmVudCk7XG4gICAgdGhpcy5fY29tcG9uZW50SGFzaFtjb21wb25lbnQuX2lkXSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY29tcG9uZW50Ll9qc29uSWQgIT09IC0xKSB0aGlzLl9jb21wb25lbnRKU09OSGFzaFtjb21wb25lbnQuX2pzb25JZF0gPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY29tcG9uZW50TWFuYWdlci5lbXB0eSgpKSB7XG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJzW3R5cGVdID0gdW5kZWZpbmVkO1xuICAgICAgICBjb21wb25lbnRNYW5hZ2VyVHlwZXMuc3BsaWNlKGNvbXBvbmVudE1hbmFnZXJUeXBlcy5pbmRleE9mKGNvbXBvbmVudE1hbmFnZXIpLCAxKTtcbiAgICAgICAgY29tcG9uZW50TWFuYWdlci5ndWkgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KFwicmVtb3ZlXCIgKyB0eXBlLCBjb21wb25lbnQpO1xuICAgIHRoaXMuZW1pdChcInJlbW92ZUdVSUNvbXBvbmVudFwiLCBjb21wb25lbnQpO1xuXG4gICAgaWYgKGNsZWFyKSBjb21wb25lbnQuY2xlYXIoKTtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5oYXNHVUlPYmplY3QgPSBmdW5jdGlvbiAoZ3VpT2JqZWN0KSB7XG5cbiAgICByZXR1cm4gISF+dGhpcy5ndWlPYmplY3RzLmluZGV4T2YoZ3VpT2JqZWN0KTtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5maW5kQnlUYWcgPSBmdW5jdGlvbiAodGFnLCBvdXQpIHtcbiAgICBvdXQgfHwgKG91dCA9IFtdKTtcbiAgICB2YXIgZ3VpT2JqZWN0cyA9IHRoaXMuZ3VpT2JqZWN0cyxcbiAgICAgICAgZ3VpT2JqZWN0LCBpID0gZ3VpT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICgoZ3VpT2JqZWN0ID0gZ3VpT2JqZWN0c1tpXSkuaGFzVGFnKHRhZykpIG91dC5wdXNoKGd1aU9iamVjdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5maW5kQnlUYWdGaXJzdCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICB2YXIgZ3VpT2JqZWN0cyA9IHRoaXMuZ3VpT2JqZWN0cyxcbiAgICAgICAgZ3VpT2JqZWN0LCBpID0gZ3VpT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICgoZ3VpT2JqZWN0ID0gZ3VpT2JqZWN0c1tpXSkuaGFzVGFnKHRhZykpIHJldHVybiBndWlPYmplY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5maW5kQnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2d1aU9iamVjdEhhc2hbaWRdO1xufTtcblxuXG5HVUkucHJvdG90eXBlLmZpbmRCeUpTT05JZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2d1aU9iamVjdEpTT05IYXNoW2lkXTtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5maW5kR1VJQ29tcG9uZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEhhc2hbaWRdO1xufTtcblxuXG5HVUkucHJvdG90eXBlLmZpbmRHVUlDb21wb25lbnRCeUpTT05JZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2lkXTtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZ3VpT2JqZWN0cyA9IHRoaXMuZ3VpT2JqZWN0cyxcbiAgICAgICAgY2hpbGQsIGkgPSBndWlPYmplY3RzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2hpbGQgPSBndWlPYmplY3RzW2ldO1xuXG4gICAgICAgIGlmIChjaGlsZC5uYW1lID09PSBuYW1lKSByZXR1cm4gY2hpbGQ7XG4gICAgICAgIGlmICgoY2hpbGQgPSBjaGlsZC5maW5kKG5hbWUpKSkgcmV0dXJuIGNoaWxkO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5cbkdVSS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gQ2xhc3MucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBndWlPYmplY3RzID0gdGhpcy5ndWlPYmplY3RzLFxuICAgICAgICBqc29uR1VJT2JqZWN0cyA9IGpzb24uZ3VpT2JqZWN0cyB8fCAoanNvbi5ndWlPYmplY3RzID0gW10pLFxuICAgICAgICBndWlPYmplY3QsXG4gICAgICAgIGkgPSBndWlPYmplY3RzLmxlbmd0aDtcblxuICAgIGpzb24ubmFtZSA9IHRoaXMubmFtZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKChndWlPYmplY3QgPSBndWlPYmplY3RzW2ldKSkganNvbkdVSU9iamVjdHNbaV0gPSBndWlPYmplY3QudG9KU09OKGpzb25HVUlPYmplY3RzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuR1VJLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGpzb25HVUlPYmplY3RzID0ganNvbi5ndWlPYmplY3RzLFxuICAgICAgICBndWlPYmplY3QsIGpzb25HVUlPYmplY3QsXG4gICAgICAgIGkgPSBqc29uR1VJT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB0aGlzLm5hbWUgPSBqc29uLm5hbWU7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICghKGpzb25HVUlPYmplY3QgPSBqc29uR1VJT2JqZWN0c1tpXSkpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICgoZ3VpT2JqZWN0ID0gdGhpcy5fZ3VpT2JqZWN0SlNPTkhhc2hbanNvbkdVSU9iamVjdC5faWRdKSkge1xuICAgICAgICAgICAgZ3VpT2JqZWN0LmZyb21KU09OKGpzb25HVUlPYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRHVUlPYmplY3QoQ2xhc3MuZnJvbUpTT04oanNvbkdVSU9iamVjdCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gR1VJO1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgR1VJQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9ndWlfY29tcG9uZW50XCIpO1xudmFyIEdVSVRyYW5zZm9ybSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvZ3VpX3RyYW5zZm9ybVwiKTtcbnZhciBMb2cgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgR1VJT2JqZWN0XG4gKiBAZXh0ZW5kcyBDbGFzc1xuICogQG1lbWJlcm9mIE9kaW5cbiAqIEBicmllZiBCYXNlIGNsYXNzIGZvciBlbnRpdGllcyBpbiBzY2VuZXNcbiAqIEBwYXJhbSBPYmplY3Qgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBHVUlPYmplY3Qob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDbGFzcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5uYW1lID0gb3B0cy5uYW1lICE9IHVuZGVmaW5lZCA/IG9wdHMubmFtZSA6IFwiR1VJT2JqZWN0X1wiICsgdGhpcy5faWQ7XG5cbiAgICB0aGlzLnNjZW5lID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy50YWdzID0gW107XG5cbiAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcbiAgICB0aGlzLl9jb21wb25lbnRUeXBlID0ge307XG4gICAgdGhpcy5fY29tcG9uZW50SGFzaCA9IHt9O1xuICAgIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoID0ge307XG5cbiAgICBpZiAob3B0cy50YWcpIHRoaXMuYWRkVGFnKG9wdHMudGFnKTtcbiAgICBpZiAob3B0cy50YWdzKSB0aGlzLmFkZFRhZ3MuYXBwbHkodGhpcywgb3B0cy50YWdzKTtcblxuICAgIHRoaXMuYWRkR1VJQ29tcG9uZW50KG5ldyBHVUlUcmFuc2Zvcm0pO1xuICAgIGlmIChvcHRzLmNvbXBvbmVudHMpIHRoaXMuYWRkR1VJQ29tcG9uZW50cy5hcHBseSh0aGlzLCBvcHRzLmNvbXBvbmVudHMpO1xufVxuXG5DbGFzcy5leHRlbmQoR1VJT2JqZWN0KTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgb3RoZXJHVUlDb21wb25lbnRzID0gb3RoZXIuY29tcG9uZW50cyxcbiAgICAgICAgdGFncyA9IG90aGVyLnRhZ3MsXG4gICAgICAgIG90aGVyR1VJQ29tcG9uZW50LCBjb21wb25lbnQsXG4gICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgaWYgKCFvdGhlci5oYXNHVUlDb21wb25lbnQoY29tcG9uZW50Ll9jbGFzc05hbWUpKSB0aGlzLnJlbW92ZUdVSUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgIH1cblxuICAgIGkgPSBvdGhlckdVSUNvbXBvbmVudHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgb3RoZXJHVUlDb21wb25lbnQgPSBvdGhlckdVSUNvbXBvbmVudHNbaV07XG5cbiAgICAgICAgaWYgKChjb21wb25lbnQgPSB0aGlzLmdldEdVSUNvbXBvbmVudChvdGhlckdVSUNvbXBvbmVudC5fdHlwZSkpKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuY29weShvdGhlckdVSUNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZEdVSUNvbXBvbmVudChvdGhlckdVSUNvbXBvbmVudC5jbG9uZSgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGkgPSB0YWdzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB0aGlzLmFkZFRhZyh0YWdzW2ldKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICB0YWdzID0gdGhpcy50YWdzLFxuICAgICAgICBjb21wb25lbnRMZW5ndGggPSBjb21wb25lbnRzLmxlbmd0aCxcbiAgICAgICAgaTtcblxuICAgIGkgPSBjb21wb25lbnRMZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgY29tcG9uZW50c1tpXS5jbGVhcigpO1xuXG4gICAgaSA9IHRhZ3MubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlVGFnKHRhZ3NbaV0pO1xuXG4gICAgaSA9IGNvbXBvbmVudExlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB0aGlzLnJlbW92ZUdVSUNvbXBvbmVudChjb21wb25lbnRzW2ldKTtcblxuICAgIHRoaXMub2ZmKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zY2VuZSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJHVUlPYmplY3QuZGVzdHJveTogY2FuJ3QgZGVzdHJveSBHVUlPYmplY3QgaWYgaXQncyBub3QgYWRkZWQgdG8gYSBTY2VuZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVHVUlPYmplY3QodGhpcyk7XG4gICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKTtcblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuc2NlbmUpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR1VJT2JqZWN0LnJlbW92ZTogY2FuJ3QgcmVtb3ZlIEdVSU9iamVjdCBpZiBpdCdzIG5vdCBhZGRlZCB0byBhIFNjZW5lXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLnNjZW5lLnJlbW92ZUdVSU9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5hZGRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgdmFyIHRhZ3MgPSB0aGlzLnRhZ3M7XG5cbiAgICBpZiAodGFncy5pbmRleE9mKHRhZykgPT09IC0xKSB0YWdzLnB1c2godGFnKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLmFkZFRhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5hZGRUYWcoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5yZW1vdmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgdmFyIHRhZ3MgPSB0aGlzLnRhZ3MsXG4gICAgICAgIGluZGV4ID0gdGFncy5pbmRleE9mKHRhZyk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB0YWdzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5yZW1vdmVUYWdzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlVGFnKGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSU9iamVjdC5wcm90b3R5cGUuaGFzVGFnID0gZnVuY3Rpb24gKHRhZykge1xuXG4gICAgcmV0dXJuIHRoaXMudGFncy5pbmRleE9mKHRhZykgIT09IC0xO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLmFkZEdVSUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIG90aGVycykge1xuICAgIGlmICh0eXBlb2YoY29tcG9uZW50KSA9PT0gXCJzdHJpbmdcIikgY29tcG9uZW50ID0gbmV3IENsYXNzLl9jbGFzc2VzW2NvbXBvbmVudF07XG4gICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgR1VJQ29tcG9uZW50KSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJHVUlPYmplY3QuYWRkR1VJQ29tcG9uZW50OiBjYW4ndCBhZGQgcGFzc2VkIGFyZ3VtZW50LCBpdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgR1VJQ29tcG9uZW50XCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBjb21wb25lbnQuX25hbWUsXG4gICAgICAgIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGNvbXAsIGksIGo7XG5cblxuICAgIGlmICghdGhpc1tuYW1lXSkge1xuICAgICAgICBpZiAoY29tcG9uZW50LmdhbWVPYmplY3QpIGNvbXBvbmVudCA9IGNvbXBvbmVudC5jbG9uZSgpO1xuXG4gICAgICAgIGNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlW2NvbXBvbmVudC5fdHlwZV0gPSBjb21wb25lbnQ7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEhhc2hbY29tcG9uZW50Ll9pZF0gPSBjb21wb25lbnQ7XG4gICAgICAgIGlmIChjb21wb25lbnQuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2NvbXBvbmVudC5fanNvbklkXSA9IGNvbXBvbmVudDtcblxuICAgICAgICBjb21wb25lbnQuZ2FtZU9iamVjdCA9IHRoaXM7XG4gICAgICAgIHRoaXNbbmFtZV0gPSBjb21wb25lbnQ7XG5cbiAgICAgICAgaWYgKCFvdGhlcnMpIHtcbiAgICAgICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBjb21wID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaiA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIGNvbXBbY29tcG9uZW50c1tqXS5fbmFtZV0gPSBjb21wb25lbnRzW2pdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21wb25lbnQuaW5pdCgpO1xuICAgICAgICAgICAgY29tcG9uZW50LmVtaXQoXCJpbml0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiYWRkXCIgKyBjb21wb25lbnQuX3R5cGUsIGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuZW1pdChcImFkZEdVSUNvbXBvbmVudFwiLCBjb21wb25lbnQpO1xuICAgICAgICBjb21wb25lbnQuZW1pdChcImFkZFwiLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5zY2VuZSkgdGhpcy5zY2VuZS5fYWRkR1VJQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiR1VJT2JqZWN0LmFkZEdVSUNvbXBvbmVudDogR1VJT2JqZWN0IGFscmVhZHkgaGFzIGEobikgXCIgKyBjb21wb25lbnQuX3R5cGUgKyBcIiBHVUlDb21wb25lbnRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkdVSU9iamVjdC5wcm90b3R5cGUuYWRkR1VJQ29tcG9uZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgY29tcG9uZW50LCBuYW1lLFxuICAgICAgICBpLCBqO1xuXG4gICAgaSA9IGxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB0aGlzLmFkZEdVSUNvbXBvbmVudChhcmd1bWVudHNbaV0sIHRydWUpO1xuXG4gICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgaWYgKCFjb21wb25lbnQpIGNvbnRpbnVlO1xuXG4gICAgICAgIGogPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAgbmFtZSA9IGNvbXBvbmVudHNbal0uX25hbWU7XG4gICAgICAgICAgICBjb21wb25lbnRbbmFtZV0gPSBjb21wb25lbnRzW2pdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgY29tcG9uZW50LmluaXQoKTtcbiAgICAgICAgY29tcG9uZW50LmVtaXQoXCJpbml0XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLnJlbW92ZUdVSUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGNsZWFyLCBvdGhlcnMpIHtcbiAgICBpZiAodHlwZW9mKGNvbXBvbmVudCkgPT09IFwic3RyaW5nXCIpIGNvbXBvbmVudCA9IHRoaXMuZ2V0R1VJQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgR1VJQ29tcG9uZW50KSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJHVUlPYmplY3QucmVtb3ZlR1VJQ29tcG9uZW50OiBjYW4ndCByZW1vdmUgcGFzc2VkIGFyZ3VtZW50LCBpdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgR1VJQ29tcG9uZW50XCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBjb21wb25lbnQuX25hbWUsXG4gICAgICAgIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGNvbXAsIGksIGo7XG5cbiAgICBpZiAodGhpc1tuYW1lXSkge1xuICAgICAgICBjb21wb25lbnQuZW1pdChcInJlbW92ZVwiLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlXCIgKyBjb21wb25lbnQuX3R5cGUsIGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuZW1pdChcInJlbW92ZUdVSUNvbXBvbmVudFwiLCBjb21wb25lbnQpO1xuXG4gICAgICAgIGlmICghb3RoZXJzKSB7XG4gICAgICAgICAgICBpID0gY29tcG9uZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgY29tcCA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGogPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBjb21wb25lbnRzW2pdLl9uYW1lKSBjb21wW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBvbmVudHMuc3BsaWNlKGNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpLCAxKTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50VHlwZVtjb21wb25lbnQuX3R5cGVdID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRIYXNoW2NvbXBvbmVudC5faWRdID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY29tcG9uZW50Ll9qc29uSWQgIT09IC0xKSB0aGlzLl9jb21wb25lbnRKU09OSGFzaFtjb21wb25lbnQuX2pzb25JZF0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29tcG9uZW50LmdhbWVPYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMuc2NlbmUpIHRoaXMuc2NlbmUuX3JlbW92ZUdVSUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICBpZiAoY2xlYXIpIGNvbXBvbmVudC5jbGVhcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIkdVSU9iamVjdC5yZW1vdmVHVUlDb21wb25lbnQ6IEdVSU9iamVjdCBkb2VzIG5vdCBoYXZlIGEobikgXCIgKyB0eXBlICsgXCIgR1VJQ29tcG9uZW50XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLnJlbW92ZUdVSUNvbXBvbmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIHRvUmVtb3ZlID0gYXJndW1lbnRzLFxuICAgICAgICBjb21wb25lbnQsIG5hbWUsXG4gICAgICAgIGksIGo7XG5cbiAgICBpID0gbGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlR1VJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSwgbnVsbCwgdHJ1ZSk7XG5cbiAgICBpID0gY29tcG9uZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICBpZiAoIWNvbXBvbmVudCkgY29udGludWU7XG5cbiAgICAgICAgbmFtZSA9IGNvbXBvbmVudC5fbmFtZTtcbiAgICAgICAgaiA9IHRvUmVtb3ZlLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IHRvUmVtb3ZlW2ldLl9uYW1lKSBjb21wb25lbnRbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5nZXRHVUlDb21wb25lbnQgPSBmdW5jdGlvbiAodHlwZSkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudFR5cGVbdHlwZV07XG59O1xuXG5cbkdVSU9iamVjdC5wcm90b3R5cGUuaGFzR1VJQ29tcG9uZW50ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuICAgIDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudHNbaV0uX3R5cGUgPT09IHR5cGUpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5ndWlUcmFuc2Zvcm0sXG4gICAgICAgIGNoaWxkcmVuLCBjaGlsZCwgaTtcblxuICAgIGlmICghdHJhbnNmb3JtKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgY2hpbGRyZW4gPSB0cmFuc2Zvcm0uY2hpbGRyZW47XG4gICAgaSA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICBpZiAoY2hpbGQuZ2FtZU9iamVjdC5uYW1lID09PSBuYW1lKSByZXR1cm4gY2hpbGQuZ2FtZU9iamVjdDtcbiAgICAgICAgaWYgKChjaGlsZCA9IGNoaWxkLmZpbmQobmFtZSkpKSByZXR1cm4gY2hpbGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5maW5kR1VJQ29tcG9uZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEhhc2hbaWRdO1xufTtcblxuXG5HVUlPYmplY3QucHJvdG90eXBlLmZpbmRHVUlDb21wb25lbnRCeUpTT05JZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2lkXTtcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDbGFzcy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGpzb25HVUlDb21wb25lbnRzID0ganNvbi5jb21wb25lbnRzIHx8IChqc29uLmNvbXBvbmVudHMgPSBbXSksXG4gICAgICAgIHRhZ3MgPSB0aGlzLnRhZ3MsXG4gICAgICAgIGpzb25UYWdzID0ganNvbi50YWdzIHx8IChqc29uLnRhZ3MgPSBbXSksXG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgaSA9IGNvbXBvbmVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoKGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaV0pLmpzb24pIGpzb25HVUlDb21wb25lbnRzW2ldID0gY29tcG9uZW50LnRvSlNPTihqc29uR1VJQ29tcG9uZW50c1tpXSk7XG4gICAgfVxuICAgIGkgPSB0YWdzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSBqc29uVGFnc1tpXSA9IHRhZ3NbaV07XG5cbiAgICBqc29uLm5hbWUgPSB0aGlzLm5hbWU7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuR1VJT2JqZWN0LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgIGpzb25HVUlDb21wb25lbnRzID0ganNvbi5jb21wb25lbnRzIHx8IChqc29uLmNvbXBvbmVudHMgPSBbXSksXG4gICAgICAgIGNvbXBvbmVudCwganNvbkdVSUNvbXBvbmVudCwgdGFnLFxuICAgICAgICB0YWdzID0gdGhpcy50YWdzLFxuICAgICAgICBqc29uVGFncyA9IGpzb24udGFncyB8fCAoanNvbi50YWdzID0gW10pLFxuICAgICAgICBpID0gY29tcG9uZW50cy5sZW5ndGgsXG4gICAgICAgIGhhcywgdHlwZSwgajtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgdHlwZSA9IGNvbXBvbmVudC5fdHlwZTtcbiAgICAgICAgaGFzID0gZmFsc2U7XG5cbiAgICAgICAgaiA9IGpzb25HVUlDb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAganNvbkdVSUNvbXBvbmVudCA9IGpzb25HVUlDb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IGpzb25HVUlDb21wb25lbnQuX3R5cGUpIGhhcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhhcykgdGhpcy5yZW1vdmVHVUlDb21wb25lbnQoY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICBpID0ganNvbkdVSUNvbXBvbmVudHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKCEoanNvbkdVSUNvbXBvbmVudCA9IGpzb25HVUlDb21wb25lbnRzW2ldKSkgY29udGludWU7XG5cbiAgICAgICAgaWYgKChjb21wb25lbnQgPSB0aGlzLmZpbmRHVUlDb21wb25lbnRCeUpTT05JZChqc29uR1VJQ29tcG9uZW50Ll9pZCkpIHx8IChjb21wb25lbnQgPSB0aGlzLmdldEdVSUNvbXBvbmVudChqc29uR1VJQ29tcG9uZW50Ll90eXBlKSkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5mcm9tSlNPTihqc29uR1VJQ29tcG9uZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkR1VJQ29tcG9uZW50KENsYXNzLmZyb21KU09OKGpzb25HVUlDb21wb25lbnQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGkgPSBqc29uVGFncy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAodGFncy5pbmRleE9mKCh0YWcgPSBqc29uVGFnc1tpXSkpID09PSAtMSkgdGFncy5wdXNoKHRhZyk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0ganNvbi5uYW1lO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gR1VJT2JqZWN0O1xuIiwidmFyIEVudW1zID0gcmVxdWlyZShcIi4uL2VudW1zXCIpO1xudmFyIEF4aXMgPSByZXF1aXJlKFwiLi9heGlzXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBBeGlzVHlwZSA9IEVudW1zLkF4aXNUeXBlO1xuXG5cbmZ1bmN0aW9uIEF4ZXMoKSB7XG5cbiAgICBBcnJheS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5oYXNoID0ge307XG4gICAgdGhpcy5fU1lOQyA9IHt9O1xuXG4gICAgdGhpcy5hZGQoe1xuICAgICAgICBuYW1lOiBcImhvcml6b250YWxcIixcbiAgICAgICAgcG9zQnV0dG9uOiBcInJpZ2h0XCIsXG4gICAgICAgIG5lZ0J1dHRvbjogXCJsZWZ0XCIsXG4gICAgICAgIGFsdFBvc0J1dHRvbjogXCJkXCIsXG4gICAgICAgIGFsdE5lZ0J1dHRvbjogXCJhXCIsXG4gICAgICAgIHR5cGU6IEF4aXNUeXBlLkJ1dHRvblxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGQoe1xuICAgICAgICBuYW1lOiBcInZlcnRpY2FsXCIsXG4gICAgICAgIHBvc0J1dHRvbjogXCJ1cFwiLFxuICAgICAgICBuZWdCdXR0b246IFwiZG93blwiLFxuICAgICAgICBhbHRQb3NCdXR0b246IFwid1wiLFxuICAgICAgICBhbHROZWdCdXR0b246IFwic1wiLFxuICAgICAgICB0eXBlOiBBeGlzVHlwZS5CdXR0b25cbiAgICB9KTtcblxuICAgIHRoaXMuYWRkKHtcbiAgICAgICAgbmFtZTogXCJmaXJlXCIsXG4gICAgICAgIHBvc0J1dHRvbjogXCJjdHJsXCIsXG4gICAgICAgIG5lZ0J1dHRvbjogXCJcIixcbiAgICAgICAgYWx0UG9zQnV0dG9uOiBcIm1vdXNlMFwiLFxuICAgICAgICBhbHROZWdCdXR0b246IFwiXCIsXG4gICAgICAgIHR5cGU6IEF4aXNUeXBlLkJ1dHRvblxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGQoe1xuICAgICAgICBuYW1lOiBcImp1bXBcIixcbiAgICAgICAgcG9zQnV0dG9uOiBcInNwYWNlXCIsXG4gICAgICAgIG5lZ0J1dHRvbjogXCJcIixcbiAgICAgICAgYWx0UG9zQnV0dG9uOiBcIm1vdXNlMlwiLFxuICAgICAgICBhbHROZWdCdXR0b246IFwiXCIsXG4gICAgICAgIHR5cGU6IEF4aXNUeXBlLkJ1dHRvblxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGQoe1xuICAgICAgICBuYW1lOiBcIm1vdXNlWFwiLFxuICAgICAgICB0eXBlOiBBeGlzVHlwZS5Nb3VzZSxcbiAgICAgICAgYXhpczogXCJ4XCJcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkKHtcbiAgICAgICAgbmFtZTogXCJtb3VzZVlcIixcbiAgICAgICAgdHlwZTogQXhpc1R5cGUuTW91c2UsXG4gICAgICAgIGF4aXM6IFwieVwiXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZCh7XG4gICAgICAgIG5hbWU6IFwidG91Y2hYXCIsXG4gICAgICAgIHR5cGU6IEF4aXNUeXBlLlRvdWNoLFxuICAgICAgICBheGlzOiBcInhcIlxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGQoe1xuICAgICAgICBuYW1lOiBcInRvdWNoWVwiLFxuICAgICAgICB0eXBlOiBBeGlzVHlwZS5Ub3VjaCxcbiAgICAgICAgYXhpczogXCJ5XCJcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkKHtcbiAgICAgICAgbmFtZTogXCJtb3VzZVdoZWVsXCIsXG4gICAgICAgIHR5cGU6IEF4aXNUeXBlLk1vdXNlV2hlZWxcbiAgICB9KTtcbn1cblxuQXhlcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEFycmF5LnByb3RvdHlwZSk7XG5BeGVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEF4ZXM7XG5cblxuQXhlcy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5hbWUsIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mKG5hbWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG9wdHMgPSBuYW1lO1xuICAgICAgICBuYW1lID0gb3B0cy5uYW1lO1xuICAgIH1cbiAgICBpZiAodGhpcy5oYXNoW25hbWVdKSB7XG4gICAgICAgIExvZy5lcnJvcihcIkF4ZXMuYWRkOiBBeGVzIGFscmVhZHkgaGF2ZSBBeGlzIG5hbWVkIFwiICsgbmFtZSArIFwiIHVzZSBBeGVzLmdldChcXFwiXCIgKyBuYW1lICsgXCJcXFwiKSBhbmQgZWRpdCBpdCBpbnN0ZWFkXCIpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuICAgIG9wdHMubmFtZSA9IG5hbWU7XG4gICAgdmFyIGF4aXMgPSBuZXcgQXhpcyhvcHRzKTtcblxuICAgIHRoaXMucHVzaChheGlzKTtcbiAgICB0aGlzLmhhc2hbbmFtZV0gPSBheGlzO1xuXG4gICAgcmV0dXJuIGF4aXM7XG59O1xuXG5cbkF4ZXMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cbiAgICByZXR1cm4gdGhpcy5oYXNoW25hbWVdO1xufTtcblxuXG5BeGVzLnByb3RvdHlwZS50b1NZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB0aGlzLl9TWU5DKTtcbiAgICB2YXIganNvbkF4ZXMgPSBqc29uLmF4ZXMgfHwgKGpzb24uYXhlcyA9IFtdKSxcbiAgICAgICAgaTtcblxuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoOyBpLS07KSBqc29uQXhlc1tpXSA9IHRoaXNbaV0udG9TWU5DKGpzb25BeGVzW2ldKTtcbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuQXhlcy5wcm90b3R5cGUuZnJvbVNZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciBheGlzSGFzaCA9IHRoaXMuaGFzaCxcbiAgICAgICAganNvbkF4ZXMgPSBqc29uLmF4ZXMgfHwgKGpzb24uYXhlcyA9IFtdKSxcbiAgICAgICAgYXhpcywganNvbkF4aXMsXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSBqc29uQXhlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAganNvbkF4aXMgPSBqc29uQXhlc1tpXTtcblxuICAgICAgICBpZiAoKGF4aXMgPSBheGlzSGFzaFtqc29uQXhpcy5uYW1lXSkpIHtcbiAgICAgICAgICAgIGF4aXMuZnJvbVNZTkMoanNvbkF4aXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQoanNvbkF4aXMubmFtZSkuZnJvbUpTT04oanNvbkF4aXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkF4ZXMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHt9KTtcbiAgICB2YXIganNvbkF4ZXMgPSBqc29uLmF4ZXMgfHwgKGpzb24uYXhlcyA9IFtdKSxcbiAgICAgICAgaTtcblxuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoOyBpLS07KSBqc29uQXhlc1tpXSA9IHRoaXNbaV0udG9KU09OKGpzb25BeGVzW2ldKTtcbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuQXhlcy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciBheGlzSGFzaCA9IHRoaXMuaGFzaCxcbiAgICAgICAganNvbkF4ZXMgPSBqc29uLmF4ZXMgfHwgKGpzb24uYXhlcyA9IFtdKSxcbiAgICAgICAgYXhpcywganNvbkF4aXMsXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSBqc29uQXhlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAganNvbkF4aXMgPSBqc29uQXhlc1tpXTtcblxuICAgICAgICBpZiAoKGF4aXMgPSBheGlzSGFzaFtqc29uQXhpcy5uYW1lXSkpIHtcbiAgICAgICAgICAgIGF4aXMuZnJvbUpTT04oanNvbkF4aXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQoanNvbkF4aXMubmFtZSkuZnJvbUpTT04oanNvbkF4aXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQXhlcztcbiIsInZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi9lbnVtc1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBBeGlzVHlwZSA9IEVudW1zLkF4aXNUeXBlO1xuXG5cbmZ1bmN0aW9uIEF4aXMob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICB0aGlzLm5hbWUgPSBvcHRzLm5hbWUgIT0gdW5kZWZpbmVkID8gb3B0cy5uYW1lIDogXCJ1bmtub3duXCI7XG5cbiAgICB0aGlzLm5lZ0J1dHRvbiA9IG9wdHMubmVnQnV0dG9uICE9IHVuZGVmaW5lZCA/IG9wdHMubmVnQnV0dG9uIDogXCJcIjtcbiAgICB0aGlzLnBvc0J1dHRvbiA9IG9wdHMucG9zQnV0dG9uICE9IHVuZGVmaW5lZCA/IG9wdHMucG9zQnV0dG9uIDogXCJcIjtcblxuICAgIHRoaXMuYWx0TmVnQnV0dG9uID0gb3B0cy5hbHROZWdCdXR0b24gIT0gdW5kZWZpbmVkID8gb3B0cy5hbHROZWdCdXR0b24gOiBcIlwiO1xuICAgIHRoaXMuYWx0UG9zQnV0dG9uID0gb3B0cy5hbHRQb3NCdXR0b24gIT0gdW5kZWZpbmVkID8gb3B0cy5hbHRQb3NCdXR0b24gOiBcIlwiO1xuXG4gICAgdGhpcy5ncmF2aXR5ID0gb3B0cy5ncmF2aXR5ICE9IHVuZGVmaW5lZCA/IG9wdHMuZ3Jhdml0eSA6IDM7XG4gICAgdGhpcy5zZW5zaXRpdml0eSA9IG9wdHMuc2Vuc2l0aXZpdHkgIT0gdW5kZWZpbmVkID8gb3B0cy5zZW5zaXRpdml0eSA6IDM7XG5cbiAgICB0aGlzLmRlYWQgPSBvcHRzLmRlYWQgIT0gdW5kZWZpbmVkID8gb3B0cy5kZWFkIDogMC4wMDE7XG5cbiAgICB0aGlzLnR5cGUgPSBvcHRzLnR5cGUgIT0gdW5kZWZpbmVkID8gb3B0cy50eXBlIDogQXhpc1R5cGUuQlVUVE9OO1xuICAgIHRoaXMuYXhpcyA9IG9wdHMuYXhpcyAhPSB1bmRlZmluZWQgPyBvcHRzLmF4aXMgOiBcInhcIjtcbiAgICB0aGlzLmluZGV4ID0gb3B0cy5pbmRleCAhPSB1bmRlZmluZWQgPyBvcHRzLmluZGV4IDogMDtcblxuICAgIHRoaXMuam95TnVtID0gb3B0cy5qb3lOdW0gIT0gdW5kZWZpbmVkID8gb3B0cy5qb3lOdW0gOiAwO1xuXG4gICAgdGhpcy52YWx1ZSA9IDA7XG5cbiAgICB0aGlzLl9TWU5DID0ge307XG59O1xuXG5cbkF4aXMucHJvdG90eXBlLnRvU1lOQyA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHRoaXMuX1NZTkMpO1xuXG4gICAganNvbi5uYW1lID0gdGhpcy5uYW1lO1xuICAgIGpzb24udmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkF4aXMucHJvdG90eXBlLmZyb21TWU5DID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMubmFtZSA9IGpzb24ubmFtZTtcbiAgICB0aGlzLnZhbHVlID0ganNvbi52YWx1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5BeGlzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLm5hbWUgPSB0aGlzLm5hbWU7XG5cbiAgICBqc29uLm5lZ0J1dHRvbiA9IHRoaXMubmVnQnV0dG9uO1xuICAgIGpzb24ucG9zQnV0dG9uID0gdGhpcy5wb3NCdXR0b247XG5cbiAgICBqc29uLmFsdE5lZ0J1dHRvbiA9IHRoaXMuYWx0TmVnQnV0dG9uO1xuICAgIGpzb24uYWx0UG9zQnV0dG9uID0gdGhpcy5hbHRQb3NCdXR0b247XG5cbiAgICBqc29uLmdyYXZpdHkgPSB0aGlzLmdyYXZpdHk7XG4gICAganNvbi5zZW5zaXRpdml0eSA9IHRoaXMuc2Vuc2l0aXZpdHk7XG5cbiAgICBqc29uLmRlYWQgPSB0aGlzLmRlYWQ7XG5cbiAgICBqc29uLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAganNvbi5heGlzID0gdGhpcy5heGlzO1xuICAgIGpzb24uaW5kZXggPSB0aGlzLmluZGV4O1xuXG4gICAganNvbi5qb3lOdW0gPSB0aGlzLmpveU51bTtcblxuICAgIGpzb24udmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkF4aXMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMubmFtZSA9IGpzb24ubmFtZTtcblxuICAgIHRoaXMubmVnQnV0dG9uID0ganNvbi5uZWdCdXR0b247XG4gICAgdGhpcy5wb3NCdXR0b24gPSBqc29uLnBvc0J1dHRvbjtcblxuICAgIHRoaXMuYWx0TmVnQnV0dG9uID0ganNvbi5hbHROZWdCdXR0b247XG4gICAgdGhpcy5hbHRQb3NCdXR0b24gPSBqc29uLmFsdFBvc0J1dHRvbjtcblxuICAgIHRoaXMuZ3Jhdml0eSA9IGpzb24uZ3Jhdml0eTtcbiAgICB0aGlzLnNlbnNpdGl2aXR5ID0ganNvbi5zZW5zaXRpdml0eTtcblxuICAgIHRoaXMuZGVhZCA9IGpzb24uZGVhZDtcblxuICAgIHRoaXMudHlwZSA9IGpzb24udHlwZTtcbiAgICB0aGlzLmF4aXMgPSBqc29uLmF4aXM7XG4gICAgdGhpcy5pbmRleCA9IGpzb24uaW5kZXg7XG5cbiAgICB0aGlzLmpveU51bSA9IGpzb24uam95TnVtO1xuXG4gICAgdGhpcy52YWx1ZSA9IGpzb24udmFsdWU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBeGlzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gQnV0dG9uKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgdGhpcy50aW1lRG93biA9IC0xO1xuICAgIHRoaXMudGltZVVwID0gLTE7XG5cbiAgICB0aGlzLmZyYW1lRG93biA9IC0xO1xuICAgIHRoaXMuZnJhbWVVcCA9IC0xO1xuXG4gICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMuX2ZpcnN0ID0gdHJ1ZTtcblxuICAgIHRoaXMuX1NZTkMgPSB7fTtcbn07XG5cblxuQnV0dG9uLnByb3RvdHlwZS50b1NZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB0aGlzLl9TWU5DKTtcblxuICAgIGpzb24ubmFtZSA9IHRoaXMubmFtZTtcbiAgICBqc29uLnRpbWVEb3duID0gdGhpcy50aW1lRG93bjtcbiAgICBqc29uLnRpbWVVcCA9IHRoaXMudGltZVVwO1xuICAgIGpzb24uZnJhbWVEb3duID0gdGhpcy5mcmFtZURvd247XG4gICAganNvbi5mcmFtZVVwID0gdGhpcy5mcmFtZVVwO1xuICAgIGpzb24udmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbkJ1dHRvbi5wcm90b3R5cGUuZnJvbVNZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuXG4gICAgdGhpcy5uYW1lID0ganNvbi5uYW1lO1xuICAgIHRoaXMudGltZURvd24gPSBqc29uLnRpbWVEb3duO1xuICAgIHRoaXMudGltZVVwID0ganNvbi50aW1lVXA7XG4gICAgdGhpcy5mcmFtZURvd24gPSBqc29uLmZyYW1lRG93bjtcbiAgICB0aGlzLmZyYW1lVXAgPSBqc29uLmZyYW1lVXA7XG4gICAgdGhpcy52YWx1ZSA9IGpzb24udmFsdWU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuQnV0dG9uLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAganNvbi50aW1lRG93biA9IHRoaXMudGltZURvd247XG4gICAganNvbi50aW1lVXAgPSB0aGlzLnRpbWVVcDtcbiAgICBqc29uLmZyYW1lRG93biA9IHRoaXMuZnJhbWVEb3duO1xuICAgIGpzb24uZnJhbWVVcCA9IHRoaXMuZnJhbWVVcDtcbiAgICBqc29uLnZhbHVlID0gdGhpcy52YWx1ZTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5CdXR0b24ucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMubmFtZSA9IGpzb24ubmFtZTtcbiAgICB0aGlzLnRpbWVEb3duID0ganNvbi50aW1lRG93bjtcbiAgICB0aGlzLnRpbWVVcCA9IGpzb24udGltZVVwO1xuICAgIHRoaXMuZnJhbWVEb3duID0ganNvbi5mcmFtZURvd247XG4gICAgdGhpcy5mcmFtZVVwID0ganNvbi5mcmFtZVVwO1xuICAgIHRoaXMudmFsdWUgPSBqc29uLnZhbHVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uO1xuIiwidmFyIFRpbWUgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS90aW1lXCIpO1xudmFyIEJ1dHRvbiA9IHJlcXVpcmUoXCIuL2J1dHRvblwiKTtcbnZhciBMb2cgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9sb2dcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBCdXR0b25zKCkge1xuXG4gICAgQXJyYXkuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuaGFzaCA9IHt9O1xuICAgIHRoaXMuX1NZTkMgPSB7fTtcblxuICAgIHRoaXMuYWRkKFwibW91c2UwXCIpO1xuICAgIHRoaXMuYWRkKFwibW91c2UxXCIpO1xuICAgIHRoaXMuYWRkKFwibW91c2UyXCIpO1xufVxuXG5CdXR0b25zLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQXJyYXkucHJvdG90eXBlKTtcbkJ1dHRvbnMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnV0dG9ucztcblxuXG5CdXR0b25zLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICh0aGlzLmhhc2hbbmFtZV0pIHtcbiAgICAgICAgTG9nLmVycm9yKFwiQnV0dG9ucy5hZGQ6IEJ1dHRvbnMgYWxyZWFkeSBoYXZlIEJ1dHRvbiBuYW1lIFwiICsgbmFtZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciBidXR0b24gPSBuZXcgQnV0dG9uKG5hbWUpO1xuXG4gICAgdGhpcy5wdXNoKGJ1dHRvbik7XG4gICAgdGhpcy5oYXNoW25hbWVdID0gYnV0dG9uO1xuXG4gICAgcmV0dXJuIGJ1dHRvbjtcbn07XG5cblxuQnV0dG9ucy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcblxuICAgIHJldHVybiB0aGlzLmhhc2hbbmFtZV07XG59O1xuXG5cbkJ1dHRvbnMucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgYnV0dG9uID0gdGhpcy5oYXNoW25hbWVdIHx8IHRoaXMuYWRkKG5hbWUpO1xuXG4gICAgaWYgKGJ1dHRvbi5fZmlyc3QpIHtcbiAgICAgICAgYnV0dG9uLmZyYW1lRG93biA9IFRpbWUuZnJhbWVDb3VudCArIDE7XG4gICAgICAgIGJ1dHRvbi50aW1lRG93biA9IFRpbWUuc3RhbXAoKTtcbiAgICAgICAgYnV0dG9uLl9maXJzdCA9IGZhbHNlO1xuICAgIH1cbiAgICBidXR0b24udmFsdWUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGJ1dHRvbjtcbn07XG5cblxuQnV0dG9ucy5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgYnV0dG9uID0gdGhpcy5oYXNoW25hbWVdIHx8IHRoaXMuYWRkKG5hbWUpO1xuXG4gICAgYnV0dG9uLmZyYW1lVXAgPSBUaW1lLmZyYW1lQ291bnQgKyAxO1xuICAgIGJ1dHRvbi50aW1lVXAgPSBUaW1lLnN0YW1wKCk7XG4gICAgYnV0dG9uLnZhbHVlID0gZmFsc2U7XG4gICAgYnV0dG9uLl9maXJzdCA9IHRydWU7XG5cbiAgICByZXR1cm4gYnV0dG9uO1xufTtcblxuXG5CdXR0b25zLnByb3RvdHlwZS50b1NZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB0aGlzLl9TWU5DKTtcbiAgICB2YXIganNvbkJ1dHRvbnMgPSBqc29uLmJ1dHRvbnMgfHwgKGpzb24uYnV0dG9ucyA9IFtdKSxcbiAgICAgICAgaTtcblxuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoOyBpLS07KSBqc29uQnV0dG9uc1tpXSA9IHRoaXNbaV0udG9TWU5DKGpzb25CdXR0b25zW2ldKTtcbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuQnV0dG9ucy5wcm90b3R5cGUuZnJvbVNZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciBidXR0b25IYXNoID0gdGhpcy5oYXNoLFxuICAgICAgICBqc29uQnV0dG9ucyA9IGpzb24uYnV0dG9ucyB8fCAoanNvbi5idXR0b25zID0gW10pLFxuICAgICAgICBidXR0b24sIGpzb25CdXR0b24sXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSBqc29uQnV0dG9ucy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAganNvbkJ1dHRvbiA9IGpzb25CdXR0b25zW2ldO1xuXG4gICAgICAgIGlmICgoYnV0dG9uID0gYnV0dG9uSGFzaFtqc29uQnV0dG9uLm5hbWVdKSkge1xuICAgICAgICAgICAgYnV0dG9uLmZyb21TWU5DKGpzb25CdXR0b24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQoanNvbkJ1dHRvbi5uYW1lKS5mcm9tSlNPTihqc29uQnV0dG9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5CdXR0b25zLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG4gICAgdmFyIGpzb25CdXR0b25zID0ganNvbi5idXR0b25zIHx8IChqc29uLmJ1dHRvbnMgPSBbXSksXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aDsgaS0tOykganNvbkJ1dHRvbnNbaV0gPSB0aGlzW2ldLnRvSlNPTihqc29uQnV0dG9uc1trZXldKTtcbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuQnV0dG9ucy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciBidXR0b25IYXNoID0gdGhpcy5oYXNoLFxuICAgICAgICBqc29uQnV0dG9ucyA9IGpzb24uYnV0dG9ucyB8fCAoanNvbi5idXR0b25zID0gW10pLFxuICAgICAgICBidXR0b24sIGpzb25CdXR0b24sXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSBqc29uQnV0dG9ucy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAganNvbkJ1dHRvbiA9IGpzb25CdXR0b25zW2ldO1xuXG4gICAgICAgIGlmICgoYnV0dG9uID0gYnV0dG9uSGFzaFtqc29uQnV0dG9uLm5hbWVdKSkge1xuICAgICAgICAgICAgYnV0dG9uLmZyb21KU09OKGpzb25CdXR0b24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQoanNvbkJ1dHRvbi5uYW1lKS5mcm9tSlNPTihqc29uQnV0dG9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvbnM7XG4iLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvZXZlbnRfZW1pdHRlclwiKTtcbnZhciBEb20gPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9kb21cIik7XG52YXIgT2JqZWN0UG9vbCA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL29iamVjdF9wb29sXCIpO1xudmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIElucHV0ID0gcmVxdWlyZShcIi4vaW5wdXRcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgbWluID0gTWF0aC5taW4sXG4gICAgbWF4ID0gTWF0aC5tYXgsXG5cbiAgICBhZGRFdmVudCA9IERvbS5hZGRFdmVudCxcbiAgICByZW1vdmVFdmVudCA9IERvbS5yZW1vdmVFdmVudDtcblxuXG5mdW5jdGlvbiBIYW5kbGVyKCkge1xuXG4gICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSB1bmRlZmluZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5leHRlbmQoSGFuZGxlcik7XG5cblxuSGFuZGxlci5wcm90b3R5cGUuc2V0RWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudCkgdGhpcy5yZW1vdmVFbGVtZW50KCk7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgYWRkRXZlbnQoZWxlbWVudCwgXCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdXQgbW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbFwiLCBoYW5kbGVNb3VzZSwgSW5wdXQpO1xuICAgIGFkZEV2ZW50KHRvcCwgXCJrZXlkb3duIGtleXVwXCIsIGhhbmRsZUtleXMsIElucHV0KTtcblxuICAgIGFkZEV2ZW50KGVsZW1lbnQsIFwidG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWxcIiwgaGFuZGxlVG91Y2hlcywgSW5wdXQpO1xuICAgIGFkZEV2ZW50KHdpbmRvdywgXCJkZXZpY2Vtb3Rpb25cIiwgaGFuZGxlRGV2aWNlbW90aW9uLCBJbnB1dCk7XG59O1xuXG5cbkhhbmRsZXIucHJvdG90eXBlLnJlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnQpIHJldHVybjtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblxuICAgIHJlbW92ZUV2ZW50KGVsZW1lbnQsIFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3V0IG1vdXNld2hlZWwgRE9NTW91c2VTY3JvbGxcIiwgaGFuZGxlTW91c2UsIElucHV0KTtcbiAgICByZW1vdmVFdmVudCh0b3AsIFwia2V5ZG93biBrZXl1cFwiLCBoYW5kbGVLZXlzLCBJbnB1dCk7XG5cbiAgICByZW1vdmVFdmVudChlbGVtZW50LCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXCIsIGhhbmRsZVRvdWNoZXMsIElucHV0KTtcbiAgICByZW1vdmVFdmVudCh3aW5kb3csIFwiZGV2aWNlbW90aW9uXCIsIGhhbmRsZURldmljZW1vdGlvbiwgSW5wdXQpO1xuXG4gICAgdGhpcy5lbGVtZW50ID0gdW5kZWZpbmVkO1xufTtcblxuXG5mdW5jdGlvbiBoYW5kbGVEZXZpY2Vtb3Rpb24oZSkge1xuICAgIHZhciBhY2MgPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHksXG4gICAgICAgIGFjY2VsZXJhdGlvbjtcblxuICAgIGlmIChhY2MgJiYgKGFjYy54IHx8IGFjYy55IHx8IGFjYy56KSkge1xuICAgICAgICBhY2NlbGVyYXRpb24gPSB0aGlzLmFjY2VsZXJhdGlvbjtcblxuICAgICAgICBhY2NlbGVyYXRpb24ueCA9IGFjYy54O1xuICAgICAgICBhY2NlbGVyYXRpb24ueSA9IGFjYy55O1xuICAgICAgICBhY2NlbGVyYXRpb24ueiA9IGFjYy56O1xuXG4gICAgICAgIHRoaXMuZW1pdChcImFjY2VsZXJhdGlvblwiKTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gaGFuZGxlVG91Y2hlcyhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciB0eXBlID0gZS50eXBlLFxuICAgICAgICB0b3VjaGVzID0gdGhpcy50b3VjaGVzLFxuICAgICAgICB0YXJnZXRUb3VjaGVzID0gZS50YXJnZXRUb3VjaGVzLFxuICAgICAgICBjaGFuZ2VkVG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGksIGlsO1xuXG4gICAgaWYgKHR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWwgPSB0YXJnZXRUb3VjaGVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHRoaXMuZW1pdChcInRvdWNoc3RhcnRcIiwgdG91Y2hlcy5zdGFydChpLCB0YXJnZXRUb3VjaGVzW2ldKSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwidG91Y2hlbmRcIikge1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlsID0gY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykgdGhpcy5lbWl0KFwidG91Y2hlbmRcIiwgdG91Y2hlcy5lbmQoaSkpO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcInRvdWNoY2FuY2VsXCIpIHtcblxuICAgICAgICB0b3VjaGVzLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLmVtaXQoXCJ0b3VjaGNhbmNlbFwiKTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ0b3VjaG1vdmVcIikge1xuXG4gICAgICAgIGlmICh0aGlzLnRvdWNoZXNNb3ZlTmVlZHNVcGRhdGUpIHtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgaWwgPSBjaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB0aGlzLmVtaXQoXCJ0b3VjaG1vdmVcIiwgdG91Y2hlcy5tb3ZlKGksIGNoYW5nZWRUb3VjaGVzW2ldKSk7XG4gICAgICAgICAgICB0aGlzLnRvdWNoZXNNb3ZlTmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG52YXIgbW91c2VGaXJzdCA9IGZhbHNlLFxuICAgIG1vdXNlTGFzdCA9IG5ldyBWZWMyLFxuICAgIG1vdXNlV2hlZWwgPSAwO1xuXG5mdW5jdGlvbiBoYW5kbGVNb3VzZShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciB0eXBlID0gZS50eXBlLFxuICAgICAgICBidXR0b247XG5cbiAgICBpZiAodHlwZSA9PT0gXCJtb3VzZWRvd25cIikge1xuICAgICAgICBidXR0b24gPSBNT1VTRV9CVVRUT05TW2UuYnV0dG9uXTtcblxuICAgICAgICB0aGlzLmJ1dHRvbnMub24oYnV0dG9uKTtcbiAgICAgICAgdXBkYXRlTW91c2VQb3NpdGlvbih0aGlzLCBlKTtcbiAgICAgICAgdGhpcy5lbWl0KFwibW91c2Vkb3duXCIsIGJ1dHRvbik7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibW91c2V1cFwiKSB7XG4gICAgICAgIGJ1dHRvbiA9IE1PVVNFX0JVVFRPTlNbZS5idXR0b25dO1xuXG4gICAgICAgIHRoaXMuYnV0dG9ucy5vZmYoYnV0dG9uKTtcbiAgICAgICAgdXBkYXRlTW91c2VQb3NpdGlvbih0aGlzLCBlKTtcbiAgICAgICAgdGhpcy5lbWl0KFwibW91c2V1cFwiLCBidXR0b24pO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcIm1vdXNlb3V0XCIpIHtcbiAgICAgICAgYnV0dG9uID0gTU9VU0VfQlVUVE9OU1tlLmJ1dHRvbl07XG5cbiAgICAgICAgdGhpcy5idXR0b25zLm9mZihidXR0b24pO1xuICAgICAgICB1cGRhdGVNb3VzZVBvc2l0aW9uKHRoaXMsIGUpO1xuICAgICAgICB0aGlzLmVtaXQoXCJtb3VzZW91dFwiLCBidXR0b24pO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcIm1vdXNld2hlZWxcIiB8fCB0eXBlID09PSBcIkRPTU1vdXNlU2Nyb2xsXCIpIHtcblxuICAgICAgICBtb3VzZVdoZWVsID0gbWF4KC0xLCBtaW4oMSwgKGUud2hlZWxEZWx0YSB8fCAtZS5kZXRhaWwpKSk7XG4gICAgICAgIHRoaXMubW91c2VXaGVlbCA9IG1vdXNlV2hlZWw7XG4gICAgICAgIHRoaXMuZW1pdChcIm1vdXNld2hlZWxcIiwgbW91c2VXaGVlbCk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibW91c2Vtb3ZlXCIpIHtcblxuICAgICAgICBpZiAodGhpcy5tb3VzZU1vdmVOZWVkc1VwZGF0ZSkge1xuXG4gICAgICAgICAgICB1cGRhdGVNb3VzZVBvc2l0aW9uKHRoaXMsIGUpO1xuICAgICAgICAgICAgdGhpcy5tb3VzZU1vdmVOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwibW91c2Vtb3ZlXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdXNlUG9zaXRpb24oaW5wdXQsIGUpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBpbnB1dC5tb3VzZVBvc2l0aW9uLFxuICAgICAgICBkZWx0YSA9IGlucHV0Lm1vdXNlRGVsdGEsXG4gICAgICAgIGVsZW1lbnQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXG4gICAgICAgIG9mZnNldFggPSBlbGVtZW50Lm9mZnNldExlZnQgfHwgMCxcbiAgICAgICAgb2Zmc2V0WSA9IGVsZW1lbnQub2Zmc2V0VG9wIHx8IDAsXG4gICAgICAgIHggPSAoZS5wYWdlWCB8fCBlLmNsaWVudFgpIC0gb2Zmc2V0WCxcbiAgICAgICAgeSA9IChlLnBhZ2VZIHx8IGUuY2xpZW50WSkgLSBvZmZzZXRZO1xuXG4gICAgbW91c2VMYXN0LnggPSBtb3VzZUZpcnN0ID8gcG9zaXRpb24ueCA6IHg7XG4gICAgbW91c2VMYXN0LnkgPSBtb3VzZUZpcnN0ID8gcG9zaXRpb24ueSA6IHk7XG5cbiAgICBwb3NpdGlvbi54ID0geDtcbiAgICBwb3NpdGlvbi55ID0geTtcblxuICAgIGRlbHRhLnggPSBwb3NpdGlvbi54IC0gbW91c2VMYXN0Lng7XG4gICAgZGVsdGEueSA9IHBvc2l0aW9uLnkgLSBtb3VzZUxhc3QueTtcblxuICAgIG1vdXNlRmlyc3QgPSB0cnVlO1xufVxuXG5cbmZ1bmN0aW9uIGhhbmRsZUtleXMoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgdHlwZSA9IGUudHlwZSxcbiAgICAgICAga2V5ID0gS0VZX0NPREVTW2Uua2V5Q29kZV07XG5cbiAgICBpZiAodHlwZSA9PT0gXCJrZXlkb3duXCIpIHtcbiAgICAgICAgdGhpcy5idXR0b25zLm9uKGtleSk7XG4gICAgICAgIHRoaXMuZW1pdChcImtleWRvd25cIiwga2V5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwia2V5dXBcIikge1xuICAgICAgICB0aGlzLmJ1dHRvbnMub2ZmKGtleSk7XG4gICAgICAgIHRoaXMuZW1pdChcImtleXVwXCIsIGtleSk7XG4gICAgfVxufVxuXG52YXIgTU9VU0VfQlVUVE9OUyA9IHtcbiAgICBcIjBcIjogXCJtb3VzZTBcIixcbiAgICBcIjFcIjogXCJtb3VzZTFcIixcbiAgICBcIjJcIjogXCJtb3VzZTJcIlxufVxuXG52YXIgS0VZX0NPREVTID0ge1xuICAgIDg6IFwiYmFja3NwYWNlXCIsXG4gICAgOTogXCJ0YWJcIixcbiAgICAxMzogXCJlbnRlclwiLFxuICAgIDE2OiBcInNoaWZ0XCIsXG4gICAgMTc6IFwiY3RybFwiLFxuICAgIDE4OiBcImFsdFwiLFxuICAgIDE5OiBcInBhdXNlXCIsXG4gICAgMjA6IFwiY2Fwc2xvY2tcIixcbiAgICAyNzogXCJlc2NhcGVcIixcbiAgICAzMjogXCJzcGFjZVwiLFxuICAgIDMzOiBcInBhZ2V1cFwiLFxuICAgIDM0OiBcInBhZ2Vkb3duXCIsXG4gICAgMzU6IFwiZW5kXCIsXG4gICAgMzc6IFwibGVmdFwiLFxuICAgIDM4OiBcInVwXCIsXG4gICAgMzk6IFwicmlnaHRcIixcbiAgICA0MDogXCJkb3duXCIsXG4gICAgNDU6IFwiaW5zZXJ0XCIsXG4gICAgNDY6IFwiZGVsZXRlXCIsXG4gICAgMTEyOiBcImYxXCIsXG4gICAgMTEzOiBcImYyXCIsXG4gICAgMTE0OiBcImYzXCIsXG4gICAgMTE1OiBcImY0XCIsXG4gICAgMTE2OiBcImY1XCIsXG4gICAgMTE3OiBcImY2XCIsXG4gICAgMTE4OiBcImY3XCIsXG4gICAgMTE5OiBcImY4XCIsXG4gICAgMTIwOiBcImY5XCIsXG4gICAgMTIxOiBcImYxMFwiLFxuICAgIDEyMjogXCJmMTFcIixcbiAgICAxMjM6IFwiZjEyXCIsXG4gICAgMTQ0OiBcIm51bWxvY2tcIixcbiAgICAxNDU6IFwic2Nyb2xsbG9ja1wiLFxuICAgIDE4NjogXCJzZW1pY29sb25cIixcbiAgICAxODc6IFwiZXF1YWxcIixcbiAgICAxODg6IFwiY29tbWFcIixcbiAgICAxODk6IFwiZGFzaFwiLFxuICAgIDE5MDogXCJwZXJpb2RcIixcbiAgICAxOTE6IFwic2xhc2hcIixcbiAgICAxOTI6IFwiZ3JhdmVhY2NlbnRcIixcbiAgICAyMTk6IFwib3BlbmJyYWNrZXRcIixcbiAgICAyMjA6IFwiYmFja3NsYXNoXCIsXG4gICAgMjIxOiBcImNsb3NlYnJha2V0XCIsXG4gICAgMjIyOiBcInNpbmdsZXF1b3RlXCJcbn07XG5cbmZvciAodmFyIGkgPSA0ODsgaSA8PSA5MDsgaSsrKSBLRVlfQ09ERVNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLnRvTG93ZXJDYXNlKCk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgSGFuZGxlcjtcbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9ldmVudF9lbWl0dGVyXCIpO1xudmFyIE9iamVjdFBvb2wgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9vYmplY3RfcG9vbFwiKTtcbnZhciBUaW1lID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdGltZVwiKTtcbnZhciBNYXRoZiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdGhmXCIpO1xudmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIFZlYzMgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMzXCIpO1xudmFyIEVudW1zID0gcmVxdWlyZShcIi4uL2VudW1zXCIpO1xudmFyIEJ1dHRvbnMgPSByZXF1aXJlKFwiLi9idXR0b25zXCIpO1xudmFyIEJ1dHRvbiA9IHJlcXVpcmUoXCIuL2J1dHRvblwiKTtcbnZhciBBeGVzID0gcmVxdWlyZShcIi4vYXhlc1wiKTtcbnZhciBBeGlzID0gcmVxdWlyZShcIi4vYXhpc1wiKTtcbnZhciBUb3VjaGVzID0gcmVxdWlyZShcIi4vdG91Y2hlc1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBhYnMgPSBNYXRoLmFicyxcbiAgICBzaWduID0gTWF0aGYuc2lnbixcbiAgICBjbGFtcCA9IE1hdGhmLmNsYW1wLFxuXG4gICAgQXhpc1R5cGUgPSBFbnVtcy5BeGlzVHlwZSxcbiAgICBNT1VTRV9CVVRUT05TID0ge1xuICAgICAgICBcIjBcIjogXCJtb3VzZTBcIixcbiAgICAgICAgXCIxXCI6IFwibW91c2UxXCIsXG4gICAgICAgIFwiMlwiOiBcIm1vdXNlMlwiXG4gICAgfTtcblxuXG5mdW5jdGlvbiBJbnB1dCgpIHtcblxuICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5heGVzID0gbmV3IEF4ZXM7XG4gICAgdGhpcy5idXR0b25zID0gbmV3IEJ1dHRvbnM7XG5cbiAgICB0aGlzLm1vdXNlV2hlZWwgPSAwO1xuICAgIHRoaXMubW91c2VQb3NpdGlvbiA9IG5ldyBWZWMyO1xuICAgIHRoaXMubW91c2VEZWx0YSA9IG5ldyBWZWMyO1xuICAgIHRoaXMubW91c2VNb3ZlTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgIHRoaXMudG91Y2hlcyA9IG5ldyBUb3VjaGVzO1xuICAgIHRoaXMudG91Y2hlc01vdmVOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gbmV3IFZlYzM7XG5cbiAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuICAgIHRoaXMuX2ZyYW1lQ291bnQgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnRpbWUgPSAwO1xuICAgIHRoaXMuX3RpbWUgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl9TWU5DID0ge307XG59XG5cbkV2ZW50RW1pdHRlci5leHRlbmQoSW5wdXQpO1xuXG5cbklucHV0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGF4ZXMgPSB0aGlzLmF4ZXMsXG4gICAgICAgIGJ1dHRvbnMgPSB0aGlzLmJ1dHRvbnMuaGFzaCxcbiAgICAgICAgYnV0dG9uLCBhbHRCdXR0b24sXG4gICAgICAgIGF4aXMsIHZhbHVlLCB0eXBlLCB0b3VjaCwgc2Vuc2l0aXZpdHksIHBvcywgbmVnLCB0bXAsIGR0ID0gVGltZS5kZWx0YSxcbiAgICAgICAgaTtcblxuICAgIHRoaXMuZnJhbWVDb3VudCA9IHRoaXMuX2ZyYW1lQ291bnQgPyB0aGlzLl9mcmFtZUNvdW50IDogVGltZS5mcmFtZUNvdW50O1xuICAgIHRoaXMudGltZSA9IHRoaXMuX3RpbWUgPyB0aGlzLl90aW1lIDogVGltZS5zdGFtcCgpO1xuXG4gICAgdGhpcy5tb3VzZU1vdmVOZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy50b3VjaGVzTW92ZU5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIGZvciAoaSA9IGF4ZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGF4aXMgPSBheGVzW2ldO1xuICAgICAgICB2YWx1ZSA9IGF4aXMudmFsdWU7XG4gICAgICAgIHR5cGUgPSBheGlzLnR5cGU7XG4gICAgICAgIHNlbnNpdGl2aXR5ID0gYXhpcy5zZW5zaXRpdml0eTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gQXhpc1R5cGUuQnV0dG9uKSB7XG4gICAgICAgICAgICBidXR0b24gPSBidXR0b25zW2F4aXMubmVnQnV0dG9uXTtcbiAgICAgICAgICAgIGFsdEJ1dHRvbiA9IGJ1dHRvbnNbYXhpcy5hbHROZWdCdXR0b25dO1xuICAgICAgICAgICAgbmVnID0gYnV0dG9uICYmIGJ1dHRvbi52YWx1ZSB8fCBhbHRCdXR0b24gJiYgYWx0QnV0dG9uLnZhbHVlO1xuXG4gICAgICAgICAgICBidXR0b24gPSBidXR0b25zW2F4aXMucG9zQnV0dG9uXTtcbiAgICAgICAgICAgIGFsdEJ1dHRvbiA9IGJ1dHRvbnNbYXhpcy5hbHRQb3NCdXR0b25dO1xuICAgICAgICAgICAgcG9zID0gYnV0dG9uICYmIGJ1dHRvbi52YWx1ZSB8fCBhbHRCdXR0b24gJiYgYWx0QnV0dG9uLnZhbHVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQXhpc1R5cGUuTW91c2UpIHtcbiAgICAgICAgICAgIGF4aXMudmFsdWUgPSB0aGlzLm1vdXNlRGVsdGFbYXhpcy5heGlzXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQXhpc1R5cGUuVG91Y2gpIHtcbiAgICAgICAgICAgIHRvdWNoID0gdGhpcy50b3VjaGVzW2F4aXMuaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAodG91Y2gpIHtcbiAgICAgICAgICAgICAgICBheGlzLnZhbHVlID0gdG91Y2guZGVsdGFbYXhpcy5heGlzXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQXhpc1R5cGUuTW91c2VXaGVlbCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5tb3VzZVdoZWVsO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQXhpc1R5cGUuSm95c3RpY2spIHtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5lZykgdmFsdWUgLT0gc2Vuc2l0aXZpdHkgKiBkdDtcbiAgICAgICAgaWYgKHBvcykgdmFsdWUgKz0gc2Vuc2l0aXZpdHkgKiBkdDtcblxuICAgICAgICBpZiAoIXBvcyAmJiAhbmVnICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICB0bXAgPSBhYnModmFsdWUpO1xuICAgICAgICAgICAgdmFsdWUgLT0gY2xhbXAoc2lnbih2YWx1ZSkgKiBheGlzLmdyYXZpdHkgKiBkdCwgLXRtcCwgdG1wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlID0gY2xhbXAodmFsdWUsIC0xLCAxKTtcbiAgICAgICAgaWYgKGFicyh2YWx1ZSkgPD0gYXhpcy5kZWFkKSB2YWx1ZSA9IDA7XG5cbiAgICAgICAgYXhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMubW91c2VXaGVlbCA9IDA7XG59O1xuXG5cbklucHV0LnByb3RvdHlwZS5heGlzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgYXhpcyA9IHRoaXMuYXhlcy5oYXNoW25hbWVdO1xuICAgIHJldHVybiBheGlzID8gYXhpcy52YWx1ZSA6IDA7XG59O1xuXG5cbklucHV0LnByb3RvdHlwZS5tb3VzZUJ1dHRvbiA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBidXR0b24gPSB0aGlzLmJ1dHRvbnMuaGFzaFtNT1VTRV9CVVRUT05TW2lkXV07XG5cbiAgICByZXR1cm4gYnV0dG9uICYmIGJ1dHRvbi52YWx1ZTtcbn07XG5cblxuSW5wdXQucHJvdG90eXBlLm1vdXNlQnV0dG9uRG93biA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBidXR0b24gPSB0aGlzLmJ1dHRvbnMuaGFzaFtNT1VTRV9CVVRUT05TW2lkXV07XG5cbiAgICByZXR1cm4gYnV0dG9uICYmIGJ1dHRvbi52YWx1ZSAmJiAoYnV0dG9uLmZyYW1lRG93biA+PSB0aGlzLmZyYW1lQ291bnQpO1xufTtcblxuXG5JbnB1dC5wcm90b3R5cGUubW91c2VCdXR0b25VcCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBidXR0b24gPSB0aGlzLmJ1dHRvbnMuaGFzaFtNT1VTRV9CVVRUT05TW2lkXV07XG5cbiAgICByZXR1cm4gYnV0dG9uICYmIChidXR0b24uZnJhbWVVcCA+PSB0aGlzLmZyYW1lQ291bnQpXG59O1xuXG5cbklucHV0LnByb3RvdHlwZS5hbnlLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmJ1dHRvbnMsXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSBidXR0b25zLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBpZiAoYnV0dG9uc1tpXS52YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblxuSW5wdXQucHJvdG90eXBlLmFueUtleURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJ1dHRvbnMgPSB0aGlzLmJ1dHRvbnMsXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgaTtcblxuICAgIGZvciAoaSA9IGJ1dHRvbnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGlmICgoYnV0dG9uID0gYnV0dG9uc1tpXSkudmFsdWUgJiYgKGJ1dHRvbi5mcmFtZURvd24gPj0gdGhpcy5mcmFtZUNvdW50KSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblxuSW5wdXQucHJvdG90eXBlLmtleSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGJ1dHRvbiA9IHRoaXMuYnV0dG9ucy5oYXNoW25hbWVdO1xuXG4gICAgcmV0dXJuIGJ1dHRvbiAmJiBidXR0b24udmFsdWU7XG59O1xuXG5cbklucHV0LnByb3RvdHlwZS5rZXlEb3duID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgYnV0dG9uID0gdGhpcy5idXR0b25zLmhhc2hbbmFtZV07XG5cbiAgICByZXR1cm4gYnV0dG9uICYmIGJ1dHRvbi52YWx1ZSAmJiAoYnV0dG9uLmZyYW1lRG93biA+PSB0aGlzLmZyYW1lQ291bnQpO1xufTtcblxuXG5JbnB1dC5wcm90b3R5cGUua2V5VXAgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBidXR0b24gPSB0aGlzLmJ1dHRvbnMuaGFzaFtuYW1lXTtcblxuICAgIHJldHVybiBidXR0b24gJiYgKGJ1dHRvbi5mcmFtZVVwID49IHRoaXMuZnJhbWVDb3VudCk7XG59O1xuXG5cbklucHV0LnByb3RvdHlwZS50b1NZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB0aGlzLl9TWU5DKTtcblxuICAgIGpzb24uX2ZyYW1lQ291bnQgPSBUaW1lLmZyYW1lQ291bnQ7XG4gICAganNvbi5fdGltZSA9IFRpbWUuc3RhbXAoKTtcblxuICAgIGpzb24uYnV0dG9ucyA9IHRoaXMuYnV0dG9ucy50b1NZTkMoanNvbi5idXR0b25zKTtcblxuICAgIGpzb24ubW91c2VQb3NpdGlvbiA9IHRoaXMubW91c2VQb3NpdGlvbi50b0pTT04oanNvbi5tb3VzZVBvc2l0aW9uKTtcbiAgICBqc29uLm1vdXNlRGVsdGEgPSB0aGlzLm1vdXNlRGVsdGEudG9KU09OKGpzb24ubW91c2VEZWx0YSk7XG5cbiAgICBqc29uLmFjY2VsZXJhdGlvbiA9IHRoaXMuYWNjZWxlcmF0aW9uLnRvSlNPTihqc29uLmFjY2VsZXJhdGlvbik7XG4gICAganNvbi50b3VjaGVzID0gdGhpcy50b3VjaGVzLnRvU1lOQyhqc29uLnRvdWNoZXMpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbklucHV0LnByb3RvdHlwZS5mcm9tU1lOQyA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICB0aGlzLl9mcmFtZUNvdW50ID0ganNvbi5fZnJhbWVDb3VudDtcbiAgICB0aGlzLl90aW1lID0ganNvbi5fdGltZTtcblxuICAgIHRoaXMuYnV0dG9ucy5mcm9tU1lOQyhqc29uLmJ1dHRvbnMpO1xuXG4gICAgdGhpcy5tb3VzZVBvc2l0aW9uLmZyb21KU09OKGpzb24ubW91c2VQb3NpdGlvbik7XG4gICAgdGhpcy5tb3VzZURlbHRhLmZyb21KU09OKGpzb24ubW91c2VEZWx0YSk7XG5cbiAgICB0aGlzLmFjY2VsZXJhdGlvbi5mcm9tSlNPTihqc29uLmFjY2VsZXJhdGlvbik7XG4gICAgdGhpcy50b3VjaGVzLmZyb21TWU5DKGpzb24udG91Y2hlcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuSW5wdXQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHt9KTtcblxuICAgIGpzb24uYnV0dG9ucyA9IHRoaXMuYnV0dG9ucy50b0pTT04oanNvbi5idXR0b25zKTtcbiAgICBqc29uLmF4ZXMgPSB0aGlzLmF4ZXMudG9KU09OKGpzb24uYXhlcyk7XG5cbiAgICBqc29uLm1vdXNlUG9zaXRpb24gPSB0aGlzLm1vdXNlUG9zaXRpb24udG9KU09OKGpzb24ubW91c2VQb3NpdGlvbik7XG4gICAganNvbi5tb3VzZURlbHRhID0gdGhpcy5tb3VzZURlbHRhLnRvSlNPTihqc29uLm1vdXNlRGVsdGEpO1xuXG4gICAganNvbi5hY2NlbGVyYXRpb24gPSB0aGlzLmFjY2VsZXJhdGlvbi50b0pTT04oanNvbi5hY2NlbGVyYXRpb24pO1xuICAgIGpzb24udG91Y2hlcyA9IHRoaXMudG91Y2hlcy50b0pTT04oanNvbi50b3VjaGVzKTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5JbnB1dC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuXG4gICAgdGhpcy5idXR0b25zLmZyb21KU09OKGpzb24uYnV0dG9ucyk7XG4gICAgdGhpcy5heGVzLmZyb21KU09OKGpzb24uYXhlcyk7XG5cbiAgICB0aGlzLm1vdXNlUG9zaXRpb24uZnJvbUpTT04oanNvbi5tb3VzZVBvc2l0aW9uKTtcbiAgICB0aGlzLm1vdXNlRGVsdGEuZnJvbUpTT04oanNvbi5tb3VzZURlbHRhKTtcblxuICAgIHRoaXMuYWNjZWxlcmF0aW9uLmZyb21KU09OKGpzb24uYWNjZWxlcmF0aW9uKTtcbiAgICB0aGlzLnRvdWNoZXMuZnJvbUpTT04oanNvbi50b3VjaGVzKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBJbnB1dDtcbiIsInZhciBWZWMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjMlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFRvdWNoKCkge1xuXG4gICAgdGhpcy5pZCA9IC0xO1xuXG4gICAgdGhpcy5yYWRpdXNYID0gMDtcbiAgICB0aGlzLnJhZGl1c1kgPSAwO1xuICAgIHRoaXMucm90YXRpb25BbmdsZSA9IDA7XG4gICAgdGhpcy5mb3JjZSA9IDA7XG5cbiAgICB0aGlzLmRlbHRhID0gbmV3IFZlYzI7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMyO1xuXG4gICAgdGhpcy5fbGFzdCA9IG5ldyBWZWMyO1xuICAgIHRoaXMuX2ZpcnN0ID0gZmFsc2U7XG5cbiAgICB0aGlzLl9TWU5DID0ge307XG59O1xuXG5cblRvdWNoLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMuaWQgPSAtMTtcblxuICAgIHRoaXMucG9zaXRpb24uc2V0KDAsIDApO1xuICAgIHRoaXMuZGVsdGEuc2V0KDAsIDApO1xuICAgIHRoaXMuX2xhc3Quc2V0KDAsIDApO1xuXG4gICAgdGhpcy5yYWRpdXNYID0gMDtcbiAgICB0aGlzLnJhZGl1c1kgPSAwO1xuICAgIHRoaXMucm90YXRpb25BbmdsZSA9IDA7XG4gICAgdGhpcy5mb3JjZSA9IDA7XG5cbiAgICB0aGlzLl9maXJzdCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRvdWNoLnByb3RvdHlwZS5mcm9tRXZlbnQgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIGRlbHRhID0gdGhpcy5kZWx0YSxcbiAgICAgICAgbGFzdCA9IHRoaXMuX2xhc3QsXG4gICAgICAgIGZpcnN0ID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGVsZW1lbnQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXG4gICAgICAgIG9mZnNldFggPSBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgICAgIG9mZnNldFkgPSBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICAgICAgeCA9IChlLnBhZ2VYIHx8IGUuY2xpZW50WCkgLSBvZmZzZXRYLFxuICAgICAgICB5ID0gKGUucGFnZVkgfHwgZS5jbGllbnRZKSAtIG9mZnNldFk7XG5cbiAgICBsYXN0LnggPSBmaXJzdCA/IHBvc2l0aW9uLnggOiB4O1xuICAgIGxhc3QueSA9IGZpcnN0ID8gcG9zaXRpb24ueSA6IHk7XG5cbiAgICBwb3NpdGlvbi54ID0geDtcbiAgICBwb3NpdGlvbi55ID0geTtcblxuICAgIGRlbHRhLnggPSBwb3NpdGlvbi54IC0gbGFzdC54O1xuICAgIGRlbHRhLnkgPSBwb3NpdGlvbi55IC0gbGFzdC55O1xuXG4gICAgdGhpcy5yYWRpdXNYID0gKGUucmFkaXVzWCB8fCBlLndlYmtpdFJhZGl1c1ggfHwgZS5tb3pSYWRpdXNYIHx8IGUub1JhZGl1c1ggfHwgZS5tc1JhZGl1c1ggfHwgMSk7XG4gICAgdGhpcy5yYWRpdXNZID0gKGUucmFkaXVzWSB8fCBlLndlYmtpdFJhZGl1c1kgfHwgZS5tb3pSYWRpdXNZIHx8IGUub1JhZGl1c1kgfHwgZS5tc1JhZGl1c1kgfHwgMSk7XG4gICAgdGhpcy5yb3RhdGlvbkFuZ2xlID0gKGUucm90YXRpb25BbmdsZSB8fCBlLndlYmtpdFJvdGF0aW9uQW5nbGUgfHwgZS5tb3pSb3RhdGlvbkFuZ2xlIHx8IGUub1JvdGF0aW9uQW5nbGUgfHwgZS5tc1JvdGF0aW9uQW5nbGUgfHwgMCk7XG4gICAgdGhpcy5mb3JjZSA9IChlLmZvcmNlIHx8IGUud2Via2l0Rm9yY2UgfHwgZS5tb3pGb3JjZSB8fCBlLm9Gb3JjZSB8fCBlLm1zRm9yY2UgfHwgMSk7XG5cbiAgICB0aGlzLl9maXJzdCA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuVG91Y2gucHJvdG90eXBlLnRvU1lOQyA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHRoaXMuX1NZTkMpO1xuXG4gICAganNvbi5pZCA9IHRoaXMuaWQ7XG5cbiAgICBqc29uLmRlbHRhID0gdGhpcy5kZWx0YS50b0pTT04oanNvbi5kZWx0YSk7XG4gICAganNvbi5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24udG9KU09OKGpzb24ucG9zaXRpb24pO1xuXG4gICAganNvbi5fbGFzdCA9IHRoaXMuX2xhc3QudG9KU09OKGpzb24uX2xhc3QpO1xuICAgIGpzb24uX2ZpcnN0ID0gdGhpcy5fZmlyc3Q7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuVG91Y2gucHJvdG90eXBlLmZyb21TWU5DID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMuaWQgPSBqc29uLmlkO1xuXG4gICAgdGhpcy5kZWx0YS5mcm9tSlNPTihqc29uLmRlbHRhKTtcbiAgICB0aGlzLnBvc2l0aW9uLmZyb21KU09OKGpzb24ucG9zaXRpb24pO1xuXG4gICAgdGhpcy5fbGFzdC5mcm9tSlNPTihqc29uLl9sYXN0KTtcbiAgICB0aGlzLl9maXJzdCA9IGpzb24uX2ZpcnN0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblRvdWNoLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLmlkID0gdGhpcy5pZDtcblxuICAgIGpzb24uZGVsdGEgPSB0aGlzLmRlbHRhLnRvSlNPTihqc29uLmRlbHRhKTtcbiAgICBqc29uLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50b0pTT04oanNvbi5wb3NpdGlvbik7XG5cbiAgICBqc29uLl9sYXN0ID0gdGhpcy5fbGFzdC50b0pTT04oanNvbi5fbGFzdCk7XG4gICAganNvbi5fZmlyc3QgPSB0aGlzLl9maXJzdDtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5Ub3VjaC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHRoaXMuaWQgPSBqc29uLmlkO1xuXG4gICAgdGhpcy5kZWx0YS5mcm9tSlNPTihqc29uLmRlbHRhKTtcbiAgICB0aGlzLnBvc2l0aW9uLmZyb21KU09OKGpzb24ucG9zaXRpb24pO1xuXG4gICAgdGhpcy5fbGFzdC5mcm9tSlNPTihqc29uLl9sYXN0KTtcbiAgICB0aGlzLl9maXJzdCA9IGpzb24uX2ZpcnN0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVG91Y2g7XG4iLCJ2YXIgT2JqZWN0UG9vbCA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL29iamVjdF9wb29sXCIpO1xudmFyIFRvdWNoID0gcmVxdWlyZShcIi4vdG91Y2hcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgVE9VQ0hfUE9PTCA9IG5ldyBPYmplY3RQb29sKFRvdWNoKSxcbiAgICBPQkpFQ1RfUE9PTCA9IG5ldyBPYmplY3RQb29sKE9iamVjdCk7XG5cblxuZnVuY3Rpb24gVG91Y2hlcygpIHtcblxuICAgIEFycmF5LmNhbGwodGhpcyk7XG4gICAgdGhpcy5fU1lOQyA9IHt9O1xufVxuXG5Ub3VjaGVzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQXJyYXkucHJvdG90eXBlKTtcblRvdWNoZXMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG91Y2hlcztcblRvdWNoZXMuVE9VQ0hfUE9PTCA9IFRPVUNIX1BPT0w7XG5cblxuVG91Y2hlcy5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoaW5kZXgsIHRhcmdldFRvdWNoKSB7XG4gICAgdmFyIHRvdWNoID0gVE9VQ0hfUE9PTC5jcmVhdGUoKTtcblxuICAgIHRvdWNoLmNsZWFyKCk7XG4gICAgdG91Y2guaWQgPSB0YXJnZXRUb3VjaC5pZGVudGlmaWVyO1xuICAgIHRvdWNoLmZyb21FdmVudCh0YXJnZXRUb3VjaCk7XG5cbiAgICB0aGlzLnB1c2godG91Y2gpO1xuXG4gICAgcmV0dXJuIHRvdWNoO1xufTtcblxuXG5Ub3VjaGVzLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgdG91Y2ggPSB0aGlzW2luZGV4XTtcblxuICAgIFRPVUNIX1BPT0wucmVtb3ZlT2JqZWN0KHRvdWNoKTtcbiAgICB0aGlzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICByZXR1cm4gdG91Y2g7XG59O1xuXG5cblRvdWNoZXMucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIFRPVUNIX1BPT0wuY2xlYXIoKTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuVG91Y2hlcy5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIChpbmRleCwgdGFyZ2V0VG91Y2gpIHtcbiAgICB2YXIgdG91Y2ggPSB0aGlzW2luZGV4XTtcblxuICAgIHRvdWNoLmZyb21FdmVudCh0YXJnZXRUb3VjaCk7XG5cbiAgICByZXR1cm4gdG91Y2g7XG59O1xuXG5cblRvdWNoZXMucHJvdG90eXBlLnRvU1lOQyA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHRoaXMuX1NZTkMpO1xuICAgIHZhciBqc29uVG91Y2hlcyA9IGpzb24udG91Y2hlcyB8fCAoanNvbi50b3VjaGVzID0gW10pLFxuICAgICAgICBpID0gdGhpcy5sZW5ndGg7XG5cbiAgICBqc29uVG91Y2hlcy5sZW5ndGggPSAwO1xuICAgIE9CSkVDVF9QT09MLmNsZWFyKCk7XG5cbiAgICB3aGlsZSAoaS0tKSBqc29uVG91Y2hlc1tpXSA9IHRoaXNbaV0udG9TWU5DKE9CSkVDVF9QT09MLmNyZWF0ZSgpKTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5Ub3VjaGVzLnByb3RvdHlwZS5mcm9tU1lOQyA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgdmFyIGpzb25Ub3VjaGVzID0ganNvbi50b3VjaGVzLFxuICAgICAgICBpID0ganNvblRvdWNoZXMubGVuZ3RoO1xuXG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIFRPVUNIX1BPT0wuY2xlYXIoKTtcblxuICAgIHdoaWxlIChpLS0pIHRoaXNbaV0gPSBUT1VDSF9QT09MLmNyZWF0ZSgpLmZyb21TWU5DKGpzb25Ub3VjaGVzW2ldKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Ub3VjaGVzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG4gICAgdmFyIGpzb25Ub3VjaGVzID0ganNvbi50b3VjaGVzIHx8IChqc29uLnRvdWNoZXMgPSBbXSksXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aDsgaS0tOykganNvblRvdWNoZXNbaV0gPSB0aGlzW2ldLnRvSlNPTihqc29uVG91Y2hlc1tpXSk7XG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblRvdWNoZXMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICB2YXIganNvblRvdWNoZXMgPSBqc29uLnRvdWNoZXMsXG4gICAgICAgIHRvdWNoLCBpLCBqLCB0bDtcblxuICAgIGZvciAoaSA9IGpzb25Ub3VjaGVzLmxlbmd0aCwgdGwgPSB0aGlzLmxlbmd0aCwgaiA9IHRsOyBpLS07KSB7XG4gICAgICAgIGlmIChpIDwgdGwpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGotLSwgMSk7XG4gICAgICAgICAgICBUT1VDSF9QT09MLnJlbW92ZU9iamVjdCh0aGlzW2pdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgodG91Y2ggPSB0aGlzW2ldKSkge1xuICAgICAgICAgICAgdG91Y2guZnJvbUpTT04oanNvblRvdWNoZXNbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1tpXSA9IFRPVUNIX1BPT0wuY3JlYXRlKCkuZnJvbUpTT04oanNvblRvdWNoZXNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVG91Y2hlcztcbiIsInZhciBDbGFzcyA9IHJlcXVpcmUoXCIuLi9iYXNlL2NsYXNzXCIpO1xudmFyIE9iamVjdFBvb2wgPSByZXF1aXJlKFwiLi4vYmFzZS9vYmplY3RfcG9vbFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFByZWZhYihvYmplY3QpIHtcblxuICAgIENsYXNzLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdC50b0pTT04oKTtcbiAgICB0aGlzLm9iamVjdFBvb2wgPSBuZXcgT2JqZWN0UG9vbChvYmplY3QuY29uc3RydWN0b3IpO1xufVxuXG5DbGFzcy5leHRlbmQoUHJlZmFiKTtcblxuXG5QcmVmYWIucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqZWN0ID0gdGhpcy5vYmplY3RQb29sLmNyZWF0ZSgpO1xuXG4gICAgb2JqZWN0LmZyb21KU09OKHRoaXMub2JqZWN0KTtcbiAgICBvYmplY3Qub24oXCJyZW1vdmVcIiwgb25SZW1vdmUsIHRoaXMpO1xuXG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuUHJlZmFiLnByb3RvdHlwZS5zZXRPYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG5cbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdC50b0pTT04oKTtcbiAgICB0aGlzLm9iamVjdFBvb2wgPSBuZXcgT2JqZWN0UG9vbChvYmplY3QuY29uc3RydWN0b3IpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblByZWZhYi5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLm9iamVjdFBvb2wuZW1wdHkoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QcmVmYWIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24ub2JqZWN0ID0gdGhpcy5vYmplY3Q7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuUHJlZmFiLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLm9iamVjdCA9IGpzb24ub2JqZWN0O1xuICAgIHRoaXMub2JqZWN0UG9vbCA9IG5ldyBPYmplY3RQb29sKENsYXNzLl9jbGFzc2VzW2pzb24ub2JqZWN0Ll9jbGFzc05hbWVdKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5mdW5jdGlvbiBvblJlbW92ZShvYmplY3QpIHtcblxuICAgIHRoaXMub2JqZWN0UG9vbC5yZW1vdmVPYmplY3Qob2JqZWN0KTtcbiAgICBvYmplY3Qub2ZmKFwicmVtb3ZlXCIsIG9uUmVtb3ZlLCB0aGlzKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQcmVmYWI7XG4iLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvZXZlbnRfZW1pdHRlclwiKTtcbnZhciBEZXZpY2UgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9kZXZpY2VcIik7XG52YXIgRG9tID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvZG9tXCIpO1xudmFyIENvbmZpZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2NvbmZpZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgYWRkRXZlbnQgPSBEb20uYWRkRXZlbnQsXG4gICAgcmVtb3ZlRXZlbnQgPSBEb20ucmVtb3ZlRXZlbnQsXG4gICAgYWRkTWV0YSA9IERvbS5hZGRNZXRhLFxuICAgIGZsb29yID0gTWF0aC5mbG9vcixcblxuICAgIENBTlZBU19JRCA9IDAsXG4gICAgU0NBTEVfUkVHID0gLy1zY2FsZVxccyAqPVxccypbLjAtOV0rL2csXG4gICAgQ0FOVkFTX1NUWUxFID0gW1xuICAgICAgICBcInBvc2l0aW9uOiBmaXhlZDtcIixcbiAgICAgICAgXCJ0b3A6IDUwJTtcIixcbiAgICAgICAgXCJsZWZ0OiA1MCU7XCIsXG4gICAgICAgIFwicGFkZGluZzogMHB4O1wiLFxuICAgICAgICBcIm1hcmdpbjogMHB4O1wiXG4gICAgXS5qb2luKFwiXFxuXCIpLFxuICAgIFZJRVdQT1JULCBWSUVXUE9SVF9XSURUSCwgVklFV1BPUlRfSEVJR0hULCBWSUVXUE9SVF9TQ0FMRTtcblxuYWRkTWV0YShcInZpZXdwb3J0XCIsIFwidmlld3BvcnRcIiwgXCJpbml0aWFsLXNjYWxlPTEsIG1pbmltdW0tc2NhbGU9MSwgbWF4aW11bS1zY2FsZT0xLCB1c2VyLXNjYWxhYmxlPW5vXCIpO1xuYWRkTWV0YShcInZpZXdwb3J0LXdpZHRoXCIsIFwidmlld3BvcnRcIiwgXCJ3aWR0aD1kZXZpY2Utd2lkdGhcIik7XG5hZGRNZXRhKFwidmlld3BvcnQtaGVpZ2h0XCIsIFwidmlld3BvcnRcIiwgXCJoZWlnaHQ9ZGV2aWNlLWhlaWdodFwiKTtcblxuVklFV1BPUlQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZXdwb3J0XCIpO1xuVklFV1BPUlRfV0lEVEggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZXdwb3J0LXdpZHRoXCIpO1xuVklFV1BPUlRfSEVJR0hUID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWV3cG9ydC1oZWlnaHRcIik7XG5WSUVXUE9SVF9TQ0FMRSA9IFZJRVdQT1JULmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG5cbmZ1bmN0aW9uIHdpbmRvd09uUmVzaXplKCkge1xuICAgIFZJRVdQT1JULnNldEF0dHJpYnV0ZShcImNvbnRlbnRcIiwgVklFV1BPUlRfU0NBTEUucmVwbGFjZShTQ0FMRV9SRUcsIFwiLXNjYWxlPVwiICsgRGV2aWNlLmludlBpeGVsUmF0aW8pKTtcbiAgICBWSUVXUE9SVF9XSURUSC5zZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIsIFwid2lkdGg9XCIgKyB3aW5kb3cuaW5uZXJXaWR0aCk7XG4gICAgVklFV1BPUlRfSEVJR0hULnNldEF0dHJpYnV0ZShcImNvbnRlbnRcIiwgXCJoZWlnaHQ9XCIgKyB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAxKTtcbn1cblxuYWRkRXZlbnQod2luZG93LCBcInJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZVwiLCB3aW5kb3dPblJlc2l6ZSk7XG53aW5kb3dPblJlc2l6ZSgpO1xuXG4vKipcbiAqIEBjbGFzcyBDYW52YXNcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICogQGJyaWVmIGNhbnZhcyBoZWxwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cblxuZnVuY3Rpb24gQ2FudmFzKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIGNhbnZhc0lkXG4gICAgICogQG1lbWJlcm9mIENhbnZhc1xuICAgICAqL1xuICAgIHRoaXMuY2FudmFzSWQgPSArK0NBTlZBU19JRDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBCb29sZWFuIGZ1bGxTY3JlZW5cbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzXG4gICAgICovXG4gICAgdGhpcy5mdWxsU2NyZWVuID0gb3B0cy5mdWxsU2NyZWVuID8gb3B0cy5mdWxsU2NyZWVuIDogKG9wdHMud2lkdGggPT0gdW5kZWZpbmVkICYmIG9wdHMuaGVpZ2h0ID09IHVuZGVmaW5lZCkgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgU3RyaW5nIGN1c3RvbUN1cnNvclxuICAgICAqIEBtZW1iZXJvZiBDYW52YXNcbiAgICAgKi9cbiAgICB0aGlzLmN1c3RvbUN1cnNvciA9IG9wdHMuY3VzdG9tQ3Vyc29yICE9IHVuZGVmaW5lZCA/IG9wdHMuY3VzdG9tQ3Vyc29yIDogZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgQm9vbGVhbiBoaWRlTW91c2VcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzXG4gICAgICovXG4gICAgdGhpcy5oaWRlTW91c2UgPSBvcHRzLmhpZGVNb3VzZSAhPSB1bmRlZmluZWQgPyBvcHRzLmhpZGVNb3VzZSA6IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciB3aWR0aFxuICAgICAqIEBtZW1iZXJvZiBDYW52YXNcbiAgICAgKi9cbiAgICB0aGlzLndpZHRoID0gb3B0cy53aWR0aCAhPSB1bmRlZmluZWQgPyBvcHRzLndpZHRoIDogd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIGhlaWdodFxuICAgICAqIEBtZW1iZXJvZiBDYW52YXNcbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodCA9IG9wdHMuaGVpZ2h0ICE9IHVuZGVmaW5lZCA/IG9wdHMuaGVpZ2h0IDogd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciBhc3BlY3RcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzXG4gICAgICovXG4gICAgdGhpcy5hc3BlY3QgPSB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHBpeGVsV2lkdGhcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzXG4gICAgICovXG4gICAgdGhpcy5waXhlbFdpZHRoID0gdGhpcy53aWR0aDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgcGl4ZWxIZWlnaHRcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzXG4gICAgICovXG4gICAgdGhpcy5waXhlbEhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IEhUTUxDYW52YXNFbGVtZW50IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzXG4gICAgICovXG4gICAgdGhpcy5lbGVtZW50ID0gdW5kZWZpbmVkO1xufVxuXG5FdmVudEVtaXR0ZXIuZXh0ZW5kKENhbnZhcyk7XG5cblxuQ2FudmFzLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnQpIHRoaXMuZGVzdHJveSgpO1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxcbiAgICAgICAgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuXG4gICAgZWxlbWVudC5pZCA9IFwiY2FudmFzLVwiICsgdGhpcy5jYW52YXNJZDtcbiAgICBzdHlsZS5jc3NUZXh0ID0gQ0FOVkFTX1NUWUxFO1xuICAgIHN0eWxlLmN1cnNvciA9IHRoaXMuY3VzdG9tQ3Vyc29yID8gXCJ1cmwoXCIgKyB0aGlzLmN1c3RvbUN1cnNvciArIFwiKVwiIDogdGhpcy5oaWRlTW91c2UgPyBcIm5vbmVcIiA6IFwiZGVmYXVsdFwiO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICBpZiAoIUNvbmZpZy5kZWJ1Zykge1xuICAgICAgICBlbGVtZW50Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkRXZlbnQod2luZG93LCBcInJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZVwiLCB0aGlzLmhhbmRsZVJlc2l6ZSwgdGhpcyk7XG5cbiAgICBlbGVtZW50LnJlcXVlc3RQb2ludGVyTG9jayB8fCAoZWxlbWVudC5yZXF1ZXN0UG9pbnRlckxvY2sgPSAoXG4gICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0UG9pbnRlckxvY2sgfHxcbiAgICBlbGVtZW50Lm1velJlcXVlc3RQb2ludGVyTG9jayB8fFxuICAgIGVsZW1lbnQub1JlcXVlc3RQb2ludGVyTG9jayB8fFxuICAgIGVsZW1lbnQubXNSZXF1ZXN0UG9pbnRlckxvY2tcbiAgICApKTtcbiAgICBlbGVtZW50LmV4aXRQb2ludGVyTG9jayB8fCAoZWxlbWVudC5leGl0UG9pbnRlckxvY2sgPSAoXG4gICAgZG9jdW1lbnQud2Via2l0RXhpdFBvaW50ZXJMb2NrIHx8XG4gICAgZG9jdW1lbnQubW96RXhpdFBvaW50ZXJMb2NrIHx8XG4gICAgZG9jdW1lbnQub0V4aXRQb2ludGVyTG9jayB8fFxuICAgIGRvY3VtZW50Lm1zRXhpdFBvaW50ZXJMb2NrXG4gICAgKSk7XG4gICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbiB8fCAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbiA9IChcbiAgICBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIHx8XG4gICAgZWxlbWVudC5tb3pSZXF1ZXN0RnVsbHNjcmVlbiB8fFxuICAgIGVsZW1lbnQub1JlcXVlc3RGdWxsc2NyZWVuIHx8XG4gICAgZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuXG4gICAgKSk7XG4gICAgZWxlbWVudC5leGl0RnVsbHNjcmVlbiB8fCAoZWxlbWVudC5leGl0RnVsbHNjcmVlbiA9IChcbiAgICBlbGVtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuIHx8XG4gICAgZWxlbWVudC5tb3pFeGl0RnVsbHNjcmVlbiB8fFxuICAgIGVsZW1lbnQub0V4aXRGdWxsc2NyZWVuIHx8XG4gICAgZWxlbWVudC5tc0V4aXRGdWxsc2NyZWVuXG4gICAgKSk7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaGFuZGxlUmVzaXplKCk7XG59O1xuXG5cbkNhbnZhcy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnQpIHJldHVybiB0aGlzO1xuXG4gICAgcmVtb3ZlRXZlbnQod2luZG93LCBcInJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZVwiLCB0aGlzLmhhbmRsZVJlc2l6ZSwgdGhpcyk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgIHRoaXMuZWxlbWVudCA9IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldEZ1bGxzY3JlZW5cbiAqIEBtZW1iZXJvZiBDYW52YXNcbiAqIEBicmllZiBzZXRzIGZ1bGxTY3JlZW4gYm9vbGVhblxuICogQHBhcmFtIE51bWJlciB3aWR0aFxuICovXG5DYW52YXMucHJvdG90eXBlLnNldEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudCB8fCB0aGlzLmZ1bGxTY3JlZW4gPT09IHZhbHVlKSByZXR1cm4gdGhpcztcblxuICAgIHRoaXMuZnVsbFNjcmVlbiA9ICEhdmFsdWU7XG4gICAgdGhpcy5oYW5kbGVSZXNpemUoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFdpZHRoXG4gKiBAbWVtYmVyb2YgQ2FudmFzXG4gKiBAYnJpZWYgc2V0cyB3aWR0aCBhbmQgdXBkYXRlcyBhc3BlY3RcbiAqIEBwYXJhbSBOdW1iZXIgd2lkdGhcbiAqL1xuQ2FudmFzLnByb3RvdHlwZS5zZXRXaWR0aCA9IGZ1bmN0aW9uICh3aWR0aCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50IHx8IHRoaXMud2lkdGggPT09IHdpZHRoKSByZXR1cm4gdGhpcztcblxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmZ1bGxTY3JlZW4gPSBmYWxzZTtcbiAgICB0aGlzLmFzcGVjdCA9IHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMuaGFuZGxlUmVzaXplKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRIZWlnaHRcbiAqIEBtZW1iZXJvZiBDYW52YXNcbiAqIEBicmllZiBzZXRzIGhlaWdodCBhbmQgdXBkYXRlcyBhc3BlY3RcbiAqIEBwYXJhbSBOdW1iZXIgaGVpZ2h0XG4gKi9cbkNhbnZhcy5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50IHx8IHRoaXMuaGVpZ2h0ID09PSBoZWlnaHQpIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5mdWxsU2NyZWVuID0gZmFsc2U7XG4gICAgdGhpcy5hc3BlY3QgPSB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICB0aGlzLmhhbmRsZVJlc2l6ZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc3R5bGVcbiAqIEBtZW1iZXJvZiBDYW52YXNcbiAqIEBicmllZiBzZXRzIHN0eWxlIG9mIGh0bWwgZWxlbWVudFxuICogQHBhcmFtIFN0cmluZyBrZXlcbiAqIEBwYXJhbSBTdHJpbmcgdmFsdWVcbiAqL1xuQ2FudmFzLnByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnQpIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy5lbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRCYWNrZ3JvdW5kQ29sb3JcbiAqIEBtZW1iZXJvZiBDYW52YXNcbiAqIEBicmllZiBzZXRzIGh0bWwgYmFja2dyb3VuZCBjb2xvclxuICogQHBhcmFtIFN0cmluZyBjb2xvclxuICovXG5DYW52YXMucHJvdG90eXBlLnNldEJhY2tncm91bmRDb2xvciA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgIGlmICghdGhpcy5lbGVtZW50KSByZXR1cm4gdGhpcztcblxuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkNhbnZhcy5wcm90b3R5cGUuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3ID0gd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGggPSB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIGFzcGVjdCA9IHcgLyBoLFxuICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHdpZHRoLCBoZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5mdWxsU2NyZWVuKSB7XG4gICAgICAgIHdpZHRoID0gdztcbiAgICAgICAgaGVpZ2h0ID0gaDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXNwZWN0ID4gdGhpcy5hc3BlY3QpIHtcbiAgICAgICAgICAgIHdpZHRoID0gaCAqIHRoaXMuYXNwZWN0O1xuICAgICAgICAgICAgaGVpZ2h0ID0gaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpZHRoID0gdztcbiAgICAgICAgICAgIGhlaWdodCA9IHcgLyB0aGlzLmFzcGVjdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucGl4ZWxXaWR0aCA9IGZsb29yKHdpZHRoKTtcbiAgICB0aGlzLnBpeGVsSGVpZ2h0ID0gZmxvb3IoaGVpZ2h0KTtcblxuICAgIGVsZW1lbnQud2lkdGggPSB3aWR0aDtcbiAgICBlbGVtZW50LmhlaWdodCA9IGhlaWdodDtcblxuICAgIHN0eWxlLm1hcmdpbkxlZnQgPSAtZmxvb3IoKHdpZHRoICsgMSkgKiAwLjUpICsgXCJweFwiO1xuICAgIHN0eWxlLm1hcmdpblRvcCA9IC1mbG9vcigoaGVpZ2h0ICsgMSkgKiAwLjUpICsgXCJweFwiO1xuXG4gICAgc3R5bGUud2lkdGggPSBmbG9vcih3aWR0aCkgKyBcInB4XCI7XG4gICAgc3R5bGUuaGVpZ2h0ID0gZmxvb3IoaGVpZ2h0KSArIFwicHhcIjtcblxuICAgIHRoaXMuZW1pdChcInJlc2l6ZVwiKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDYW52YXM7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi9lbnVtc1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBjbGFzcyBSZW5kZXJUYXJnZXRcbiAqIEBleHRlbmRzIENsYXNzXG4gKiBAYnJpZWYgV2ViR0wgUmVuZGVyIFRhcmdldCBoZWxwZXJcbiAqL1xuXG5mdW5jdGlvbiBSZW5kZXJUYXJnZXQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDbGFzcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy53aWR0aCA9IG9wdHMud2lkdGggfHwgNTEyO1xuICAgIHRoaXMuaGVpZ2h0ID0gb3B0cy5oZWlnaHQgfHwgNTEyO1xuXG4gICAgdGhpcy5pbnZXaWR0aCA9IDEgLyB0aGlzLndpZHRoO1xuICAgIHRoaXMuaW52SGVpZ2h0ID0gMSAvIHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5kZXB0aE9ubHkgPSBvcHRzLmRlcHRoT25seSAhPSB1bmRlZmluZWQgPyAhIW9wdHMuZGVwdGhPbmx5IDogZmFsc2U7XG4gICAgdGhpcy5kZXB0aEJ1ZmZlciA9IG9wdHMuZGVwdGhCdWZmZXIgIT0gdW5kZWZpbmVkID8gISFvcHRzLmRlcHRoQnVmZmVyIDogdHJ1ZTtcbiAgICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRzLnN0ZW5jaWxCdWZmZXIgIT0gdW5kZWZpbmVkID8gISFvcHRzLnN0ZW5jaWxCdWZmZXIgOiB0cnVlO1xuXG4gICAgdGhpcy5nZW5lcmF0ZU1pcG1hcCA9IG9wdHMuZ2VuZXJhdGVNaXBtYXAgIT0gdW5kZWZpbmVkID8gISFvcHRzLmdlbmVyYXRlTWlwbWFwIDogdHJ1ZTtcbiAgICB0aGlzLmZsaXBZID0gb3B0cy5mbGlwWSAhPSB1bmRlZmluZWQgPyAhIW9wdHMuZmxpcFkgOiB0cnVlO1xuICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IG9wdHMucHJlbXVsdGlwbHlBbHBoYSAhPSB1bmRlZmluZWQgPyAhIW9wdHMucHJlbXVsdGlwbHlBbHBoYSA6IGZhbHNlO1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0gb3B0cy5hbmlzb3Ryb3B5ICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5pc290cm9weSA6IDE7XG5cbiAgICB0aGlzLmZpbHRlciA9IG9wdHMuZmlsdGVyICE9IHVuZGVmaW5lZCA/IG9wdHMuZmlsdGVyIDogRW51bXMuRmlsdGVyTW9kZS5MaW5lYXI7XG4gICAgdGhpcy5mb3JtYXQgPSBvcHRzLmZvcm1hdCAhPSB1bmRlZmluZWQgPyBvcHRzLmZvcm1hdCA6IEVudW1zLlRleHR1cmVGb3JtYXQuUkdCQTtcbiAgICB0aGlzLndyYXAgPSBvcHRzLndyYXAgIT0gdW5kZWZpbmVkID8gb3B0cy53cmFwIDogRW51bXMuVGV4dHVyZVdyYXAuUmVwZWF0O1xuXG4gICAgdGhpcy5fd2ViZ2xVc2VkID0gMDtcbiAgICB0aGlzLl93ZWJnbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl93ZWJnbEZyYW1lYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3dlYmdsUmVuZGVyYnVmZmVyID0gdW5kZWZpbmVkO1xufVxuXG5DbGFzcy5leHRlbmQoUmVuZGVyVGFyZ2V0KTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIG5ldyBSZW5kZXJUYXJnZXQoKS5jb3B5KHRoaXMpO1xufTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMud2lkdGggPSBvdGhlci53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG90aGVyLmhlaWdodDtcblxuICAgIHRoaXMuaW52V2lkdGggPSBvdGhlci5pbnZXaWR0aDtcbiAgICB0aGlzLmludkhlaWdodCA9IG90aGVyLmludkhlaWdodDtcblxuICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXAgPSBvdGhlci5nZW5lcmF0ZU1pcG1hcDtcbiAgICB0aGlzLmZsaXBZID0gb3RoZXIuZmxpcFk7XG4gICAgdGhpcy5wcmVtdWx0aXBseUFscGhhID0gb3RoZXIucHJlbXVsdGlwbHlBbHBoYTtcblxuICAgIHRoaXMuYW5pc290cm9weSA9IG90aGVyLmFuaXNvdHJvcHk7XG5cbiAgICB0aGlzLmZpbHRlciA9IG90aGVyLmZpbHRlcjtcbiAgICB0aGlzLmZvcm1hdCA9IG90aGVyLmZvcm1hdDtcbiAgICB0aGlzLndyYXAgPSBvdGhlci53cmFwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblJlbmRlclRhcmdldC5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcblxuICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCB0aGlzLndpZHRoO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uIChoZWlnaHQpIHtcblxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLnNldE1pcG1hcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgdGhpcy5nZW5lcmF0ZU1pcG1hcCA9IHZhbHVlICE9IHVuZGVmaW5lZCA/ICEhdmFsdWUgOiAhdGhpcy5nZW5lcmF0ZU1pcG1hcDtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5zZXRBbmlzb3Ryb3B5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLmFuaXNvdHJvcHkgPSB2YWx1ZTtcbiAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cblxuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5zZXRGaWx0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgIHRoaXMuZmlsdGVyID0gdmFsdWU7XG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuXG5cblJlbmRlclRhcmdldC5wcm90b3R5cGUuc2V0Rm9ybWF0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICB0aGlzLmZvcm1hdCA9IHZhbHVlO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLnNldFdyYXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgIHRoaXMud3JhcCA9IHZhbHVlO1xuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24ud2lkdGggPSB0aGlzLndpZHRoO1xuICAgIGpzb24uaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cbiAgICBqc29uLmludldpZHRoID0gdGhpcy5pbnZXaWR0aDtcbiAgICBqc29uLmludkhlaWdodCA9IHRoaXMuaW52SGVpZ2h0O1xuXG4gICAganNvbi5nZW5lcmF0ZU1pcG1hcCA9IHRoaXMuZ2VuZXJhdGVNaXBtYXA7XG4gICAganNvbi5mbGlwWSA9IHRoaXMuZmxpcFk7XG4gICAganNvbi5wcmVtdWx0aXBseUFscGhhID0gdGhpcy5wcmVtdWx0aXBseUFscGhhO1xuXG4gICAganNvbi5hbmlzb3Ryb3B5ID0gdGhpcy5hbmlzb3Ryb3B5O1xuXG4gICAganNvbi5maWx0ZXIgPSB0aGlzLmZpbHRlcjtcbiAgICBqc29uLmZvcm1hdCA9IHRoaXMuZm9ybWF0O1xuICAgIGpzb24ud3JhcCA9IHRoaXMud3JhcDtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5SZW5kZXJUYXJnZXQucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDbGFzcy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIHRoaXMud2lkdGggPSBqc29uLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0ganNvbi5oZWlnaHQ7XG5cbiAgICB0aGlzLmludldpZHRoID0ganNvbi5pbnZXaWR0aDtcbiAgICB0aGlzLmludkhlaWdodCA9IGpzb24uaW52SGVpZ2h0O1xuXG4gICAgdGhpcy5nZW5lcmF0ZU1pcG1hcCA9IGpzb24uZ2VuZXJhdGVNaXBtYXA7XG4gICAgdGhpcy5mbGlwWSA9IGpzb24uZmxpcFk7XG4gICAgdGhpcy5wcmVtdWx0aXBseUFscGhhID0ganNvbi5wcmVtdWx0aXBseUFscGhhO1xuXG4gICAgdGhpcy5hbmlzb3Ryb3B5ID0ganNvbi5hbmlzb3Ryb3B5O1xuXG4gICAgdGhpcy5maWx0ZXIgPSBqc29uLmZpbHRlcjtcbiAgICB0aGlzLmZvcm1hdCA9IGpzb24uZm9ybWF0O1xuICAgIHRoaXMud3JhcCA9IGpzb24ud3JhcDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlclRhcmdldDtcbiIsInZhciBSZW5kZXJUYXJnZXQgPSByZXF1aXJlKFwiLi9yZW5kZXJfdGFyZ2V0XCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQGNsYXNzIFJlbmRlclRhcmdldEN1YmVcbiAqIEBleHRlbmRzIFJlbmRlclRhcmdldFxuICogQGJyaWVmIFdlYkdMIFJlbmRlciBUYXJnZXQgaGVscGVyXG4gKi9cblxuZnVuY3Rpb24gUmVuZGVyVGFyZ2V0Q3ViZShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIFJlbmRlclRhcmdldC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy5hY3RpdmVDdWJlRmFjZSA9IDA7XG59XG5cblJlbmRlclRhcmdldC5leHRlbmQoUmVuZGVyVGFyZ2V0Q3ViZSk7XG5cblxuUmVuZGVyVGFyZ2V0Q3ViZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gbmV3IFJlbmRlclRhcmdldEN1YmUoKS5jb3B5KHRoaXMpO1xufTtcblxuXG5SZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgb3RoZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IFJlbmRlclRhcmdldC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLmFjdGl2ZUN1YmVGYWNlID0gdGhpcy5hY3RpdmVDdWJlRmFjZTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5SZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5hY3RpdmVDdWJlRmFjZSA9IGpzb24uYWN0aXZlQ3ViZUZhY2U7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBSZW5kZXJUYXJnZXRDdWJlO1xuIiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2V2ZW50X2VtaXR0ZXJcIik7XG52YXIgRGV2aWNlID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvZGV2aWNlXCIpO1xudmFyIERvbSA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2RvbVwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvdXRpbFwiKTtcblxudmFyIE1hdGhmID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0aGZcIik7XG52YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9jb2xvclwiKTtcbnZhciBSZWN0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvcmVjdFwiKTtcbnZhciBSZWN0T2Zmc2V0ID0gcmVxdWlyZShcIi4uLy4uL21hdGgvcmVjdF9vZmZzZXRcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzNcIik7XG52YXIgVmVjNCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzRcIik7XG52YXIgUXVhdCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3F1YXRcIik7XG52YXIgTWF0MiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdDJcIik7XG52YXIgTWF0MyA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdDNcIik7XG52YXIgTWF0NCA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL21hdDRcIik7XG5cbnZhciBFbnVtcyA9IHJlcXVpcmUoXCIuLi9lbnVtc1wiKTtcbnZhciBMb2cgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9sb2dcIik7XG52YXIgQ29uZmlnID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY29uZmlnXCIpO1xudmFyIFJlbmRlclRhcmdldCA9IHJlcXVpcmUoXCIuL3JlbmRlcl90YXJnZXRcIik7XG52YXIgUmVuZGVyVGFyZ2V0Q3ViZSA9IHJlcXVpcmUoXCIuL3JlbmRlcl90YXJnZXRfY3ViZVwiKTtcbnZhciBTaGFkZXJDaHVua3MgPSByZXF1aXJlKFwiLi9zaGFkZXJfY2h1bmtzXCIpO1xuXG52YXIgVGV4dHVyZSA9IHJlcXVpcmUoXCIuLi9hc3NldHMvdGV4dHVyZVwiKTtcbnZhciBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoXCIuLi9hc3NldHMvdGV4dHVyZV9jdWJlXCIpO1xudmFyIE1lc2hGaWx0ZXIgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9tZXNoX2ZpbHRlclwiKTtcbnZhciBTcHJpdGUgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9zcHJpdGVcIik7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL3BhcnRpY2xlX3N5c3RlbS9lbWl0dGVyXCIpO1xudmFyIEVtaXR0ZXIyRCA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL3BhcnRpY2xlX3N5c3RlbS9lbWl0dGVyXzJkXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEJsZW5kaW5nID0gRW51bXMuQmxlbmRpbmcsXG4gICAgU2hhZG93TWFwVHlwZSA9IEVudW1zLlNoYWRvd01hcFR5cGUsXG4gICAgQ3VsbEZhY2UgPSBFbnVtcy5DdWxsRmFjZSxcbiAgICBTaWRlID0gRW51bXMuU2lkZSxcblxuICAgIExpZ2h0VHlwZSA9IEVudW1zLkxpZ2h0VHlwZSxcblxuICAgIEZpbHRlck1vZGUgPSBFbnVtcy5GaWx0ZXJNb2RlLFxuICAgIFRleHR1cmVGb3JtYXQgPSBFbnVtcy5UZXh0dXJlRm9ybWF0LFxuICAgIFRleHR1cmVXcmFwID0gRW51bXMuVGV4dHVyZVdyYXAsXG5cbiAgICBnZXRXZWJHTENvbnRleHQgPSBEb20uZ2V0V2ViR0xDb250ZXh0LFxuICAgIGFkZEV2ZW50ID0gRG9tLmFkZEV2ZW50LFxuICAgIHJlbW92ZUV2ZW50ID0gRG9tLnJlbW92ZUV2ZW50LFxuXG4gICAgY3JlYXRlUHJvZ3JhbSA9IERvbS5jcmVhdGVQcm9ncmFtLFxuXG4gICAgbWVyZ2UgPSB1dGlsLm1lcmdlLFxuXG4gICAgbWF4ID0gTWF0aC5tYXgsXG4gICAgZmxvb3IgPSBNYXRoLmZsb29yLFxuICAgIGNsYW1wID0gTWF0aGYuY2xhbXAsXG4gICAgaXNQb3dlck9mVHdvID0gTWF0aGYuaXNQb3dlck9mVHdvLFxuXG4gICAgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgRU1QVFlfQVJSQVkgPSBbXTtcblxuLyoqXG4gKiBAY2xhc3MgUmVuZGVyZXJcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBSZW5kZXJlcihvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5hdXRvQ2xlYXIgPSBvcHRzLmF1dG9DbGVhciAhPSB1bmRlZmluZWQgPyBvcHRzLmF1dG9DbGVhciA6IHRydWU7XG4gICAgdGhpcy5hdXRvQ2xlYXJDb2xvciA9IG9wdHMuYXV0b0NsZWFyQ29sb3IgIT0gdW5kZWZpbmVkID8gb3B0cy5hdXRvQ2xlYXJDb2xvciA6IHRydWU7XG4gICAgdGhpcy5hdXRvQ2xlYXJEZXB0aCA9IG9wdHMuYXV0b0NsZWFyRGVwdGggIT0gdW5kZWZpbmVkID8gb3B0cy5hdXRvQ2xlYXJEZXB0aCA6IHRydWU7XG4gICAgdGhpcy5hdXRvQ2xlYXJTdGVuY2lsID0gb3B0cy5hdXRvQ2xlYXJTdGVuY2lsICE9IHVuZGVmaW5lZCA/IG9wdHMuYXV0b0NsZWFyU3RlbmNpbCA6IHRydWU7XG5cbiAgICB0aGlzLnNoYWRvd01hcEVuYWJsZWQgPSBvcHRzLnNoYWRvd01hcEVuYWJsZWQgIT0gdW5kZWZpbmVkID8gb3B0cy5zaGFkb3dNYXBFbmFibGVkIDogdHJ1ZTtcbiAgICB0aGlzLnNoYWRvd01hcEF1dG9VcGRhdGUgPSBvcHRzLnNoYWRvd01hcEF1dG9VcGRhdGUgIT0gdW5kZWZpbmVkID8gb3B0cy5zaGFkb3dNYXBBdXRvVXBkYXRlIDogdHJ1ZTtcbiAgICB0aGlzLnNoYWRvd01hcFR5cGUgPSBvcHRzLnNoYWRvd01hcFR5cGUgIT0gdW5kZWZpbmVkID8gb3B0cy5zaGFkb3dNYXBUeXBlIDogU2hhZG93TWFwVHlwZS5QQ0ZTaGFkb3dNYXA7XG4gICAgdGhpcy5zaGFkb3dNYXBDdWxsRmFjZSA9IG9wdHMuc2hhZG93TWFwQ3VsbEZhY2UgIT0gdW5kZWZpbmVkID8gb3B0cy5zaGFkb3dNYXBDdWxsRmFjZSA6IEN1bGxGYWNlLkZyb250O1xuICAgIHRoaXMuc2hhZG93TWFwRGVidWcgPSBvcHRzLnNoYWRvd01hcERlYnVnICE9IHVuZGVmaW5lZCA/IG9wdHMuc2hhZG93TWFwRGVidWcgOiBmYWxzZTtcbiAgICB0aGlzLnNoYWRvd01hcENhc2NhZGUgPSBvcHRzLnNoYWRvd01hcENhc2NhZGUgIT0gdW5kZWZpbmVkID8gb3B0cy5zaGFkb3dNYXBDYXNjYWRlIDogZmFsc2U7XG5cbiAgICB2YXIgX2xhc3RDYW1lcmEgPSB1bmRlZmluZWQsXG4gICAgICAgIF9sYXN0UmVzaXplRm4gPSB1bmRlZmluZWQsXG4gICAgICAgIF9sYXN0U2NlbmUgPSB1bmRlZmluZWQsXG4gICAgICAgIF9sYXN0R1VJID0gdW5kZWZpbmVkLFxuXG4gICAgICAgIF9tYXQ0ID0gbmV3IE1hdDQsXG4gICAgICAgIF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdDQsXG4gICAgICAgIF9xdWF0ID0gbmV3IFF1YXQsXG4gICAgICAgIF92ZWN0b3IyID0gbmV3IFZlYzIsXG4gICAgICAgIF92ZWN0b3IzID0gbmV3IFZlYzMsXG4gICAgICAgIF92ZWN0b3IzXzIgPSBuZXcgVmVjMyxcbiAgICAgICAgX3ZlY3RvcjQgPSBuZXcgVmVjNCxcbiAgICAgICAgX3JlY3QgPSBuZXcgUmVjdCxcbiAgICAgICAgX3JlY3RfMiA9IG5ldyBSZWN0LFxuICAgICAgICBfcmVjdE9mZnNldCA9IG5ldyBSZWN0T2Zmc2V0LFxuICAgICAgICBfY29sb3IgPSBuZXcgQ29sb3IsXG5cbiAgICAgICAgX3NoYWRlcnMgPSB7fSxcbiAgICAgICAgX2xhc3RCdWZmZXJzID0gdW5kZWZpbmVkLFxuICAgICAgICBfc3ByaXRlQnVmZmVycyA9IHVuZGVmaW5lZCxcblxuICAgICAgICBfdGV4dFRleHR1cmVzID0ge30sXG4gICAgICAgIF9jYW52YXMyZCA9IHVuZGVmaW5lZCxcbiAgICAgICAgX2N0eCA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcmVuZGVyXG4gICAgICogQG1lbWJlcm9mIFJlbmRlcmVyXG4gICAgICogQGJyaWVmIHJlbmRlcmVycyBzY2VuZSBmcm9tIGNhbWVyYSdzIHBlcnNwZWN0aXZlXG4gICAgICogQHBhcmFtIENhbWVyYSBjYW1lcmFcbiAgICAgKiBAcGFyYW0gU2NlbmUgc2NlbmVcbiAgICAgKiBAcGFyYW0gR1VJIGd1aVxuICAgICAqIEBwYXJhbSBSZW5kZXJUYXJnZXQgcmVuZGVyVGFyZ2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVuZGVyKGNhbWVyYSwgc2NlbmUsIGd1aSwgcmVuZGVyVGFyZ2V0KSB7XG4gICAgICAgIGlmICghX2NvbnRleHQgfHwgIWNhbWVyYSkgcmV0dXJuO1xuICAgICAgICB2YXIgbGluZVdpZHRoLCBibGVuZGluZywgY3VsbEZhY2UsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kID0gY2FtZXJhLmJhY2tncm91bmQsXG4gICAgICAgICAgICBpLCBpbDtcblxuICAgICAgICBzZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcblxuICAgICAgICBpZiAoX2xhc3RDbGVhckNvbG9yLnIgIT09IGJhY2tncm91bmQuciB8fCBfbGFzdENsZWFyQ29sb3IuZyAhPT0gYmFja2dyb3VuZC5nIHx8IF9sYXN0Q2xlYXJDb2xvci5iICE9PSBiYWNrZ3JvdW5kLmIpIHtcbiAgICAgICAgICAgIF9sYXN0Q2xlYXJDb2xvci5jb3B5KGJhY2tncm91bmQpO1xuICAgICAgICAgICAgX2dsLmNsZWFyQ29sb3IoYmFja2dyb3VuZC5yLCBiYWNrZ3JvdW5kLmcsIGJhY2tncm91bmQuYiwgMSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXV0b0NsZWFyKSBjbGVhckNhbnZhcyh0cnVlLCB0aGlzLmF1dG9DbGVhckRlcHRoLCB0aGlzLmF1dG9DbGVhclN0ZW5jaWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfbGFzdENhbWVyYSAhPT0gY2FtZXJhKSB7XG5cbiAgICAgICAgICAgIGlmIChjYW1lcmEuYXV0b1Jlc2l6ZSkge1xuICAgICAgICAgICAgICAgIHZhciB3ID0gX2NhbnZhcy5waXhlbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoID0gX2NhbnZhcy5waXhlbEhlaWdodDtcblxuICAgICAgICAgICAgICAgIGNhbWVyYS5zZXQodywgaCk7XG4gICAgICAgICAgICAgICAgc2V0Vmlld3BvcnQoMCwgMCwgdywgaCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2xhc3RSZXNpemVGbikgX2NhbnZhcy5vZmYoXCJyZXNpemVcIiwgX2xhc3RSZXNpemVGbik7XG5cbiAgICAgICAgICAgICAgICBfbGFzdFJlc2l6ZUZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IHRoaXMucGl4ZWxXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLnBpeGVsSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYS5zZXQodywgaCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFZpZXdwb3J0KDAsIDAsIHcsIGgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBfY2FudmFzLm9uKFwicmVzaXplXCIsIF9sYXN0UmVzaXplRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRWaWV3cG9ydCgwLCAwLCBjYW1lcmEud2lkdGgsIGNhbWVyYS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfbGFzdENhbWVyYSA9IGNhbWVyYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NlbmUgJiYgX2xhc3RTY2VuZSAhPT0gc2NlbmUpIHtcbiAgICAgICAgICAgIGlmIChfbGFzdFNjZW5lKSByZW1vdmVTY2VuZUV2ZW50cyhfbGFzdFNjZW5lKTtcbiAgICAgICAgICAgIGFkZFNjZW5lRXZlbnRzKHNjZW5lKTtcblxuICAgICAgICAgICAgX2xhc3RTY2VuZSA9IHNjZW5lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChndWkgJiYgX2xhc3RHVUkgIT09IGd1aSkge1xuICAgICAgICAgICAgaWYgKF9sYXN0R1VJKSByZW1vdmVHVUlFdmVudHMoX2xhc3RHVUkpO1xuICAgICAgICAgICAgYWRkR1VJRXZlbnRzKGd1aSk7XG5cbiAgICAgICAgICAgIF9sYXN0U2NlbmUgPSBndWk7XG4gICAgICAgIH1cblxuICAgICAgICBfcHJvalNjcmVlbk1hdHJpeC5tbXVsKGNhbWVyYS5wcm9qZWN0aW9uLCBjYW1lcmEudmlldyk7XG4gICAgICAgIGlmICh0aGlzLmF1dG9DbGVhcikgY2xlYXJDYW52YXModGhpcy5hdXRvQ2xlYXJDb2xvciwgdGhpcy5hdXRvQ2xlYXJEZXB0aCwgdGhpcy5hdXRvQ2xlYXJTdGVuY2lsKTtcblxuICAgICAgICBsaW5lV2lkdGggPSBfbGFzdExpbmVXaWR0aDtcbiAgICAgICAgYmxlbmRpbmcgPSBfbGFzdEJsZW5kaW5nO1xuICAgICAgICBjdWxsRmFjZSA9IF9sYXN0Q3VsbEZhY2U7XG5cbiAgICAgICAgaWYgKHNjZW5lKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50TWFuYWdlcnMgPSBzY2VuZS5jb21wb25lbnRNYW5hZ2VycyxcbiAgICAgICAgICAgICAgICBhbWJpZW50ID0gc2NlbmUud29ybGQuYW1iaWVudCxcbiAgICAgICAgICAgICAgICBsaWdodHMgPSBjb21wb25lbnRNYW5hZ2Vycy5MaWdodCxcbiAgICAgICAgICAgICAgICBtZXNoRmlsdGVycyA9IGNvbXBvbmVudE1hbmFnZXJzLk1lc2hGaWx0ZXIsXG4gICAgICAgICAgICAgICAgc3ByaXRlcyA9IGNvbXBvbmVudE1hbmFnZXJzLlNwcml0ZSxcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbXMgPSBjb21wb25lbnRNYW5hZ2Vycy5QYXJ0aWNsZVN5c3RlbTtcblxuICAgICAgICAgICAgbGlnaHRzID0gbGlnaHRzID8gbGlnaHRzLmNvbXBvbmVudHMgOiBFTVBUWV9BUlJBWTtcblxuICAgICAgICAgICAgaWYgKG1lc2hGaWx0ZXJzKSByZW5kZXJNZXNoRmlsdGVycyhjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgbWVzaEZpbHRlcnMpO1xuICAgICAgICAgICAgaWYgKHNwcml0ZXMpIHJlbmRlclNwcml0ZXMoY2FtZXJhLCBsaWdodHMsIGFtYmllbnQsIHNwcml0ZXMpO1xuICAgICAgICAgICAgaWYgKHBhcnRpY2xlU3lzdGVtcykgcmVuZGVyUGFydGljbGVTeXN0ZW1zKGNhbWVyYSwgbGlnaHRzLCBhbWJpZW50LCBwYXJ0aWNsZVN5c3RlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChndWkpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRNYW5hZ2VycyA9IGd1aS5jb21wb25lbnRNYW5hZ2VycyxcbiAgICAgICAgICAgICAgICBndWlDb250ZW50cyA9IGNvbXBvbmVudE1hbmFnZXJzLkdVSUNvbnRlbnQsXG4gICAgICAgICAgICAgICAgZ3VpQ29udGVudCwgdHJhbnNmb3JtO1xuXG4gICAgICAgICAgICB1c2VEZXB0aCAmJiBzZXREZXB0aFRlc3QoZmFsc2UpO1xuXG4gICAgICAgICAgICBndWlDb250ZW50cyA9IGd1aUNvbnRlbnRzID8gZ3VpQ29udGVudHMuY29tcG9uZW50cyA6IEVNUFRZX0FSUkFZO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpbCA9IGd1aUNvbnRlbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBndWlDb250ZW50ID0gZ3VpQ29udGVudHNbaV07XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gZ3VpQ29udGVudC5ndWlUcmFuc2Zvcm07XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0udXBkYXRlTWF0cmljZXMoY2FtZXJhLmd1aVByb2plY3Rpb24pO1xuICAgICAgICAgICAgICAgIHJlbmRlckdVSUNvbnRlbnQoY2FtZXJhLCB0cmFuc2Zvcm0sIGd1aUNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1c2VEZXB0aCAmJiBzZXREZXB0aFRlc3QodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRDdWxsRmFjZShjdWxsRmFjZSk7XG4gICAgICAgIHNldEJsZW5kaW5nKGJsZW5kaW5nKTtcbiAgICAgICAgc2V0TGluZVdpZHRoKGxpbmVXaWR0aCk7XG4gICAgfTtcbiAgICB0aGlzLnJlbmRlciA9IHJlbmRlcjtcblxuXG4gICAgdmFyIF9ndWlCdWZmZXJzID0gdW5kZWZpbmVkLFxuICAgICAgICBfZ3VpQ29udGVudFNoYWRlciA9IHVuZGVmaW5lZDtcblxuICAgIGZ1bmN0aW9uIHJlbmRlckdVSUNvbnRlbnQoY2FtZXJhLCB0cmFuc2Zvcm0sIGd1aUNvbnRlbnQpIHtcbiAgICAgICAgaWYgKCFfZ3VpQnVmZmVycykgY3JlYXRlR1VJQnVmZmVycygpO1xuICAgICAgICBpZiAoIV9ndWlDb250ZW50U2hhZGVyKSBjcmVhdGVHVUlDb250ZW50U2hhZGVyKCk7XG5cbiAgICAgICAgdmFyIGZvcmNlID0gc2V0UHJvZ3JhbShfZ3VpQ29udGVudFNoYWRlci5wcm9ncmFtKSxcbiAgICAgICAgICAgIHVuaWZvcm1zID0gX2d1aUNvbnRlbnRTaGFkZXIudW5pZm9ybXMsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzID0gX2d1aUNvbnRlbnRTaGFkZXIuYXR0cmlidXRlcyxcblxuICAgICAgICAgICAgdGV4dHVyZSA9IGd1aUNvbnRlbnQudGV4dHVyZSxcbiAgICAgICAgICAgIHRleHQgPSBndWlDb250ZW50LnRleHQsXG5cbiAgICAgICAgICAgIHN0eWxlID0gZ3VpQ29udGVudC5zdHlsZSxcbiAgICAgICAgICAgIHN0eWxlU3RhdGUgPSBzdHlsZS5fc3RhdGUsXG4gICAgICAgICAgICBzdGF0ZSA9IHN0eWxlW3N0eWxlU3RhdGVdLFxuXG4gICAgICAgICAgICBpbm5lclJlY3QgPSBfcmVjdC5jb3B5KHRyYW5zZm9ybS5wb3NpdGlvbiksXG4gICAgICAgICAgICBvdXRlclJlY3QgPSBfcmVjdF8yO1xuXG4gICAgICAgIGlmICh0ZXh0dXJlKSB7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICB0ZXh0dXJlID0gY3JlYXRlVGV4dFRleHR1cmUoZ3VpQ29udGVudCwgaW5uZXJSZWN0LCB0ZXh0LCBzdHlsZSwgc3RhdGUpO1xuICAgICAgICAgICAgb3V0ZXJSZWN0LmNvcHkoaW5uZXJSZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfbGFzdEJ1ZmZlcnMgIT09IF9ndWlCdWZmZXJzKSB7XG4gICAgICAgICAgICBkaXNhYmxlQXR0cmlidXRlcygpO1xuXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uLnNldChfZ3VpQnVmZmVycy5fd2ViZ2xWZXJ0ZXhCdWZmZXIpO1xuICAgICAgICAgICAgYXR0cmlidXRlcy51di5zZXQoX2d1aUJ1ZmZlcnMuX3dlYmdsVXZCdWZmZXIpO1xuXG4gICAgICAgICAgICBfbGFzdEJ1ZmZlcnMgPSBfZ3VpQnVmZmVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlLnBhZGRpbmcuYWRkKG91dGVyUmVjdCk7XG4gICAgICAgIHN0eWxlLm1hcmdpbi5hZGQob3V0ZXJSZWN0KTtcblxuICAgICAgICB1bmlmb3Jtcy5tdnBNYXRyaXguc2V0KHRyYW5zZm9ybS5tb2RlbFZpZXcsIGZvcmNlKTtcbiAgICAgICAgdW5pZm9ybXMuc2l6ZS5zZXQoX3ZlY3RvcjIuc2V0KG91dGVyUmVjdC53aWR0aCwgb3V0ZXJSZWN0LmhlaWdodCksIGZvcmNlKTtcbiAgICAgICAgdW5pZm9ybXMuY3JvcC5zZXQoX3ZlY3RvcjQuc2V0KDAsIDAsIDEsIDEpLCBmb3JjZSk7XG4gICAgICAgIHVuaWZvcm1zLmFscGhhLnNldChzdHlsZS5hbHBoYSwgZm9yY2UpO1xuXG4gICAgICAgIF9nbC5hY3RpdmVUZXh0dXJlKF9nbC5URVhUVVJFMCk7XG4gICAgICAgIF9nbC5iaW5kVGV4dHVyZShfZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZS5fd2ViZ2wpO1xuICAgICAgICBfZ2wudW5pZm9ybTFpKHVuaWZvcm1zLnRleHR1cmUubG9jYXRpb24sIDApO1xuXG4gICAgICAgIF9nbC5kcmF3QXJyYXlzKF9nbC5UUklBTkdMRV9TVFJJUCwgMCwgX2d1aUJ1ZmZlcnMuX3dlYmdsVmVydGV4Q291bnQpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVGV4dFRleHR1cmUoZ3VpQ29udGVudCwgaW5uZXJSZWN0LCB0ZXh0LCBzdHlsZSwgc3RhdGUpIHtcbiAgICAgICAgdmFyIHRleHR1cmUgPSBfdGV4dFRleHR1cmVzW2d1aUNvbnRlbnQuX2lkXTtcbiAgICAgICAgaWYgKCFndWlDb250ZW50Ll9uZWVkc1VwZGF0ZSkge1xuICAgICAgICAgICAgaW5uZXJSZWN0LndpZHRoID0gdGV4dHVyZS53aWR0aDtcbiAgICAgICAgICAgIGlubmVyUmVjdC5oZWlnaHQgPSB0ZXh0dXJlLmhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhbnZhcyA9IF9jYW52YXMyZCxcbiAgICAgICAgICAgIFRFWFRVUkVfMkQgPSBfZ2wuVEVYVFVSRV8yRCxcblxuICAgICAgICAgICAgbGluZUhlaWdodCA9IHN0eWxlLmxpbmVIZWlnaHQsXG4gICAgICAgICAgICBsaW5lU3BhY2luZyA9IHN0eWxlLmxpbmVTcGFjaW5nLFxuICAgICAgICAgICAgaGFsZkxpbmVTcGFjaW5nID0gbGluZVNwYWNpbmcgKiAwLjUsXG4gICAgICAgICAgICBmb250SGVpZ2h0ID0gZGV0ZXJtaW5lRm9udEhlaWdodChzdHlsZS5mb250KSxcbiAgICAgICAgICAgIGN0eFN0eWxlID0gc3R5bGUuZm9udFN0eWxlICsgXCIgXCIgKyBzdHlsZS5mb250U2l6ZSArIFwicHQgXCIgKyBzdHlsZS5mb250LFxuXG4gICAgICAgICAgICBtYXhXaWR0aCA9IGlubmVyUmVjdC53aWR0aCxcbiAgICAgICAgICAgIG1heEhlaWdodCA9IGlubmVyUmVjdC5oZWlnaHQsXG4gICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LFxuXG4gICAgICAgICAgICBsaW5lcyA9IHd3TGFzdExpbmVzLFxuICAgICAgICAgICAgbGluZSwgeCA9IDAsXG4gICAgICAgICAgICB5ID0gMCxcbiAgICAgICAgICAgIGksIGlsO1xuXG4gICAgICAgIHRleHR1cmUgPSB0ZXh0dXJlIHx8IChfdGV4dFRleHR1cmVzW2d1aUNvbnRlbnQuX2lkXSA9IHt9KTtcblxuICAgICAgICBfY3R4LmZvbnQgPSBjdHhTdHlsZTtcbiAgICAgICAgbGluZUhlaWdodCA9IGxpbmVIZWlnaHQgPiBmb250SGVpZ2h0ID8gbGluZUhlaWdodCA6IGZvbnRIZWlnaHQ7XG5cbiAgICAgICAgaWYgKHN0eWxlLndvcmRXcmFwICYmICFzdHlsZS5zdHJldGNoV2lkdGgpIHtcbiAgICAgICAgICAgIHdvcmRXcmFwKHRleHQsIG1heFdpZHRoLCBsaW5lSGVpZ2h0LCBsaW5lU3BhY2luZyk7XG4gICAgICAgICAgICB3aWR0aCA9IHd3TGFzdFg7XG4gICAgICAgICAgICBoZWlnaHQgPSB3d0xhc3RZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGxpbmVzLnB1c2godGV4dCk7XG4gICAgICAgICAgICB3aWR0aCA9IF9jdHgubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBsaW5lSGVpZ2h0ICsgbGluZVNwYWNpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBjYW52YXMud2lkdGggPSBzdHlsZS5maXhlZFdpZHRoIHx8IHdpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc3R5bGUuZml4ZWRIZWlnaHQgfHwgaGVpZ2h0O1xuXG4gICAgICAgIF9jdHguZm9udCA9IGN0eFN0eWxlO1xuICAgICAgICBfY3R4LmZpbGxTdHlsZSA9IHN0YXRlLnRleHQudG9SR0IoKTtcbiAgICAgICAgX2N0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcbiAgICAgICAgX2N0eC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlsID0gbGluZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgeSArPSBoYWxmTGluZVNwYWNpbmc7XG4gICAgICAgICAgICBfY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHkpO1xuICAgICAgICAgICAgeSArPSBsaW5lSGVpZ2h0ICsgaGFsZkxpbmVTcGFjaW5nO1xuICAgICAgICB9XG5cblxuICAgICAgICB0ZXh0dXJlLndpZHRoID0gaW5uZXJSZWN0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRleHR1cmUuaGVpZ2h0ID0gaW5uZXJSZWN0LmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0ZXh0dXJlLl93ZWJnbCA9IHRleHR1cmUuX3dlYmdsIHx8ICh0ZXh0dXJlLl93ZWJnbCA9IF9nbC5jcmVhdGVUZXh0dXJlKCkpO1xuXG4gICAgICAgIF9nbC5iaW5kVGV4dHVyZShURVhUVVJFXzJELCB0ZXh0dXJlLl93ZWJnbCk7XG5cbiAgICAgICAgX2dsLnBpeGVsU3RvcmVpKF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAwKTtcblxuICAgICAgICBfZ2wudGV4SW1hZ2UyRChURVhUVVJFXzJELCAwLCBfZ2wuUkdCQSwgX2dsLlJHQkEsIF9nbC5VTlNJR05FRF9CWVRFLCBjYW52YXMpO1xuXG4gICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIF9nbC5URVhUVVJFX01BR19GSUxURVIsIF9nbC5ORUFSRVNUKTtcbiAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgX2dsLk5FQVJFU1QpO1xuXG4gICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIF9nbC5URVhUVVJFX1dSQVBfUywgX2dsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICBfZ2wudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBfZ2wuVEVYVFVSRV9XUkFQX1QsIF9nbC5DTEFNUF9UT19FREdFKTtcblxuICAgICAgICBfZ2wuYmluZFRleHR1cmUoVEVYVFVSRV8yRCwgbnVsbCk7XG5cbiAgICAgICAgZ3VpQ29udGVudC5fbmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG5cblxuICAgIHZhciB3d0xhc3RMaW5lcyA9IFtdLFxuICAgICAgICB3d0xhc3RYID0gMCxcbiAgICAgICAgd3dMYXN0WSA9IDA7XG5cbiAgICBmdW5jdGlvbiB3b3JkV3JhcCh0ZXh0LCBtYXhXaWR0aCwgbGluZUhlaWdodCwgbGluZVNwYWNpbmcpIHtcbiAgICAgICAgd3dMYXN0TGluZXMubGVuZ3RoID0gMDtcbiAgICAgICAgd3dMYXN0WCA9IDA7XG4gICAgICAgIHd3TGFzdFkgPSBsaW5lSGVpZ2h0ICsgbGluZVNwYWNpbmc7XG5cbiAgICAgICAgdmFyIHdvcmRzID0gdGV4dC5zcGxpdChcIiBcIiksXG4gICAgICAgICAgICBsaW5lID0gXCJcIixcbiAgICAgICAgICAgIHdvcmQsIHRlc3RMaW5lLCB0ZXN0V2lkdGgsXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIGlsID0gd29yZHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgICAgICAgdGVzdExpbmUgPSBsaW5lICsgd29yZCArIFwiIFwiO1xuICAgICAgICAgICAgdGVzdFdpZHRoID0gX2N0eC5tZWFzdXJlVGV4dCh0ZXN0TGluZSkud2lkdGg7XG5cbiAgICAgICAgICAgIGlmICh0ZXN0V2lkdGggPiBtYXhXaWR0aCAmJiBpID4gMCkge1xuICAgICAgICAgICAgICAgIHd3TGFzdExpbmVzLnB1c2gobGluZSk7XG4gICAgICAgICAgICAgICAgbGluZSA9IHdvcmQgKyBcIiBcIjtcbiAgICAgICAgICAgICAgICB3d0xhc3RZICs9IGxpbmVIZWlnaHQgKyBsaW5lU3BhY2luZztcblxuICAgICAgICAgICAgICAgIHRlc3RXaWR0aCA9IF9jdHgubWVhc3VyZVRleHQobGluZSkud2lkdGg7XG4gICAgICAgICAgICAgICAgd3dMYXN0WCA9IHRlc3RXaWR0aCA+IHd3TGFzdFggPyB0ZXN0V2lkdGggOiB3d0xhc3RYO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW5lID0gdGVzdExpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd3dMYXN0TGluZXMucHVzaChsaW5lKTtcbiAgICB9XG5cblxuICAgIHZhciBoZWlnaHRDYWNoZSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGV0ZXJtaW5lRm9udEhlaWdodChmb250U3R5bGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGhlaWdodENhY2hlW2ZvbnRTdHlsZV07XG5cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0sXG4gICAgICAgICAgICAgICAgZHVtbXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICAgICAgICAgIGR1bW15VGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiTVwiKTtcblxuICAgICAgICAgICAgZHVtbXkuYXBwZW5kQ2hpbGQoZHVtbXlUZXh0KTtcbiAgICAgICAgICAgIGR1bW15LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZm9udDogXCIgKyBmb250U3R5bGUgKyBcIjtmb250LXNpemU6MWVtO2xpbmUtaGVpZ2h0OjE7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3BhZGRpbmc6MDttYXJnaW46MDtcIik7XG4gICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGR1bW15KTtcblxuICAgICAgICAgICAgcmVzdWx0ID0gZHVtbXkub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgaGVpZ2h0Q2FjaGVbZm9udFN0eWxlXSA9IHJlc3VsdDtcblxuICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZChkdW1teSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gcmVuZGVyTWVzaEZpbHRlcnMoY2FtZXJhLCBsaWdodHMsIGFtYmllbnQsIG1lc2hGaWx0ZXJzKSB7XG4gICAgICAgIHZhciBjb21wb25lbnRzID0gbWVzaEZpbHRlcnMuY29tcG9uZW50cyxcbiAgICAgICAgICAgIG1lc2hGaWx0ZXIsIHRyYW5zZm9ybSwgaSwgaWw7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWwgPSBjb21wb25lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgIG1lc2hGaWx0ZXIgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgdHJhbnNmb3JtID0gbWVzaEZpbHRlci50cmFuc2Zvcm0gfHwgbWVzaEZpbHRlci50cmFuc2Zvcm0yZDtcblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm0pIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB0cmFuc2Zvcm0udXBkYXRlTWF0cmljZXMoY2FtZXJhLnZpZXcpO1xuICAgICAgICAgICAgcmVuZGVyTWVzaEZpbHRlcihjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgdHJhbnNmb3JtLCBtZXNoRmlsdGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlck1lc2hGaWx0ZXIoY2FtZXJhLCBsaWdodHMsIGFtYmllbnQsIHRyYW5zZm9ybSwgbWVzaEZpbHRlcikge1xuICAgICAgICB2YXIgbWVzaCA9IG1lc2hGaWx0ZXIubWVzaCxcbiAgICAgICAgICAgIG1hdGVyaWFsID0gbWVzaEZpbHRlci5tYXRlcmlhbCxcbiAgICAgICAgICAgIHNpZGUsIHNoYWRlcjtcblxuICAgICAgICBpZiAoIW1lc2ggfHwgIW1hdGVyaWFsKSByZXR1cm47XG5cbiAgICAgICAgc2V0QmxlbmRpbmcobWF0ZXJpYWwuYmxlbmRpbmcpO1xuXG4gICAgICAgIHNpZGUgPSBtYXRlcmlhbC5zaWRlO1xuICAgICAgICBpZiAoc2lkZSA9PT0gU2lkZS5Gcm9udCkge1xuICAgICAgICAgICAgc2V0Q3VsbEZhY2UoQ3VsbEZhY2UuQmFjayk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2lkZSA9PT0gU2lkZS5CYWNrKSB7XG4gICAgICAgICAgICBzZXRDdWxsRmFjZShDdWxsRmFjZS5Gcm9udCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2lkZSA9PT0gU2lkZS5Cb3RoKSB7XG4gICAgICAgICAgICBzZXRDdWxsRmFjZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3JlYXRlTWVzaEJ1ZmZlcnMobWVzaCk7XG4gICAgICAgIHNoYWRlciA9IGNyZWF0ZVNoYWRlcihtZXNoLCBtYXRlcmlhbCwgbGlnaHRzKTtcbiAgICAgICAgc2hhZGVyLmJpbmRNYXRlcmlhbChtZXNoRmlsdGVyLCBtZXNoLCBtYXRlcmlhbCwgdHJhbnNmb3JtLCBjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCk7XG5cbiAgICAgICAgaWYgKCFtZXNoRmlsdGVyLl93ZWJnbE1lc2hJbml0dGVkKSB7XG4gICAgICAgICAgICBtZXNoLl93ZWJnbFVzZWQgKz0gMTtcbiAgICAgICAgICAgIHNoYWRlci5tYXJrQXNVc2VkKG1hdGVyaWFsKTtcbiAgICAgICAgICAgIG1lc2hGaWx0ZXIuX3dlYmdsTWVzaEluaXR0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsLndpcmVmcmFtZSkge1xuICAgICAgICAgICAgc2V0TGluZVdpZHRoKG1hdGVyaWFsLndpcmVmcmFtZUxpbmVXaWR0aCk7XG4gICAgICAgICAgICBfZ2wuZHJhd0VsZW1lbnRzKF9nbC5MSU5FUywgbWVzaC5fd2ViZ2xMaW5lQ291bnQsIF9nbC5VTlNJR05FRF9TSE9SVCwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZ2wuZHJhd0VsZW1lbnRzKF9nbC5UUklBTkdMRVMsIG1lc2guX3dlYmdsSW5kZXhDb3VudCwgX2dsLlVOU0lHTkVEX1NIT1JULCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gcmVuZGVyU3ByaXRlcyhjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgc3ByaXRlcykge1xuICAgICAgICB2YXIgbGF5ZXJzID0gc3ByaXRlcy5sYXllcnMsXG4gICAgICAgICAgICBzcHJpdGUsIHRyYW5zZm9ybSwgY29tcG9uZW50cywgaSwgaWwsIGosIGpsO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlsID0gbGF5ZXJzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMgPSBsYXllcnNbaV07XG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudHMpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqbCA9IGNvbXBvbmVudHMubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICAgICAgICAgIHNwcml0ZSA9IGNvbXBvbmVudHNbal07XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gc3ByaXRlLnRyYW5zZm9ybSB8fCBzcHJpdGUudHJhbnNmb3JtMmQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0udXBkYXRlTWF0cmljZXMoY2FtZXJhLnZpZXcpO1xuICAgICAgICAgICAgICAgIHJlbmRlclNwcml0ZShjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgdHJhbnNmb3JtLCBzcHJpdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyU3ByaXRlKGNhbWVyYSwgbGlnaHRzLCBhbWJpZW50LCB0cmFuc2Zvcm0sIHNwcml0ZSkge1xuICAgICAgICB2YXIgbWF0ZXJpYWwgPSBzcHJpdGUubWF0ZXJpYWwsXG4gICAgICAgICAgICBzaWRlLCBzaGFkZXI7XG5cbiAgICAgICAgaWYgKCFtYXRlcmlhbCkgcmV0dXJuO1xuICAgICAgICBpZiAoIV9zcHJpdGVCdWZmZXJzKSBjcmVhdGVTcHJpdGUoKTtcblxuICAgICAgICBzZXRCbGVuZGluZyhtYXRlcmlhbC5ibGVuZGluZyk7XG5cbiAgICAgICAgc2lkZSA9IG1hdGVyaWFsLnNpZGU7XG4gICAgICAgIGlmIChzaWRlID09PSBTaWRlLkZyb250KSB7XG4gICAgICAgICAgICBzZXRDdWxsRmFjZShDdWxsRmFjZS5CYWNrKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaWRlID09PSBTaWRlLkJhY2spIHtcbiAgICAgICAgICAgIHNldEN1bGxGYWNlKEN1bGxGYWNlLkZyb250KTtcbiAgICAgICAgfSBlbHNlIGlmIChzaWRlID09PSBTaWRlLkJvdGgpIHtcbiAgICAgICAgICAgIHNldEN1bGxGYWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFkZXIgPSBjcmVhdGVTaGFkZXIoc3ByaXRlLCBtYXRlcmlhbCwgbGlnaHRzKTtcblxuICAgICAgICBpZiAoIXNwcml0ZS5fd2ViZ2xJbml0dGVkKSB7XG4gICAgICAgICAgICBzaGFkZXIubWFya0FzVXNlZChtYXRlcmlhbCk7XG4gICAgICAgICAgICBzcHJpdGUuX3dlYmdsSW5pdHRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFkZXIuYmluZE1hdGVyaWFsKHNwcml0ZSwgc3ByaXRlLCBtYXRlcmlhbCwgdHJhbnNmb3JtLCBjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCk7XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsLndpcmVmcmFtZSkge1xuICAgICAgICAgICAgc2V0TGluZVdpZHRoKG1hdGVyaWFsLndpcmVmcmFtZUxpbmVXaWR0aCk7XG4gICAgICAgICAgICBfZ2wuZHJhd0FycmF5cyhfZ2wuTElORV9TVFJJUCwgMCwgX3Nwcml0ZUJ1ZmZlcnMuX3dlYmdsVmVydGV4Q291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2dsLmRyYXdBcnJheXMoX2dsLlRSSUFOR0xFX1NUUklQLCAwLCBfc3ByaXRlQnVmZmVycy5fd2ViZ2xWZXJ0ZXhDb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHJlbmRlclBhcnRpY2xlU3lzdGVtcyhjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgcGFydGljbGVTeXN0ZW1zKSB7XG4gICAgICAgIHZhciBjb21wb25lbnRzID0gcGFydGljbGVTeXN0ZW1zLmNvbXBvbmVudHMsXG4gICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbSwgdHJhbnNmb3JtLCBpLCBpbDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBpbCA9IGNvbXBvbmVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgcGFydGljbGVTeXN0ZW0gPSBjb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgdHJhbnNmb3JtID0gcGFydGljbGVTeXN0ZW0udHJhbnNmb3JtIHx8IHBhcnRpY2xlU3lzdGVtLnRyYW5zZm9ybTJkO1xuXG4gICAgICAgICAgICBpZiAoIXRyYW5zZm9ybSkgY29udGludWU7XG5cbiAgICAgICAgICAgIHRyYW5zZm9ybS51cGRhdGVNYXRyaWNlcyhjYW1lcmEudmlldyk7XG4gICAgICAgICAgICByZW5kZXJQYXJ0aWNsZVN5c3RlbShjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgdHJhbnNmb3JtLCBwYXJ0aWNsZVN5c3RlbSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJQYXJ0aWNsZVN5c3RlbShjYW1lcmEsIGxpZ2h0cywgYW1iaWVudCwgdHJhbnNmb3JtLCBwYXJ0aWNsZVN5c3RlbSkge1xuICAgICAgICB2YXIgZW1pdHRlcnMgPSBwYXJ0aWNsZVN5c3RlbS5lbWl0dGVycyxcbiAgICAgICAgICAgIG1hdGVyaWFsID0gcGFydGljbGVTeXN0ZW0ubWF0ZXJpYWwsXG4gICAgICAgICAgICBzaGFkZXIsIGVtaXR0ZXIsXG4gICAgICAgICAgICBpID0gZW1pdHRlcnMubGVuZ3RoO1xuXG4gICAgICAgIHNldEN1bGxGYWNlKEN1bGxGYWNlLkJhY2spO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGVtaXR0ZXIgPSBlbWl0dGVyc1tpXTtcblxuICAgICAgICAgICAgaWYgKGVtaXR0ZXIgaW5zdGFuY2VvZiBFbWl0dGVyKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBlbWl0dGVyLm1hdGVyaWFsO1xuICAgICAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHNldEJsZW5kaW5nKG1hdGVyaWFsLmJsZW5kaW5nKTtcbiAgICAgICAgICAgICAgICBzZXRDdWxsRmFjZShDdWxsRmFjZS5CYWNrKTtcblxuICAgICAgICAgICAgICAgIGNyZWF0ZUVtaXR0ZXJCdWZmZXJzKGVtaXR0ZXIsIHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgc2hhZGVyID0gY3JlYXRlU2hhZGVyKGVtaXR0ZXIsIG1hdGVyaWFsLCBsaWdodHMpO1xuICAgICAgICAgICAgICAgIHNoYWRlci5iaW5kTWF0ZXJpYWwocGFydGljbGVTeXN0ZW0sIGVtaXR0ZXIsIG1hdGVyaWFsLCB0cmFuc2Zvcm0sIGNhbWVyYSwgbGlnaHRzLCBhbWJpZW50KTtcblxuICAgICAgICAgICAgICAgIGlmICghZW1pdHRlci5fd2ViZ2xJbml0dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRlci5tYXJrQXNVc2VkKG1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlci5fd2ViZ2xJbml0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfZ2wuZHJhd0FycmF5cyhfZ2wuUE9JTlRTLCAwLCBlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbWl0dGVyIGluc3RhbmNlb2YgRW1pdHRlcjJEKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBlbWl0dGVyLm1hdGVyaWFsO1xuICAgICAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHNldEJsZW5kaW5nKG1hdGVyaWFsLmJsZW5kaW5nKTtcbiAgICAgICAgICAgICAgICBzZXRDdWxsRmFjZShDdWxsRmFjZS5CYWNrKTtcblxuICAgICAgICAgICAgICAgIGNyZWF0ZUVtaXR0ZXIyREJ1ZmZlcnMoZW1pdHRlciwgdHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICBzaGFkZXIgPSBjcmVhdGVTaGFkZXIoZW1pdHRlciwgbWF0ZXJpYWwsIGxpZ2h0cyk7XG4gICAgICAgICAgICAgICAgc2hhZGVyLmJpbmRNYXRlcmlhbChwYXJ0aWNsZVN5c3RlbSwgZW1pdHRlciwgbWF0ZXJpYWwsIHRyYW5zZm9ybSwgY2FtZXJhLCBsaWdodHMsIGFtYmllbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFlbWl0dGVyLl93ZWJnbEluaXR0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhZGVyLm1hcmtBc1VzZWQobWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLl93ZWJnbEluaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9nbC5kcmF3QXJyYXlzKF9nbC5QT0lOVFMsIDAsIGVtaXR0ZXIuX3dlYmdsUGFydGljbGVDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTY2VuZUV2ZW50cyhzY2VuZSkge1xuICAgICAgICB2YXIgY29tcG9uZW50TWFuYWdlcnMgPSBzY2VuZS5jb21wb25lbnRNYW5hZ2VycyxcbiAgICAgICAgICAgIG1lc2hGaWx0ZXJzID0gY29tcG9uZW50TWFuYWdlcnMuTWVzaEZpbHRlciB8fCBFTVBUWV9BUlJBWSxcbiAgICAgICAgICAgIHNwcml0ZXMgPSBjb21wb25lbnRNYW5hZ2Vycy5TcHJpdGUgfHwgRU1QVFlfQVJSQVksXG4gICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbXMgPSBjb21wb25lbnRNYW5hZ2Vycy5QYXJ0aWNsZVN5c3RlbSB8fCBFTVBUWV9BUlJBWSxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgbWVzaEZpbHRlcnMuZm9yRWFjaChvbk1lc2hGaWx0ZXJBZGQpO1xuICAgICAgICBzcHJpdGVzLmZvckVhY2gob25TcHJpdGVBZGQpO1xuICAgICAgICBwYXJ0aWNsZVN5c3RlbXMuZm9yRWFjaChvblBhcnRpY2xlU3lzdGVtQWRkKTtcblxuICAgICAgICBzY2VuZS5vbihcImFkZE1lc2hGaWx0ZXJcIiwgb25NZXNoRmlsdGVyQWRkKTtcbiAgICAgICAgc2NlbmUub24oXCJhZGRTcHJpdGVcIiwgb25TcHJpdGVBZGQpO1xuICAgICAgICBzY2VuZS5vbihcImFkZFBhcnRpY2xlU3lzdGVtXCIsIG9uUGFydGljbGVTeXN0ZW1BZGQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZVNjZW5lRXZlbnRzKHNjZW5lKSB7XG5cbiAgICAgICAgc2NlbmUub2ZmKFwiYWRkTWVzaEZpbHRlclwiLCBvbk1lc2hGaWx0ZXJBZGQpO1xuICAgICAgICBzY2VuZS5vZmYoXCJhZGRTcHJpdGVcIiwgb25TcHJpdGVBZGQpO1xuICAgICAgICBzY2VuZS5vZmYoXCJhZGRQYXJ0aWNsZVN5c3RlbVwiLCBvbk1lc2hGaWx0ZXJBZGQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTWVzaEZpbHRlckFkZChtZXNoRmlsdGVyKSB7XG5cbiAgICAgICAgbWVzaEZpbHRlci5vbihcInJlbW92ZVwiLCBvbk1lc2hGaWx0ZXJSZW1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU3ByaXRlQWRkKHNwcml0ZSkge1xuXG4gICAgICAgIHNwcml0ZS5vbihcInJlbW92ZVwiLCBvblNwcml0ZVJlbW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25QYXJ0aWNsZVN5c3RlbUFkZChwYXJ0aWNsZVN5c3RlbSkge1xuXG4gICAgICAgIHBhcnRpY2xlU3lzdGVtLm9uKFwicmVtb3ZlXCIsIG9uUGFydGljbGVTeXN0ZW1SZW1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTWVzaEZpbHRlclJlbW92ZSgpIHtcbiAgICAgICAgdmFyIG1lc2ggPSB0aGlzLm1lc2g7XG5cbiAgICAgICAgZGVsZXRlTWVzaEJ1ZmZlcnMobWVzaCk7XG4gICAgICAgIGRlbGV0ZVNoYWRlcihtZXNoKTtcblxuICAgICAgICB0aGlzLm9mZihcInJlbW92ZVwiLCBvbk1lc2hGaWx0ZXJSZW1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU3ByaXRlUmVtb3ZlKCkge1xuXG4gICAgICAgIGRlbGV0ZVNoYWRlcih0aGlzKTtcblxuICAgICAgICB0aGlzLm9mZihcInJlbW92ZVwiLCBvblNwcml0ZVJlbW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25QYXJ0aWNsZVN5c3RlbVJlbW92ZSgpIHtcbiAgICAgICAgdmFyIGVtaXR0ZXJzID0gdGhpcy5lbWl0dGVycyxcbiAgICAgICAgICAgIGVtaXR0ZXIsIGkgPSBlbWl0dGVycy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgZW1pdHRlciA9IGVtaXR0ZXJzW2ldO1xuXG4gICAgICAgICAgICBkZWxldGVFbWl0dGVyQnVmZmVycyhlbWl0dGVyKTtcbiAgICAgICAgICAgIGRlbGV0ZVNoYWRlcihlbWl0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2ZmKFwicmVtb3ZlXCIsIG9uUGFydGljbGVTeXN0ZW1SZW1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZU1lc2hCdWZmZXJzKG1lc2gpIHtcbiAgICAgICAgaWYgKG1lc2guX3dlYmdsVXNlZCA+IDEpIHtcbiAgICAgICAgICAgIG1lc2guX3dlYmdsVXNlZCAtPSAxO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc2guX3dlYmdsVmVydGV4QnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihtZXNoLl93ZWJnbFZlcnRleEJ1ZmZlcik7XG4gICAgICAgIGlmIChtZXNoLl93ZWJnbE5vcm1hbEJ1ZmZlciAhPSB1bmRlZmluZWQpIF9nbC5kZWxldGVCdWZmZXIobWVzaC5fd2ViZ2xOb3JtYWxCdWZmZXIpO1xuICAgICAgICBpZiAobWVzaC5fd2ViZ2xUYW5nZW50QnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihtZXNoLl93ZWJnbFRhbmdlbnRCdWZmZXIpO1xuICAgICAgICBpZiAobWVzaC5fd2ViZ2xDb2xvckJ1ZmZlciAhPSB1bmRlZmluZWQpIF9nbC5kZWxldGVCdWZmZXIobWVzaC5fd2ViZ2xDb2xvckJ1ZmZlcik7XG4gICAgICAgIGlmIChtZXNoLl93ZWJnbFV2QnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihtZXNoLl93ZWJnbFV2QnVmZmVyKTtcbiAgICAgICAgaWYgKG1lc2guX3dlYmdsVXYyQnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihtZXNoLl93ZWJnbFV2MkJ1ZmZlcik7XG5cbiAgICAgICAgaWYgKG1lc2guX3dlYmdsQm9uZUluZGV4QnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihtZXNoLl93ZWJnbEJvbmVJbmRleEJ1ZmZlcik7XG4gICAgICAgIGlmIChtZXNoLl93ZWJnbEJvbmVXZWlnaHRCdWZmZXIgIT0gdW5kZWZpbmVkKSBfZ2wuZGVsZXRlQnVmZmVyKG1lc2guX3dlYmdsQm9uZVdlaWdodEJ1ZmZlcik7XG5cbiAgICAgICAgaWYgKG1lc2guX3dlYmdsSW5kZXhCdWZmZXIgIT0gdW5kZWZpbmVkKSBfZ2wuZGVsZXRlQnVmZmVyKG1lc2guX3dlYmdsSW5kZXhCdWZmZXIpO1xuICAgICAgICBpZiAobWVzaC5fd2ViZ2xMaW5lQnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihtZXNoLl93ZWJnbExpbmVCdWZmZXIpO1xuXG4gICAgICAgIG1lc2guX3dlYmdsVmVydGV4QXJyYXkgPSBtZXNoLl93ZWJnbFZlcnRleEFycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNoLl93ZWJnbE5vcm1hbEJ1ZmZlciA9IG1lc2guX3dlYmdsTm9ybWFsQXJyYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1lc2guX3dlYmdsVGFuZ2VudEJ1ZmZlciA9IG1lc2guX3dlYmdsVGFuZ2VudEFycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNoLl93ZWJnbENvbG9yQnVmZmVyID0gbWVzaC5fd2ViZ2xDb2xvckFycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNoLl93ZWJnbFV2QnVmZmVyID0gbWVzaC5fd2ViZ2xVdkFycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNoLl93ZWJnbFV2MkJ1ZmZlciA9IG1lc2guX3dlYmdsVXYyQXJyYXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgbWVzaC5fd2ViZ2xCb25lSW5kZXhCdWZmZXIgPSBtZXNoLl93ZWJnbEJvbmVJbmRleEFycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNoLl93ZWJnbEJvbmVXZWlnaHRCdWZmZXIgPSBtZXNoLl93ZWJnbEJvbmVXZWlnaHRBcnJheSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBtZXNoLl93ZWJnbEluZGV4QnVmZmVyID0gbWVzaC5fd2ViZ2xJbmRleEFycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNoLl93ZWJnbExpbmVCdWZmZXIgPSBtZXNoLl93ZWJnbExpbmVBcnJheSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBtZXNoLl93ZWJnbFVzZWQgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUVtaXR0ZXJCdWZmZXJzKGVtaXR0ZXIpIHtcblxuICAgICAgICBpZiAoZW1pdHRlci5fd2ViZ2xWZXJ0ZXhCdWZmZXIgIT0gdW5kZWZpbmVkKSBfZ2wuZGVsZXRlQnVmZmVyKGVtaXR0ZXIuX3dlYmdsVmVydGV4QnVmZmVyKTtcbiAgICAgICAgaWYgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVCdWZmZXIgIT0gdW5kZWZpbmVkKSBfZ2wuZGVsZXRlQnVmZmVyKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVCdWZmZXIpO1xuICAgICAgICBpZiAoZW1pdHRlci5fd2ViZ2xQYXJ0aWNsZUNvbG9yQnVmZmVyICE9IHVuZGVmaW5lZCkgX2dsLmRlbGV0ZUJ1ZmZlcihlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ29sb3JCdWZmZXIpO1xuXG4gICAgICAgIGVtaXR0ZXIuX3dlYmdsVmVydGV4QnVmZmVyID0gZW1pdHRlci5fd2ViZ2xWZXJ0ZXhBcnJheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZW1pdHRlci5fd2ViZ2xQYXJ0aWNsZUJ1ZmZlciA9IGVtaXR0ZXIuX3dlYmdsUGFydGljbGVBcnJheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZW1pdHRlci5fd2ViZ2xQYXJ0aWNsZUNvbG9yQnVmZmVyID0gZW1pdHRlci5fd2ViZ2xQYXJ0aWNsZUNvbG9yQXJyYXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkR1VJRXZlbnRzKGd1aSkge1xuICAgICAgICB2YXIgY29tcG9uZW50TWFuYWdlcnMgPSBndWkuY29tcG9uZW50TWFuYWdlcnMsXG4gICAgICAgICAgICBndWlDb250ZW50cyA9IGNvbXBvbmVudE1hbmFnZXJzLkdVSUNvbnRlbnQ7XG5cbiAgICAgICAgaWYgKGd1aUNvbnRlbnRzKSBndWlDb250ZW50cy5mb3JFYWNoKG9uR1VJQ29udGVudEFkZCk7XG4gICAgICAgIGd1aS5vbihcImFkZEdVSUNvbnRlbnRcIiwgb25HVUlDb250ZW50QWRkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVHVUlFdmVudHMoZ3VpKSB7XG5cbiAgICAgICAgZ3VpLm9mZihcImFkZEdVSUNvbnRlbnRcIiwgb25HVUlDb250ZW50QWRkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkdVSUNvbnRlbnRBZGQoZ3VpQ29udGVudCkge1xuXG4gICAgICAgIGd1aUNvbnRlbnQub24oXCJyZW1vdmVcIiwgb25HVUlDb250ZW50UmVtb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkdVSUNvbnRlbnRSZW1vdmUoKSB7XG5cbiAgICAgICAgZGVsZXRlU2hhZGVyKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub2ZmKFwicmVtb3ZlXCIsIG9uR1VJQ29udGVudFJlbW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlU2hhZGVyKG9iaikge1xuICAgICAgICB2YXIgc2hhZGVyID0gX3NoYWRlcnNbb2JqLl9pZF07XG4gICAgICAgIGlmICghc2hhZGVyKSByZXR1cm47XG4gICAgICAgIHZhciBtYXRlcmlhbCA9IG9iai5tYXRlcmlhbCB8fCBvYmoubWF0ZXJpYWxzLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBpZiAobWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIGkgPSBtYXRlcmlhbC5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgZGVsZXRlTWF0ZXJpYWwobWF0ZXJpYWxbaV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGVNYXRlcmlhbChtYXRlcmlhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhZGVyLnVzZWQgPiAxKSB7XG4gICAgICAgICAgICBzaGFkZXIudXNlZC0tO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3NoYWRlcnNbb2JqLl9pZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzaGFkZXIucHJvZ3JhbSkgX2dsLmRlbGV0ZVByb2dyYW0oc2hhZGVyLnByb2dyYW0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZU1hdGVyaWFsKG1hdGVyaWFsKSB7XG4gICAgICAgIHZhciBtYXRlcmlhbFVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXMsXG4gICAgICAgICAgICBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbWF0ZXJpYWxVbmlmb3JtcykgZGVsZXRlVGV4dHVyZShtYXRlcmlhbFVuaWZvcm1zW2tleV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZVRleHR1cmUob2JqKSB7XG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICAgICAgICBpZiAob2JqLl93ZWJnbFVzZWQgPiAxKSB7XG4gICAgICAgICAgICAgICAgb2JqLl93ZWJnbFVzZWQgLT0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9nbC5kZWxldGVUZXh0dXJlKG9iai5fd2ViZ2wpO1xuICAgICAgICAgICAgb2JqLl93ZWJnbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG9iai5fd2ViZ2xVc2VkID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBUZXh0dXJlQ3ViZSkge1xuICAgICAgICAgICAgaWYgKG9iai5fd2ViZ2xVc2VkID4gMSkge1xuICAgICAgICAgICAgICAgIG9iai5fd2ViZ2xVc2VkIC09IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaiA9IG9iai5fd2ViZ2wubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAgICAgIF9nbC5kZWxldGVUZXh0dXJlKG9iai5fd2ViZ2xbal0pO1xuICAgICAgICAgICAgICAgIG9iai5fd2ViZ2xbal0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgb2JqLl93ZWJnbFVzZWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTWVzaEJ1ZmZlcnMobWVzaCkge1xuICAgICAgICBpZiAoIW1lc2guZHluYW1pYyAmJiBtZXNoLl93ZWJnbEJ1ZmZlcnNJbml0dGVkKSByZXR1cm47XG4gICAgICAgIHZhciBEUkFXID0gbWVzaC5keW5hbWljID8gX2dsLkRZTkFNSUNfRFJBVyA6IF9nbC5TVEFUSUNfRFJBVyxcbiAgICAgICAgICAgIEFSUkFZX0JVRkZFUiA9IF9nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgICBFTEVNRU5UX0FSUkFZX0JVRkZFUiA9IF9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICAgICAgICAgIGJ1ZmZlckFycmF5LCBpdGVtcywgaXRlbSwgaSwgbGVuLCBvZmZzZXQsIHZlcnRleEluZGV4O1xuXG4gICAgICAgIGl0ZW1zID0gbWVzaC52ZXJ0aWNlcyB8fCBFTVBUWV9BUlJBWTtcbiAgICAgICAgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuICYmIG1lc2gudmVydGljZXNOZWVkVXBkYXRlKSB7XG4gICAgICAgICAgICBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsVmVydGV4QXJyYXk7XG4gICAgICAgICAgICBpZiAoIWJ1ZmZlckFycmF5IHx8IGJ1ZmZlckFycmF5Lmxlbmd0aCAhPT0gbGVuICogMykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xWZXJ0ZXhBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuICogMyk7XG4gICAgICAgICAgICAgICAgbWVzaC5fd2ViZ2xWZXJ0ZXhDb3VudCA9IGxlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSA9IGxlbjtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gaSAqIDM7XG5cbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXRdID0gaXRlbS54O1xuICAgICAgICAgICAgICAgIGJ1ZmZlckFycmF5W29mZnNldCArIDFdID0gaXRlbS55O1xuICAgICAgICAgICAgICAgIGJ1ZmZlckFycmF5W29mZnNldCArIDJdID0gaXRlbS56O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZXNoLl93ZWJnbFZlcnRleEJ1ZmZlciA9IG1lc2guX3dlYmdsVmVydGV4QnVmZmVyIHx8IF9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEFSUkFZX0JVRkZFUiwgbWVzaC5fd2ViZ2xWZXJ0ZXhCdWZmZXIpO1xuICAgICAgICAgICAgX2dsLmJ1ZmZlckRhdGEoQVJSQVlfQlVGRkVSLCBidWZmZXJBcnJheSwgRFJBVyk7XG5cbiAgICAgICAgICAgIG1lc2gudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtcyA9IG1lc2gubm9ybWFscyB8fCBFTVBUWV9BUlJBWTtcbiAgICAgICAgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuICYmIG1lc2gubm9ybWFsc05lZWRVcGRhdGUpIHtcbiAgICAgICAgICAgIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xOb3JtYWxBcnJheTtcbiAgICAgICAgICAgIGlmICghYnVmZmVyQXJyYXkgfHwgYnVmZmVyQXJyYXkubGVuZ3RoICE9PSBsZW4gKiAzKSBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsTm9ybWFsQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGxlbiAqIDMpO1xuXG4gICAgICAgICAgICBpID0gbGVuO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBpICogMztcblxuICAgICAgICAgICAgICAgIGJ1ZmZlckFycmF5W29mZnNldF0gPSBpdGVtLng7XG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0ICsgMV0gPSBpdGVtLnk7XG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0ICsgMl0gPSBpdGVtLno7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lc2guX3dlYmdsTm9ybWFsQnVmZmVyID0gbWVzaC5fd2ViZ2xOb3JtYWxCdWZmZXIgfHwgX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICAgICAgX2dsLmJpbmRCdWZmZXIoQVJSQVlfQlVGRkVSLCBtZXNoLl93ZWJnbE5vcm1hbEJ1ZmZlcik7XG4gICAgICAgICAgICBfZ2wuYnVmZmVyRGF0YShBUlJBWV9CVUZGRVIsIGJ1ZmZlckFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgbWVzaC5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbXMgPSBtZXNoLnRhbmdlbnRzIHx8IEVNUFRZX0FSUkFZO1xuICAgICAgICBsZW4gPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gJiYgbWVzaC50YW5nZW50c05lZWRVcGRhdGUpIHtcbiAgICAgICAgICAgIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xUYW5nZW50QXJyYXk7XG4gICAgICAgICAgICBpZiAoIWJ1ZmZlckFycmF5IHx8IGJ1ZmZlckFycmF5Lmxlbmd0aCAhPT0gbGVuICogNCkgYnVmZmVyQXJyYXkgPSBtZXNoLl93ZWJnbFRhbmdlbnRBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuICogNCk7XG5cbiAgICAgICAgICAgIGkgPSBsZW47XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IGkgKiA0O1xuXG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0XSA9IGl0ZW0ueDtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAxXSA9IGl0ZW0ueTtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAyXSA9IGl0ZW0uejtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAzXSA9IGl0ZW0udztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWVzaC5fd2ViZ2xUYW5nZW50QnVmZmVyID0gbWVzaC5fd2ViZ2xUYW5nZW50QnVmZmVyIHx8IF9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEFSUkFZX0JVRkZFUiwgbWVzaC5fd2ViZ2xUYW5nZW50QnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgYnVmZmVyQXJyYXksIERSQVcpO1xuXG4gICAgICAgICAgICBtZXNoLnRhbmdlbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbXMgPSBtZXNoLmluZGljZXMgfHwgRU1QVFlfQVJSQVk7XG4gICAgICAgIGxlbiA9IGl0ZW1zLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiAmJiBtZXNoLmluZGljZXNOZWVkVXBkYXRlKSB7XG4gICAgICAgICAgICBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsSW5kZXhBcnJheTtcbiAgICAgICAgICAgIGlmICghYnVmZmVyQXJyYXkgfHwgYnVmZmVyQXJyYXkubGVuZ3RoICE9PSBsZW4pIHtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsSW5kZXhBcnJheSA9IG5ldyBVaW50MTZBcnJheShsZW4pO1xuICAgICAgICAgICAgICAgIG1lc2guX3dlYmdsSW5kZXhDb3VudCA9IGxlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSA9IGxlbjtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIGJ1ZmZlckFycmF5W2ldID0gaXRlbXNbaV07XG5cbiAgICAgICAgICAgIG1lc2guX3dlYmdsSW5kZXhCdWZmZXIgPSBtZXNoLl93ZWJnbEluZGV4QnVmZmVyIHx8IF9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEVMRU1FTlRfQVJSQVlfQlVGRkVSLCBtZXNoLl93ZWJnbEluZGV4QnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEVMRU1FTlRfQVJSQVlfQlVGRkVSLCBidWZmZXJBcnJheSwgRFJBVyk7XG5cbiAgICAgICAgICAgIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xMaW5lQXJyYXk7XG4gICAgICAgICAgICBpZiAoIWJ1ZmZlckFycmF5IHx8IGJ1ZmZlckFycmF5Lmxlbmd0aCAhPT0gbGVuICogMykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xMaW5lQXJyYXkgPSBuZXcgVWludDE2QXJyYXkobGVuICogMyk7XG4gICAgICAgICAgICAgICAgbWVzaC5fd2ViZ2xMaW5lQ291bnQgPSBsZW4gKiAzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpID0gbGVuO1xuICAgICAgICAgICAgdmVydGV4SW5kZXggPSBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuXG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0XSA9IGl0ZW1zW3ZlcnRleEluZGV4XTtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAxXSA9IGl0ZW1zW3ZlcnRleEluZGV4ICsgMV07XG5cbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAyXSA9IGl0ZW1zW3ZlcnRleEluZGV4XTtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAzXSA9IGl0ZW1zW3ZlcnRleEluZGV4ICsgMl07XG5cbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyA0XSA9IGl0ZW1zW3ZlcnRleEluZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0ICsgNV0gPSBpdGVtc1t2ZXJ0ZXhJbmRleCArIDJdO1xuXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDY7XG4gICAgICAgICAgICAgICAgdmVydGV4SW5kZXggKz0gMztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWVzaC5fd2ViZ2xMaW5lQnVmZmVyID0gbWVzaC5fd2ViZ2xMaW5lQnVmZmVyIHx8IF9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEVMRU1FTlRfQVJSQVlfQlVGRkVSLCBtZXNoLl93ZWJnbExpbmVCdWZmZXIpO1xuICAgICAgICAgICAgX2dsLmJ1ZmZlckRhdGEoRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlckFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgbWVzaC5pbmRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbXMgPSBtZXNoLmNvbG9ycyB8fCBFTVBUWV9BUlJBWTtcbiAgICAgICAgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuICYmIG1lc2guY29sb3JzTmVlZFVwZGF0ZSkge1xuICAgICAgICAgICAgYnVmZmVyQXJyYXkgPSBtZXNoLl93ZWJnbENvbG9yQXJyYXk7XG4gICAgICAgICAgICBpZiAoIWJ1ZmZlckFycmF5IHx8IGJ1ZmZlckFycmF5Lmxlbmd0aCAhPT0gbGVuICogMykgYnVmZmVyQXJyYXkgPSBtZXNoLl93ZWJnbENvbG9yQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGxlbiAqIDMpO1xuXG4gICAgICAgICAgICBpID0gbGVuO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBpICogMztcblxuICAgICAgICAgICAgICAgIGJ1ZmZlckFycmF5W29mZnNldF0gPSBpdGVtLng7XG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0ICsgMV0gPSBpdGVtLnk7XG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0ICsgMl0gPSBpdGVtLno7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lc2guX3dlYmdsQ29sb3JCdWZmZXIgPSBtZXNoLl93ZWJnbENvbG9yQnVmZmVyIHx8IF9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEFSUkFZX0JVRkZFUiwgbWVzaC5fd2ViZ2xDb2xvckJ1ZmZlcik7XG4gICAgICAgICAgICBfZ2wuYnVmZmVyRGF0YShBUlJBWV9CVUZGRVIsIGJ1ZmZlckFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgbWVzaC5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtcyA9IG1lc2gudXZzIHx8IEVNUFRZX0FSUkFZO1xuICAgICAgICBsZW4gPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gJiYgbWVzaC51dnNOZWVkVXBkYXRlKSB7XG4gICAgICAgICAgICBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsVXZBcnJheTtcbiAgICAgICAgICAgIGlmICghYnVmZmVyQXJyYXkgfHwgYnVmZmVyQXJyYXkubGVuZ3RoICE9PSBsZW4gKiAyKSBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsVXZBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuICogMik7XG5cbiAgICAgICAgICAgIGkgPSBsZW47XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IGkgKiAyO1xuXG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0XSA9IGl0ZW0ueDtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAxXSA9IGl0ZW0ueTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWVzaC5fd2ViZ2xVdkJ1ZmZlciA9IG1lc2guX3dlYmdsVXZCdWZmZXIgfHwgX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICAgICAgX2dsLmJpbmRCdWZmZXIoQVJSQVlfQlVGRkVSLCBtZXNoLl93ZWJnbFV2QnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgYnVmZmVyQXJyYXksIERSQVcpO1xuXG4gICAgICAgICAgICBtZXNoLnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZW1zID0gbWVzaC51djJzIHx8IEVNUFRZX0FSUkFZO1xuICAgICAgICBsZW4gPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gJiYgbWVzaC51djJzTmVlZFVwZGF0ZSkge1xuICAgICAgICAgICAgYnVmZmVyQXJyYXkgPSBtZXNoLl93ZWJnbFV2MkFycmF5O1xuICAgICAgICAgICAgaWYgKCFidWZmZXJBcnJheSB8fCBidWZmZXJBcnJheS5sZW5ndGggIT09IGxlbiAqIDIpIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xVdjJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuICogMik7XG5cbiAgICAgICAgICAgIGkgPSBsZW47XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IGkgKiAyO1xuXG4gICAgICAgICAgICAgICAgYnVmZmVyQXJyYXlbb2Zmc2V0XSA9IGl0ZW0ueDtcbiAgICAgICAgICAgICAgICBidWZmZXJBcnJheVtvZmZzZXQgKyAxXSA9IGl0ZW0ueTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWVzaC5fd2ViZ2xVdjJCdWZmZXIgPSBtZXNoLl93ZWJnbFV2MkJ1ZmZlciB8fCBfZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgICAgICBfZ2wuYmluZEJ1ZmZlcihBUlJBWV9CVUZGRVIsIG1lc2guX3dlYmdsVXYyQnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgYnVmZmVyQXJyYXksIERSQVcpO1xuXG4gICAgICAgICAgICBtZXNoLnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZW1zID0gbWVzaC5ib25lSW5kaWNlcyB8fCBFTVBUWV9BUlJBWTtcbiAgICAgICAgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuICYmIG1lc2guYm9uZUluZGljZXNOZWVkVXBkYXRlKSB7XG4gICAgICAgICAgICBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsQm9uZUluZGV4QXJyYXk7XG4gICAgICAgICAgICBpZiAoIWJ1ZmZlckFycmF5IHx8IGJ1ZmZlckFycmF5Lmxlbmd0aCAhPT0gbGVuKSBidWZmZXJBcnJheSA9IG1lc2guX3dlYmdsQm9uZUluZGV4QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGxlbik7XG5cbiAgICAgICAgICAgIGkgPSBsZW47XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSBidWZmZXJBcnJheVtpXSA9IGl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBtZXNoLl93ZWJnbEJvbmVJbmRleEJ1ZmZlciA9IG1lc2guX3dlYmdsQm9uZUluZGV4QnVmZmVyIHx8IF9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEFSUkFZX0JVRkZFUiwgbWVzaC5fd2ViZ2xCb25lSW5kZXhCdWZmZXIpO1xuICAgICAgICAgICAgX2dsLmJ1ZmZlckRhdGEoQVJSQVlfQlVGRkVSLCBidWZmZXJBcnJheSwgRFJBVyk7XG5cbiAgICAgICAgICAgIG1lc2guYm9uZUluZGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtcyA9IG1lc2guYm9uZVdlaWdodHMgfHwgRU1QVFlfQVJSQVk7XG4gICAgICAgIGxlbiA9IGl0ZW1zLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiAmJiBtZXNoLmJvbmVXZWlnaHRzTmVlZFVwZGF0ZSkge1xuICAgICAgICAgICAgYnVmZmVyQXJyYXkgPSBtZXNoLl93ZWJnbEJvbmVXZWlnaHRBcnJheTtcbiAgICAgICAgICAgIGlmICghYnVmZmVyQXJyYXkgfHwgYnVmZmVyQXJyYXkubGVuZ3RoICE9PSBsZW4pIGJ1ZmZlckFycmF5ID0gbWVzaC5fd2ViZ2xCb25lV2VpZ2h0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGxlbik7XG5cbiAgICAgICAgICAgIGkgPSBsZW47XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSBidWZmZXJBcnJheVtpXSA9IGl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBtZXNoLl93ZWJnbEJvbmVXZWlnaHRCdWZmZXIgPSBtZXNoLl93ZWJnbEJvbmVXZWlnaHRCdWZmZXIgfHwgX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICAgICAgX2dsLmJpbmRCdWZmZXIoQVJSQVlfQlVGRkVSLCBtZXNoLl93ZWJnbEJvbmVXZWlnaHRCdWZmZXIpO1xuICAgICAgICAgICAgX2dsLmJ1ZmZlckRhdGEoQVJSQVlfQlVGRkVSLCBidWZmZXJBcnJheSwgRFJBVyk7XG5cbiAgICAgICAgICAgIG1lc2guYm9uZVdlaWdodHNOZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNoLl93ZWJnbEJ1ZmZlcnNJbml0dGVkID0gdHJ1ZTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVtaXR0ZXJCdWZmZXJzKGVtaXR0ZXIsIHRyYW5zZm9ybSkge1xuICAgICAgICB2YXIgTUFYID0gRW1pdHRlci5NQVhfUEFSVElDTEVTLFxuXG4gICAgICAgICAgICBEUkFXID0gX2dsLkRZTkFNSUNfRFJBVyxcbiAgICAgICAgICAgIEFSUkFZX0JVRkZFUiA9IF9nbC5BUlJBWV9CVUZGRVIsXG5cbiAgICAgICAgICAgIHBvc2l0aW9uQXJyYXksIGRhdGFBcnJheSwgY29sb3JBcnJheSxcbiAgICAgICAgICAgIHBvc2l0aW9uQnVmZmVyLCBkYXRhQnVmZmVyLCBjb2xvckJ1ZmZlcixcblxuICAgICAgICAgICAgcGFydGljbGVzID0gZW1pdHRlci5wYXJ0aWNsZXMsXG4gICAgICAgICAgICBwYXJ0aWNsZSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgbGVuID0gcGFydGljbGVzLmxlbmd0aCxcbiAgICAgICAgICAgIG9mZnNldCwgcG9zaXRpb24sIGNvbG9yLFxuICAgICAgICAgICAgbWUsIHgsIHksIHosXG4gICAgICAgICAgICBtMTMsIG0yMywgbTMzLCBtNDMsXG4gICAgICAgICAgICBtMTQsIG0yNCwgbTM0LCBtNDRcblxuICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICBpZiAoZW1pdHRlci5zb3J0KSB7XG4gICAgICAgICAgICAgICAgZW1pdHRlci53b3JsZFNwYWNlID8gX21hdDQuY29weShfcHJvalNjcmVlbk1hdHJpeCkgOiBfbWF0NC5tbXVsKF9wcm9qU2NyZWVuTWF0cml4LCB0cmFuc2Zvcm0ubWF0cml4V29ybGQpO1xuICAgICAgICAgICAgICAgIG1lID0gX21hdDQuZWxlbWVudHM7XG4gICAgICAgICAgICAgICAgbTEzID0gbWVbMl07XG4gICAgICAgICAgICAgICAgbTIzID0gbWVbNl07XG4gICAgICAgICAgICAgICAgbTMzID0gbWVbMTBdO1xuICAgICAgICAgICAgICAgIG00MyA9IG1lWzE0XTtcbiAgICAgICAgICAgICAgICBtMTQgPSBtZVszXTtcbiAgICAgICAgICAgICAgICBtMjQgPSBtZVs3XTtcbiAgICAgICAgICAgICAgICBtMzQgPSBtZVsxMV07XG4gICAgICAgICAgICAgICAgbTQ0ID0gbWVbMTVdO1xuXG4gICAgICAgICAgICAgICAgaSA9IGxlbjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlID0gcGFydGljbGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBhcnRpY2xlLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB4ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgICAgIHogPSBwb3NpdGlvbi56O1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnogPSAobTEzICogeCArIG0yMyAqIHkgKyBtMzMgKiB6ICsgbTQzKSAvIChtMTQgKiB4ICsgbTI0ICogeSArIG0zNCAqIHogKyBtNDQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnRpY2xlcy5zb3J0KHpTb3J0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9zaXRpb25BcnJheSA9IGVtaXR0ZXIuX3dlYmdsVmVydGV4QXJyYXkgfHwgKGVtaXR0ZXIuX3dlYmdsVmVydGV4QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KE1BWCAqIDMpKTtcbiAgICAgICAgICAgIGRhdGFBcnJheSA9IGVtaXR0ZXIuX3dlYmdsUGFydGljbGVBcnJheSB8fCAoZW1pdHRlci5fd2ViZ2xQYXJ0aWNsZUFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShNQVggKiAzKSk7XG4gICAgICAgICAgICBjb2xvckFycmF5ID0gZW1pdHRlci5fd2ViZ2xQYXJ0aWNsZUNvbG9yQXJyYXkgfHwgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVDb2xvckFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShNQVggKiAzKSk7XG5cbiAgICAgICAgICAgIGkgPSBsZW47XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUgPSBwYXJ0aWNsZXNbaV07XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwYXJ0aWNsZS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBjb2xvciA9IHBhcnRpY2xlLmNvbG9yO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IGkgKiAzO1xuXG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJheVtvZmZzZXRdID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkFycmF5W29mZnNldCArIDFdID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkFycmF5W29mZnNldCArIDJdID0gcG9zaXRpb24uejtcblxuICAgICAgICAgICAgICAgIGRhdGFBcnJheVtvZmZzZXRdID0gcGFydGljbGUuYW5nbGU7XG4gICAgICAgICAgICAgICAgZGF0YUFycmF5W29mZnNldCArIDFdID0gcGFydGljbGUuc2l6ZTtcbiAgICAgICAgICAgICAgICBkYXRhQXJyYXlbb2Zmc2V0ICsgMl0gPSBwYXJ0aWNsZS5hbHBoYTtcblxuICAgICAgICAgICAgICAgIGNvbG9yQXJyYXlbb2Zmc2V0XSA9IGNvbG9yLnI7XG4gICAgICAgICAgICAgICAgY29sb3JBcnJheVtvZmZzZXQgKyAxXSA9IGNvbG9yLmc7XG4gICAgICAgICAgICAgICAgY29sb3JBcnJheVtvZmZzZXQgKyAyXSA9IGNvbG9yLmI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvc2l0aW9uQnVmZmVyID0gZW1pdHRlci5fd2ViZ2xWZXJ0ZXhCdWZmZXIgfHwgKGVtaXR0ZXIuX3dlYmdsVmVydGV4QnVmZmVyID0gX2dsLmNyZWF0ZUJ1ZmZlcigpKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEFSUkFZX0JVRkZFUiwgcG9zaXRpb25CdWZmZXIpO1xuICAgICAgICAgICAgX2dsLmJ1ZmZlckRhdGEoQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgZGF0YUJ1ZmZlciA9IGVtaXR0ZXIuX3dlYmdsUGFydGljbGVCdWZmZXIgfHwgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVCdWZmZXIgPSBfZ2wuY3JlYXRlQnVmZmVyKCkpO1xuICAgICAgICAgICAgX2dsLmJpbmRCdWZmZXIoQVJSQVlfQlVGRkVSLCBkYXRhQnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgZGF0YUFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgY29sb3JCdWZmZXIgPSBlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ29sb3JCdWZmZXIgfHwgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVDb2xvckJ1ZmZlciA9IF9nbC5jcmVhdGVCdWZmZXIoKSk7XG4gICAgICAgICAgICBfZ2wuYmluZEJ1ZmZlcihBUlJBWV9CVUZGRVIsIGNvbG9yQnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgY29sb3JBcnJheSwgRFJBVyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ291bnQgPSBsZW47XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFbWl0dGVyMkRCdWZmZXJzKGVtaXR0ZXIpIHtcbiAgICAgICAgdmFyIE1BWCA9IEVtaXR0ZXIyRC5NQVhfUEFSVElDTEVTLFxuXG4gICAgICAgICAgICBEUkFXID0gX2dsLkRZTkFNSUNfRFJBVyxcbiAgICAgICAgICAgIEFSUkFZX0JVRkZFUiA9IF9nbC5BUlJBWV9CVUZGRVIsXG5cbiAgICAgICAgICAgIHBvc2l0aW9uQXJyYXksIGRhdGFBcnJheSwgY29sb3JBcnJheSxcbiAgICAgICAgICAgIHBvc2l0aW9uQnVmZmVyLCBkYXRhQnVmZmVyLCBjb2xvckJ1ZmZlcixcblxuICAgICAgICAgICAgcGFydGljbGVzID0gZW1pdHRlci5wYXJ0aWNsZXMsXG4gICAgICAgICAgICBwYXJ0aWNsZSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgbGVuID0gcGFydGljbGVzLmxlbmd0aCxcbiAgICAgICAgICAgIG9mZnNldCwgcG9zaXRpb24sIGNvbG9yO1xuXG4gICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgIHBvc2l0aW9uQXJyYXkgPSBlbWl0dGVyLl93ZWJnbFZlcnRleEFycmF5IHx8IChlbWl0dGVyLl93ZWJnbFZlcnRleEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShNQVggKiAzKSk7XG4gICAgICAgICAgICBkYXRhQXJyYXkgPSBlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQXJyYXkgfHwgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoTUFYICogMykpO1xuICAgICAgICAgICAgY29sb3JBcnJheSA9IGVtaXR0ZXIuX3dlYmdsUGFydGljbGVDb2xvckFycmF5IHx8IChlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ29sb3JBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoTUFYICogMykpO1xuXG4gICAgICAgICAgICBpID0gbGVuO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlID0gcGFydGljbGVzW2ldO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcGFydGljbGUucG9zaXRpb247XG4gICAgICAgICAgICAgICAgY29sb3IgPSBwYXJ0aWNsZS5jb2xvcjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBpICogMztcblxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQXJyYXlbb2Zmc2V0XSA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJheVtvZmZzZXQgKyAxXSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJheVtvZmZzZXQgKyAyXSA9IDAuMDtcblxuICAgICAgICAgICAgICAgIGRhdGFBcnJheVtvZmZzZXRdID0gcGFydGljbGUuYW5nbGU7XG4gICAgICAgICAgICAgICAgZGF0YUFycmF5W29mZnNldCArIDFdID0gcGFydGljbGUuc2l6ZTtcbiAgICAgICAgICAgICAgICBkYXRhQXJyYXlbb2Zmc2V0ICsgMl0gPSBwYXJ0aWNsZS5hbHBoYTtcblxuICAgICAgICAgICAgICAgIGNvbG9yQXJyYXlbb2Zmc2V0XSA9IGNvbG9yLnI7XG4gICAgICAgICAgICAgICAgY29sb3JBcnJheVtvZmZzZXQgKyAxXSA9IGNvbG9yLmc7XG4gICAgICAgICAgICAgICAgY29sb3JBcnJheVtvZmZzZXQgKyAyXSA9IGNvbG9yLmI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvc2l0aW9uQnVmZmVyID0gZW1pdHRlci5fd2ViZ2xWZXJ0ZXhCdWZmZXIgfHwgKGVtaXR0ZXIuX3dlYmdsVmVydGV4QnVmZmVyID0gX2dsLmNyZWF0ZUJ1ZmZlcigpKTtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKEFSUkFZX0JVRkZFUiwgcG9zaXRpb25CdWZmZXIpO1xuICAgICAgICAgICAgX2dsLmJ1ZmZlckRhdGEoQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgZGF0YUJ1ZmZlciA9IGVtaXR0ZXIuX3dlYmdsUGFydGljbGVCdWZmZXIgfHwgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVCdWZmZXIgPSBfZ2wuY3JlYXRlQnVmZmVyKCkpO1xuICAgICAgICAgICAgX2dsLmJpbmRCdWZmZXIoQVJSQVlfQlVGRkVSLCBkYXRhQnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgZGF0YUFycmF5LCBEUkFXKTtcblxuICAgICAgICAgICAgY29sb3JCdWZmZXIgPSBlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ29sb3JCdWZmZXIgfHwgKGVtaXR0ZXIuX3dlYmdsUGFydGljbGVDb2xvckJ1ZmZlciA9IF9nbC5jcmVhdGVCdWZmZXIoKSk7XG4gICAgICAgICAgICBfZ2wuYmluZEJ1ZmZlcihBUlJBWV9CVUZGRVIsIGNvbG9yQnVmZmVyKTtcbiAgICAgICAgICAgIF9nbC5idWZmZXJEYXRhKEFSUkFZX0JVRkZFUiwgY29sb3JBcnJheSwgRFJBVyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbWl0dGVyLl93ZWJnbFBhcnRpY2xlQ291bnQgPSBsZW47XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB6U29ydChhLCBiKSB7XG5cbiAgICAgICAgcmV0dXJuIGIueiAtIGEuejtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNoYWRlcihvYmosIG1hdGVyaWFsLCBsaWdodHMpIHtcbiAgICAgICAgaWYgKCFtYXRlcmlhbC5uZWVkc1VwZGF0ZSAmJiAoX3NoYWRlcnNbb2JqLl9pZF0pKSByZXR1cm4gX3NoYWRlcnNbb2JqLl9pZF07XG5cbiAgICAgICAgdmFyIHNoYWRlciA9IG1hdGVyaWFsLnNoYWRlcixcbiAgICAgICAgICAgIHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXMsXG4gICAgICAgICAgICBPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgPSAhIV9leHRlbnNpb25zLk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyxcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7fTtcblxuICAgICAgICBwYXJhbWV0ZXJzLm1vYmlsZSA9IERldmljZS5tb2JpbGU7XG5cbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE1lc2hGaWx0ZXIpIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMubWVzaCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgU3ByaXRlKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLnNwcml0ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRW1pdHRlcikge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5lbWl0dGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMud29ybGRTcGFjZSA9IG9iai53b3JsZFNwYWNlO1xuICAgICAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIEVtaXR0ZXIyRCkge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5lbWl0dGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMuZW1pdHRlcjJkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMud29ybGRTcGFjZSA9IG9iai53b3JsZFNwYWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVycy51c2VMaWdodHMgPSBzaGFkZXIubGlnaHRzO1xuICAgICAgICBwYXJhbWV0ZXJzLnVzZVNoYWRvd3MgPSBzaGFkZXIuc2hhZG93cztcbiAgICAgICAgcGFyYW1ldGVycy51c2VGb2cgPSBzaGFkZXIuZm9nO1xuICAgICAgICBwYXJhbWV0ZXJzLnVzZUJvbmVzID0gb2JqLnVzZUJvbmVzICYmIG9iai5ib25lcy5sZW5ndGggPiAwO1xuICAgICAgICBwYXJhbWV0ZXJzLnVzZVZlcnRleExpdCA9IHNoYWRlci52ZXJ0ZXhMaXQ7XG4gICAgICAgIHBhcmFtZXRlcnMudXNlU3BlY3VsYXIgPSBzaGFkZXIuc3BlY3VsYXI7XG5cbiAgICAgICAgcGFyYW1ldGVycy51c2VOb3JtYWwgPSAhIXVuaWZvcm1zLm5vcm1hbE1hcDtcbiAgICAgICAgcGFyYW1ldGVycy51c2VCdW1wID0gISF1bmlmb3Jtcy5idW1wTWFwO1xuXG4gICAgICAgIHBhcmFtZXRlcnMucG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgcGFyYW1ldGVycy5ub3JtYWxzID0gcGFyYW1ldGVycy51c2VOb3JtYWwgfHwgKG9iai5ub3JtYWxzICYmIG9iai5ub3JtYWxzLmxlbmd0aCA+IDApO1xuICAgICAgICBwYXJhbWV0ZXJzLnRhbmdlbnRzID0gcGFyYW1ldGVycy51c2VOb3JtYWwgfHwgKG9iai50YW5nZW50cyAmJiBvYmoudGFuZ2VudHMubGVuZ3RoID4gMCk7XG4gICAgICAgIHBhcmFtZXRlcnMudXZzID0gcGFyYW1ldGVycy5zcHJpdGUgfHwgKG9iai51dnMgJiYgb2JqLnV2cy5sZW5ndGggPiAwKTtcbiAgICAgICAgcGFyYW1ldGVycy5jb2xvcnMgPSBwYXJhbWV0ZXJzLnNwcml0ZSB8fCAob2JqLmNvbG9ycyAmJiBvYmouY29sb3JzLmxlbmd0aCA+IDApO1xuXG4gICAgICAgIHBhcmFtZXRlcnMuT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzID0gT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzICYmIHNoYWRlci5PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXM7XG5cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudXNlQm9uZXMpIHBhcmFtZXRlcnMuYm9uZXMgPSBvYmouYm9uZXMubGVuZ3RoO1xuICAgICAgICBhbGxvY2F0ZUxpZ2h0cyhsaWdodHMsIHBhcmFtZXRlcnMpO1xuICAgICAgICBhbGxvY2F0ZVNoYWRvd3MobGlnaHRzLCBwYXJhbWV0ZXJzKTtcblxuICAgICAgICBwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPSBfdGhpcy5zaGFkb3dNYXBFbmFibGVkICYmIG1hdGVyaWFsLnJlY2VpdmVTaGFkb3cgJiYgcGFyYW1ldGVycy5tYXhTaGFkb3dzID4gMDtcbiAgICAgICAgcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID0gX3RoaXMuc2hhZG93TWFwVHlwZTtcbiAgICAgICAgcGFyYW1ldGVycy5zaGFkb3dNYXBEZWJ1ZyA9IF90aGlzLnNoYWRvd01hcERlYnVnO1xuICAgICAgICBwYXJhbWV0ZXJzLnNoYWRvd01hcENhc2NhZGUgPSBfdGhpcy5zaGFkb3dNYXBDYXNjYWRlO1xuXG4gICAgICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoX3NoYWRlcnNbb2JqLl9pZF0gPSBjcmVhdGVTaGFkZXJQcm9ncmFtKHNoYWRlci52ZXJ0ZXgsIHNoYWRlci5mcmFnbWVudCwgcGFyYW1ldGVycykpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWxsb2NhdGVMaWdodHMobGlnaHRzLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHZhciBtYXhQb2ludExpZ2h0cyA9IDAsXG4gICAgICAgICAgICBtYXhEaXJlY3Rpb25hbExpZ2h0cyA9IDAsXG4gICAgICAgICAgICBtYXhTcG90TGlnaHRzID0gMCxcbiAgICAgICAgICAgIG1heEhlbWlMaWdodHMgPSAwLFxuICAgICAgICAgICAgbGlnaHQsIHR5cGUsXG4gICAgICAgICAgICBpID0gbGlnaHRzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBsaWdodCA9IGxpZ2h0c1tpXTtcbiAgICAgICAgICAgIGlmICghbGlnaHQudmlzaWJsZSB8fCBsaWdodC5vbmx5U2hhZG93KSBjb250aW51ZTtcbiAgICAgICAgICAgIHR5cGUgPSBsaWdodC50eXBlO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gTGlnaHRUeXBlLlBvaW50KSB7XG4gICAgICAgICAgICAgICAgbWF4UG9pbnRMaWdodHMrKztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTGlnaHRUeXBlLkRpcmVjdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgbWF4RGlyZWN0aW9uYWxMaWdodHMrKztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTGlnaHRUeXBlLlNwb3QpIHtcbiAgICAgICAgICAgICAgICBtYXhTcG90TGlnaHRzKys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IExpZ2h0VHlwZS5IZW1pKSB7XG4gICAgICAgICAgICAgICAgbWF4SGVtaUxpZ2h0cysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVycy5tYXhQb2ludExpZ2h0cyA9IG1heFBvaW50TGlnaHRzO1xuICAgICAgICBwYXJhbWV0ZXJzLm1heERpcmVjdGlvbmFsTGlnaHRzID0gbWF4RGlyZWN0aW9uYWxMaWdodHM7XG4gICAgICAgIHBhcmFtZXRlcnMubWF4U3BvdExpZ2h0cyA9IG1heFNwb3RMaWdodHM7XG4gICAgICAgIHBhcmFtZXRlcnMubWF4SGVtaUxpZ2h0cyA9IG1heEhlbWlMaWdodHM7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhbGxvY2F0ZVNoYWRvd3MobGlnaHRzLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHZhciBtYXhTaGFkb3dzID0gMCxcbiAgICAgICAgICAgIGxpZ2h0LCB0eXBlLFxuICAgICAgICAgICAgaSA9IGxpZ2h0cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgbGlnaHQgPSBsaWdodHNbaV07XG4gICAgICAgICAgICBpZiAoIWxpZ2h0LnZpc2libGUgfHwgIWxpZ2h0LmNhc3RTaGFkb3cpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdHlwZSA9IGxpZ2h0LnR5cGU7XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSBMaWdodFR5cGUuRGlyZWN0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICBtYXhTaGFkb3dzKys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IExpZ2h0VHlwZS5TcG90KSB7XG4gICAgICAgICAgICAgICAgbWF4U2hhZG93cysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVycy5tYXhTaGFkb3dzID0gbWF4U2hhZG93cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaGFkZXJQcm9ncmFtKHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgdmFyIGNodW5rcyA9IFtdLFxuICAgICAgICAgICAga2V5LCBwcm9ncmFtLCBjb2RlLCBrZXk7XG5cbiAgICAgICAgY2h1bmtzLnB1c2godmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGZvciAoa2V5IGluIHBhcmFtZXRlcnMpIGNodW5rcy5wdXNoKGtleSwgcGFyYW1ldGVyc1trZXldKTtcblxuICAgICAgICBjb2RlID0gY2h1bmtzLmpvaW4oKTtcblxuICAgICAgICBmb3IgKGtleSBpbiBfc2hhZGVycykge1xuICAgICAgICAgICAgcHJvZ3JhbSA9IF9zaGFkZXJzW2tleV07XG5cbiAgICAgICAgICAgIGlmIChwcm9ncmFtLmNvZGUgPT09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLnVzZWQrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvZ3JhbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb2dyYW0gPSBuZXcgU2hhZGVyKHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMsIGNvZGUpLmJ1aWxkU2hhZGVyKCk7XG4gICAgICAgIHJldHVybiBwcm9ncmFtO1xuICAgIH1cblxuXG4gICAgdmFyIEhFQURFUiA9IC8oW1xcc1xcU10qKT8odm9pZFtcXHNdK21haW4pLyxcbiAgICAgICAgTUFJTl9GVU5DVElPTiA9IC92b2lkW1xcc10rbWFpbihbXFxzXSspPyhcXCgodm9pZCk/XFwpKShbXFxzXSspP3soW159XSopfS8sXG4gICAgICAgIE1BSU5fU1BMSVRFUiA9IC92b2lkW1xcc10rbWFpbihbXFxzXSspPyhcXCgodm9pZCk/XFwpKShbXFxzXSspP3svO1xuXG4gICAgZnVuY3Rpb24gU2hhZGVyKHZlcnRleCwgZnJhZ21lbnQsIHBhcmFtZXRlcnMsIGNvZGUpIHtcblxuICAgICAgICB0aGlzLnZlcnRleCA9IHZlcnRleDtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50O1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLnVzZWQgPSAwO1xuXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jdXN0b21BdHRyaWJ1dGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jdXN0b21Vbmlmb3JtcyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBTaGFkZXIucHJvdG90eXBlLm1hcmtBc1VzZWQgPSBmdW5jdGlvbiAobWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy51c2VkICs9IDE7XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsKSB7XG4gICAgICAgICAgICB2YXIgdW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtcyxcbiAgICAgICAgICAgICAgICB1bmlmb3JtLCBrZXk7XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIHVuaWZvcm1zKSB7XG4gICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuaWZvcm1zW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodW5pZm9ybSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybS5fd2ViZ2xVc2VkICs9IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1bmlmb3JtIGluc3RhbmNlb2YgVGV4dHVyZUN1YmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybS5fd2ViZ2xVc2VkICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgU2hhZGVyLnByb3RvdHlwZS5iaW5kTWF0ZXJpYWwgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBvYmosIG1hdGVyaWFsLCB0cmFuc2Zvcm0sIGNhbWVyYSwgbGlnaHRzLCBhbWJpZW50KSB7XG4gICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtLFxuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycyxcbiAgICAgICAgICAgIHVuaWZvcm1zID0gdGhpcy51bmlmb3JtcyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBmb3JjZSA9IHNldFByb2dyYW0ocHJvZ3JhbSksXG4gICAgICAgICAgICBzcHJpdGUgPSBwYXJhbWV0ZXJzLnNwcml0ZSxcbiAgICAgICAgICAgIHRleHR1cmUsIHcsIGgsIGksIGxlbmd0aCwgcGFydGljbGVTaXplUmF0aW8sIGJvbmUsIGJvbmVUcmFuc2Zvcm0sIGJvbmVzLCB1Qm9uZXNQb3MsIHVCb25lc1NjbCwgdUJvbmVzUm90O1xuXG4gICAgICAgIGlmIChzcHJpdGUpIHtcbiAgICAgICAgICAgIGlmIChfbGFzdEJ1ZmZlcnMgIT09IF9zcHJpdGVCdWZmZXJzKSB7XG4gICAgICAgICAgICAgICAgZGlzYWJsZUF0dHJpYnV0ZXMoKTtcblxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24uc2V0KF9zcHJpdGVCdWZmZXJzLl93ZWJnbFZlcnRleEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy51di5zZXQoX3Nwcml0ZUJ1ZmZlcnMuX3dlYmdsVXZCdWZmZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubm9ybWFsKSBhdHRyaWJ1dGVzLm5vcm1hbC5zZXQoX3Nwcml0ZUJ1ZmZlcnMuX3dlYmdsTm9ybWFsQnVmZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcy50YW5nZW50KSBhdHRyaWJ1dGVzLnRhbmdlbnQuc2V0KF9zcHJpdGVCdWZmZXJzLl93ZWJnbFRhbmdlbnRCdWZmZXIpO1xuXG4gICAgICAgICAgICAgICAgX2xhc3RCdWZmZXJzID0gX3Nwcml0ZUJ1ZmZlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX2xhc3RCdWZmZXJzICE9PSBvYmopIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlQXR0cmlidXRlcygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9iai5fd2ViZ2xWZXJ0ZXhCdWZmZXIgJiYgYXR0cmlidXRlcy5wb3NpdGlvbikgYXR0cmlidXRlcy5wb3NpdGlvbi5zZXQob2JqLl93ZWJnbFZlcnRleEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5fd2ViZ2xOb3JtYWxCdWZmZXIgJiYgYXR0cmlidXRlcy5ub3JtYWwpIGF0dHJpYnV0ZXMubm9ybWFsLnNldChvYmouX3dlYmdsTm9ybWFsQnVmZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqLl93ZWJnbFRhbmdlbnRCdWZmZXIgJiYgYXR0cmlidXRlcy50YW5nZW50KSBhdHRyaWJ1dGVzLnRhbmdlbnQuc2V0KG9iai5fd2ViZ2xUYW5nZW50QnVmZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqLl93ZWJnbENvbG9yQnVmZmVyICYmIGF0dHJpYnV0ZXMuY29sb3IpIGF0dHJpYnV0ZXMuY29sb3Iuc2V0KG9iai5fd2ViZ2xDb2xvckJ1ZmZlcik7XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqLl93ZWJnbFV2QnVmZmVyICYmIGF0dHJpYnV0ZXMudXYpIGF0dHJpYnV0ZXMudXYuc2V0KG9iai5fd2ViZ2xVdkJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5fd2ViZ2xVdjJCdWZmZXIgJiYgYXR0cmlidXRlcy51djIpIGF0dHJpYnV0ZXMudXYyLnNldChvYmouX3dlYmdsVXYyQnVmZmVyKTtcblxuICAgICAgICAgICAgICAgIGlmIChvYmouX3dlYmdsQm9uZUluZGV4QnVmZmVyICYmIGF0dHJpYnV0ZXMuYm9uZUluZGV4KSBhdHRyaWJ1dGVzLmJvbmVJbmRleC5zZXQob2JqLl93ZWJnbEJvbmVJbmRleEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5fd2ViZ2xCb25lV2VpZ2h0QnVmZmVyICYmIGF0dHJpYnV0ZXMuYm9uZVdlaWdodCkgYXR0cmlidXRlcy5ib25lV2VpZ2h0LnNldChvYmouX3dlYmdsQm9uZVdlaWdodEJ1ZmZlcik7XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqLl93ZWJnbFBhcnRpY2xlQnVmZmVyICYmIGF0dHJpYnV0ZXMuZGF0YSkgYXR0cmlidXRlcy5kYXRhLnNldChvYmouX3dlYmdsUGFydGljbGVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIGlmIChvYmouX3dlYmdsUGFydGljbGVDb2xvckJ1ZmZlciAmJiBhdHRyaWJ1dGVzLnBhcnRpY2xlQ29sb3IpIGF0dHJpYnV0ZXMucGFydGljbGVDb2xvci5zZXQob2JqLl93ZWJnbFBhcnRpY2xlQ29sb3JCdWZmZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLndpcmVmcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLl93ZWJnbExpbmVCdWZmZXIpIF9nbC5iaW5kQnVmZmVyKF9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgb2JqLl93ZWJnbExpbmVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouX3dlYmdsSW5kZXhCdWZmZXIpIF9nbC5iaW5kQnVmZmVyKF9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgb2JqLl93ZWJnbEluZGV4QnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfbGFzdEJ1ZmZlcnMgPSBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3ByaXRlKSB7XG4gICAgICAgICAgICB0ZXh0dXJlID0gbWF0ZXJpYWwudW5pZm9ybXMuZGlmZnVzZU1hcDtcbiAgICAgICAgICAgIGlmICghdGV4dHVyZSkgdGhyb3cgXCJTaGFkZXIuYmluZDogU3ByaXRlIG1hdGVyaWFsIGFuZCBzaGFkZXIgcmVxdWlyZXMgZGlmZnVzZU1hcFwiO1xuXG4gICAgICAgICAgICB3ID0gdGV4dHVyZS5pbnZXaWR0aDtcbiAgICAgICAgICAgIGggPSB0ZXh0dXJlLmludkhlaWdodDtcblxuICAgICAgICAgICAgdW5pZm9ybXMuc2l6ZS5zZXQoX3ZlY3RvcjIuc2V0KG9iai53aWR0aCwgb2JqLmhlaWdodCksIGZvcmNlKTtcbiAgICAgICAgICAgIHVuaWZvcm1zLmNyb3Auc2V0KF92ZWN0b3I0LnNldChvYmoueCAqIHcsIG9iai55ICogaCwgb2JqLncgKiB3LCBvYmouaCAqIGgpLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1ldGVycy5lbWl0dGVyICYmIHBhcmFtZXRlcnMud29ybGRTcGFjZSkge1xuICAgICAgICAgICAgaWYgKHVuaWZvcm1zLm1vZGVsTWF0cml4KSB1bmlmb3Jtcy5tb2RlbE1hdHJpeC5zZXQoX21hdDQuaWRlbnRpdHkoKSwgZm9yY2UpO1xuICAgICAgICAgICAgaWYgKHVuaWZvcm1zLm1vZGVsVmlld01hdHJpeCkgdW5pZm9ybXMubW9kZWxWaWV3TWF0cml4LnNldChjYW1lcmEudmlldywgZm9yY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHVuaWZvcm1zLm1vZGVsTWF0cml4KSB1bmlmb3Jtcy5tb2RlbE1hdHJpeC5zZXQodHJhbnNmb3JtLm1hdHJpeFdvcmxkLCBmb3JjZSk7XG4gICAgICAgICAgICBpZiAodW5pZm9ybXMubW9kZWxWaWV3TWF0cml4KSB1bmlmb3Jtcy5tb2RlbFZpZXdNYXRyaXguc2V0KHRyYW5zZm9ybS5tb2RlbFZpZXcsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodW5pZm9ybXMucGFydGljbGVTaXplUmF0aW8pIHtcbiAgICAgICAgICAgIHBhcnRpY2xlU2l6ZVJhdGlvID0gKF9jdXJyZW50V2lkdGggPCBfY3VycmVudEhlaWdodCA/IF9jdXJyZW50V2lkdGggOiBfY3VycmVudEhlaWdodCk7XG5cbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmVtaXR0ZXIyZCB8fCBjYW1lcmEuY2FtZXJhMmQgfHwgY2FtZXJhLm9ydGhvZ3JhcGhpYykge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlU2l6ZVJhdGlvICo9IDEuMCAvIChjYW1lcmEub3J0aG9ncmFwaGljU2l6ZSAqIDIuMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlU2l6ZVJhdGlvICo9IDIuMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdW5pZm9ybXMucGFydGljbGVTaXplUmF0aW8uc2V0KHBhcnRpY2xlU2l6ZVJhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4KSB1bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4LnNldChjYW1lcmEucHJvamVjdGlvbiwgZm9yY2UpO1xuICAgICAgICBpZiAodW5pZm9ybXMudmlld01hdHJpeCkgdW5pZm9ybXMudmlld01hdHJpeC5zZXQoY2FtZXJhLnZpZXcsIGZvcmNlKTtcbiAgICAgICAgaWYgKHVuaWZvcm1zLm5vcm1hbE1hdHJpeCkgdW5pZm9ybXMubm9ybWFsTWF0cml4LnNldCh0cmFuc2Zvcm0ubm9ybWFsTWF0cml4LCBmb3JjZSk7XG4gICAgICAgIGlmICh1bmlmb3Jtcy5jYW1lcmFQb3NpdGlvbikgdW5pZm9ybXMuY2FtZXJhUG9zaXRpb24uc2V0KF92ZWN0b3IzLnBvc2l0aW9uRnJvbU1hdDQoKGNhbWVyYS50cmFuc2Zvcm0gfHwgY2FtZXJhLnRyYW5zZm9ybTJkKS5tYXRyaXhXb3JsZCksIGZvcmNlKTtcbiAgICAgICAgaWYgKHVuaWZvcm1zLmFtYmllbnQpIHVuaWZvcm1zLmFtYmllbnQuc2V0KGFtYmllbnQsIGZvcmNlKTtcblxuICAgICAgICBpZiAocGFyYW1ldGVycy51c2VCb25lcykge1xuICAgICAgICAgICAgdUJvbmVzUG9zID0gdW5pZm9ybXMuYm9uZXNQb3M7XG4gICAgICAgICAgICB1Qm9uZXNTY2wgPSB1bmlmb3Jtcy5ib25lc1NjbDtcbiAgICAgICAgICAgIHVCb25lc1JvdCA9IHVuaWZvcm1zLmJvbmVzUm90O1xuICAgICAgICAgICAgYm9uZXMgPSBjb21wb25lbnQuX2JvbmVzO1xuICAgICAgICAgICAgaSA9IGJvbmVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBib25lID0gYm9uZXNbaV07XG4gICAgICAgICAgICAgICAgYm9uZVRyYW5zZm9ybSA9IGJvbmUudHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIF9tYXQ0Lm1tdWwoYm9uZS51bmlmb3JtLCBib25lLmJpbmRQb3NlKS5kZWNvbXBvc2UoX3ZlY3RvcjMsIF92ZWN0b3IzXzIsIF9xdWF0KTtcblxuICAgICAgICAgICAgICAgIHVCb25lc1Bvc1tpXS5zZXQoX3ZlY3RvcjMpO1xuICAgICAgICAgICAgICAgIHVCb25lc1NjbFtpXS5zZXQoX3ZlY3RvcjNfMik7XG4gICAgICAgICAgICAgICAgdUJvbmVzUm90W2ldLnNldChfcXVhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9yY2UgJiYgcGFyYW1ldGVycy51c2VMaWdodHMgJiYgKGxlbmd0aCA9IGxpZ2h0cy5sZW5ndGgpKSB7XG4gICAgICAgICAgICB2YXIgbWF4UG9pbnRMaWdodHMgPSBwYXJhbWV0ZXJzLm1heFBvaW50TGlnaHRzLFxuICAgICAgICAgICAgICAgIG1heERpcmVjdGlvbmFsTGlnaHRzID0gcGFyYW1ldGVycy5tYXhEaXJlY3Rpb25hbExpZ2h0cyxcbiAgICAgICAgICAgICAgICBtYXhTcG90TGlnaHRzID0gcGFyYW1ldGVycy5tYXhTcG90TGlnaHRzLFxuICAgICAgICAgICAgICAgIG1heEhlbWlMaWdodHMgPSBwYXJhbWV0ZXJzLm1heEhlbWlMaWdodHMsXG5cbiAgICAgICAgICAgICAgICBwb2ludExpZ2h0cyA9IDAsXG4gICAgICAgICAgICAgICAgcG9pbnRMaWdodENvbG9yID0gdW5pZm9ybXMucG9pbnRMaWdodENvbG9yLFxuICAgICAgICAgICAgICAgIHBvaW50TGlnaHRQb3NpdGlvbiA9IHVuaWZvcm1zLnBvaW50TGlnaHRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICBwb2ludExpZ2h0RGlzdGFuY2UgPSB1bmlmb3Jtcy5wb2ludExpZ2h0RGlzdGFuY2UsXG5cbiAgICAgICAgICAgICAgICBkaXJlY3Rpb25hbExpZ2h0cyA9IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodENvbG9yID0gdW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodENvbG9yLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb24gPSB1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uLFxuXG4gICAgICAgICAgICAgICAgc3BvdExpZ2h0cyA9IDAsXG4gICAgICAgICAgICAgICAgc3BvdExpZ2h0Q29sb3IgPSB1bmlmb3Jtcy5zcG90TGlnaHRDb2xvcixcbiAgICAgICAgICAgICAgICBzcG90TGlnaHRQb3NpdGlvbiA9IHVuaWZvcm1zLnNwb3RMaWdodFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHNwb3RMaWdodERpcmVjdGlvbiA9IHVuaWZvcm1zLnNwb3RMaWdodERpcmVjdGlvbixcbiAgICAgICAgICAgICAgICBzcG90TGlnaHREaXN0YW5jZSA9IHVuaWZvcm1zLnNwb3RMaWdodERpc3RhbmNlLFxuICAgICAgICAgICAgICAgIHNwb3RMaWdodEFuZ2xlQ29zID0gdW5pZm9ybXMuc3BvdExpZ2h0QW5nbGVDb3MsXG4gICAgICAgICAgICAgICAgc3BvdExpZ2h0RXhwb25lbnQgPSB1bmlmb3Jtcy5zcG90TGlnaHRFeHBvbmVudCxcblxuICAgICAgICAgICAgICAgIGhlbWlMaWdodHMgPSAwLFxuICAgICAgICAgICAgICAgIGhlbWlMaWdodENvbG9yID0gdW5pZm9ybXMuaGVtaUxpZ2h0Q29sb3IsXG4gICAgICAgICAgICAgICAgaGVtaUxpZ2h0RGlyZWN0aW9uID0gdW5pZm9ybXMuaGVtaUxpZ2h0RGlyZWN0aW9uLFxuXG4gICAgICAgICAgICAgICAgbGlnaHQsIHR5cGU7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxpZ2h0ID0gbGlnaHRzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghbGlnaHQudmlzaWJsZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gbGlnaHQudHlwZTtcbiAgICAgICAgICAgICAgICBfY29sb3IuY29weShsaWdodC5jb2xvcikuc211bChsaWdodC5lbmVyZ3kpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50TGlnaHRDb2xvci5sZW5ndGggJiYgdHlwZSA9PT0gTGlnaHRUeXBlLlBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludExpZ2h0cyA+PSBtYXhQb2ludExpZ2h0cykgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgX3ZlY3RvcjMucG9zaXRpb25Gcm9tTWF0NCgobGlnaHQudHJhbnNmb3JtIHx8IGxpZ2h0LnRyYW5zZm9ybTJkKS5tYXRyaXhXb3JsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcG9pbnRMaWdodENvbG9yW3BvaW50TGlnaHRzXS5zZXQoX2NvbG9yLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50TGlnaHRQb3NpdGlvbltwb2ludExpZ2h0c10uc2V0KF92ZWN0b3IzLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50TGlnaHREaXN0YW5jZVtwb2ludExpZ2h0c10uc2V0KGxpZ2h0LmRpc3RhbmNlLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50TGlnaHRzKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb25hbExpZ2h0Q29sb3IubGVuZ3RoICYmIHR5cGUgPT09IExpZ2h0VHlwZS5EaXJlY3Rpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uYWxMaWdodHMgPj0gbWF4RGlyZWN0aW9uYWxMaWdodHMpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIF92ZWN0b3IzLnBvc2l0aW9uRnJvbU1hdDQoKGxpZ2h0LnRyYW5zZm9ybSB8fCBsaWdodC50cmFuc2Zvcm0yZCkubWF0cml4V29ybGQpLnN1YihsaWdodC50YXJnZXQpLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3ZlY3RvcjMubGVuZ3RoU3EoKSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodENvbG9yW2RpcmVjdGlvbmFsTGlnaHRzXS5zZXQoX2NvbG9yLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bZGlyZWN0aW9uYWxMaWdodHNdLnNldChfdmVjdG9yMywgZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25hbExpZ2h0cysrO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcG90TGlnaHRDb2xvci5sZW5ndGggJiYgdHlwZSA9PT0gTGlnaHRUeXBlLlNwb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwb3RMaWdodHMgPj0gbWF4U3BvdExpZ2h0cykgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgX3ZlY3RvcjMucG9zaXRpb25Gcm9tTWF0NCgobGlnaHQudHJhbnNmb3JtIHx8IGxpZ2h0LnRyYW5zZm9ybTJkKS5tYXRyaXhXb3JsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdmVjdG9yMy5sZW5ndGhTcSgpID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBfdmVjdG9yM18yLmNvcHkoX3ZlY3RvcjMpLnN1YihsaWdodC50YXJnZXQpLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3ZlY3RvcjNfMi5sZW5ndGhTcSgpID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBzcG90TGlnaHRDb2xvcltzcG90TGlnaHRzXS5zZXQoX2NvbG9yLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIHNwb3RMaWdodFBvc2l0aW9uW3Nwb3RMaWdodHNdLnNldChfdmVjdG9yMywgZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICBzcG90TGlnaHREaXJlY3Rpb25bc3BvdExpZ2h0c10uc2V0KF92ZWN0b3IzXzIsIGZvcmNlKTtcbiAgICAgICAgICAgICAgICAgICAgc3BvdExpZ2h0RGlzdGFuY2Vbc3BvdExpZ2h0c10uc2V0KGxpZ2h0LmRpc3RhbmNlLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIHNwb3RMaWdodEFuZ2xlQ29zW3Nwb3RMaWdodHNdLnNldChsaWdodC5fYW5nbGVDb3MsIGZvcmNlKTtcbiAgICAgICAgICAgICAgICAgICAgc3BvdExpZ2h0RXhwb25lbnRbc3BvdExpZ2h0c10uc2V0KGxpZ2h0LmV4cG9uZW50LCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIHNwb3RMaWdodHMrKztcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVtaUxpZ2h0Q29sb3IubGVuZ3RoICYmIHR5cGUgPT09IExpZ2h0VHlwZS5IZW1pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoZW1pTGlnaHRzID49IG1heEhlbWlMaWdodHMpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIF92ZWN0b3IzLnBvc2l0aW9uRnJvbU1hdDQoKGxpZ2h0LnRyYW5zZm9ybSB8fCBsaWdodC50cmFuc2Zvcm0yZCkubWF0cml4V29ybGQpLnN1YihsaWdodC50YXJnZXQpLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3ZlY3RvcjMubGVuZ3RoU3EoKSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaGVtaUxpZ2h0Q29sb3JbaGVtaUxpZ2h0c10uc2V0KF9jb2xvciwgZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICBoZW1pTGlnaHREaXJlY3Rpb25baGVtaUxpZ2h0c10uc2V0KF92ZWN0b3IzLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgIGhlbWlMaWdodHMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBiaW5kQ3VzdG9tVW5pZm9ybXModGhpcy5fY3VzdG9tVW5pZm9ybXMsIHVuaWZvcm1zLCBtYXRlcmlhbC5uYW1lLCBtYXRlcmlhbC51bmlmb3JtcywgZm9yY2UpO1xuICAgICAgICBfdGV4dHVyZUluZGV4ID0gMDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYmluZEN1c3RvbVVuaWZvcm1zKGN1c3RvbVVuaWZvcm1zLCB1bmlmb3JtcywgbWF0ZXJpYWxOYW1lLCBtYXRlcmlhbFVuaWZvcm1zLCBmb3JjZSkge1xuICAgICAgICB2YXIgaSA9IGN1c3RvbVVuaWZvcm1zLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbVVuaWZvcm0sIHVuaWZvcm1WYWx1ZSwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgajtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBjdXN0b21Vbmlmb3JtID0gY3VzdG9tVW5pZm9ybXNbaV07XG4gICAgICAgICAgICBuYW1lID0gY3VzdG9tVW5pZm9ybTtcblxuICAgICAgICAgICAgdW5pZm9ybVZhbHVlID0gdW5pZm9ybXNbbmFtZV07XG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGVyaWFsVW5pZm9ybXNbbmFtZV07XG5cbiAgICAgICAgICAgIGlmICghdW5pZm9ybVZhbHVlKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHRocm93IFwiV2ViR0xSZW5kZXJlciBiaW5kU2hhZGVyOiBtYXRlcmlhbCBcIiArIG1hdGVyaWFsTmFtZSArIFwiIHdhcyBub3QgZ2l2ZW4gYSB1bmlmb3JtIG5hbWVkIFwiICsgbmFtZTtcblxuICAgICAgICAgICAgaWYgKChsZW5ndGggPSB1bmlmb3JtVmFsdWUubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIGogPSBsZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGotLSkgdW5pZm9ybVZhbHVlLnNldCh2YWx1ZVtqXSwgZm9yY2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bmlmb3JtVmFsdWUuc2V0KHZhbHVlLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTaGFkZXIucHJvdG90eXBlLmJ1aWxkU2hhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycyxcbiAgICAgICAgICAgIHZlcnRleFNoYWRlciA9IHRoaXMudmVydGV4LFxuICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmZyYWdtZW50LFxuICAgICAgICAgICAgc3ByaXRlID0gcGFyYW1ldGVycy5zcHJpdGUsXG4gICAgICAgICAgICBlbWl0dGVyID0gcGFyYW1ldGVycy5lbWl0dGVyLFxuICAgICAgICAgICAgdXNlTGlnaHRzID0gcGFyYW1ldGVycy51c2VMaWdodHMsXG4gICAgICAgICAgICB1c2VTaGFkb3dzID0gcGFyYW1ldGVycy51c2VTaGFkb3dzLFxuICAgICAgICAgICAgdXNlRm9nID0gcGFyYW1ldGVycy51c2VGb2csXG4gICAgICAgICAgICB1c2VCb25lcyA9IHBhcmFtZXRlcnMudXNlQm9uZXMsXG4gICAgICAgICAgICB1c2VWZXJ0ZXhMaXQgPSBwYXJhbWV0ZXJzLnVzZVZlcnRleExpdCxcbiAgICAgICAgICAgIHVzZVNwZWN1bGFyID0gcGFyYW1ldGVycy51c2VTcGVjdWxhcixcbiAgICAgICAgICAgIE9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA9IHBhcmFtZXRlcnMuT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzLFxuXG4gICAgICAgICAgICBkZWZpbmVzUHJlZml4ID0gW1xuICAgICAgICAgICAgICAgIFwicHJlY2lzaW9uIFwiICsgX3ByZWNpc2lvbiArIFwiIGZsb2F0O1wiLFxuICAgICAgICAgICAgICAgIFwicHJlY2lzaW9uIFwiICsgX3ByZWNpc2lvbiArIFwiIGludDtcIixcblxuICAgICAgICAgICAgICAgIHVzZUZvZyA/IFwiI2RlZmluZSBVU0VfRk9HXCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHVzZUxpZ2h0cyA/IFwiI2RlZmluZSBVU0VfTElHSFRTXCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHVzZVNoYWRvd3MgPyBcIiNkZWZpbmUgVVNFX1NIQURPV1NcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgdXNlQm9uZXMgPyBcIiNkZWZpbmUgVVNFX1NLSU5OSU5HXCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHNwcml0ZSA/IFwiI2RlZmluZSBJU19TUFJJVEVcIiA6IFwiXCIsXG5cbiAgICAgICAgICAgICAgICB1c2VMaWdodHMgPyBcIiNkZWZpbmUgTUFYX0RJUl9MSUdIVFMgXCIgKyBwYXJhbWV0ZXJzLm1heERpcmVjdGlvbmFsTGlnaHRzIDogXCJcIixcbiAgICAgICAgICAgICAgICB1c2VMaWdodHMgPyBcIiNkZWZpbmUgTUFYX1BPSU5UX0xJR0hUUyBcIiArIHBhcmFtZXRlcnMubWF4UG9pbnRMaWdodHMgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHVzZUxpZ2h0cyA/IFwiI2RlZmluZSBNQVhfU1BPVF9MSUdIVFMgXCIgKyBwYXJhbWV0ZXJzLm1heFNwb3RMaWdodHMgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHVzZUxpZ2h0cyA/IFwiI2RlZmluZSBNQVhfSEVNSV9MSUdIVFMgXCIgKyBwYXJhbWV0ZXJzLm1heEhlbWlMaWdodHMgOiBcIlwiLFxuXG4gICAgICAgICAgICAgICAgdXNlU2hhZG93cyA/IFwiI2RlZmluZSBNQVhfU0hBRE9XUyBcIiArIHBhcmFtZXRlcnMubWF4U2hhZG93cyA6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgICAgICAgICB2ZXJ0ZXhQcmVmaXggPSBbXG4gICAgICAgICAgICAgICAgZGVmaW5lc1ByZWZpeCxcblxuICAgICAgICAgICAgICAgIFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1wiLFxuICAgICAgICAgICAgICAgIFwidW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcIixcbiAgICAgICAgICAgICAgICBcInVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1wiLFxuICAgICAgICAgICAgICAgIFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIsXG4gICAgICAgICAgICAgICAgXCJ1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4O1wiLFxuICAgICAgICAgICAgICAgIFwidW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO1wiLFxuXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5wb3NpdGlvbnMgPyBcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1wiIDogXCJcIixcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLm5vcm1hbHMgPyBcImF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy50YW5nZW50cyA/IFwiYXR0cmlidXRlIHZlYzQgdGFuZ2VudDtcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy51dnMgPyBcImF0dHJpYnV0ZSB2ZWMyIHV2O1wiIDogXCJcIixcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmNvbG9ycyA/IFwiYXR0cmlidXRlIHZlYzMgY29sb3I7XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgIGVtaXR0ZXIgPyBcImF0dHJpYnV0ZSB2ZWMzIGRhdGE7XCIgOiBcIlwiLFxuXG4gICAgICAgICAgICAgICAgdXNlQm9uZXMgPyBcImF0dHJpYnV0ZSB2ZWMzIGJvbmVJbmRleDtcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgdXNlQm9uZXMgPyBcImF0dHJpYnV0ZSB2ZWMzIGJvbmVXZWlnaHQ7XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHVzZUJvbmVzID8gXCJ1bmlmb3JtIHZlYzQgYm9uZXNSb3RbXCIgKyBwYXJhbWV0ZXJzLmJvbmVzICsgXCJdO1wiIDogXCJcIixcbiAgICAgICAgICAgICAgICB1c2VCb25lcyA/IFwidW5pZm9ybSB2ZWMzIGJvbmVzU2NsW1wiICsgcGFyYW1ldGVycy5ib25lcyArIFwiXTtcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgdXNlQm9uZXMgPyBcInVuaWZvcm0gdmVjMyBib25lc1Bvc1tcIiArIHBhcmFtZXRlcnMuYm9uZXMgKyBcIl07XCIgOiBcIlwiXG4gICAgICAgICAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICAgICAgICAgIGZyYWdtZW50UHJlZml4ID0gW1xuICAgICAgICAgICAgICAgIE9FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA/IFwiI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGVcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5lc1ByZWZpeCxcblxuICAgICAgICAgICAgICAgIFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIsXG4gICAgICAgICAgICAgICAgXCJ1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XCJcbiAgICAgICAgICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgICAgICAgICAgZ2xWZXJ0ZXhTaGFkZXIgPSB2ZXJ0ZXhQcmVmaXggKyBcIlxcblwiICsgdmVydGV4U2hhZGVyLFxuICAgICAgICAgICAgZ2xGcmFnbWVudFNoYWRlciA9IGZyYWdtZW50UHJlZml4ICsgXCJcXG5cIiArIGZyYWdtZW50U2hhZGVyLFxuXG4gICAgICAgICAgICBtYWluID0gXCJ2b2lkIG1haW4odm9pZCkge1xcblwiLFxuICAgICAgICAgICAgZm9vdGVyID0gXCJcXG59XCIsXG5cbiAgICAgICAgICAgIHZlcnRleEhlYWRlciA9IGdsVmVydGV4U2hhZGVyLm1hdGNoKEhFQURFUilbMV0sXG4gICAgICAgICAgICB2ZXJ0ZXhNYWluID0gZ2xWZXJ0ZXhTaGFkZXIubWF0Y2goTUFJTl9GVU5DVElPTilbNV0sXG4gICAgICAgICAgICBmcmFnbWVudEhlYWRlciA9IGdsRnJhZ21lbnRTaGFkZXIubWF0Y2goSEVBREVSKVsxXSxcbiAgICAgICAgICAgIGZyYWdtZW50TWFpbiA9IGdsRnJhZ21lbnRTaGFkZXIubWF0Y2goTUFJTl9GVU5DVElPTilbNV07XG5cbiAgICAgICAgaWYgKHNwcml0ZSkge1xuICAgICAgICAgICAgdmVydGV4SGVhZGVyICs9IFNoYWRlckNodW5rcy5zcHJpdGVfaGVhZGVyO1xuICAgICAgICAgICAgdmVydGV4TWFpbiArPSBTaGFkZXJDaHVua3Muc3ByaXRlX3ZlcnRleF9hZnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbWl0dGVyKSB7XG4gICAgICAgICAgICB2ZXJ0ZXhIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2hlYWRlcl92ZXJ0ZXggKyBTaGFkZXJDaHVua3MucGFydGljbGVfaGVhZGVyO1xuICAgICAgICAgICAgZnJhZ21lbnRIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2hlYWRlcjtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmVtaXR0ZXIyZCkge1xuICAgICAgICAgICAgICAgIHZlcnRleE1haW4gPSBTaGFkZXJDaHVua3MucGFydGljbGVfdmVydGV4X3NpemVfMmQgKyB2ZXJ0ZXhNYWluO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhNYWluID0gU2hhZGVyQ2h1bmtzLnBhcnRpY2xlX3ZlcnRleF9zaXplICsgdmVydGV4TWFpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZlcnRleE1haW4gPSBTaGFkZXJDaHVua3MucGFydGljbGVfdmVydGV4ICsgdmVydGV4TWFpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnVzZU5vcm1hbCkgZnJhZ21lbnRIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLnBlcnR1cmJOb3JtYWwyQXJiO1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMudXNlQnVtcCkgZnJhZ21lbnRIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLmRIZHh5X2Z3ZCArIFNoYWRlckNodW5rcy5wZXJ0dXJiTm9ybWFsQXJiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUxpZ2h0cykge1xuICAgICAgICAgICAgaWYgKHVzZVZlcnRleExpdCkge1xuICAgICAgICAgICAgICAgIHZlcnRleEhlYWRlciArPSBTaGFkZXJDaHVua3MubGlnaHRzICsgU2hhZGVyQ2h1bmtzLlZlcnRleExpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLnBlclBpeGVsVmFyeWluZ0hlYWRlcjtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhNYWluID0gU2hhZGVyQ2h1bmtzLnBlclBpeGVsVmFyeWluZ01haW4gKyB2ZXJ0ZXhNYWluO1xuXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLmxpZ2h0cyArIFNoYWRlckNodW5rcy5wZXJQaXhlbFZhcnlpbmdIZWFkZXI7XG4gICAgICAgICAgICAgICAgaWYgKHVzZVNwZWN1bGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50SGVhZGVyICs9IFNoYWRlckNodW5rcy5QaXhlbExpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50SGVhZGVyICs9IFNoYWRlckNodW5rcy5QaXhlbExpZ2h0Tm9TcGVjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVtaXR0ZXIpIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhNYWluID0gU2hhZGVyQ2h1bmtzLm12UG9zaXRpb25fZW1pdHRlciArIHZlcnRleE1haW47XG4gICAgICAgICAgICAgICAgdmVydGV4TWFpbiA9IFNoYWRlckNodW5rcy53b3JsZFBvc2l0aW9uX2VtaXR0ZXIgKyB2ZXJ0ZXhNYWluO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhNYWluID0gKHNwcml0ZSA/IFNoYWRlckNodW5rcy5tdlBvc2l0aW9uX3Nwcml0ZSA6IFNoYWRlckNodW5rcy5tdlBvc2l0aW9uKSArIHZlcnRleE1haW47XG4gICAgICAgICAgICAgICAgdmVydGV4TWFpbiA9IChzcHJpdGUgPyBTaGFkZXJDaHVua3Mud29ybGRQb3NpdGlvbl9zcHJpdGUgOiBTaGFkZXJDaHVua3Mud29ybGRQb3NpdGlvbikgKyB2ZXJ0ZXhNYWluO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubm9ybWFscykgdmVydGV4TWFpbiA9IFNoYWRlckNodW5rcy50cmFuc2Zvcm1lZE5vcm1hbCArIHZlcnRleE1haW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZW1pdHRlcikge1xuICAgICAgICAgICAgICAgIHZlcnRleE1haW4gPSBTaGFkZXJDaHVua3MubXZQb3NpdGlvbl9lbWl0dGVyICsgdmVydGV4TWFpbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmVydGV4TWFpbiA9IChzcHJpdGUgPyBTaGFkZXJDaHVua3MubXZQb3NpdGlvbl9zcHJpdGUgOiBTaGFkZXJDaHVua3MubXZQb3NpdGlvbikgKyB2ZXJ0ZXhNYWluO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUJvbmVzKSB7XG4gICAgICAgICAgICB2ZXJ0ZXhIZWFkZXIgKz0gU2hhZGVyQ2h1bmtzLmNvbXBvc2VNYXQ0O1xuICAgICAgICAgICAgdmVydGV4SGVhZGVyICs9IFNoYWRlckNodW5rcy5nZXRCb25lTWF0cml4O1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubm9ybWFscykgdmVydGV4TWFpbiA9IFNoYWRlckNodW5rcy5ib25lTm9ybWFsICsgdmVydGV4TWFpbjtcbiAgICAgICAgICAgIHZlcnRleE1haW4gPSBTaGFkZXJDaHVua3MuYm9uZSArIHZlcnRleE1haW47XG4gICAgICAgIH1cblxuICAgICAgICBnbFZlcnRleFNoYWRlciA9IHZlcnRleEhlYWRlciArIG1haW4gKyB2ZXJ0ZXhNYWluICsgZm9vdGVyO1xuICAgICAgICBnbEZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRIZWFkZXIgKyBtYWluICsgZnJhZ21lbnRNYWluICsgZm9vdGVyO1xuXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IGNyZWF0ZVByb2dyYW0oX2dsLCBnbFZlcnRleFNoYWRlciwgZ2xGcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgcGFyc2VVbmlmb3Jtc0F0dHJpYnV0ZXNBcnJheXModmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlciwgKHRoaXMuX2N1c3RvbUF0dHJpYnV0ZXMgPSBbXSksICh0aGlzLl9jdXN0b21Vbmlmb3JtcyA9IFtdKSk7XG4gICAgICAgIHBhcnNlVW5pZm9ybXNBdHRyaWJ1dGVzKHRoaXMucHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIsIGdsRnJhZ21lbnRTaGFkZXIsICh0aGlzLmF0dHJpYnV0ZXMgPSB7fSksICh0aGlzLnVuaWZvcm1zID0ge30pKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cbiAgICB2YXIgdXNlRGVwdGggPSAhb3B0cy5kaXNhYmxlRGVwdGgsXG5cbiAgICAgICAgX3RoaXMgPSB0aGlzLFxuXG4gICAgICAgIF9nbCA9IHVuZGVmaW5lZCxcbiAgICAgICAgX2NhbnZhcyA9IHVuZGVmaW5lZCxcbiAgICAgICAgX2VsZW1lbnQgPSB1bmRlZmluZWQsXG4gICAgICAgIF9jb250ZXh0ID0gZmFsc2UsXG5cbiAgICAgICAgX2V4dGVuc2lvbnMgPSB1bmRlZmluZWQsXG5cbiAgICAgICAgX3ByZWNpc2lvbiA9IFwiaGlnaHBcIixcbiAgICAgICAgX21heEFuaXNvdHJvcHkgPSAwLFxuICAgICAgICBfbWF4VGV4dHVyZXMgPSAwLFxuICAgICAgICBfbWF4VmVydGV4VGV4dHVyZXMgPSAwLFxuICAgICAgICBfbWF4VGV4dHVyZVNpemUgPSAwLFxuICAgICAgICBfbWF4Q3ViZVRleHR1cmVTaXplID0gMCxcbiAgICAgICAgX21heFJlbmRlckJ1ZmZlclNpemUgPSAwLFxuXG4gICAgICAgIF9tYXhVbmlmb3JtcyA9IDAsXG4gICAgICAgIF9tYXhWYXJ5aW5ncyA9IDAsXG4gICAgICAgIF9tYXhBdHRyaWJ1dGVzID0gMCxcblxuICAgICAgICBfdmlld3BvcnRYID0gMCxcbiAgICAgICAgX3ZpZXdwb3J0WSA9IDAsXG4gICAgICAgIF92aWV3cG9ydFdpZHRoID0gMSxcbiAgICAgICAgX3ZpZXdwb3J0SGVpZ2h0ID0gMSxcblxuICAgICAgICBfY3VycmVudFdpZHRoID0gMSxcbiAgICAgICAgX2N1cnJlbnRIZWlnaHQgPSAxLFxuXG4gICAgICAgIF90ZXh0dXJlSW5kZXggPSAwLFxuXG4gICAgICAgIF9sYXN0Q2xlYXJDb2xvciA9IG5ldyBDb2xvcixcbiAgICAgICAgX2xhc3RDbGVhckFscGhhID0gMSxcbiAgICAgICAgX2xhc3RCbGVuZGluZyA9IC0xLFxuICAgICAgICBfbGFzdEN1bGxGYWNlID0gLTEsXG4gICAgICAgIF9jdWxsRmFjZURpc2FibGVkID0gdHJ1ZSxcbiAgICAgICAgX2xhc3REZXB0aFRlc3QgPSAtMSxcbiAgICAgICAgX2xhc3REZXB0aFdyaXRlID0gLTEsXG4gICAgICAgIF9sYXN0TGluZVdpZHRoID0gLTEsXG5cbiAgICAgICAgX2N1cnJlbnRGcmFtZWJ1ZmZlciA9IG51bGwsXG5cbiAgICAgICAgX2VuYWJsZWRBdHRyaWJ1dGVzID0gdW5kZWZpbmVkLFxuICAgICAgICBfbGFzdFByb2dyYW0gPSB1bmRlZmluZWQsXG5cbiAgICAgICAgX2F0dHJpYnV0ZXMgPSBtZXJnZShvcHRzLmF0dHJpYnV0ZXMgfHwge30sIHtcbiAgICAgICAgICAgIGFscGhhOiB0cnVlLFxuICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxuICAgICAgICAgICAgZGVwdGg6IHRydWUsXG4gICAgICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGE6IHRydWUsXG4gICAgICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IGZhbHNlLFxuICAgICAgICAgICAgc3RlbmNpbDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgaWYgKF9jYW52YXMpIHRoaXMuY2xlYXIoKTtcblxuICAgICAgICBfY2FudmFzID0gY2FudmFzO1xuICAgICAgICBfZWxlbWVudCA9IGNhbnZhcy5lbGVtZW50O1xuXG4gICAgICAgIF9jYW52YXMyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIF9jdHggPSBfY2FudmFzMmQuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgIGluaXRHTCgpO1xuICAgICAgICBfY29udGV4dCA9IHRydWU7XG4gICAgICAgIHNldERlZmF1bHRHTFN0YXRlKCk7XG5cbiAgICAgICAgYWRkRXZlbnQoX2VsZW1lbnQsIFwid2ViZ2xjb250ZXh0bG9zdFwiLCBoYW5kbGVXZWJHTENvbnRleHRMb3N0LCB0aGlzKTtcbiAgICAgICAgYWRkRXZlbnQoX2VsZW1lbnQsIFwid2ViZ2xjb250ZXh0cmVzdG9yZWRcIiwgaGFuZGxlV2ViR0xDb250ZXh0UmVzdG9yZWQsIHRoaXMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuICAgIHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX2NhbnZhcykgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgdGhpcy5vZmYoKTtcblxuICAgICAgICByZW1vdmVFdmVudChlbGVtZW50LCBcIndlYmdsY29udGV4dGxvc3RcIiwgaGFuZGxlV2ViR0xDb250ZXh0TG9zdCwgdGhpcyk7XG4gICAgICAgIHJlbW92ZUV2ZW50KGVsZW1lbnQsIFwid2ViZ2xjb250ZXh0cmVzdG9yZWRcIiwgaGFuZGxlV2ViR0xDb250ZXh0UmVzdG9yZWQsIHRoaXMpO1xuXG4gICAgICAgIF9nbCA9IHVuZGVmaW5lZFxuICAgICAgICBfY2FudmFzID0gdW5kZWZpbmVkO1xuICAgICAgICBfZWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgX2NvbnRleHQgPSBmYWxzZTtcblxuICAgICAgICBfZXh0ZW5zaW9ucyA9IHVuZGVmaW5lZDtcblxuICAgICAgICBfcHJlY2lzaW9uID0gXCJoaWdocFwiO1xuICAgICAgICBfbWF4QW5pc290cm9weSA9IDA7XG4gICAgICAgIF9tYXhUZXh0dXJlcyA9IDA7XG4gICAgICAgIF9tYXhWZXJ0ZXhUZXh0dXJlcyA9IDA7XG4gICAgICAgIF9tYXhUZXh0dXJlU2l6ZSA9IDA7XG4gICAgICAgIF9tYXhDdWJlVGV4dHVyZVNpemUgPSAwO1xuICAgICAgICBfbWF4UmVuZGVyQnVmZmVyU2l6ZSA9IDA7XG5cbiAgICAgICAgX21heFVuaWZvcm1zID0gMDtcbiAgICAgICAgX21heFZhcnlpbmdzID0gMDtcbiAgICAgICAgX21heEF0dHJpYnV0ZXMgPSAwO1xuXG4gICAgICAgIF92aWV3cG9ydFggPSAwO1xuICAgICAgICBfdmlld3BvcnRZID0gMDtcbiAgICAgICAgX3ZpZXdwb3J0V2lkdGggPSAxO1xuICAgICAgICBfdmlld3BvcnRIZWlnaHQgPSAxO1xuXG4gICAgICAgIF90ZXh0dXJlSW5kZXggPSAwO1xuXG4gICAgICAgIF9sYXN0Q2xlYXJDb2xvci5zZXQoMCwgMCwgMCk7XG4gICAgICAgIF9sYXN0Q2xlYXJBbHBoYSA9IDE7XG4gICAgICAgIF9sYXN0QmxlbmRpbmcgPSAtMTtcbiAgICAgICAgX2xhc3RDdWxsRmFjZSA9IC0xO1xuICAgICAgICBfY3VsbEZhY2VEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIF9sYXN0RGVwdGhUZXN0ID0gLTE7XG4gICAgICAgIF9sYXN0RGVwdGhXcml0ZSA9IC0xO1xuICAgICAgICBfbGFzdExpbmVXaWR0aCA9IC0xO1xuXG4gICAgICAgIF9jdXJyZW50RnJhbWVidWZmZXIgPSBudWxsO1xuXG4gICAgICAgIF9lbmFibGVkQXR0cmlidXRlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgX2xhc3RQcm9ncmFtID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIF9zaGFkZXJzID0ge307XG4gICAgICAgIF9zcHJpdGVCdWZmZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICBfbGFzdEJ1ZmZlcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIF9sYXN0Q2FtZXJhID0gdW5kZWZpbmVkO1xuICAgICAgICBfbGFzdFJlc2l6ZUZuID0gdW5kZWZpbmVkO1xuICAgICAgICBfbGFzdFNjZW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBfbGFzdEdVSSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBfdGV4dFRleHR1cmVzID0ge307XG4gICAgICAgIF9jYW52YXMyZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgX2N0eCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBfZ3VpQ29udGVudFNoYWRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgX2d1aUJ1ZmZlcnMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2xcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZ2w7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhbnZhc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jYW52YXM7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVsZW1lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwicHJlY2lzaW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3ByZWNpc2lvbjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4QW5pc290cm9weVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXhBbmlzb3Ryb3B5O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhUZXh0dXJlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXhUZXh0dXJlcztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4VmVydGV4VGV4dHVyZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfbWF4VmVydGV4VGV4dHVyZXM7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFRleHR1cmVTaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX21heFRleHR1cmVTaXplO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhDdWJlVGV4dHVyZVNpemVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfbWF4Q3ViZVRleHR1cmVTaXplO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhSZW5kZXJCdWZmZXJTaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX21heFJlbmRlckJ1ZmZlclNpemU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFVuaWZvcm1zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX21heFVuaWZvcm1zO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhWYXJ5aW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXhWYXJ5aW5ncztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4QXR0cmlidXRlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXhBdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVCdWZmZXIob2JqLCBuYW1lLCBhcnJheSkge1xuXG4gICAgICAgIG9ialtuYW1lXSA9IG9ialtuYW1lXSB8fCBfZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIF9nbC5iaW5kQnVmZmVyKF9nbC5BUlJBWV9CVUZGRVIsIG9ialtuYW1lXSk7XG4gICAgICAgIF9nbC5idWZmZXJEYXRhKF9nbC5BUlJBWV9CVUZGRVIsIGFycmF5LCBfZ2wuU1RBVElDX0RSQVcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNwcml0ZSgpIHtcbiAgICAgICAgX3Nwcml0ZUJ1ZmZlcnMgPSB7fTtcblxuICAgICAgICBjcmVhdGVCdWZmZXIoX3Nwcml0ZUJ1ZmZlcnMsIFwiX3dlYmdsVmVydGV4QnVmZmVyXCIsIG5ldyBGbG9hdDMyQXJyYXkoWy0wLjUsIDAuNSwgMC4wLCAtMC41LCAtMC41LCAwLjAsXG4gICAgICAgICAgICAwLjUsIDAuNSwgMC4wLFxuICAgICAgICAgICAgMC41LCAtMC41LCAwLjBcbiAgICAgICAgXSkpO1xuICAgICAgICBjcmVhdGVCdWZmZXIoX3Nwcml0ZUJ1ZmZlcnMsIFwiX3dlYmdsVXZCdWZmZXJcIiwgbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgICAwLjAsIDAuMCxcbiAgICAgICAgICAgIDAuMCwgMS4wLFxuICAgICAgICAgICAgMS4wLCAwLjAsXG4gICAgICAgICAgICAxLjAsIDEuMFxuICAgICAgICBdKSk7XG4gICAgICAgIGNyZWF0ZUJ1ZmZlcihfc3ByaXRlQnVmZmVycywgXCJfd2ViZ2xOb3JtYWxCdWZmZXJcIiwgbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgICAwLjAsIDAuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsIDEuMCxcbiAgICAgICAgICAgIDAuMCwgMC4wLCAxLjAsXG4gICAgICAgICAgICAwLjAsIDAuMCwgMS4wLFxuICAgICAgICBdKSk7XG4gICAgICAgIGNyZWF0ZUJ1ZmZlcihfc3ByaXRlQnVmZmVycywgXCJfd2ViZ2xUYW5nZW50QnVmZmVyXCIsIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCwgMS4wLFxuICAgICAgICAgICAgMS4wLCAwLjAsIDAuMCwgMS4wLFxuICAgICAgICAgICAgMS4wLCAxLjAsIDAuMCwgMS4wLFxuICAgICAgICBdKSk7XG4gICAgICAgIF9zcHJpdGVCdWZmZXJzLl93ZWJnbFZlcnRleENvdW50ID0gNDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVHVUlCdWZmZXJzKCkge1xuICAgICAgICBfZ3VpQnVmZmVycyA9IHt9O1xuXG4gICAgICAgIGNyZWF0ZUJ1ZmZlcihfZ3VpQnVmZmVycywgXCJfd2ViZ2xWZXJ0ZXhCdWZmZXJcIiwgbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgICAwLjAsIDAuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMC4wLCAwLjAsXG4gICAgICAgICAgICAxLjAsIDEuMCwgMC4wXG4gICAgICAgIF0pKTtcbiAgICAgICAgY3JlYXRlQnVmZmVyKF9ndWlCdWZmZXJzLCBcIl93ZWJnbFV2QnVmZmVyXCIsIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgMC4wLCAwLjAsXG4gICAgICAgICAgICAwLjAsIDEuMCxcbiAgICAgICAgICAgIDEuMCwgMC4wLFxuICAgICAgICAgICAgMS4wLCAxLjBcbiAgICAgICAgXSkpO1xuXG4gICAgICAgIF9ndWlCdWZmZXJzLl93ZWJnbFZlcnRleENvdW50ID0gNDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVHVUlDb250ZW50U2hhZGVyKCkge1xuICAgICAgICB2YXIgc2hhZGVyID0gX2d1aUNvbnRlbnRTaGFkZXIgPSBuZXcgU2hhZGVyLFxuICAgICAgICAgICAgaGVhZGVyID0gW1xuICAgICAgICAgICAgICAgIFwicHJlY2lzaW9uIFwiICsgX3ByZWNpc2lvbiArIFwiIGZsb2F0O1wiLFxuICAgICAgICAgICAgICAgIFwicHJlY2lzaW9uIFwiICsgX3ByZWNpc2lvbiArIFwiIGludDtcIixcbiAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICBdLmpvaW4oXCJcXG5cIiksXG4gICAgICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSBoZWFkZXIgKyBndWlDb250ZW50X3ZlcnRleCxcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyID0gaGVhZGVyICsgZ3VpQ29udGVudF9mcmFnbWVudDtcblxuICAgICAgICBzaGFkZXIucHJvZ3JhbSA9IGNyZWF0ZVByb2dyYW0oX2dsLCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKTtcbiAgICAgICAgcGFyc2VVbmlmb3Jtc0F0dHJpYnV0ZXMoc2hhZGVyLnByb2dyYW0sIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIsIChzaGFkZXIuYXR0cmlidXRlcyA9IHt9KSwgKHNoYWRlci51bmlmb3JtcyA9IHt9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Vmlld3BvcnQoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICB4IHx8ICh4ID0gMCk7XG4gICAgICAgIHkgfHwgKHkgPSAwKTtcbiAgICAgICAgd2lkdGggfHwgKHdpZHRoID0gX2NhbnZhcy5waXhlbFdpZHRoKTtcbiAgICAgICAgaGVpZ2h0IHx8IChoZWlnaHQgPSBfY2FudmFzLnBpeGVsSGVpZ2h0KTtcblxuICAgICAgICBpZiAoX3ZpZXdwb3J0WCAhPT0geCB8fCBfdmlld3BvcnRZICE9PSB5IHx8IF92aWV3cG9ydFdpZHRoICE9PSB3aWR0aCB8fCBfdmlld3BvcnRIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgICAgX3ZpZXdwb3J0WCA9IHg7XG4gICAgICAgICAgICBfdmlld3BvcnRZID0geTtcbiAgICAgICAgICAgIF92aWV3cG9ydFdpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBfdmlld3BvcnRIZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgIF9nbC52aWV3cG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0Vmlld3BvcnQgPSBzZXRWaWV3cG9ydDtcblxuXG4gICAgZnVuY3Rpb24gc2V0RGVwdGhUZXN0KGRlcHRoVGVzdCkge1xuXG4gICAgICAgIGlmIChfbGFzdERlcHRoVGVzdCAhPT0gZGVwdGhUZXN0KSB7XG5cbiAgICAgICAgICAgIGlmIChkZXB0aFRlc3QpIHtcbiAgICAgICAgICAgICAgICBfZ2wuZW5hYmxlKF9nbC5ERVBUSF9URVNUKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2dsLmRpc2FibGUoX2dsLkRFUFRIX1RFU1QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfbGFzdERlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0RGVwdGhUZXN0ID0gc2V0RGVwdGhUZXN0O1xuXG5cbiAgICBmdW5jdGlvbiBzZXREZXB0aFdyaXRlKGRlcHRoV3JpdGUpIHtcblxuICAgICAgICBpZiAoX2xhc3REZXB0aFdyaXRlICE9PSBkZXB0aFdyaXRlKSB7XG5cbiAgICAgICAgICAgIF9nbC5kZXB0aE1hc2soZGVwdGhXcml0ZSk7XG4gICAgICAgICAgICBfbGFzdERlcHRoV3JpdGUgPSBkZXB0aFdyaXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXREZXB0aFdyaXRlID0gc2V0RGVwdGhXcml0ZTtcblxuXG4gICAgZnVuY3Rpb24gc2V0TGluZVdpZHRoKHdpZHRoKSB7XG5cbiAgICAgICAgaWYgKF9sYXN0TGluZVdpZHRoICE9PSB3aWR0aCkge1xuXG4gICAgICAgICAgICBfZ2wubGluZVdpZHRoKHdpZHRoKTtcbiAgICAgICAgICAgIF9sYXN0TGluZVdpZHRoID0gd2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldExpbmVXaWR0aCA9IHNldExpbmVXaWR0aDtcblxuXG4gICAgZnVuY3Rpb24gc2V0Q3VsbEZhY2UoY3VsbEZhY2UpIHtcblxuICAgICAgICBpZiAoX2xhc3RDdWxsRmFjZSAhPT0gY3VsbEZhY2UpIHtcbiAgICAgICAgICAgIGlmICghX2xhc3RDdWxsRmFjZSB8fCBfbGFzdEN1bGxGYWNlID09PSBDdWxsRmFjZS5Ob25lKSBfY3VsbEZhY2VEaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChjdWxsRmFjZSA9PT0gQ3VsbEZhY2UuRnJvbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2N1bGxGYWNlRGlzYWJsZWQpIF9nbC5lbmFibGUoX2dsLkNVTExfRkFDRSk7XG4gICAgICAgICAgICAgICAgX2dsLmN1bGxGYWNlKF9nbC5GUk9OVCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1bGxGYWNlID09PSBDdWxsRmFjZS5CYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jdWxsRmFjZURpc2FibGVkKSBfZ2wuZW5hYmxlKF9nbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgIF9nbC5jdWxsRmFjZShfZ2wuQkFDSyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1bGxGYWNlID09PSBDdWxsRmFjZS5Gcm9udEJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoX2N1bGxGYWNlRGlzYWJsZWQpIF9nbC5lbmFibGUoX2dsLkNVTExfRkFDRSk7XG4gICAgICAgICAgICAgICAgX2dsLmN1bGxGYWNlKF9nbC5GUk9OVF9BTkRfQkFDSyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9nbC5kaXNhYmxlKF9nbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgIF9sYXN0Q3VsbEZhY2UgPSBDdWxsRmFjZS5Ob25lO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2xhc3RDdWxsRmFjZSA9IGN1bGxGYWNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRDdWxsRmFjZSA9IHNldEN1bGxGYWNlO1xuXG5cbiAgICBmdW5jdGlvbiBzZXRCbGVuZGluZyhibGVuZGluZykge1xuXG4gICAgICAgIGlmIChibGVuZGluZyAhPT0gX2xhc3RCbGVuZGluZykge1xuXG4gICAgICAgICAgICBpZiAoYmxlbmRpbmcgPT09IEJsZW5kaW5nLk5vbmUpIHtcbiAgICAgICAgICAgICAgICBfZ2wuZGlzYWJsZShfZ2wuQkxFTkQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChibGVuZGluZyA9PT0gQmxlbmRpbmcuQWRkaXRpdmUpIHtcbiAgICAgICAgICAgICAgICBfZ2wuZW5hYmxlKF9nbC5CTEVORCk7XG4gICAgICAgICAgICAgICAgX2dsLmJsZW5kRXF1YXRpb24oX2dsLkZVTkNfQUREKTtcbiAgICAgICAgICAgICAgICBfZ2wuYmxlbmRGdW5jKF9nbC5TUkNfQUxQSEEsIF9nbC5PTkUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChibGVuZGluZyA9PT0gQmxlbmRpbmcuU3VidHJhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBfZ2wuZW5hYmxlKF9nbC5CTEVORCk7XG4gICAgICAgICAgICAgICAgX2dsLmJsZW5kRXF1YXRpb24oX2dsLkZVTkNfQUREKTtcbiAgICAgICAgICAgICAgICBfZ2wuYmxlbmRGdW5jKF9nbC5aRVJPLCBfZ2wuT05FX01JTlVTX1NSQ19DT0xPUik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJsZW5kaW5nID09PSBCbGVuZGluZy5NdWxpcGx5KSB7XG4gICAgICAgICAgICAgICAgX2dsLmVuYWJsZShfZ2wuQkxFTkQpO1xuICAgICAgICAgICAgICAgIF9nbC5ibGVuZEVxdWF0aW9uKF9nbC5GVU5DX0FERCk7XG4gICAgICAgICAgICAgICAgX2dsLmJsZW5kRnVuYyhfZ2wuWkVSTywgX2dsLlNSQ19DT0xPUik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJsZW5kaW5nID09PSBCbGVuZGluZy5EZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgX2dsLmVuYWJsZShfZ2wuQkxFTkQpO1xuICAgICAgICAgICAgICAgIF9nbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoX2dsLkZVTkNfQURELCBfZ2wuRlVOQ19BREQpO1xuICAgICAgICAgICAgICAgIF9nbC5ibGVuZEZ1bmNTZXBhcmF0ZShfZ2wuU1JDX0FMUEhBLCBfZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgX2dsLk9ORSwgX2dsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICAgICAgICAgIF9sYXN0QmxlbmRpbmcgPSBCbGVuZGluZy5EZWZhdWx0O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2xhc3RCbGVuZGluZyA9IGJsZW5kaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRCbGVuZGluZyA9IHNldEJsZW5kaW5nO1xuXG5cbiAgICBmdW5jdGlvbiBzZXRTY2lzc29yKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcblxuICAgICAgICBfZ2wuc2Npc3Nvcih4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIHRoaXMuc2V0U2Npc3NvciA9IHNldFNjaXNzb3I7XG5cblxuICAgIGZ1bmN0aW9uIHNldENsZWFyQ29sb3IoY29sb3IsIGFscGhhKSB7XG4gICAgICAgIGFscGhhIHx8IChhbHBoYSA9IDEpO1xuXG4gICAgICAgIGlmICghX2xhc3RDbGVhckNvbG9yLmVxdWFscyhjb2xvcikgfHwgYWxwaGEgIT09IF9sYXN0Q2xlYXJBbHBoYSkge1xuXG4gICAgICAgICAgICBfbGFzdENsZWFyQ29sb3IuY29weShjb2xvcik7XG4gICAgICAgICAgICBfbGFzdENsZWFyQWxwaGEgPSBhbHBoYTtcblxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyQ29sb3IoX2xhc3RDbGVhckNvbG9yLnIsIF9sYXN0Q2xlYXJDb2xvci5nLCBfbGFzdENsZWFyQ29sb3IuYiwgX2xhc3RDbGVhckFscGhhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0Q2xlYXJDb2xvciA9IHNldENsZWFyQ29sb3I7XG5cblxuICAgIGZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNvbG9yLCBkZXB0aCwgc3RlbmNpbCkge1xuICAgICAgICB2YXIgYml0cyA9IDA7XG5cbiAgICAgICAgaWYgKGNvbG9yID09PSB1bmRlZmluZWQgfHwgY29sb3IpIGJpdHMgfD0gX2dsLkNPTE9SX0JVRkZFUl9CSVQ7XG4gICAgICAgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkIHx8IGRlcHRoKSBiaXRzIHw9IF9nbC5ERVBUSF9CVUZGRVJfQklUO1xuICAgICAgICBpZiAoc3RlbmNpbCA9PT0gdW5kZWZpbmVkIHx8IHN0ZW5jaWwpIGJpdHMgfD0gX2dsLlNURU5DSUxfQlVGRkVSX0JJVDtcblxuICAgICAgICBfZ2wuY2xlYXIoYml0cyk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckNhbnZhcyA9IGNsZWFyQ2FudmFzO1xuXG5cbiAgICBmdW5jdGlvbiBjbGVhckNvbG9yKCkge1xuXG4gICAgICAgIF9nbC5jbGVhcihfZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckNvbG9yID0gY2xlYXJDb2xvcjtcblxuXG4gICAgZnVuY3Rpb24gY2xlYXJEZXB0aCgpIHtcblxuICAgICAgICBfZ2wuY2xlYXIoX2dsLkRFUFRIX0JVRkZFUl9CSVQpO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXJEZXB0aCA9IGNsZWFyRGVwdGg7XG5cblxuICAgIGZ1bmN0aW9uIGNsZWFyU3RlbmNpbCgpIHtcblxuICAgICAgICBfZ2wuY2xlYXIoX2dsLlNURU5DSUxfQlVGRkVSX0JJVCk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhclN0ZW5jaWwgPSBjbGVhclN0ZW5jaWw7XG5cblxuICAgIGZ1bmN0aW9uIHNldFByb2dyYW0ocHJvZ3JhbSkge1xuXG4gICAgICAgIGlmIChfbGFzdFByb2dyYW0gIT09IHByb2dyYW0pIHtcbiAgICAgICAgICAgIF9nbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICAgICAgX2xhc3RQcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuc2V0UHJvZ3JhbSA9IHNldFByb2dyYW07XG5cblxuICAgIGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcblxuICAgICAgICBpZiAoX2VuYWJsZWRBdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPT09IDApIHtcbiAgICAgICAgICAgIF9nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGUpO1xuICAgICAgICAgICAgX2VuYWJsZWRBdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmVuYWJsZUF0dHJpYnV0ZSA9IGVuYWJsZUF0dHJpYnV0ZTtcblxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZUF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHZhciBpID0gX21heEF0dHJpYnV0ZXM7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuXG4gICAgICAgICAgICBpZiAoX2VuYWJsZWRBdHRyaWJ1dGVzW2ldID09PSAxKSB7XG4gICAgICAgICAgICAgICAgX2dsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShpKTtcbiAgICAgICAgICAgICAgICBfZW5hYmxlZEF0dHJpYnV0ZXNbaV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmRpc2FibGVBdHRyaWJ1dGVzID0gZGlzYWJsZUF0dHJpYnV0ZXM7XG5cblxuICAgIGZ1bmN0aW9uIHNldFRleHR1cmUobG9jYXRpb24sIHRleHR1cmUpIHtcbiAgICAgICAgaWYgKCF0ZXh0dXJlKSByZXR1cm47XG4gICAgICAgIHZhciBpbmRleCwgZ2xUZXh0dXJlO1xuXG4gICAgICAgIGlmIChfdGV4dHVyZUluZGV4ID49IF9tYXhUZXh0dXJlcykge1xuICAgICAgICAgICAgTG9nLndhcm4oXCJSZW5kZXJlciBzZXRUZXh1cmU6IHVzaW5nIFwiICsgX3RleHR1cmVJbmRleCArIFwiIHRleHR1cmUgdW5pdHMsIEdQVSBvbmx5IHN1cHBvcnRzIFwiICsgX21heFRleHR1cmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoIXRleHR1cmUubmVlZHNVcGRhdGUgfHwgdGV4dHVyZSBpbnN0YW5jZW9mIFJlbmRlclRhcmdldCkgJiYgKGdsVGV4dHVyZSA9IHRleHR1cmUuX3dlYmdsKSkge1xuICAgICAgICAgICAgaW5kZXggPSBfdGV4dHVyZUluZGV4Kys7XG5cbiAgICAgICAgICAgIF9nbC5hY3RpdmVUZXh0dXJlKF9nbC5URVhUVVJFMCArIGluZGV4KTtcbiAgICAgICAgICAgIF9nbC5iaW5kVGV4dHVyZShfZ2wuVEVYVFVSRV8yRCwgZ2xUZXh0dXJlKTtcbiAgICAgICAgICAgIF9nbC51bmlmb3JtMWkobG9jYXRpb24sIGluZGV4KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0ZXh0dXJlLnJhdykgcmV0dXJuO1xuXG4gICAgICAgIGdsVGV4dHVyZSA9IHRleHR1cmUuX3dlYmdsIHx8ICh0ZXh0dXJlLl93ZWJnbCA9IF9nbC5jcmVhdGVUZXh0dXJlKCkpO1xuICAgICAgICBpbmRleCA9IF90ZXh0dXJlSW5kZXgrKztcblxuICAgICAgICB2YXIgcmF3ID0gdGV4dHVyZS5yYXcsXG4gICAgICAgICAgICBURkEgPSBfZXh0ZW5zaW9ucy5FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMsXG5cbiAgICAgICAgICAgIGlzUE9UID0gaXNQb3dlck9mVHdvKHJhdy53aWR0aCkgJiYgaXNQb3dlck9mVHdvKHJhdy5oZWlnaHQpLFxuICAgICAgICAgICAgYW5pc290cm9weSA9IGNsYW1wKHRleHR1cmUuYW5pc290cm9weSB8fCAxLCAxLCBfbWF4QW5pc290cm9weSksXG5cbiAgICAgICAgICAgIFRFWFRVUkVfMkQgPSBfZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgIGdlbmVyYXRlTWlwbWFwID0gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcCxcbiAgICAgICAgICAgIGZpbHRlciA9IHRleHR1cmUuZmlsdGVyLFxuICAgICAgICAgICAgZm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICB3cmFwID0gdGV4dHVyZS53cmFwLFxuICAgICAgICAgICAgV1JBUCwgTUFHX0ZJTFRFUiwgTUlOX0ZJTFRFUiwgRk9STUFUO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgPT09IEZpbHRlck1vZGUuTm9uZSkge1xuICAgICAgICAgICAgTUFHX0ZJTFRFUiA9IF9nbC5ORUFSRVNUO1xuICAgICAgICAgICAgaWYgKGdlbmVyYXRlTWlwbWFwICYmIGlzUE9UKSB7XG4gICAgICAgICAgICAgICAgTUlOX0ZJTFRFUiA9IF9nbC5MSU5FQVJfTUlQTUFQX05FQVJFU1Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE1JTl9GSUxURVIgPSBfZ2wuTkVBUkVTVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy9GaWx0ZXJNb2RlLkxpbmVhclxuICAgICAgICAgICAgTUFHX0ZJTFRFUiA9IF9nbC5MSU5FQVI7XG4gICAgICAgICAgICBpZiAoZ2VuZXJhdGVNaXBtYXAgJiYgaXNQT1QpIHtcbiAgICAgICAgICAgICAgICBNSU5fRklMVEVSID0gX2dsLkxJTkVBUl9NSVBNQVBfTElORUFSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBNSU5fRklMVEVSID0gX2dsLkxJTkVBUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IFRleHR1cmVGb3JtYXQuUkdCKSB7XG4gICAgICAgICAgICBGT1JNQVQgPSBfZ2wuUkdCO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gVGV4dHVyZUZvcm1hdC5SR0JBKSB7XG4gICAgICAgICAgICBGT1JNQVQgPSBfZ2wuUkdCQTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IFRleHR1cmVGb3JtYXQuTHVtaW5hbmNlQWxwaGEpIHtcbiAgICAgICAgICAgIEZPUk1BVCA9IF9nbC5MVU1JTkFOQ0VfQUxQSEE7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBUZXh0dXJlRm9ybWF0Lkx1bWluYW5jZSkge1xuICAgICAgICAgICAgRk9STUFUID0gX2dsLkxVTUlOQU5DRTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IFRleHR1cmVGb3JtYXQuQWxwaGEpIHtcbiAgICAgICAgICAgIEZPUk1BVCA9IF9nbC5BTFBIQTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3cmFwID09PSBUZXh0dXJlV3JhcC5DbGFtcCkge1xuICAgICAgICAgICAgV1JBUCA9IF9nbC5DTEFNUF9UT19FREdFO1xuICAgICAgICB9IGVsc2UgaWYgKHdyYXAgPT09IFRleHR1cmVXcmFwLk1pcnJvclJlcGVhdCkge1xuICAgICAgICAgICAgV1JBUCA9IGlzUE9UID8gX2dsLk1JUlJPUkVEX1JFUEVBVCA6IF9nbC5DTEFNUF9UT19FREdFO1xuICAgICAgICB9IGVsc2UgeyAvL1RleHR1cmVXcmFwLlJlcGVhdFxuICAgICAgICAgICAgV1JBUCA9IGlzUE9UID8gX2dsLlJFUEVBVCA6IF9nbC5DTEFNUF9UT19FREdFO1xuICAgICAgICB9XG5cbiAgICAgICAgX2dsLmFjdGl2ZVRleHR1cmUoX2dsLlRFWFRVUkUwICsgaW5kZXgpO1xuICAgICAgICBfZ2wuYmluZFRleHR1cmUoVEVYVFVSRV8yRCwgZ2xUZXh0dXJlKTtcbiAgICAgICAgX2dsLnVuaWZvcm0xaShsb2NhdGlvbiwgaW5kZXgpO1xuXG4gICAgICAgIF9nbC5waXhlbFN0b3JlaShfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGV4dHVyZS5mbGlwWSA/IDEgOiAwKTtcbiAgICAgICAgX2dsLnBpeGVsU3RvcmVpKF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSA/IDEgOiAwKTtcblxuICAgICAgICBfZ2wudGV4SW1hZ2UyRChURVhUVVJFXzJELCAwLCBGT1JNQVQsIEZPUk1BVCwgX2dsLlVOU0lHTkVEX0JZVEUsIGNsYW1wVG9NYXhTaXplKHJhdywgX21heFRleHR1cmVTaXplKSk7XG5cbiAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgX2dsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgTUFHX0ZJTFRFUik7XG4gICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIF9nbC5URVhUVVJFX01JTl9GSUxURVIsIE1JTl9GSUxURVIpO1xuXG4gICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIF9nbC5URVhUVVJFX1dSQVBfUywgV1JBUCk7XG4gICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIF9nbC5URVhUVVJFX1dSQVBfVCwgV1JBUCk7XG5cbiAgICAgICAgaWYgKFRGQSkgX2dsLnRleFBhcmFtZXRlcmYoVEVYVFVSRV8yRCwgVEZBLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBhbmlzb3Ryb3B5KTtcbiAgICAgICAgaWYgKGdlbmVyYXRlTWlwbWFwICYmIGlzUE9UKSBfZ2wuZ2VuZXJhdGVNaXBtYXAoVEVYVFVSRV8yRCk7XG5cbiAgICAgICAgdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlKGxvY2F0aW9uLCBjdWJlVGV4dHVyZSkge1xuICAgICAgICBpZiAoIWN1YmVUZXh0dXJlIHx8ICFjdWJlVGV4dHVyZS5yYXcpIHJldHVybjtcbiAgICAgICAgdmFyIGdsVGV4dHVyZSA9IGN1YmVUZXh0dXJlLl93ZWJnbCxcbiAgICAgICAgICAgIGluZGV4O1xuXG4gICAgICAgIGlmIChfdGV4dHVyZUluZGV4ID49IF9tYXhUZXh0dXJlcykge1xuICAgICAgICAgICAgTG9nLndhcm4oXCJSZW5kZXJlciBzZXRUZXh0dXJlQ3ViZTogdXNpbmcgXCIgKyBfdGV4dHVyZUluZGV4ICsgXCIgdGV4dHVyZSB1bml0cywgR1BVIG9ubHkgc3VwcG9ydHMgXCIgKyBfbWF4VGV4dHVyZXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjdWJlVGV4dHVyZS5uZWVkc1VwZGF0ZSAmJiBnbFRleHR1cmUpIHtcbiAgICAgICAgICAgIGluZGV4ID0gX3RleHR1cmVJbmRleCsrO1xuXG4gICAgICAgICAgICBfZ2wuYWN0aXZlVGV4dHVyZShfZ2wuVEVYVFVSRTAgKyBpbmRleCk7XG4gICAgICAgICAgICBfZ2wuYmluZFRleHR1cmUoX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIGdsVGV4dHVyZSk7XG4gICAgICAgICAgICBfZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCBpbmRleCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsVGV4dHVyZSA9IGN1YmVUZXh0dXJlLl93ZWJnbCB8fCAoY3ViZVRleHR1cmUuX3dlYmdsID0gX2dsLmNyZWF0ZVRleHR1cmUoKSk7XG4gICAgICAgIGluZGV4ID0gX3RleHR1cmVJbmRleCsrO1xuXG4gICAgICAgIHZhciByYXcgPSBjdWJlVGV4dHVyZS5yYXcsXG4gICAgICAgICAgICBURkEgPSBfZXh0ZW5zaW9ucy5FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMsXG5cbiAgICAgICAgICAgIGZpcnN0ID0gcmF3WzBdLFxuICAgICAgICAgICAgaXNQT1QgPSBpc1Bvd2VyT2ZUd28oZmlyc3Qud2lkdGgpICYmIGlzUG93ZXJPZlR3byhmaXJzdC5oZWlnaHQpLFxuICAgICAgICAgICAgYW5pc290cm9weSA9IGNsYW1wKGN1YmVUZXh0dXJlLmFuaXNvdHJvcHkgfHwgMSwgMSwgX21heEFuaXNvdHJvcHkpLFxuXG4gICAgICAgICAgICBURVhUVVJFX0NVQkVfTUFQID0gX2dsLlRFWFRVUkVfQ1VCRV9NQVAsXG4gICAgICAgICAgICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggPSBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLFxuICAgICAgICAgICAgVU5TSUdORURfQllURSA9IF9nbC5VTlNJR05FRF9CWVRFLFxuXG4gICAgICAgICAgICBnZW5lcmF0ZU1pcG1hcCA9IGN1YmVUZXh0dXJlLmdlbmVyYXRlTWlwbWFwLFxuICAgICAgICAgICAgZmlsdGVyID0gY3ViZVRleHR1cmUuZmlsdGVyLFxuICAgICAgICAgICAgZm9ybWF0ID0gY3ViZVRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgd3JhcCA9IGN1YmVUZXh0dXJlLndyYXAsXG4gICAgICAgICAgICBXUkFQLCBNQUdfRklMVEVSLCBNSU5fRklMVEVSLCBGT1JNQVQ7XG5cbiAgICAgICAgaWYgKGZpbHRlciA9PT0gRmlsdGVyTW9kZS5Ob25lKSB7XG4gICAgICAgICAgICBNQUdfRklMVEVSID0gX2dsLk5FQVJFU1Q7XG4gICAgICAgICAgICBpZiAoZ2VuZXJhdGVNaXBtYXAgJiYgaXNQT1QpIHtcbiAgICAgICAgICAgICAgICBNSU5fRklMVEVSID0gX2dsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgTUlOX0ZJTFRFUiA9IF9nbC5ORUFSRVNUO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvL0ZpbHRlck1vZGUuTGluZWFyXG4gICAgICAgICAgICBNQUdfRklMVEVSID0gX2dsLkxJTkVBUjtcbiAgICAgICAgICAgIGlmIChnZW5lcmF0ZU1pcG1hcCAmJiBpc1BPVCkge1xuICAgICAgICAgICAgICAgIE1JTl9GSUxURVIgPSBfZ2wuTElORUFSX01JUE1BUF9MSU5FQVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE1JTl9GSUxURVIgPSBfZ2wuTElORUFSO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gVGV4dHVyZUZvcm1hdC5SR0IpIHtcbiAgICAgICAgICAgIEZPUk1BVCA9IF9nbC5SR0I7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBUZXh0dXJlRm9ybWF0LlJHQkEpIHtcbiAgICAgICAgICAgIEZPUk1BVCA9IF9nbC5SR0JBO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gVGV4dHVyZUZvcm1hdC5MdW1pbmFuY2VBbHBoYSkge1xuICAgICAgICAgICAgRk9STUFUID0gX2dsLkxVTUlOQU5DRV9BTFBIQTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IFRleHR1cmVGb3JtYXQuTHVtaW5hbmNlKSB7XG4gICAgICAgICAgICBGT1JNQVQgPSBfZ2wuTFVNSU5BTkNFO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gVGV4dHVyZUZvcm1hdC5BbHBoYSkge1xuICAgICAgICAgICAgRk9STUFUID0gX2dsLkFMUEhBO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdyYXAgPT09IFRleHR1cmVXcmFwLkNsYW1wKSB7XG4gICAgICAgICAgICBXUkFQID0gX2dsLkNMQU1QX1RPX0VER0U7XG4gICAgICAgIH0gZWxzZSB7IC8vVGV4dHVyZVdyYXAuUmVwZWF0XG4gICAgICAgICAgICBXUkFQID0gaXNQT1QgPyBfZ2wuUkVQRUFUIDogX2dsLkNMQU1QX1RPX0VER0U7XG4gICAgICAgIH1cblxuICAgICAgICBfZ2wuYWN0aXZlVGV4dHVyZShfZ2wuVEVYVFVSRTAgKyBpbmRleCk7XG4gICAgICAgIF9nbC5iaW5kVGV4dHVyZShURVhUVVJFX0NVQkVfTUFQLCBnbFRleHR1cmUpO1xuICAgICAgICBfZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCBpbmRleCk7XG5cbiAgICAgICAgX2dsLnBpeGVsU3RvcmVpKF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBjdWJlVGV4dHVyZS5mbGlwWSA/IDEgOiAwKTtcbiAgICAgICAgX2dsLnBpeGVsU3RvcmVpKF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGN1YmVUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPyAxIDogMCk7XG5cbiAgICAgICAgX2dsLnRleEltYWdlMkQoX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCwgMCwgRk9STUFULCBGT1JNQVQsIFVOU0lHTkVEX0JZVEUsIGNsYW1wVG9NYXhTaXplKHJhd1swXSwgX21heEN1YmVUZXh0dXJlU2l6ZSkpO1xuICAgICAgICBfZ2wudGV4SW1hZ2UyRChfZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YLCAwLCBGT1JNQVQsIEZPUk1BVCwgVU5TSUdORURfQllURSwgY2xhbXBUb01heFNpemUocmF3WzFdLCBfbWF4Q3ViZVRleHR1cmVTaXplKSk7XG4gICAgICAgIF9nbC50ZXhJbWFnZTJEKF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ksIDAsIEZPUk1BVCwgRk9STUFULCBVTlNJR05FRF9CWVRFLCBjbGFtcFRvTWF4U2l6ZShyYXdbMl0sIF9tYXhDdWJlVGV4dHVyZVNpemUpKTtcbiAgICAgICAgX2dsLnRleEltYWdlMkQoX2dsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWSwgMCwgRk9STUFULCBGT1JNQVQsIFVOU0lHTkVEX0JZVEUsIGNsYW1wVG9NYXhTaXplKHJhd1szXSwgX21heEN1YmVUZXh0dXJlU2l6ZSkpO1xuICAgICAgICBfZ2wudGV4SW1hZ2UyRChfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aLCAwLCBGT1JNQVQsIEZPUk1BVCwgVU5TSUdORURfQllURSwgY2xhbXBUb01heFNpemUocmF3WzRdLCBfbWF4Q3ViZVRleHR1cmVTaXplKSk7XG4gICAgICAgIF9nbC50ZXhJbWFnZTJEKF9nbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1osIDAsIEZPUk1BVCwgRk9STUFULCBVTlNJR05FRF9CWVRFLCBjbGFtcFRvTWF4U2l6ZShyYXdbNV0sIF9tYXhDdWJlVGV4dHVyZVNpemUpKTtcblxuICAgICAgICBfZ2wudGV4UGFyYW1ldGVyaShURVhUVVJFX0NVQkVfTUFQLCBfZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBNQUdfRklMVEVSKTtcbiAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoVEVYVFVSRV9DVUJFX01BUCwgX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgTUlOX0ZJTFRFUik7XG5cbiAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoVEVYVFVSRV9DVUJFX01BUCwgX2dsLlRFWFRVUkVfV1JBUF9TLCBXUkFQKTtcbiAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoVEVYVFVSRV9DVUJFX01BUCwgX2dsLlRFWFRVUkVfV1JBUF9ULCBXUkFQKTtcblxuICAgICAgICBpZiAoVEZBKSBfZ2wudGV4UGFyYW1ldGVyZihURVhUVVJFX0NVQkVfTUFQLCBURkEuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIGFuaXNvdHJvcHkpO1xuICAgICAgICBpZiAoZ2VuZXJhdGVNaXBtYXAgJiYgaXNQT1QpIF9nbC5nZW5lcmF0ZU1pcG1hcChURVhUVVJFX0NVQkVfTUFQKTtcblxuICAgICAgICBjdWJlVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY2xhbXBUb01heFNpemUoaW1hZ2UsIG1heFNpemUpIHtcbiAgICAgICAgaWYgKGltYWdlLmhlaWdodCA8PSBtYXhTaXplICYmIGltYWdlLndpZHRoIDw9IG1heFNpemUpIHJldHVybiBpbWFnZTtcbiAgICAgICAgdmFyIG1heERpbSA9IDEgLyBtYXgoaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCksXG4gICAgICAgICAgICBuZXdXaWR0aCA9IGZsb29yKGltYWdlLndpZHRoICogbWF4U2l6ZSAqIG1heERpbSksXG4gICAgICAgICAgICBuZXdIZWlnaHQgPSBmbG9vcihpbWFnZS5oZWlnaHQgKiBtYXhTaXplICogbWF4RGltKSxcbiAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksXG4gICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcblxuICAgICAgICBMb2cub25jZShcIlJlbmRlcmVyIGNsYW1wVG9NYXhTaXplOiBpbWFnZSBoZWlnaHQgbGFyZ2VyIHRoYW4gbWFjaGluZXMgbWF4IHNpemUgKG1heCA9IFwiICsgbWF4U2l6ZSArIFwiKVwiKTtcblxuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc2V0UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xuICAgICAgICB2YXIgaXNSZW5kZXJUYXJnZXQgPSAhIXJlbmRlclRhcmdldCxcbiAgICAgICAgICAgIGlzQ3ViZSA9IHJlbmRlclRhcmdldCBpbnN0YW5jZW9mIFJlbmRlclRhcmdldEN1YmUsXG4gICAgICAgICAgICBmcmFtZWJ1ZmZlciA9IG51bGwsXG4gICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCB2eCwgdnk7XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyVGFyZ2V0ICYmICFyZW5kZXJUYXJnZXQuX3dlYmdsRnJhbWVidWZmZXIpIHtcbiAgICAgICAgICAgIHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcbiAgICAgICAgICAgIHJlbmRlclRhcmdldC5fd2ViZ2wgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG4gICAgICAgICAgICB2YXIgVEZBID0gX2V4dGVuc2lvbnMuRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljLFxuICAgICAgICAgICAgICAgIGlzUE9UID0gaXNQb3dlck9mVHdvKHdpZHRoKSAmJiBpc1Bvd2VyT2ZUd28oaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBhbmlzb3Ryb3B5ID0gY2xhbXAocmVuZGVyVGFyZ2V0LmFuaXNvdHJvcHkgfHwgMSwgMSwgX21heEFuaXNvdHJvcHkpLFxuXG4gICAgICAgICAgICAgICAgR0xfVEVYVFVSRV9UWVBFID0gaXNDdWJlID8gX2dsLlRFWFRVUkVfQ1VCRV9NQVAgOiBfZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgICAgICBVTlNJR05FRF9CWVRFID0gX2dsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgICAgICAgVU5TSUdORURfU0hPUlQgPSBfZ2wuVU5TSUdORURfU0hPUlQsXG4gICAgICAgICAgICAgICAgREVQVEhfQ09NUE9ORU5UID0gX2dsLkRFUFRIX0NPTVBPTkVOVCxcblxuICAgICAgICAgICAgICAgIGdlbmVyYXRlTWlwbWFwID0gcmVuZGVyVGFyZ2V0LmdlbmVyYXRlTWlwbWFwLFxuICAgICAgICAgICAgICAgIGZpbHRlciA9IHJlbmRlclRhcmdldC5maWx0ZXIsXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gcmVuZGVyVGFyZ2V0LmZvcm1hdCxcbiAgICAgICAgICAgICAgICB3cmFwID0gcmVuZGVyVGFyZ2V0LndyYXAsXG4gICAgICAgICAgICAgICAgV1JBUCwgTUFHX0ZJTFRFUiwgTUlOX0ZJTFRFUiwgRk9STUFULFxuICAgICAgICAgICAgICAgIHdlYmdsRnJhbWVidWZmZXIsIHdlYmdsUmVuZGVyYnVmZmVyLCBkZXB0aE9ubHkgPSByZW5kZXJUYXJnZXQuZGVwdGhPbmx5LFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGlmIChmaWx0ZXIgPT09IEZpbHRlck1vZGUuTm9uZSkge1xuICAgICAgICAgICAgICAgIE1BR19GSUxURVIgPSBfZ2wuTkVBUkVTVDtcbiAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdGVNaXBtYXAgJiYgaXNQT1QpIHtcbiAgICAgICAgICAgICAgICAgICAgTUlOX0ZJTFRFUiA9IF9nbC5MSU5FQVJfTUlQTUFQX05FQVJFU1Q7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTUlOX0ZJTFRFUiA9IF9nbC5ORUFSRVNUO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vRmlsdGVyTW9kZS5MaW5lYXJcbiAgICAgICAgICAgICAgICBNQUdfRklMVEVSID0gX2dsLkxJTkVBUjtcbiAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdGVNaXBtYXAgJiYgaXNQT1QpIHtcbiAgICAgICAgICAgICAgICAgICAgTUlOX0ZJTFRFUiA9IF9nbC5MSU5FQVJfTUlQTUFQX0xJTkVBUjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBNSU5fRklMVEVSID0gX2dsLkxJTkVBUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IFRleHR1cmVGb3JtYXQuUkdCKSB7XG4gICAgICAgICAgICAgICAgRk9STUFUID0gX2dsLlJHQjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBUZXh0dXJlRm9ybWF0LlJHQkEpIHtcbiAgICAgICAgICAgICAgICBGT1JNQVQgPSBfZ2wuUkdCQTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBUZXh0dXJlRm9ybWF0Lkx1bWluYW5jZUFscGhhKSB7XG4gICAgICAgICAgICAgICAgRk9STUFUID0gX2dsLkxVTUlOQU5DRV9BTFBIQTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBUZXh0dXJlRm9ybWF0Lkx1bWluYW5jZSkge1xuICAgICAgICAgICAgICAgIEZPUk1BVCA9IF9nbC5MVU1JTkFOQ0U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gVGV4dHVyZUZvcm1hdC5BbHBoYSkge1xuICAgICAgICAgICAgICAgIEZPUk1BVCA9IF9nbC5BTFBIQTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHdyYXAgPT09IFRleHR1cmVXcmFwLkNsYW1wKSB7XG4gICAgICAgICAgICAgICAgV1JBUCA9IF9nbC5DTEFNUF9UT19FREdFO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3cmFwID09PSBUZXh0dXJlV3JhcC5NaXJyb3JSZXBlYXQpIHtcbiAgICAgICAgICAgICAgICBXUkFQID0gaXNQT1QgPyBfZ2wuTUlSUk9SRURfUkVQRUFUIDogX2dsLkNMQU1QX1RPX0VER0U7XG4gICAgICAgICAgICB9IGVsc2UgeyAvL1RleHR1cmVXcmFwLlJlcGVhdFxuICAgICAgICAgICAgICAgIFdSQVAgPSBpc1BPVCA/IF9nbC5SRVBFQVQgOiBfZ2wuQ0xBTVBfVE9fRURHRTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2dsLmJpbmRUZXh0dXJlKEdMX1RFWFRVUkVfVFlQRSwgcmVuZGVyVGFyZ2V0Ll93ZWJnbCk7XG5cbiAgICAgICAgICAgIF9nbC5waXhlbFN0b3JlaShfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgcmVuZGVyVGFyZ2V0LmZsaXBZID8gMSA6IDApO1xuICAgICAgICAgICAgX2dsLnBpeGVsU3RvcmVpKF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHJlbmRlclRhcmdldC5wcmVtdWx0aXBseUFscGhhID8gMSA6IDApO1xuXG4gICAgICAgICAgICBpZiAoaXNDdWJlKSB7XG4gICAgICAgICAgICAgICAgd2ViZ2xGcmFtZWJ1ZmZlciA9IHJlbmRlclRhcmdldC5fd2ViZ2xGcmFtZWJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgICAgIHdlYmdsUmVuZGVyYnVmZmVyID0gcmVuZGVyVGFyZ2V0Ll93ZWJnbFJlbmRlcmJ1ZmZlciA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlclRhcmdldC5kZXB0aE9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2dsLnRleEltYWdlMkQoX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCwgMCwgREVQVEhfQ09NUE9ORU5ULCB3aWR0aCwgaGVpZ2h0LCAwLCBERVBUSF9DT01QT05FTlQsIFVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBfZ2wudGV4SW1hZ2UyRChfZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YLCAwLCBERVBUSF9DT01QT05FTlQsIHdpZHRoLCBoZWlnaHQsIDAsIERFUFRIX0NPTVBPTkVOVCwgVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIF9nbC50ZXhJbWFnZTJEKF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ksIDAsIERFUFRIX0NPTVBPTkVOVCwgd2lkdGgsIGhlaWdodCwgMCwgREVQVEhfQ09NUE9ORU5ULCBVTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgX2dsLnRleEltYWdlMkQoX2dsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWSwgMCwgREVQVEhfQ09NUE9ORU5ULCB3aWR0aCwgaGVpZ2h0LCAwLCBERVBUSF9DT01QT05FTlQsIFVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBfZ2wudGV4SW1hZ2UyRChfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aLCAwLCBERVBUSF9DT01QT05FTlQsIHdpZHRoLCBoZWlnaHQsIDAsIERFUFRIX0NPTVBPTkVOVCwgVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIF9nbC50ZXhJbWFnZTJEKF9nbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1osIDAsIERFUFRIX0NPTVBPTkVOVCwgd2lkdGgsIGhlaWdodCwgMCwgREVQVEhfQ09NUE9ORU5ULCBVTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfZ2wudGV4SW1hZ2UyRChfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLCAwLCBGT1JNQVQsIHdpZHRoLCBoZWlnaHQsIDAsIEZPUk1BVCwgVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIF9nbC50ZXhJbWFnZTJEKF9nbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1gsIDAsIEZPUk1BVCwgd2lkdGgsIGhlaWdodCwgMCwgRk9STUFULCBVTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgX2dsLnRleEltYWdlMkQoX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWSwgMCwgRk9STUFULCB3aWR0aCwgaGVpZ2h0LCAwLCBGT1JNQVQsIFVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBfZ2wudGV4SW1hZ2UyRChfZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZLCAwLCBGT1JNQVQsIHdpZHRoLCBoZWlnaHQsIDAsIEZPUk1BVCwgVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIF9nbC50ZXhJbWFnZTJEKF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1osIDAsIEZPUk1BVCwgd2lkdGgsIGhlaWdodCwgMCwgRk9STUFULCBVTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgX2dsLnRleEltYWdlMkQoX2dsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWiwgMCwgRk9STUFULCB3aWR0aCwgaGVpZ2h0LCAwLCBGT1JNQVQsIFVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKEdMX1RFWFRVUkVfVFlQRSwgX2dsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgTUFHX0ZJTFRFUik7XG4gICAgICAgICAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoR0xfVEVYVFVSRV9UWVBFLCBfZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBNSU5fRklMVEVSKTtcblxuICAgICAgICAgICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKEdMX1RFWFRVUkVfVFlQRSwgX2dsLlRFWFRVUkVfV1JBUF9TLCBXUkFQKTtcbiAgICAgICAgICAgICAgICBfZ2wudGV4UGFyYW1ldGVyaShHTF9URVhUVVJFX1RZUEUsIF9nbC5URVhUVVJFX1dSQVBfVCwgV1JBUCk7XG5cbiAgICAgICAgICAgICAgICBpID0gNjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHdlYmdsRnJhbWVidWZmZXJbaV0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgd2ViZ2xSZW5kZXJidWZmZXJbaV0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0dXBGcmFtZUJ1ZmZlcih3ZWJnbEZyYW1lYnVmZmVyW2ldLCByZW5kZXJUYXJnZXQsIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJCdWZmZXIod2ViZ2xSZW5kZXJidWZmZXJbaV0sIHJlbmRlclRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW5kZXJUYXJnZXQuX3dlYmdsRnJhbWVidWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgICAgICAgICByZW5kZXJUYXJnZXQuX3dlYmdsUmVuZGVyYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlclRhcmdldC5kZXB0aE9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2dsLnRleEltYWdlMkQoR0xfVEVYVFVSRV9UWVBFLCAwLCBERVBUSF9DT01QT05FTlQsIHdpZHRoLCBoZWlnaHQsIDAsIERFUFRIX0NPTVBPTkVOVCwgVU5TSUdORURfU0hPUlQsIG51bGwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9nbC50ZXhJbWFnZTJEKEdMX1RFWFRVUkVfVFlQRSwgMCwgRk9STUFULCB3aWR0aCwgaGVpZ2h0LCAwLCBGT1JNQVQsIFVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKEdMX1RFWFRVUkVfVFlQRSwgX2dsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgTUFHX0ZJTFRFUik7XG4gICAgICAgICAgICAgICAgX2dsLnRleFBhcmFtZXRlcmkoR0xfVEVYVFVSRV9UWVBFLCBfZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBNSU5fRklMVEVSKTtcblxuICAgICAgICAgICAgICAgIF9nbC50ZXhQYXJhbWV0ZXJpKEdMX1RFWFRVUkVfVFlQRSwgX2dsLlRFWFRVUkVfV1JBUF9TLCBXUkFQKTtcbiAgICAgICAgICAgICAgICBfZ2wudGV4UGFyYW1ldGVyaShHTF9URVhUVVJFX1RZUEUsIF9nbC5URVhUVVJFX1dSQVBfVCwgV1JBUCk7XG5cbiAgICAgICAgICAgICAgICBzZXR1cEZyYW1lQnVmZmVyKHJlbmRlclRhcmdldC5fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBHTF9URVhUVVJFX1RZUEUpO1xuICAgICAgICAgICAgICAgIHNldHVwUmVuZGVyQnVmZmVyKHJlbmRlclRhcmdldC5fd2ViZ2xSZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChURkEpIF9nbC50ZXhQYXJhbWV0ZXJmKEdMX1RFWFRVUkVfVFlQRSwgVEZBLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBhbmlzb3Ryb3B5KTtcbiAgICAgICAgICAgIGlmIChnZW5lcmF0ZU1pcG1hcCAmJiBpc1BPVCkgX2dsLmdlbmVyYXRlTWlwbWFwKEdMX1RFWFRVUkVfVFlQRSk7XG5cbiAgICAgICAgICAgIF9nbC5iaW5kVGV4dHVyZShHTF9URVhUVVJFX1RZUEUsIG51bGwpO1xuXG4gICAgICAgICAgICBfZ2wuYmluZFJlbmRlcmJ1ZmZlcihfZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcbiAgICAgICAgICAgIF9nbC5iaW5kRnJhbWVidWZmZXIoX2dsLkZSQU1FQlVGRkVSLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1JlbmRlclRhcmdldCkge1xuICAgICAgICAgICAgaWYgKGlzQ3ViZSkge1xuICAgICAgICAgICAgICAgIGZyYW1lYnVmZmVyID0gcmVuZGVyVGFyZ2V0Ll93ZWJnbEZyYW1lYnVmZmVyW3JlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZyYW1lYnVmZmVyID0gcmVuZGVyVGFyZ2V0Ll93ZWJnbEZyYW1lYnVmZmVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2eCA9IDA7XG4gICAgICAgICAgICB2eSA9IDA7XG4gICAgICAgICAgICB3aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcbiAgICAgICAgICAgIGhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2eCA9IF92aWV3cG9ydFg7XG4gICAgICAgICAgICB2eSA9IF92aWV3cG9ydFk7XG4gICAgICAgICAgICB3aWR0aCA9IF92aWV3cG9ydFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gX3ZpZXdwb3J0SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYW1lYnVmZmVyICE9PSBfY3VycmVudEZyYW1lYnVmZmVyKSB7XG4gICAgICAgICAgICBfZ2wuYmluZEZyYW1lYnVmZmVyKF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIpO1xuICAgICAgICAgICAgc2V0Vmlld3BvcnQodngsIHZ5LCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgX2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgX2N1cnJlbnRXaWR0aCA9IHdpZHRoO1xuICAgICAgICBfY3VycmVudEhlaWdodCA9IGhlaWdodDtcbiAgICB9XG5cbiAgICB0aGlzLnNldFJlbmRlclRhcmdldCA9IHNldFJlbmRlclRhcmdldDtcblxuXG4gICAgZnVuY3Rpb24gc2V0dXBGcmFtZUJ1ZmZlcihmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlVGFyZ2V0KSB7XG4gICAgICAgIF9nbC5iaW5kRnJhbWVidWZmZXIoX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG4gICAgICAgIF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgdGV4dHVyZVRhcmdldCwgcmVuZGVyVGFyZ2V0Ll93ZWJnbCwgMCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBzZXR1cFJlbmRlckJ1ZmZlcihyZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCkge1xuXG4gICAgICAgIF9nbC5iaW5kUmVuZGVyYnVmZmVyKF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlcik7XG5cbiAgICAgICAgaWYgKHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiAhcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIpIHtcblxuICAgICAgICAgICAgX2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoX2dsLlJFTkRFUkJVRkZFUiwgX2dsLkRFUFRIX0NPTVBPTkVOVDE2LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQpO1xuICAgICAgICAgICAgX2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX0FUVEFDSE1FTlQsIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlcik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlcikge1xuXG4gICAgICAgICAgICBfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShfZ2wuUkVOREVSQlVGRkVSLCBfZ2wuU1RFTkNJTF9JTkRFWDgsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCk7XG4gICAgICAgICAgICBfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoX2dsLkZSQU1FQlVGRkVSLCBfZ2wuU1RFTkNJTF9BVFRBQ0hNRU5ULCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlcikge1xuXG4gICAgICAgICAgICBfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShfZ2wuUkVOREVSQlVGRkVSLCBfZ2wuREVQVEhfU1RFTkNJTCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0KTtcbiAgICAgICAgICAgIF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShfZ2wuUkVOREVSQlVGRkVSLCBfZ2wuUkdCQTQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVXZWJHTENvbnRleHRMb3N0KGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBMb2cud2FybihcIlJlbmRlcmVyOiB3ZWJnbCBjb250ZXh0IHdhcyBsb3N0XCIpO1xuXG4gICAgICAgIF9jb250ZXh0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW1pdChcIndlYmdsY29udGV4dGxvc3RcIiwgZSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVXZWJHTENvbnRleHRSZXN0b3JlZChlKSB7XG4gICAgICAgIExvZy5sb2coXCJSZW5kZXJlcjogd2ViZ2wgY29udGV4dCB3YXMgcmVzdG9yZWRcIik7XG5cbiAgICAgICAgaW5pdEdMKCk7XG4gICAgICAgIHNldERlZmF1bHRHTFN0YXRlKCk7XG5cbiAgICAgICAgX2NvbnRleHQgPSB0cnVlO1xuICAgICAgICB0aGlzLmVtaXQoXCJ3ZWJnbGNvbnRleHRyZXN0b3JlZFwiLCBlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRHUFVJbmZvKCkge1xuICAgICAgICB2YXIgVkVSVEVYX1NIQURFUiA9IF9nbC5WRVJURVhfU0hBREVSLFxuICAgICAgICAgICAgRlJBR01FTlRfU0hBREVSID0gX2dsLkZSQUdNRU5UX1NIQURFUixcbiAgICAgICAgICAgIEhJR0hfRkxPQVQgPSBfZ2wuSElHSF9GTE9BVCxcbiAgICAgICAgICAgIE1FRElVTV9GTE9BVCA9IF9nbC5NRURJVU1fRkxPQVQsXG5cbiAgICAgICAgICAgIEVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyA9IF9leHRlbnNpb25zLkVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyxcblxuICAgICAgICAgICAgdnNIaWdocEZsb2F0ID0gX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChWRVJURVhfU0hBREVSLCBISUdIX0ZMT0FUKSxcbiAgICAgICAgICAgIHZzTWVkaXVtcEZsb2F0ID0gX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChWRVJURVhfU0hBREVSLCBNRURJVU1fRkxPQVQpLFxuXG4gICAgICAgICAgICBmc0hpZ2hwRmxvYXQgPSBfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KEZSQUdNRU5UX1NIQURFUiwgSElHSF9GTE9BVCksXG4gICAgICAgICAgICBmc01lZGl1bXBGbG9hdCA9IF9nbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoRlJBR01FTlRfU0hBREVSLCBNRURJVU1fRkxPQVQpLFxuXG4gICAgICAgICAgICBoaWdocEF2YWlsYWJsZSA9IHZzSGlnaHBGbG9hdC5wcmVjaXNpb24gPiAwICYmIGZzSGlnaHBGbG9hdC5wcmVjaXNpb24gPiAwLFxuICAgICAgICAgICAgbWVkaXVtcEF2YWlsYWJsZSA9IHZzTWVkaXVtcEZsb2F0LnByZWNpc2lvbiA+IDAgJiYgZnNNZWRpdW1wRmxvYXQucHJlY2lzaW9uID4gMCxcblxuICAgICAgICAgICAgcHJlY2lzaW9uID0gXCJoaWdocFwiO1xuXG4gICAgICAgIGlmICghaGlnaHBBdmFpbGFibGUgfHwgRGV2aWNlLm1vYmlsZSkge1xuICAgICAgICAgICAgaWYgKG1lZGl1bXBBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICBwcmVjaXNpb24gPSBcIm1lZGl1bXBcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uID0gXCJsb3dwXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfcHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgICBfbWF4QW5pc290cm9weSA9IEVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyA/IF9nbC5nZXRQYXJhbWV0ZXIoRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCkgOiAxO1xuICAgICAgICBfbWF4VGV4dHVyZXMgPSBfZ2wuZ2V0UGFyYW1ldGVyKF9nbC5NQVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIF9tYXhWZXJ0ZXhUZXh0dXJlcyA9IF9nbC5nZXRQYXJhbWV0ZXIoX2dsLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIF9tYXhUZXh0dXJlU2l6ZSA9IF9nbC5nZXRQYXJhbWV0ZXIoX2dsLk1BWF9URVhUVVJFX1NJWkUpO1xuICAgICAgICBfbWF4Q3ViZVRleHR1cmVTaXplID0gX2dsLmdldFBhcmFtZXRlcihfZ2wuTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSk7XG4gICAgICAgIF9tYXhSZW5kZXJCdWZmZXJTaXplID0gX2dsLmdldFBhcmFtZXRlcihfZ2wuTUFYX1JFTkRFUkJVRkZFUl9TSVpFKTtcblxuICAgICAgICBfbWF4VW5pZm9ybXMgPSBtYXgoX2dsLmdldFBhcmFtZXRlcihfZ2wuTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyksIF9nbC5nZXRQYXJhbWV0ZXIoX2dsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTKSkgKiA0O1xuICAgICAgICBfbWF4VmFyeWluZ3MgPSBfZ2wuZ2V0UGFyYW1ldGVyKF9nbC5NQVhfVkFSWUlOR19WRUNUT1JTKSAqIDQ7XG4gICAgICAgIF9tYXhBdHRyaWJ1dGVzID0gX2dsLmdldFBhcmFtZXRlcihfZ2wuTUFYX1ZFUlRFWF9BVFRSSUJTKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGdldEV4dGVuc2lvbnMoKSB7XG4gICAgICAgIF9leHRlbnNpb25zID0ge307XG5cbiAgICAgICAgZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpO1xuXG4gICAgICAgIGdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpO1xuICAgICAgICBfZXh0ZW5zaW9ucy5XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19mb3JtYXRzID0gX2V4dGVuc2lvbnMuV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMgPyBfZ2wuZ2V0UGFyYW1ldGVyKF9nbC5DT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUykgOiBudWxsO1xuXG4gICAgICAgIGdldEV4dGVuc2lvbihcIk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1wiKTtcbiAgICB9XG5cblxuICAgIHZhciBnZXRFeHRlbnNpb25fcHJlZml4ZXMgPSBbXCJXRUJLSVRcIiwgXCJNT1pcIiwgXCJPXCIsIFwiTVNcIiwgXCJ3ZWJraXRcIiwgXCJtb3pcIiwgXCJvXCIsIFwibXNcIl0sXG4gICAgICAgIGdldEV4dGVuc2lvbl9sZW5ndGggPSBnZXRFeHRlbnNpb25fcHJlZml4ZXMubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIGV4dGVuc2lvbiA9IF9leHRlbnNpb25zW25hbWVdIHx8IChfZXh0ZW5zaW9uc1tuYW1lXSA9IF9nbC5nZXRFeHRlbnNpb24obmFtZSkpO1xuXG4gICAgICAgIGlmIChleHRlbnNpb24gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGdldEV4dGVuc2lvbl9sZW5ndGg7XG5cbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKGV4dGVuc2lvbiA9IF9nbC5nZXRFeHRlbnNpb24oZ2V0RXh0ZW5zaW9uX3ByZWZpeGVzW2ldICsgXCJfXCIgKyBuYW1lKSkpIHJldHVybiAoX2V4dGVuc2lvbnNbbmFtZV0gPSBleHRlbnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcbiAgICB9XG5cbiAgICB0aGlzLmdldEV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbjtcblxuXG4gICAgZnVuY3Rpb24gaW5pdEdMKCkge1xuICAgICAgICBfZ2wgPSBnZXRXZWJHTENvbnRleHQoX2VsZW1lbnQsIF9hdHRyaWJ1dGVzKTtcblxuICAgICAgICBfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0IHx8IChfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByYW5nZU1pbjogMSxcbiAgICAgICAgICAgICAgICByYW5nZU1heDogMSxcbiAgICAgICAgICAgICAgICBwcmVjaXNpb246IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdldEV4dGVuc2lvbnMoKTtcbiAgICAgICAgZ2V0R1BVSW5mbygpO1xuXG4gICAgICAgIF9lbmFibGVkQXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KF9tYXhBdHRyaWJ1dGVzKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHNldERlZmF1bHRHTFN0YXRlKCkge1xuXG4gICAgICAgIF9nbC5jbGVhckNvbG9yKDAsIDAsIDAsIDEpO1xuICAgICAgICB1c2VEZXB0aCAmJiBfZ2wuY2xlYXJEZXB0aCgxKTtcbiAgICAgICAgX2dsLmNsZWFyU3RlbmNpbCgwKTtcblxuICAgICAgICB1c2VEZXB0aCAmJiBzZXREZXB0aFRlc3QodHJ1ZSk7XG4gICAgICAgIHVzZURlcHRoICYmIF9nbC5kZXB0aEZ1bmMoX2dsLkxFUVVBTCk7XG5cbiAgICAgICAgX2dsLmZyb250RmFjZShfZ2wuQ0NXKTtcblxuICAgICAgICBzZXRDdWxsRmFjZShDdWxsRmFjZS5CYWNrKTtcbiAgICAgICAgc2V0QmxlbmRpbmcoQmxlbmRpbmcuRGVmYXVsdCk7XG4gICAgICAgIHNldExpbmVXaWR0aCgxKTtcblxuICAgICAgICBzZXRWaWV3cG9ydCgpO1xuICAgIH1cblxuXG4gICAgdmFyIFNIQURFUl9TUExJVEVSID0gL1tcXG47XSsvLFxuICAgICAgICBBVFRSSUJVUkUgPSAvYXR0cmlidXRlXFxzKyhbYS16XStcXHMrKT8oW0EtWmEtejAtOV0rKVxccysoW2EtekEtWl8wLTldKylcXHMqKFxcW1xccyooLispXFxzKlxcXSk/LyxcbiAgICAgICAgVU5JRk9STSA9IC91bmlmb3JtXFxzKyhbYS16XStcXHMrKT8oW0EtWmEtejAtOV0rKVxccysoW2EtekEtWl8wLTldKylcXHMqKFxcW1xccyooLispXFxzKlxcXSk/LyxcbiAgICAgICAgREVGSU5FID0gLyNkZWZpbmVcXHMrKFthLXpBLVpfMC05XSspP1xccysoWzAtOV0rKT8vO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VVbmlmb3Jtc0F0dHJpYnV0ZXNBcnJheXModmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlciwgYXR0cmlidXRlcywgdW5pZm9ybXMpIHtcbiAgICAgICAgdmFyIHNyYyA9IHZlcnRleFNoYWRlciArIGZyYWdtZW50U2hhZGVyLFxuICAgICAgICAgICAgbGluZXMgPSBzcmMuc3BsaXQoU0hBREVSX1NQTElURVIpLFxuICAgICAgICAgICAgbWF0Y2hBdHRyaWJ1dGVzLCBtYXRjaFVuaWZvcm1zLFxuICAgICAgICAgICAgaSA9IGxpbmVzLmxlbmd0aCxcbiAgICAgICAgICAgIGxpbmU7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgbWF0Y2hBdHRyaWJ1dGVzID0gbGluZS5tYXRjaChBVFRSSUJVUkUpO1xuICAgICAgICAgICAgbWF0Y2hVbmlmb3JtcyA9IGxpbmUubWF0Y2goVU5JRk9STSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobWF0Y2hBdHRyaWJ1dGVzWzNdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hVbmlmb3Jtcykge1xuICAgICAgICAgICAgICAgIHVuaWZvcm1zLnB1c2gobWF0Y2hVbmlmb3Jtc1szXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlVW5pZm9ybXNBdHRyaWJ1dGVzQXJyYXlzID0gcGFyc2VVbmlmb3Jtc0F0dHJpYnV0ZXNBcnJheXM7XG5cbiAgICBmdW5jdGlvbiBwYXJzZVVuaWZvcm1zQXR0cmlidXRlcyhwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyLCBhdHRyaWJ1dGVzLCB1bmlmb3Jtcykge1xuICAgICAgICB2YXIgc3JjID0gdmVydGV4U2hhZGVyICsgZnJhZ21lbnRTaGFkZXIsXG4gICAgICAgICAgICBsaW5lcyA9IHNyYy5zcGxpdChTSEFERVJfU1BMSVRFUiksXG4gICAgICAgICAgICBkZWZpbmVzID0ge30sIG1hdGNoQXR0cmlidXRlcywgbWF0Y2hVbmlmb3JtcywgbWF0Y2hEZWZpbmVzLFxuICAgICAgICAgICAgdW5pZm9ybUFycmF5LCBuYW1lLCB0eXBlLCBsb2NhdGlvbiwgbGVuZ3RoLCBsaW5lLFxuICAgICAgICAgICAgaSwgajtcblxuICAgICAgICBpID0gbGluZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBtYXRjaERlZmluZXMgPSBsaW5lc1tpXS5tYXRjaChERUZJTkUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoRGVmaW5lcykgZGVmaW5lc1ttYXRjaERlZmluZXNbMV1dID0gTnVtYmVyKG1hdGNoRGVmaW5lc1syXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpID0gbGluZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICBtYXRjaEF0dHJpYnV0ZXMgPSBsaW5lLm1hdGNoKEFUVFJJQlVSRSk7XG4gICAgICAgICAgICBtYXRjaFVuaWZvcm1zID0gbGluZS5tYXRjaChVTklGT1JNKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBtYXRjaEF0dHJpYnV0ZXNbM107XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IGNyZWF0ZUF0dHJpYnV0ZShtYXRjaEF0dHJpYnV0ZXNbMl0sIF9nbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBuYW1lKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVW5pZm9ybXMpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gbWF0Y2hVbmlmb3Jtc1syXTtcbiAgICAgICAgICAgICAgICBuYW1lID0gbWF0Y2hVbmlmb3Jtc1szXTtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSBtYXRjaFVuaWZvcm1zWzVdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBkZWZpbmVzW2xlbmd0aC50cmltKCldIHx8IGxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUFycmF5ID0gdW5pZm9ybXNbbmFtZV0gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBqID0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoai0tKSB1bmlmb3JtQXJyYXlbal0gPSBjcmVhdGVVbmlmb3JtKHR5cGUsIF9nbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSArIFwiW1wiICsgaiArIFwiXVwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSBfZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24pIHVuaWZvcm1zW25hbWVdID0gY3JlYXRlVW5pZm9ybSh0eXBlLCBsb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZVVuaWZvcm1zQXR0cmlidXRlcyA9IHBhcnNlVW5pZm9ybXNBdHRyaWJ1dGVzO1xuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGUodHlwZSwgbG9jYXRpb24pIHtcbiAgICAgICAgaWYgKGxvY2F0aW9uIDwgMCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFwiaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXR0cmlidXRlMWkobG9jYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZmxvYXRcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGUxZihsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ2ZWMyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXR0cmlidXRlMmYobG9jYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwidmVjM1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZTNmKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcInZlYzRcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGU0Zihsb2NhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBBdHRyaWJ1dGUxaShsb2NhdGlvbikge1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgQXR0cmlidXRlMWkucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uO1xuXG4gICAgICAgIGlmIChsb2NhdGlvbiA+IC0xKSB7XG4gICAgICAgICAgICBfZ2wuYmluZEJ1ZmZlcihfZ2wuQVJSQVlfQlVGRkVSLCB2YWx1ZSk7XG4gICAgICAgICAgICBlbmFibGVBdHRyaWJ1dGUobG9jYXRpb24pO1xuICAgICAgICAgICAgX2dsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jYXRpb24sIDEsIF9nbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZTFmKGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICBBdHRyaWJ1dGUxZi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb247XG5cbiAgICAgICAgaWYgKGxvY2F0aW9uID4gLTEpIHtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKF9nbC5BUlJBWV9CVUZGRVIsIHZhbHVlKTtcbiAgICAgICAgICAgIGVuYWJsZUF0dHJpYnV0ZShsb2NhdGlvbik7XG4gICAgICAgICAgICBfZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiwgMSwgX2dsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQXR0cmlidXRlMmYobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIH1cblxuICAgIEF0dHJpYnV0ZTJmLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gdGhpcy5sb2NhdGlvbjtcblxuICAgICAgICBpZiAobG9jYXRpb24gPiAtMSkge1xuICAgICAgICAgICAgX2dsLmJpbmRCdWZmZXIoX2dsLkFSUkFZX0JVRkZFUiwgdmFsdWUpO1xuICAgICAgICAgICAgZW5hYmxlQXR0cmlidXRlKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uLCAyLCBfZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBBdHRyaWJ1dGUzZihsb2NhdGlvbikge1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgQXR0cmlidXRlM2YucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uO1xuXG4gICAgICAgIGlmIChsb2NhdGlvbiA+IC0xKSB7XG4gICAgICAgICAgICBfZ2wuYmluZEJ1ZmZlcihfZ2wuQVJSQVlfQlVGRkVSLCB2YWx1ZSk7XG4gICAgICAgICAgICBlbmFibGVBdHRyaWJ1dGUobG9jYXRpb24pO1xuICAgICAgICAgICAgX2dsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jYXRpb24sIDMsIF9nbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZTRmKGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICBBdHRyaWJ1dGU0Zi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb247XG5cbiAgICAgICAgaWYgKGxvY2F0aW9uID4gLTEpIHtcbiAgICAgICAgICAgIF9nbC5iaW5kQnVmZmVyKF9nbC5BUlJBWV9CVUZGRVIsIHZhbHVlKTtcbiAgICAgICAgICAgIGVuYWJsZUF0dHJpYnV0ZShsb2NhdGlvbik7XG4gICAgICAgICAgICBfZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiwgNCwgX2dsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbmlmb3JtKHR5cGUsIGxvY2F0aW9uKSB7XG4gICAgICAgIGlmICghbG9jYXRpb24pIHJldHVybiBudWxsO1xuXG4gICAgICAgIGlmICh0eXBlID09PSBcImludFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuaWZvcm0xaShsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJmbG9hdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuaWZvcm0xZihsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ2ZWMyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5pZm9ybTJmKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcInZlYzNcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmlmb3JtM2YobG9jYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwidmVjNFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuaWZvcm00Zihsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJtYXQyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJtYXQzXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJtYXQ0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJzYW1wbGVyMkRcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmlmb3JtVGV4dHVyZShsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJzYW1wbGVyQ3ViZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuaWZvcm1UZXh0dXJlQ3ViZShsb2NhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBVbmlmb3JtMWYobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIFVuaWZvcm0xZi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIF9nbC51bmlmb3JtMWYodGhpcy5sb2NhdGlvbiwgdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFVuaWZvcm0xaShsb2NhdGlvbikge1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgVW5pZm9ybTFpLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgX2dsLnVuaWZvcm0xaSh0aGlzLmxvY2F0aW9uLCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gVW5pZm9ybTJmKGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBWZWMyKE5hTiwgTmFOKTtcbiAgICB9XG5cbiAgICBVbmlmb3JtMmYucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlIHx8IHRoaXMudmFsdWUubm90RXF1YWxzKHZhbHVlKSkge1xuICAgICAgICAgICAgX2dsLnVuaWZvcm0yZih0aGlzLmxvY2F0aW9uLCB2YWx1ZS54LCB2YWx1ZS55KTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuY29weSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gVW5pZm9ybTNmKGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBWZWMzKE5hTiwgTmFOLCBOYU4pO1xuICAgIH1cblxuICAgIFVuaWZvcm0zZi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy52YWx1ZS5ub3RFcXVhbHModmFsdWUpKSB7XG4gICAgICAgICAgICBfZ2wudW5pZm9ybTNmKHRoaXMubG9jYXRpb24sIHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnopO1xuICAgICAgICAgICAgdGhpcy52YWx1ZS5jb3B5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBVbmlmb3JtNGYobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IFZlYzQoTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgICB9XG5cbiAgICBVbmlmb3JtNGYucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlIHx8IHRoaXMudmFsdWUubm90RXF1YWxzKHZhbHVlKSkge1xuICAgICAgICAgICAgX2dsLnVuaWZvcm00Zih0aGlzLmxvY2F0aW9uLCB2YWx1ZS54LCB2YWx1ZS55LCB2YWx1ZS56LCB2YWx1ZS53KTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuY29weSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gVW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbikge1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXcgTWF0MihcbiAgICAgICAgICAgIE5hTiwgTmFOLFxuICAgICAgICAgICAgTmFOLCBOYU5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBVbmlmb3JtTWF0cml4MmZ2LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLnZhbHVlLm5vdEVxdWFscyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIF9nbC51bmlmb3JtTWF0cml4MmZ2KHRoaXMubG9jYXRpb24sIGZhbHNlLCB2YWx1ZS5lbGVtZW50cyk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNvcHkodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IE1hdDMoXG4gICAgICAgICAgICBOYU4sIE5hTiwgTmFOLFxuICAgICAgICAgICAgTmFOLCBOYU4sIE5hTixcbiAgICAgICAgICAgIE5hTiwgTmFOLCBOYU5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBVbmlmb3JtTWF0cml4M2Z2LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLnZhbHVlLm5vdEVxdWFscyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIF9nbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubG9jYXRpb24sIGZhbHNlLCB2YWx1ZS5lbGVtZW50cyk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNvcHkodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IE1hdDQoXG4gICAgICAgICAgICBOYU4sIE5hTiwgTmFOLCBOYU4sXG4gICAgICAgICAgICBOYU4sIE5hTiwgTmFOLCBOYU4sXG4gICAgICAgICAgICBOYU4sIE5hTiwgTmFOLCBOYU4sXG4gICAgICAgICAgICBOYU4sIE5hTiwgTmFOLCBOYU5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBVbmlmb3JtTWF0cml4NGZ2LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLnZhbHVlLm5vdEVxdWFscyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIF9nbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMubG9jYXRpb24sIGZhbHNlLCB2YWx1ZS5lbGVtZW50cyk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNvcHkodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFVuaWZvcm1UZXh0dXJlKGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICBVbmlmb3JtVGV4dHVyZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHNldFRleHR1cmUodGhpcy5sb2NhdGlvbiwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBVbmlmb3JtVGV4dHVyZUN1YmUobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIH1cblxuICAgIFVuaWZvcm1UZXh0dXJlQ3ViZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHNldFRleHR1cmVDdWJlKHRoaXMubG9jYXRpb24sIHZhbHVlKTtcbiAgICB9O1xufVxuXG5FdmVudEVtaXR0ZXIuZXh0ZW5kKFJlbmRlcmVyKTtcblxuXG52YXIgZ3VpQ29udGVudF92ZXJ0ZXggPSBbXG4gICAgXCJhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcIixcbiAgICBcImF0dHJpYnV0ZSB2ZWMyIHV2O1wiLFxuXG4gICAgXCJ1bmlmb3JtIG1hdDQgbXZwTWF0cml4O1wiLFxuICAgIFwidW5pZm9ybSB2ZWMyIHNpemU7XCIsXG4gICAgXCJ1bmlmb3JtIHZlYzQgY3JvcDtcIixcblxuICAgIFwidmFyeWluZyB2ZWMyIHZVdjtcIixcblxuICAgIFwidm9pZCBtYWluKCkge1wiLFxuICAgIFwiXHR2VXYueCA9IHV2LnggKiBjcm9wLnogKyBjcm9wLng7XCIsXG4gICAgXCJcdHZVdi55ID0gdXYueSAqIGNyb3AudyArIGNyb3AueTtcIixcbiAgICBcIlx0Z2xfUG9zaXRpb24gPSBtdnBNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLnh5ICogc2l6ZSwgcG9zaXRpb24ueiwgMS4wKTtcIixcbiAgICBcIn1cIlxuXS5qb2luKFwiXFxuXCIpO1xuXG52YXIgZ3VpQ29udGVudF9mcmFnbWVudCA9IFtcbiAgICBcInVuaWZvcm0gc2FtcGxlcjJEIHRleHR1cmU7XCIsXG4gICAgXCJ1bmlmb3JtIGZsb2F0IGFscGhhO1wiLFxuXG4gICAgXCJ2YXJ5aW5nIHZlYzIgdlV2O1wiLFxuXG4gICAgXCJ2b2lkIG1haW4oKSB7XCIsXG4gICAgXCJcdHZlYzQgZmluYWxDb2xvciA9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VXYpO1wiLFxuICAgIFwiXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KGZpbmFsQ29sb3IueHl6LCBmaW5hbENvbG9yLncgKiBhbHBoYSk7XCIsXG4gICAgXCJ9XCJcbl0uam9pbihcIlxcblwiKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlcmVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIFNoYWRlckNodW5rcyA9IHtcbiAgICBkSGR4eV9md2Q6IFtcbiAgICAgICAgXCJ2ZWMyIGRIZHh5X2Z3ZChzYW1wbGVyMkQgbWFwLCB2ZWMyIHV2LCBmbG9hdCBzY2FsZSkge1wiLFxuXG4gICAgICAgIFwiXHR2ZWMyIGRTVGR4ID0gZEZkeCh1dik7XCIsXG4gICAgICAgIFwiXHR2ZWMyIGRTVGR5ID0gZEZkeSh1dik7XCIsXG5cbiAgICAgICAgXCJcdGZsb2F0IEhsbCA9IHNjYWxlICogdGV4dHVyZTJEKG1hcCwgdXYpLng7XCIsXG4gICAgICAgIFwiXHRmbG9hdCBkQnggPSBzY2FsZSAqIHRleHR1cmUyRChtYXAsIHV2ICsgZFNUZHgpLnggLSBIbGw7XCIsXG4gICAgICAgIFwiXHRmbG9hdCBkQnkgPSBzY2FsZSAqIHRleHR1cmUyRChtYXAsIHV2ICsgZFNUZHkpLnggLSBIbGw7XCIsXG5cbiAgICAgICAgXCJcdHJldHVybiB2ZWMyKGRCeCwgZEJ5KTtcIixcbiAgICAgICAgXCJ9XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBwZXJ0dXJiTm9ybWFsQXJiOiBbXG4gICAgICAgIFwidmVjMyBwZXJ0dXJiTm9ybWFsQXJiKHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5KSB7XCIsXG5cbiAgICAgICAgXCJcdHZlYzMgdlNpZ21hWCA9IGRGZHgoc3VyZl9wb3MpO1wiLFxuICAgICAgICBcIlx0dmVjMyB2U2lnbWFZID0gZEZkeShzdXJmX3Bvcyk7XCIsXG4gICAgICAgIFwiXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1wiLFxuXG4gICAgICAgIFwiXHR2ZWMzIFIxID0gY3Jvc3ModlNpZ21hWSwgdk4pO1wiLFxuICAgICAgICBcIlx0dmVjMyBSMiA9IGNyb3NzKHZOLCB2U2lnbWFYKTtcIixcblxuICAgICAgICBcIlx0ZmxvYXQgZkRldCA9IGRvdCh2U2lnbWFYLCBSMSk7XCIsXG4gICAgICAgIFwiXHR2ZWMzIHZHcmFkID0gc2lnbihmRGV0KSAqIChkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIpO1wiLFxuXG4gICAgICAgIFwiXHRyZXR1cm4gbm9ybWFsaXplKGFicyhmRGV0KSAqIHN1cmZfbm9ybSAtIHZHcmFkKTtcIixcbiAgICAgICAgXCJ9XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBwZXJ0dXJiTm9ybWFsMkFyYjogW1xuICAgICAgICBcInZlYzMgcGVydHVyYk5vcm1hbDJBcmIoc2FtcGxlcjJEIG1hcCwgdmVjMiB1diwgdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgZmxvYXQgc2NhbGUpIHtcIixcblxuICAgICAgICBcIlx0dmVjMyBxMCA9IGRGZHgoZXllX3Bvcy54eXopO1wiLFxuICAgICAgICBcIlx0dmVjMyBxMSA9IGRGZHkoZXllX3Bvcy54eXopO1wiLFxuICAgICAgICBcIlx0dmVjMiBzdDAgPSBkRmR4KHV2LnN0KTtcIixcbiAgICAgICAgXCJcdHZlYzIgc3QxID0gZEZkeSh1di5zdCk7XCIsXG5cbiAgICAgICAgXCJcdHZlYzMgUyA9IG5vcm1hbGl6ZShxMCAqIHN0MS50IC0gcTEgKiBzdDAudCk7XCIsXG4gICAgICAgIFwiXHR2ZWMzIFQgPSBub3JtYWxpemUoLXEwICogc3QxLnMgKyBxMSAqIHN0MC5zKTtcIixcbiAgICAgICAgXCJcdHZlYzMgTiA9IG5vcm1hbGl6ZShzdXJmX25vcm0pO1wiLFxuXG4gICAgICAgIFwiXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQobWFwLCB1dikueHl6ICogMi4wIC0gMS4wO1wiLFxuICAgICAgICBcIlx0bWFwTi54eSA9IHNjYWxlICogbWFwTi54eTtcIixcbiAgICAgICAgXCJcdG1hdDMgdHNuID0gbWF0MyhTLCBULCBOKTtcIixcblxuICAgICAgICBcIlx0cmV0dXJuIG5vcm1hbGl6ZSh0c24gKiBtYXBOKTtcIixcbiAgICAgICAgXCJ9XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBjb21wb3NlTWF0NDogW1xuICAgICAgICBcIm1hdDQgY29tcG9zZU1hdDQodmVjMyBwb3NpdGlvbiwgdmVjMyBzY2FsZSwgdmVjNCByb3RhdGlvbikge1wiLFxuICAgICAgICBcIlx0bWF0NCBtYXQ7XCIsXG4gICAgICAgIFwiXHRmbG9hdCB4ID0gcm90YXRpb24ueCwgeSA9IHJvdGF0aW9uLnksIHogPSByb3RhdGlvbi56LCB3ID0gcm90YXRpb24udyxcIixcblxuICAgICAgICBcIlx0XHR4MiA9IHggKyB4LCB5MiA9IHkgKyB5LCB6MiA9IHogKyB6LFwiLFxuICAgICAgICBcIlx0XHR4eCA9IHggKiB4MiwgeHkgPSB4ICogeTIsIHh6ID0geCAqIHoyLFwiLFxuICAgICAgICBcIlx0XHR5eSA9IHkgKiB5MiwgeXogPSB5ICogejIsIHp6ID0geiAqIHoyLFwiLFxuICAgICAgICBcIlx0XHR3eCA9IHcgKiB4Miwgd3kgPSB3ICogeTIsIHd6ID0gdyAqIHoyLFwiLFxuXG4gICAgICAgIFwiXHRcdHN4ID0gc2NhbGUueCwgc3kgPSBzY2FsZS55LCBzeiA9IHNjYWxlLno7XCIsXG5cbiAgICAgICAgXCJcdG1hdFswXVswXSA9ICgxLjAgLSAoeXkgKyB6eikpICogc3g7XCIsXG4gICAgICAgIFwiXHRtYXRbMV1bMF0gPSAoeHkgLSB3eikgKiBzeTtcIixcbiAgICAgICAgXCJcdG1hdFsyXVswXSA9ICh4eiArIHd5KSAqIHN6O1wiLFxuXG4gICAgICAgIFwiXHRtYXRbMF1bMV0gPSAoeHkgKyB3eikgKiBzeDtcIixcbiAgICAgICAgXCJcdG1hdFsxXVsxXSA9ICgxLjAgLSAoeHggKyB6eikpICogc3k7XCIsXG4gICAgICAgIFwiXHRtYXRbMl1bMV0gPSAoeXogLSB3eCkgKiBzejtcIixcblxuICAgICAgICBcIlx0bWF0WzBdWzJdID0gKHh6IC0gd3kpICogc3g7XCIsXG4gICAgICAgIFwiXHRtYXRbMV1bMl0gPSAoeXogKyB3eCkgKiBzeTtcIixcbiAgICAgICAgXCJcdG1hdFsyXVsyXSA9ICgxLjAgLSAoeHggKyB5eSkpICogc3o7XCIsXG5cbiAgICAgICAgXCJcdG1hdFswXVszXSA9IDAuMDtcIixcbiAgICAgICAgXCJcdG1hdFsxXVszXSA9IDAuMDtcIixcbiAgICAgICAgXCJcdG1hdFsyXVszXSA9IDAuMDtcIixcblxuICAgICAgICBcIlx0bWF0WzNdWzBdID0gcG9zaXRpb24ueDtcIixcbiAgICAgICAgXCJcdG1hdFszXVsxXSA9IHBvc2l0aW9uLnk7XCIsXG4gICAgICAgIFwiXHRtYXRbM11bMl0gPSBwb3NpdGlvbi56O1wiLFxuICAgICAgICBcIlx0bWF0WzNdWzNdID0gMS4wO1wiLFxuXG4gICAgICAgIFwiXHRyZXR1cm4gbWF0O1wiLFxuICAgICAgICBcIn1cIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIGdldEJvbmVNYXRyaXg6IFtcbiAgICAgICAgXCIjaWZkZWYgVVNFX1NLSU5OSU5HXCIsXG4gICAgICAgIFwibWF0NCBnZXRCb25lTWF0cml4KCkge1wiLFxuICAgICAgICBcIlx0bWF0NCByZXN1bHQgPSBib25lV2VpZ2h0LnggKiBjb21wb3NlTWF0NChib25lc1Bvc1tpbnQoYm9uZUluZGV4LngpXSwgYm9uZXNTY2xbaW50KGJvbmVJbmRleC54KV0sIGJvbmVzUm90W2ludChib25lSW5kZXgueCldKTtcIixcbiAgICAgICAgXCJcdHJlc3VsdCA9IHJlc3VsdCArIGJvbmVXZWlnaHQueSAqIGNvbXBvc2VNYXQ0KGJvbmVzUG9zW2ludChib25lSW5kZXgueSldLCBib25lc1NjbFtpbnQoYm9uZUluZGV4LnkpXSwgYm9uZXNSb3RbaW50KGJvbmVJbmRleC55KV0pO1wiLFxuICAgICAgICBcIlx0cmVzdWx0ID0gcmVzdWx0ICsgYm9uZVdlaWdodC56ICogY29tcG9zZU1hdDQoYm9uZXNQb3NbaW50KGJvbmVJbmRleC56KV0sIGJvbmVzU2NsW2ludChib25lSW5kZXgueildLCBib25lc1JvdFtpbnQoYm9uZUluZGV4LnopXSk7XCIsXG4gICAgICAgIFwiXHRyZXR1cm4gcmVzdWx0O1wiLFxuICAgICAgICBcIn1cIixcbiAgICAgICAgXCIjZW5kaWZcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIGJvbmU6IFtcbiAgICAgICAgXCJcdCNpZmRlZiBVU0VfU0tJTk5JTkdcIixcbiAgICAgICAgXCJcdFx0bWF0NCBib25lTWF0cml4ID0gZ2V0Qm9uZU1hdHJpeCgpO1wiLFxuXG4gICAgICAgIFwiXHRcdCNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXCIsXG4gICAgICAgIFwiXHRcdFx0dmVjNCBib25lVmVydGV4ID0gdmVjNCggbW9ycGhlZCwgMS4wICk7XCIsXG4gICAgICAgIFwiXHRcdCNlbHNlXCIsXG4gICAgICAgIFwiXHRcdFx0dmVjNCBib25lVmVydGV4ID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1wiLFxuICAgICAgICBcIlx0XHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0XHR2ZWM0IGJvbmUgPSBib25lTWF0cml4ICogYm9uZVZlcnRleDtcIixcbiAgICAgICAgXCJcdCNlbmRpZlwiLFxuICAgICAgICBcIlwiXG4gICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgYm9uZU5vcm1hbDogW1xuICAgICAgICBcIlx0I2lmZGVmIFVTRV9TS0lOTklOR1wiLFxuICAgICAgICBcIlx0XHQjaWZkZWYgVVNFX01PUlBITk9STUFMU1wiLFxuICAgICAgICBcIlx0XHRcdHZlYzQgYm9uZU5vcm1hbCA9IGJvbmVNYXRyaXggKiB2ZWM0KCBtb3JwaGVkTm9ybWFsLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0I2Vsc2VcIixcbiAgICAgICAgXCJcdFx0XHR2ZWM0IGJvbmVOb3JtYWwgPSBib25lTWF0cml4ICogdmVjNCggbm9ybWFsLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0I2VuZGlmXCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIHRyYW5zZm9ybWVkTm9ybWFsOiBbXG4gICAgICAgIFwiXHQjaWZkZWYgVVNFX1NLSU5OSU5HXCIsXG4gICAgICAgIFwiXHR2ZWMzIG9iamVjdE5vcm1hbCA9IGJvbmVOb3JtYWwueHl6O1wiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdCNpZiAhZGVmaW5lZCggVVNFX1NLSU5OSU5HICkgJiYgZGVmaW5lZCggVVNFX01PUlBITk9STUFMUyApXCIsXG4gICAgICAgIFwiXHR2ZWMzIG9iamVjdE5vcm1hbCA9IG1vcnBoZWROb3JtYWw7XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmICFkZWZpbmVkKCBVU0VfU0tJTk5JTkcgKSAmJiAhIGRlZmluZWQoIFVTRV9NT1JQSE5PUk1BTFMgKVwiLFxuICAgICAgICBcIlx0dmVjMyBvYmplY3ROb3JtYWwgPSBub3JtYWw7XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0dmVjMyB0cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIG9iamVjdE5vcm1hbDtcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIHdvcmxkUG9zaXRpb246IFtcbiAgICAgICAgXCJcdCNpZmRlZiBVU0VfU0tJTk5JTkdcIixcbiAgICAgICAgXCJcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogYm9uZTtcIixcbiAgICAgICAgXCJcdCNlbmRpZlwiLFxuXG4gICAgICAgIFwiXHQjaWYgZGVmaW5lZCggVVNFX01PUlBIVEFSR0VUUyApICYmICEgZGVmaW5lZCggVVNFX1NLSU5OSU5HIClcIixcbiAgICAgICAgXCJcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggbW9ycGhlZCwgMS4wICk7XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmICEgZGVmaW5lZCggVVNFX01PUlBIVEFSR0VUUyApICYmICEgZGVmaW5lZCggVVNFX1NLSU5OSU5HIClcIixcbiAgICAgICAgXCJcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1wiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICB3b3JsZFBvc2l0aW9uX3Nwcml0ZTogW1xuICAgICAgICBcIlx0dmVjNCB3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbi54eSAqIHNpemUsIHBvc2l0aW9uLnosIDEuMCApO1wiLFxuICAgICAgICBcIlwiXG4gICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgd29ybGRQb3NpdGlvbl9lbWl0dGVyOiBbXG4gICAgICAgIFwiXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIG12UG9zaXRpb246IFtcbiAgICAgICAgXCJcdCNpZmRlZiBVU0VfU0tJTk5JTkdcIixcbiAgICAgICAgXCJcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIGJvbmU7XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmICFkZWZpbmVkKCBVU0VfU0tJTk5JTkcgKSAmJiBkZWZpbmVkKCBVU0VfTU9SUEhUQVJHRVRTIClcIixcbiAgICAgICAgXCJcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIG1vcnBoZWQsIDEuMCApO1wiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdCNpZiAhZGVmaW5lZCggVVNFX1NLSU5OSU5HICkgJiYgIWRlZmluZWQoIFVTRV9NT1JQSFRBUkdFVFMgKVwiLFxuICAgICAgICBcIlx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1wiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBtdlBvc2l0aW9uX3Nwcml0ZTogW1xuICAgICAgICBcIlx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24ueHkgKiBzaXplLCBwb3NpdGlvbi56LCAxLjAgKTtcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIG12UG9zaXRpb25fZW1pdHRlcjogW1xuICAgICAgICBcIlx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1wiLFxuICAgICAgICBcIlwiXG4gICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgcGFydGljbGVfaGVhZGVyX3ZlcnRleDogW1xuICAgICAgICBcImF0dHJpYnV0ZSB2ZWMzIHBhcnRpY2xlQ29sb3I7XCIsXG4gICAgICAgIFwidW5pZm9ybSBmbG9hdCBwYXJ0aWNsZVNpemVSYXRpbztcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIHBhcnRpY2xlX2hlYWRlcjogW1xuICAgICAgICBcInZhcnlpbmcgZmxvYXQgdkFuZ2xlO1wiLFxuICAgICAgICBcInZhcnlpbmcgZmxvYXQgdkFscGhhO1wiLFxuICAgICAgICBcInZhcnlpbmcgZmxvYXQgdlNpemU7XCIsXG4gICAgICAgIFwidmFyeWluZyB2ZWMzIHZQYXJ0aWNsZUNvbG9yO1wiLFxuICAgICAgICBcIlwiXG4gICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgcGFydGljbGVfdmVydGV4OiBbXG4gICAgICAgIFwiXHR2QW5nbGUgPSBkYXRhLng7XCIsXG4gICAgICAgIFwiXHR2QWxwaGEgPSBkYXRhLno7XCIsXG4gICAgICAgIFwiXHR2U2l6ZSA9IGRhdGEueTtcIixcbiAgICAgICAgXCJcdHZQYXJ0aWNsZUNvbG9yID0gcGFydGljbGVDb2xvcjtcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIHBhcnRpY2xlX3ZlcnRleF9zaXplOiBbXG4gICAgICAgIFwiXHRnbF9Qb2ludFNpemUgPSB2U2l6ZSAqIChwYXJ0aWNsZVNpemVSYXRpbyAvIGxlbmd0aChtdlBvc2l0aW9uLnh5eikpO1xcblwiLFxuICAgICAgICBcIlwiXG4gICAgXS5qb2luKFwiXFxuXCIpLFxuXG4gICAgcGFydGljbGVfdmVydGV4X3NpemVfMmQ6IFtcbiAgICAgICAgXCJcdGdsX1BvaW50U2l6ZSA9IHZTaXplICogcGFydGljbGVTaXplUmF0aW87XFxuXCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBzcHJpdGVfaGVhZGVyOiBbXG4gICAgICAgIFwidW5pZm9ybSB2ZWMyIHNpemU7XCIsXG4gICAgICAgIFwidW5pZm9ybSB2ZWM0IGNyb3A7XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBzcHJpdGVfdmVydGV4X2FmdGVyOiBbXG4gICAgICAgIFwiXHR2VXYueCA9IHZVdi54ICogY3JvcC56ICsgY3JvcC54O1wiLFxuICAgICAgICBcIlx0dlV2LnkgPSB2VXYueSAqIGNyb3AudyArIGNyb3AueTtcIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIGxpZ2h0czogW1xuICAgICAgICBcInVuaWZvcm0gdmVjMyBhbWJpZW50O1wiLFxuXG4gICAgICAgIFwiI2lmIE1BWF9ESVJfTElHSFRTID4gMFwiLFxuXG4gICAgICAgIFwidW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgTUFYX0RJUl9MSUdIVFMgXTtcIixcbiAgICAgICAgXCJ1bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgTUFYX0RJUl9MSUdIVFMgXTtcIixcblxuICAgICAgICBcIiNlbmRpZlwiLFxuXG4gICAgICAgIFwiI2lmIE1BWF9IRU1JX0xJR0hUUyA+IDBcIixcblxuICAgICAgICBcInVuaWZvcm0gdmVjMyBoZW1pTGlnaHRDb2xvclsgTUFYX0hFTUlfTElHSFRTIF07XCIsXG4gICAgICAgIFwidW5pZm9ybSB2ZWMzIGhlbWlMaWdodERpcmVjdGlvblsgTUFYX0hFTUlfTElHSFRTIF07XCIsXG5cbiAgICAgICAgXCIjZW5kaWZcIixcblxuICAgICAgICBcIiNpZiBNQVhfUE9JTlRfTElHSFRTID4gMFwiLFxuXG4gICAgICAgIFwidW5pZm9ybSB2ZWMzIHBvaW50TGlnaHRDb2xvclsgTUFYX1BPSU5UX0xJR0hUUyBdO1wiLFxuICAgICAgICBcInVuaWZvcm0gdmVjMyBwb2ludExpZ2h0UG9zaXRpb25bIE1BWF9QT0lOVF9MSUdIVFMgXTtcIixcbiAgICAgICAgXCJ1bmlmb3JtIGZsb2F0IHBvaW50TGlnaHREaXN0YW5jZVsgTUFYX1BPSU5UX0xJR0hUUyBdO1wiLFxuXG4gICAgICAgIFwiI2VuZGlmXCIsXG5cbiAgICAgICAgXCIjaWYgTUFYX1NQT1RfTElHSFRTID4gMFwiLFxuXG4gICAgICAgIFwidW5pZm9ybSB2ZWMzIHNwb3RMaWdodENvbG9yWyBNQVhfU1BPVF9MSUdIVFMgXTtcIixcbiAgICAgICAgXCJ1bmlmb3JtIHZlYzMgc3BvdExpZ2h0UG9zaXRpb25bIE1BWF9TUE9UX0xJR0hUUyBdO1wiLFxuICAgICAgICBcInVuaWZvcm0gdmVjMyBzcG90TGlnaHREaXJlY3Rpb25bIE1BWF9TUE9UX0xJR0hUUyBdO1wiLFxuICAgICAgICBcInVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RGlzdGFuY2VbIE1BWF9TUE9UX0xJR0hUUyBdO1wiLFxuICAgICAgICBcInVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0QW5nbGVDb3NbIE1BWF9TUE9UX0xJR0hUUyBdO1wiLFxuICAgICAgICBcInVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RXhwb25lbnRbIE1BWF9TUE9UX0xJR0hUUyBdO1wiLFxuXG4gICAgICAgIFwiI2VuZGlmXCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBWZXJ0ZXhMaWdodDogW1xuICAgICAgICBcInZvaWQgVmVydGV4TGlnaHQodmVjMyBub3JtYWwsIHZlYzMgd29ybGRQb3NpdGlvbiwgdmVjMyB2aWV3UG9zaXRpb24sIGlub3V0IHZlYzMgZGlmZnVzZUxpZ2h0KSB7XCIsXG5cbiAgICAgICAgXCJcdCNpZiBNQVhfRElSX0xJR0hUUyA+IDBcIixcbiAgICAgICAgXCJcdFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfRElSX0xJR0hUUzsgaSArKyApIHtcIixcblxuICAgICAgICBcIlx0XHRcdHZlYzQgbERpcmVjdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyBpIF0sIDAuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdHZlYzMgZGlyVmVjdG9yID0gbm9ybWFsaXplKCBsRGlyZWN0aW9uLnh5eiApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBkaXJWZWN0b3IgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRkaWZmdXNlTGlnaHQgKz0gZGlyZWN0aW9uYWxMaWdodENvbG9yWyBpIF0gKiBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nO1wiLFxuICAgICAgICBcIlx0XHR9XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXCIsXG4gICAgICAgIFwiXHRcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcIixcblxuICAgICAgICBcIlx0XHRcdHZlYzQgbFBvc2l0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIHBvaW50TGlnaHRQb3NpdGlvblsgaSBdLCAxLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGxWZWN0b3IgPSBsUG9zaXRpb24ueHl6ICsgdmlld1Bvc2l0aW9uO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgbERpc3RhbmNlID0gMS4wO1wiLFxuICAgICAgICBcIlx0XHRcdGlmICggcG9pbnRMaWdodERpc3RhbmNlWyBpIF0gPiAwLjAgKSB7XCIsXG4gICAgICAgIFwiXHRcdFx0XHRsRGlzdGFuY2UgPSAxLjAgLSBtaW4oICggbGVuZ3RoKCBsVmVjdG9yICkgLyBwb2ludExpZ2h0RGlzdGFuY2VbIGkgXSApLCAxLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR9XCIsXG5cbiAgICAgICAgXCJcdFx0XHRsVmVjdG9yID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XCIsXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBsVmVjdG9yICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWMzIHBvaW50TGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRkaWZmdXNlTGlnaHQgKz0gcG9pbnRMaWdodENvbG9yWyBpIF0gKiBwb2ludExpZ2h0V2VpZ2h0aW5nICogbERpc3RhbmNlO1wiLFxuICAgICAgICBcIlx0XHR9XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmIE1BWF9TUE9UX0xJR0hUUyA+IDBcIixcbiAgICAgICAgXCJcdFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfU1BPVF9MSUdIVFM7IGkgKysgKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBzcG90TGlnaHRQb3NpdGlvblsgaSBdLCAxLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGxWZWN0b3IgPSBsUG9zaXRpb24ueHl6ICsgdmlld1Bvc2l0aW9uO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgc3BvdEVmZmVjdCA9IGRvdCggc3BvdExpZ2h0RGlyZWN0aW9uWyBpIF0sIG5vcm1hbGl6ZSggc3BvdExpZ2h0UG9zaXRpb25bIGkgXSAtIHdvcmxkUG9zaXRpb24gKSApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0aWYgKCBzcG90RWZmZWN0ID4gc3BvdExpZ2h0QW5nbGVDb3NbIGkgXSApIHtcIixcblxuICAgICAgICBcIlx0XHRcdFx0c3BvdEVmZmVjdCA9IG1heCggcG93KCBzcG90RWZmZWN0LCBzcG90TGlnaHRFeHBvbmVudFsgaSBdICksIDAuMCApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0XHRmbG9hdCBsRGlzdGFuY2UgPSAxLjA7XCIsXG4gICAgICAgIFwiXHRcdFx0XHRpZiAoIHNwb3RMaWdodERpc3RhbmNlWyBpIF0gPiAwLjAgKSB7XCIsXG4gICAgICAgIFwiXHRcdFx0XHRcdGxEaXN0YW5jZSA9IDEuMCAtIG1pbiggKCBsZW5ndGgoIGxWZWN0b3IgKSAvIHNwb3RMaWdodERpc3RhbmNlWyBpIF0gKSwgMS4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0XHR9XCIsXG5cbiAgICAgICAgXCJcdFx0XHRcdGxWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcIixcblxuICAgICAgICBcIlx0XHRcdFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBsVmVjdG9yICk7XCIsXG4gICAgICAgIFwiXHRcdFx0XHR2ZWMzIHNwb3RMaWdodFdlaWdodGluZyA9IHZlYzMoIG1heCggZG90UHJvZHVjdCwgMC4wICkgKTtcIixcblxuICAgICAgICBcIlx0XHRcdFx0ZGlmZnVzZUxpZ2h0ICs9IHNwb3RMaWdodENvbG9yWyBpIF0gKiBzcG90TGlnaHRXZWlnaHRpbmcgKiBsRGlzdGFuY2UgKiBzcG90RWZmZWN0O1wiLFxuICAgICAgICBcIlx0XHRcdH1cIixcblxuICAgICAgICBcIlx0XHR9XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmIE1BWF9IRU1JX0xJR0hUUyA+IDBcIixcbiAgICAgICAgXCJcdFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfSEVNSV9MSUdIVFM7IGkgKysgKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWM0IGxEaXJlY3Rpb24gPSB2aWV3TWF0cml4ICogdmVjNCggaGVtaUxpZ2h0RGlyZWN0aW9uWyBpIF0sIDAuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdHZlYzMgbFZlY3RvciA9IG5vcm1hbGl6ZSggbERpcmVjdGlvbi54eXogKTtcIixcblxuICAgICAgICBcIlx0XHRcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIG5vcm1hbCwgbFZlY3RvciApO1wiLFxuICAgICAgICBcIlx0XHRcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90UHJvZHVjdCArIDAuNTtcIixcblxuICAgICAgICBcIlx0XHRcdGRpZmZ1c2VMaWdodCArPSBoZW1pTGlnaHRDb2xvclsgaSBdICogaGVtaURpZmZ1c2VXZWlnaHQ7XCIsXG4gICAgICAgIFwiXHRcdH1cIixcbiAgICAgICAgXCJcdCNlbmRpZlwiLFxuXG4gICAgICAgIFwiXHRkaWZmdXNlTGlnaHQgKz0gYW1iaWVudDtcIixcbiAgICAgICAgXCJ9XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBwZXJQaXhlbFZhcnlpbmdIZWFkZXI6IFtcbiAgICAgICAgXCJ2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XCIsXG4gICAgICAgIFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XCIsXG4gICAgICAgIFwidmFyeWluZyB2ZWMzIHZOb3JtYWw7XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBwZXJQaXhlbFZhcnlpbmdNYWluOiBbXG4gICAgICAgIFwiXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1wiLFxuICAgICAgICBcIlx0dlZpZXdQb3NpdGlvbiA9IC1tdlBvc2l0aW9uLnh5ejtcIixcbiAgICAgICAgXCJcdHZOb3JtYWwgPSB0cmFuc2Zvcm1lZE5vcm1hbDtcIixcbiAgICBdLmpvaW4oXCJcXG5cIiksXG5cbiAgICBQaXhlbExpZ2h0OiBbXG4gICAgICAgIFwidm9pZCBQaXhlbExpZ2h0KHZlYzMgbm9ybWFsLCB2ZWMzIHNwZWN1bGFyQ29sb3IsIGZsb2F0IHNwZWN1bGFyU3RyZW5ndGgsIGZsb2F0IHNoaW5pbmVzcywgaW5vdXQgdmVjMyBkaWZmdXNlTGlnaHQsIGlub3V0IHZlYzMgc3BlY3VsYXJMaWdodCkge1wiLFxuICAgICAgICBcIlx0I2lmIE1BWF9ESVJfTElHSFRTID4gMFwiLFxuICAgICAgICBcIlx0XHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9ESVJfTElHSFRTOyBpICsrICkge1wiLFxuXG4gICAgICAgIFwiXHRcdFx0dmVjNCBsRGlyZWN0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIGkgXSwgMC4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0dmVjMyBkaXJWZWN0b3IgPSBub3JtYWxpemUoIGxEaXJlY3Rpb24ueHl6ICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGRpclZlY3RvciApO1wiLFxuICAgICAgICBcIlx0XHRcdHZlYzMgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyA9IHZlYzMoIG1heCggZG90UHJvZHVjdCwgMC4wICkgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGRpZmZ1c2VMaWdodCArPSBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIGkgXSAqIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmc7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWMzIGRpckhhbGZWZWN0b3IgPSBub3JtYWxpemUoIGRpclZlY3RvciArIHZWaWV3UG9zaXRpb24gKTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkaXJEb3ROb3JtYWxIYWxmID0gbWF4KCBkb3QoIG5vcm1hbCwgZGlySGFsZlZlY3RvciApLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkaXJTcGVjdWxhcldlaWdodCA9IHNwZWN1bGFyU3RyZW5ndGggKiBtYXgoIHBvdyggZGlyRG90Tm9ybWFsSGFsZiwgc2hpbmluZXNzICksIDAuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdGZsb2F0IHNwZWN1bGFyTm9ybWFsaXphdGlvbiA9ICggc2hpbmluZXNzICsgMi4wMDAxICkgLyA4LjA7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhckNvbG9yICsgdmVjMyggMS4wIC0gc3BlY3VsYXJDb2xvciApICogcG93KCAxLjAgLSBkb3QoIGRpclZlY3RvciwgZGlySGFsZlZlY3RvciApLCA1LjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHRzcGVjdWxhckxpZ2h0ICs9IHNjaGxpY2sgKiBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIGkgXSAqIGRpclNwZWN1bGFyV2VpZ2h0ICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyAqIHNwZWN1bGFyTm9ybWFsaXphdGlvbjtcIixcbiAgICAgICAgXCJcdFx0fVwiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdCNpZiBNQVhfUE9JTlRfTElHSFRTID4gMFwiLFxuICAgICAgICBcIlx0XHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBwb2ludExpZ2h0UG9zaXRpb25bIGkgXSwgMS4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0dmVjMyBsVmVjdG9yID0gbFBvc2l0aW9uLnh5eiArIHZWaWV3UG9zaXRpb247XCIsXG5cbiAgICAgICAgXCJcdFx0XHRmbG9hdCBsRGlzdGFuY2UgPSAxLjA7XCIsXG4gICAgICAgIFwiXHRcdFx0aWYgKCBwb2ludExpZ2h0RGlzdGFuY2VbIGkgXSA+IDAuMCApIHtcIixcbiAgICAgICAgXCJcdFx0XHRcdGxEaXN0YW5jZSA9IDEuMCAtIG1pbiggKCBsZW5ndGgoIGxWZWN0b3IgKSAvIHBvaW50TGlnaHREaXN0YW5jZVsgaSBdICksIDEuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdH1cIixcblxuICAgICAgICBcIlx0XHRcdGxWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcIixcblxuICAgICAgICBcIlx0XHRcdHZlYzMgcG9pbnRMaWdodFdlaWdodGluZyA9IHZlYzMoIG1heCggZG90UHJvZHVjdCwgMC4wICkgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGRpZmZ1c2VMaWdodCArPSBwb2ludExpZ2h0Q29sb3JbIGkgXSAqIHBvaW50TGlnaHRXZWlnaHRpbmcgKiBsRGlzdGFuY2U7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWMzIHBvaW50SGFsZlZlY3RvciA9IG5vcm1hbGl6ZSggbFZlY3RvciArIHZWaWV3UG9zaXRpb24gKTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBwb2ludERpZmZ1c2VXZWlnaHQgPSBtYXgoIGRvdFByb2R1Y3QsIDAuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdGZsb2F0IHBvaW50RG90Tm9ybWFsSGFsZiA9IG1heCggZG90KCBub3JtYWwsIHBvaW50SGFsZlZlY3RvciApLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBwb2ludFNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBwb2ludERvdE5vcm1hbEhhbGYsIHNoaW5pbmVzcyApLCAwLjAgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGZsb2F0IHNwZWN1bGFyTm9ybWFsaXphdGlvbiA9ICggc2hpbmluZXNzICsgMi4wMDAxICkgLyA4LjA7XCIsXG4gICAgICAgIFwiXHRcdFx0dmVjMyBzY2hsaWNrID0gc3BlY3VsYXJDb2xvciArIHZlYzMoIDEuMCAtIHNwZWN1bGFyQ29sb3IgKSAqIHBvdyggMS4wIC0gZG90KCBsVmVjdG9yLCBwb2ludEhhbGZWZWN0b3IgKSwgNS4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0c3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogcG9pbnRMaWdodENvbG9yWyBpIF0gKiBwb2ludFNwZWN1bGFyV2VpZ2h0ICogcG9pbnREaWZmdXNlV2VpZ2h0ICogbERpc3RhbmNlICogc3BlY3VsYXJOb3JtYWxpemF0aW9uO1wiLFxuICAgICAgICBcIlx0XHR9XCIsXG4gICAgICAgIFwiXHQjZW5kaWZcIixcblxuICAgICAgICBcIlx0I2lmIE1BWF9TUE9UX0xJR0hUUyA+IDBcIixcbiAgICAgICAgXCJcdFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfU1BPVF9MSUdIVFM7IGkgKysgKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBzcG90TGlnaHRQb3NpdGlvblsgaSBdLCAxLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGxWZWN0b3IgPSBsUG9zaXRpb24ueHl6ICsgdlZpZXdQb3NpdGlvbjtcIixcblxuICAgICAgICBcIlx0XHRcdGZsb2F0IHNwb3RFZmZlY3QgPSBkb3QoIHNwb3RMaWdodERpcmVjdGlvblsgaSBdLCBub3JtYWxpemUoIHNwb3RMaWdodFBvc2l0aW9uWyBpIF0gLSB2V29ybGRQb3NpdGlvbiApICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRpZiAoIHNwb3RFZmZlY3QgPiBzcG90TGlnaHRBbmdsZUNvc1sgaSBdICkge1wiLFxuXG4gICAgICAgIFwiXHRcdFx0XHRzcG90RWZmZWN0ID0gbWF4KCBwb3coIHNwb3RFZmZlY3QsIHNwb3RMaWdodEV4cG9uZW50WyBpIF0gKSwgMC4wICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRcdGZsb2F0IGxEaXN0YW5jZSA9IDEuMDtcIixcbiAgICAgICAgXCJcdFx0XHRcdGlmICggc3BvdExpZ2h0RGlzdGFuY2VbIGkgXSA+IDAuMCApIHtcIixcbiAgICAgICAgXCJcdFx0XHRcdFx0bERpc3RhbmNlID0gMS4wIC0gbWluKCAoIGxlbmd0aCggbFZlY3RvciApIC8gc3BvdExpZ2h0RGlzdGFuY2VbIGkgXSApLCAxLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHRcdH1cIixcblxuICAgICAgICBcIlx0XHRcdFx0bFZlY3RvciA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0XHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcIixcbiAgICAgICAgXCJcdFx0XHRcdHZlYzMgc3BvdExpZ2h0V2VpZ2h0aW5nID0gdmVjMyggbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0XHRkaWZmdXNlTGlnaHQgKz0gc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3RMaWdodFdlaWdodGluZyAqIGxEaXN0YW5jZSAqIHNwb3RFZmZlY3Q7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRcdHZlYzMgc3BvdEhhbGZWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKyB2Vmlld1Bvc2l0aW9uICk7XCIsXG4gICAgICAgIFwiXHRcdFx0XHRmbG9hdCBzcG90RGlmZnVzZVdlaWdodCA9IG1heCggZG90UHJvZHVjdCwgMC4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0XHRmbG9hdCBzcG90RG90Tm9ybWFsSGFsZiA9IG1heCggZG90KCBub3JtYWwsIHNwb3RIYWxmVmVjdG9yICksIDAuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdFx0ZmxvYXQgc3BvdFNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBzcG90RG90Tm9ybWFsSGFsZiwgc2hpbmluZXNzICksIDAuMCApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0XHRmbG9hdCBzcGVjdWxhck5vcm1hbGl6YXRpb24gPSAoIHNoaW5pbmVzcyArIDIuMDAwMSApIC8gOC4wO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0XHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhckNvbG9yICsgdmVjMyggMS4wIC0gc3BlY3VsYXJDb2xvciApICogcG93KCAxLjAgLSBkb3QoIGxWZWN0b3IsIHNwb3RIYWxmVmVjdG9yICksIDUuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdFx0c3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3RTcGVjdWxhcldlaWdodCAqIHNwb3REaWZmdXNlV2VpZ2h0ICogbERpc3RhbmNlICogc3BlY3VsYXJOb3JtYWxpemF0aW9uICogc3BvdEVmZmVjdDtcIixcbiAgICAgICAgXCJcdFx0XHR9XCIsXG5cbiAgICAgICAgXCJcdFx0fVwiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdCNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXCIsXG4gICAgICAgIFwiXHRcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX0hFTUlfTElHSFRTOyBpICsrICkge1wiLFxuXG4gICAgICAgIFwiXHRcdFx0dmVjNCBsRGlyZWN0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIGhlbWlMaWdodERpcmVjdGlvblsgaSBdLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGxWZWN0b3IgPSBub3JtYWxpemUoIGxEaXJlY3Rpb24ueHl6ICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90UHJvZHVjdCArIDAuNTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodEJhY2sgPSAtMC41ICogZG90UHJvZHVjdCArIDAuNTtcIixcblxuICAgICAgICBcIlx0XHRcdGRpZmZ1c2VMaWdodCArPSBoZW1pTGlnaHRDb2xvclsgaSBdICogaGVtaURpZmZ1c2VXZWlnaHQ7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWMzIGhlbWlIYWxmVmVjdG9yID0gbm9ybWFsaXplKCBsVmVjdG9yICsgdlZpZXdQb3NpdGlvbiApO1wiLFxuICAgICAgICBcIlx0XHRcdGZsb2F0IGhlbWlEb3ROb3JtYWxIYWxmID0gbWF4KCBkb3QoIG5vcm1hbCwgaGVtaUhhbGZWZWN0b3IgKSwgMC4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgaGVtaVNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBoZW1pRG90Tm9ybWFsSGFsZiwgc2hpbmluZXNzICksIDAuMCApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgc3BlY3VsYXJOb3JtYWxpemF0aW9uID0gKCBzaGluaW5lc3MgKyAyLjAwMDEgKSAvIDguMDtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhckNvbG9yICsgdmVjMyggMS4wIC0gc3BlY3VsYXJDb2xvciApICogcG93KCAxLjAgLSBkb3QoIGxWZWN0b3IsIGhlbWlIYWxmVmVjdG9yICksIDUuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdHNwZWN1bGFyTGlnaHQgKz0gc2NobGljayAqIGhlbWlMaWdodENvbG9yWyBpIF0gKiBoZW1pU3BlY3VsYXJXZWlnaHQgKiBoZW1pRGlmZnVzZVdlaWdodCAqIHNwZWN1bGFyTm9ybWFsaXphdGlvbjtcIixcbiAgICAgICAgXCJcdFx0fVwiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdGRpZmZ1c2VMaWdodCArPSBhbWJpZW50O1wiLFxuICAgICAgICBcIn1cIixcbiAgICAgICAgXCJcIlxuICAgIF0uam9pbihcIlxcblwiKSxcblxuICAgIFBpeGVsTGlnaHROb1NwZWM6IFtcbiAgICAgICAgXCJ2ZWMzIFBpeGVsTGlnaHROb1NwZWModmVjMyBub3JtYWwpIHtcIixcbiAgICAgICAgXCJcdHZlYzMgZGlmZnVzZUxpZ2h0O1wiLFxuXG4gICAgICAgIFwiXHQjaWYgTUFYX0RJUl9MSUdIVFMgPiAwXCIsXG4gICAgICAgIFwiXHRcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX0RJUl9MSUdIVFM7IGkgKysgKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWM0IGxEaXJlY3Rpb24gPSB2aWV3TWF0cml4ICogdmVjNCggZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgaSBdLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGRpclZlY3RvciA9IG5vcm1hbGl6ZSggbERpcmVjdGlvbi54eXogKTtcIixcblxuICAgICAgICBcIlx0XHRcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIG5vcm1hbCwgZGlyVmVjdG9yICk7XCIsXG4gICAgICAgIFwiXHRcdFx0dmVjMyBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nID0gdmVjMyggbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSApO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0ZGlmZnVzZUxpZ2h0ICs9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZztcIixcbiAgICAgICAgXCJcdFx0fVwiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdCNpZiBNQVhfUE9JTlRfTElHSFRTID4gMFwiLFxuICAgICAgICBcIlx0XHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBwb2ludExpZ2h0UG9zaXRpb25bIGkgXSwgMS4wICk7XCIsXG4gICAgICAgIFwiXHRcdFx0dmVjMyBsVmVjdG9yID0gbFBvc2l0aW9uLnh5eiArIHZWaWV3UG9zaXRpb247XCIsXG5cbiAgICAgICAgXCJcdFx0XHRmbG9hdCBsRGlzdGFuY2UgPSAxLjA7XCIsXG4gICAgICAgIFwiXHRcdFx0aWYgKCBwb2ludExpZ2h0RGlzdGFuY2VbIGkgXSA+IDAuMCApIHtcIixcbiAgICAgICAgXCJcdFx0XHRcdGxEaXN0YW5jZSA9IDEuMCAtIG1pbiggKCBsZW5ndGgoIGxWZWN0b3IgKSAvIHBvaW50TGlnaHREaXN0YW5jZVsgaSBdICksIDEuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdH1cIixcblxuICAgICAgICBcIlx0XHRcdGxWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcIixcblxuICAgICAgICBcIlx0XHRcdHZlYzMgcG9pbnRMaWdodFdlaWdodGluZyA9IHZlYzMoIG1heCggZG90UHJvZHVjdCwgMC4wICkgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGRpZmZ1c2VMaWdodCArPSBwb2ludExpZ2h0Q29sb3JbIGkgXSAqIHBvaW50TGlnaHRXZWlnaHRpbmcgKiBsRGlzdGFuY2U7XCIsXG4gICAgICAgIFwiXHRcdH1cIixcbiAgICAgICAgXCJcdCNlbmRpZlwiLFxuXG4gICAgICAgIFwiXHQjaWYgTUFYX1NQT1RfTElHSFRTID4gMFwiLFxuICAgICAgICBcIlx0XHRmb3IoIGludCBpID0gMDsgaSA8IE1BWF9TUE9UX0xJR0hUUzsgaSArKyApIHtcIixcblxuICAgICAgICBcIlx0XHRcdHZlYzQgbFBvc2l0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIHNwb3RMaWdodFBvc2l0aW9uWyBpIF0sIDEuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdHZlYzMgbFZlY3RvciA9IGxQb3NpdGlvbi54eXogKyB2Vmlld1Bvc2l0aW9uO1wiLFxuXG4gICAgICAgIFwiXHRcdFx0ZmxvYXQgc3BvdEVmZmVjdCA9IGRvdCggc3BvdExpZ2h0RGlyZWN0aW9uWyBpIF0sIG5vcm1hbGl6ZSggc3BvdExpZ2h0UG9zaXRpb25bIGkgXSAtIHZXb3JsZFBvc2l0aW9uICkgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGlmICggc3BvdEVmZmVjdCA+IHNwb3RMaWdodEFuZ2xlQ29zWyBpIF0gKSB7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRcdHNwb3RFZmZlY3QgPSBtYXgoIHBvdyggc3BvdEVmZmVjdCwgc3BvdExpZ2h0RXhwb25lbnRbIGkgXSApLCAwLjAgKTtcIixcblxuICAgICAgICBcIlx0XHRcdFx0ZmxvYXQgbERpc3RhbmNlID0gMS4wO1wiLFxuICAgICAgICBcIlx0XHRcdFx0aWYgKCBzcG90TGlnaHREaXN0YW5jZVsgaSBdID4gMC4wICkge1wiLFxuICAgICAgICBcIlx0XHRcdFx0XHRsRGlzdGFuY2UgPSAxLjAgLSBtaW4oICggbGVuZ3RoKCBsVmVjdG9yICkgLyBzcG90TGlnaHREaXN0YW5jZVsgaSBdICksIDEuMCApO1wiLFxuICAgICAgICBcIlx0XHRcdFx0fVwiLFxuXG4gICAgICAgIFwiXHRcdFx0XHRsVmVjdG9yID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIG5vcm1hbCwgbFZlY3RvciApO1wiLFxuICAgICAgICBcIlx0XHRcdFx0dmVjMyBzcG90TGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRcdGRpZmZ1c2VMaWdodCArPSBzcG90TGlnaHRDb2xvclsgaSBdICogc3BvdExpZ2h0V2VpZ2h0aW5nICogbERpc3RhbmNlICogc3BvdEVmZmVjdDtcIixcbiAgICAgICAgXCJcdFx0XHR9XCIsXG5cbiAgICAgICAgXCJcdFx0fVwiLFxuICAgICAgICBcIlx0I2VuZGlmXCIsXG5cbiAgICAgICAgXCJcdCNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXCIsXG4gICAgICAgIFwiXHRcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX0hFTUlfTElHSFRTOyBpICsrICkge1wiLFxuXG4gICAgICAgIFwiXHRcdFx0dmVjNCBsRGlyZWN0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIGhlbWlMaWdodERpcmVjdGlvblsgaSBdLCAwLjAgKTtcIixcbiAgICAgICAgXCJcdFx0XHR2ZWMzIGxWZWN0b3IgPSBub3JtYWxpemUoIGxEaXJlY3Rpb24ueHl6ICk7XCIsXG5cbiAgICAgICAgXCJcdFx0XHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcIixcblxuICAgICAgICBcIlx0XHRcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90UHJvZHVjdCArIDAuNTtcIixcbiAgICAgICAgXCJcdFx0XHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodEJhY2sgPSAtMC41ICogZG90UHJvZHVjdCArIDAuNTtcIixcblxuICAgICAgICBcIlx0XHRcdGRpZmZ1c2VMaWdodCArPSBoZW1pTGlnaHRDb2xvclsgaSBdICogaGVtaURpZmZ1c2VXZWlnaHQ7XCIsXG4gICAgICAgIFwiXHRcdH1cIixcbiAgICAgICAgXCJcdCNlbmRpZlwiLFxuXG4gICAgICAgIFwiXHRkaWZmdXNlTGlnaHQgKz0gYW1iaWVudDtcIixcblxuICAgICAgICBcIlx0cmV0dXJuIGRpZmZ1c2VMaWdodDtcIixcbiAgICAgICAgXCJ9XCIsXG4gICAgICAgIFwiXCJcbiAgICBdLmpvaW4oXCJcXG5cIilcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXJDaHVua3M7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBHYW1lT2JqZWN0ID0gcmVxdWlyZShcIi4vZ2FtZV9vYmplY3RcIik7XG52YXIgQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudF9tYW5hZ2Vycy9jb21wb25lbnRfbWFuYWdlclwiKTtcbnZhciBXb3JsZCA9IHJlcXVpcmUoXCIuL3dvcmxkL3dvcmxkXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLy4uL2Jhc2UvbG9nXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBTY2VuZXMgbWFuYWdlIEdhbWVPYmplY3RzIGFuZCB0aGVpciBDb21wb25lbnRzXG4gKiBAY2xhc3MgT2Rpbi5TY2VuZVxuICogQGV4dGVuZHMgT2Rpbi5DbGFzc1xuICogQHBhcmFtIE9iamVjdCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFNjZW5lKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgQ2xhc3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuZ2FtZSA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMubmFtZSA9IG9wdHMubmFtZSAhPSB1bmRlZmluZWQgPyBvcHRzLm5hbWUgOiBcIlNjZW5lX1wiICsgdGhpcy5faWQ7XG5cbiAgICB0aGlzLndvcmxkID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5nYW1lT2JqZWN0cyA9IFtdO1xuICAgIHRoaXMuX2dhbWVPYmplY3RIYXNoID0ge307XG4gICAgdGhpcy5fZ2FtZU9iamVjdEpTT05IYXNoID0ge307XG5cbiAgICB0aGlzLmNvbXBvbmVudE1hbmFnZXJzID0ge307XG4gICAgdGhpcy5fY29tcG9uZW50TWFuYWdlclR5cGVzID0gW107XG4gICAgdGhpcy5fY29tcG9uZW50SGFzaCA9IHt9O1xuICAgIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoID0ge307XG5cbiAgICB0aGlzLnNldFdvcmxkKG9wdHMud29ybGQgaW5zdGFuY2VvZiBXb3JsZCA/IG9wdHMud29ybGQgOiBuZXcgV29ybGQob3B0cy53b3JsZCkpO1xuICAgIGlmIChvcHRzLmdhbWVPYmplY3RzKSB0aGlzLmFkZEdhbWVPYmplY3RzLmFwcGx5KHRoaXMsIG9wdHMuZ2FtZU9iamVjdHMpO1xufVxuXG5DbGFzcy5leHRlbmQoU2NlbmUpO1xuXG5cblNjZW5lLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIG90aGVyR2FtZU9iamVjdHMgPSBvdGhlci5nYW1lT2JqZWN0cyxcbiAgICAgICAgaSA9IG90aGVyR2FtZU9iamVjdHMubGVuZ3RoO1xuXG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMubmFtZSA9IG90aGVyLm5hbWUgKyBcIi5cIiArIHRoaXMuX2lkO1xuXG4gICAgd2hpbGUgKGktLSkgdGhpcy5hZGRHYW1lT2JqZWN0KG90aGVyR2FtZU9iamVjdHNbaV0uY2xvbmUoKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdhbWVPYmplY3RzID0gdGhpcy5nYW1lT2JqZWN0cyxcbiAgICAgICAgaSwgaWw7XG5cbiAgICB0aGlzLndvcmxkICYmIHRoaXMud29ybGQuaW5pdCgpO1xuXG4gICAgZm9yIChpID0gMCwgaWwgPSBnYW1lT2JqZWN0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBnYW1lT2JqZWN0c1tpXS5lbWl0KFwiaW5pdFwiKTtcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRNYW5hZ2VyVHlwZXMgPSB0aGlzLl9jb21wb25lbnRNYW5hZ2VyVHlwZXMsXG4gICAgICAgIGdhbWVPYmplY3RzID0gdGhpcy5nYW1lT2JqZWN0cyxcbiAgICAgICAgaSwgaWw7XG5cbiAgICB0aGlzLndvcmxkICYmIHRoaXMud29ybGQuc3RhcnQoKTtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gY29tcG9uZW50TWFuYWdlclR5cGVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIGNvbXBvbmVudE1hbmFnZXJUeXBlc1tpXS5zdGFydCgpO1xuICAgIGZvciAoaSA9IDAsIGlsID0gZ2FtZU9iamVjdHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgZ2FtZU9iamVjdHNbaV0uZW1pdChcInN0YXJ0XCIpO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb21wb25lbnRNYW5hZ2VyVHlwZXMgPSB0aGlzLl9jb21wb25lbnRNYW5hZ2VyVHlwZXMsXG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJUeXBlLCBpLCBpbDtcblxuICAgIHRoaXMud29ybGQgJiYgdGhpcy53b3JsZC51cGRhdGUoKTtcblxuICAgIGZvciAoaSA9IDAsIGlsID0gY29tcG9uZW50TWFuYWdlclR5cGVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgaWYgKChjb21wb25lbnRNYW5hZ2VyVHlwZSA9IGNvbXBvbmVudE1hbmFnZXJUeXBlc1tpXSkpIGNvbXBvbmVudE1hbmFnZXJUeXBlLnVwZGF0ZSgpO1xuICAgIH1cbn07XG5cblxuU2NlbmUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBnYW1lT2JqZWN0cyA9IHRoaXMuZ2FtZU9iamVjdHMsXG4gICAgICAgIGkgPSBnYW1lT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB0aGlzLnJlbW92ZVdvcmxkKCk7XG4gICAgd2hpbGUgKGktLSkgdGhpcy5yZW1vdmVHYW1lT2JqZWN0KGdhbWVPYmplY3RzW2ldLCB0cnVlKTtcblxuICAgIHRoaXMub2ZmKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLmVtaXQoXCJkZXN0cm95XCIpO1xuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUuc2V0V29ybGQgPSBmdW5jdGlvbiAod29ybGQpIHtcbiAgICBpZiAodGhpcy53b3JsZCkgdGhpcy5yZW1vdmVXb3JsZCgpO1xuXG4gICAgd29ybGQuc2NlbmUgPSB0aGlzO1xuICAgIHRoaXMud29ybGQgPSB3b3JsZDtcblxuICAgIGlmICh0aGlzLmdhbWUpIHdvcmxkLmluaXQoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUucmVtb3ZlV29ybGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLndvcmxkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgd29ybGQgPSB0aGlzLndvcmxkO1xuXG4gICAgd29ybGQuc2NlbmUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53b3JsZCA9IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUuYWRkR2FtZU9iamVjdCA9IGZ1bmN0aW9uIChnYW1lT2JqZWN0KSB7XG4gICAgaWYgKCEoZ2FtZU9iamVjdCBpbnN0YW5jZW9mIEdhbWVPYmplY3QpKSB7XG4gICAgICAgIExvZy5lcnJvcihcIlNjZW5lLmFkZEdhbWVPYmplY3Q6IGNhbid0IGFkZCBhcmd1bWVudCB0byBTY2VuZSwgaXQncyBub3QgYW4gaW5zdGFuY2Ugb2YgR2FtZU9iamVjdFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBnYW1lT2JqZWN0cyA9IHRoaXMuZ2FtZU9iamVjdHMsXG4gICAgICAgIGluZGV4ID0gZ2FtZU9iamVjdHMuaW5kZXhPZihnYW1lT2JqZWN0KSxcbiAgICAgICAgY29tcG9uZW50cywgdHJhbnNmb3JtLCBjaGlsZHJlbiwgY2hpbGQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIGlmIChnYW1lT2JqZWN0LnNjZW5lKSBnYW1lT2JqZWN0LnNjZW5lLnJlbW92ZUdhbWVPYmplY3QoZ2FtZU9iamVjdCk7XG5cbiAgICAgICAgZ2FtZU9iamVjdHMucHVzaChnYW1lT2JqZWN0KTtcbiAgICAgICAgdGhpcy5fZ2FtZU9iamVjdEhhc2hbZ2FtZU9iamVjdC5faWRdID0gZ2FtZU9iamVjdDtcbiAgICAgICAgaWYgKGdhbWVPYmplY3QuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2dhbWVPYmplY3RKU09OSGFzaFtnYW1lT2JqZWN0Ll9qc29uSWRdID0gZ2FtZU9iamVjdDtcblxuICAgICAgICBnYW1lT2JqZWN0LnNjZW5lID0gdGhpcztcblxuICAgICAgICBjb21wb25lbnRzID0gZ2FtZU9iamVjdC5jb21wb25lbnRzO1xuICAgICAgICBpID0gY29tcG9uZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHRoaXMuX2FkZENvbXBvbmVudChjb21wb25lbnRzW2ldKTtcblxuICAgICAgICBpZiAoKHRyYW5zZm9ybSA9IGdhbWVPYmplY3QudHJhbnNmb3JtIHx8IGdhbWVPYmplY3QudHJhbnNmb3JtMmQpKSB7XG4gICAgICAgICAgICBpID0gKGNoaWxkcmVuID0gdHJhbnNmb3JtLmNoaWxkcmVuKS5sZW5ndGg7XG5cbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKGNoaWxkID0gY2hpbGRyZW5baV0uZ2FtZU9iamVjdCkgJiYgIXRoaXMuaGFzR2FtZU9iamVjdChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRHYW1lT2JqZWN0KGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5nYW1lKSBnYW1lT2JqZWN0LmVtaXQoXCJpbml0XCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJhZGRHYW1lT2JqZWN0XCIsIGdhbWVPYmplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy5lcnJvcihcIlNjZW5lLmFkZEdhbWVPYmplY3Q6IEdhbWVPYmplY3QgaXMgYWxyZWFkeSBhIG1lbWJlciBvZiBTY2VuZVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLmFkZEdhbWVPYmplY3RzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgaWwgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgZm9yICg7IGkgPCBpbDsgaSsrKSB0aGlzLmFkZEdhbWVPYmplY3QoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLl9hZGRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgaWYgKCFjb21wb25lbnQpIHJldHVybjtcbiAgICB2YXIgdHlwZSA9IGNvbXBvbmVudC5fdHlwZSxcbiAgICAgICAgY29tcG9uZW50TWFuYWdlcnMgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXJzLFxuICAgICAgICBjb21wb25lbnRNYW5hZ2VyID0gY29tcG9uZW50TWFuYWdlcnNbdHlwZV0sXG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJUeXBlcyA9IHRoaXMuX2NvbXBvbmVudE1hbmFnZXJUeXBlcyxcbiAgICAgICAgaXNOZXcgPSAhY29tcG9uZW50TWFuYWdlcjtcblxuICAgIGlmIChpc05ldykge1xuICAgICAgICBjb21wb25lbnRNYW5hZ2VyID0gY29tcG9uZW50TWFuYWdlcnNbdHlwZV0gPSBuZXcgKENsYXNzLl9jbGFzc2VzW3R5cGUgKyBcIkNvbXBvbmVudE1hbmFnZXJcIl0gfHwgQ29tcG9uZW50TWFuYWdlcik7XG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJUeXBlcy5wdXNoKGNvbXBvbmVudE1hbmFnZXIpO1xuICAgICAgICBjb21wb25lbnRNYW5hZ2VyVHlwZXMuc29ydChzb3J0Q29tcG9uZW50TWFuYWdlclR5cGVzKTtcbiAgICAgICAgY29tcG9uZW50TWFuYWdlci5zY2VuZSA9IHRoaXM7XG4gICAgfVxuXG4gICAgY29tcG9uZW50TWFuYWdlci5hZGQoY29tcG9uZW50KTtcbiAgICBjb21wb25lbnRNYW5hZ2VyLnNvcnQoKTtcblxuICAgIHRoaXMuX2NvbXBvbmVudEhhc2hbY29tcG9uZW50Ll9pZF0gPSBjb21wb25lbnQ7XG4gICAgaWYgKGNvbXBvbmVudC5fanNvbklkICE9PSAtMSkgdGhpcy5fY29tcG9uZW50SlNPTkhhc2hbY29tcG9uZW50Ll9qc29uSWRdID0gY29tcG9uZW50O1xuXG4gICAgdGhpcy5lbWl0KFwiYWRkXCIgKyB0eXBlLCBjb21wb25lbnQpO1xuICAgIHRoaXMuZW1pdChcImFkZENvbXBvbmVudFwiLCBjb21wb25lbnQpO1xuXG4gICAgaWYgKHRoaXMuZ2FtZSkge1xuICAgICAgICBjb21wb25lbnQuc3RhcnQoKTtcbiAgICAgICAgY29tcG9uZW50LmVtaXQoXCJzdGFydFwiKTtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIHNvcnRDb21wb25lbnRNYW5hZ2VyVHlwZXMoYSwgYikge1xuXG4gICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xufVxuXG5cblNjZW5lLnByb3RvdHlwZS5yZW1vdmVHYW1lT2JqZWN0ID0gZnVuY3Rpb24gKGdhbWVPYmplY3QsIGNsZWFyKSB7XG4gICAgaWYgKCEoZ2FtZU9iamVjdCBpbnN0YW5jZW9mIEdhbWVPYmplY3QpKSB7XG4gICAgICAgIExvZy5lcnJvcihcIlNjZW5lLnJlbW92ZUdhbWVPYmplY3Q6IGNhbid0IHJlbW92ZSBhcmd1bWVudCBmcm9tIFNjZW5lLCBpdCdzIG5vdCBhbiBpbnN0YW5jZSBvZiBHYW1lT2JqZWN0XCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIGdhbWVPYmplY3RzID0gdGhpcy5nYW1lT2JqZWN0cyxcbiAgICAgICAgaW5kZXggPSBnYW1lT2JqZWN0cy5pbmRleE9mKGdhbWVPYmplY3QpLFxuICAgICAgICBjb21wb25lbnRzLCB0cmFuc2Zvcm0sIGNoaWxkcmVuLCBjaGlsZCxcbiAgICAgICAgaTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcblxuICAgICAgICBnYW1lT2JqZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLl9nYW1lT2JqZWN0SGFzaFtnYW1lT2JqZWN0Ll9pZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChnYW1lT2JqZWN0Ll9qc29uSWQgIT09IC0xKSB0aGlzLl9nYW1lT2JqZWN0SlNPTkhhc2hbZ2FtZU9iamVjdC5fanNvbklkXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBnYW1lT2JqZWN0LnNjZW5lID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbXBvbmVudHMgPSBnYW1lT2JqZWN0LmNvbXBvbmVudHM7XG4gICAgICAgIGkgPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkgdGhpcy5fcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudHNbaV0sIGNsZWFyKTtcblxuICAgICAgICBpZiAoKHRyYW5zZm9ybSA9IGdhbWVPYmplY3QudHJhbnNmb3JtIHx8IGdhbWVPYmplY3QudHJhbnNmb3JtMmQpKSB7XG4gICAgICAgICAgICBpID0gKGNoaWxkcmVuID0gdHJhbnNmb3JtLmNoaWxkcmVuKS5sZW5ndGg7XG5cbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKGNoaWxkID0gY2hpbGRyZW5baV0uZ2FtZU9iamVjdCkgJiYgdGhpcy5oYXNHYW1lT2JqZWN0KGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUdhbWVPYmplY3QoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdChcInJlbW92ZUdhbWVPYmplY3RcIiwgZ2FtZU9iamVjdCk7XG4gICAgICAgIGdhbWVPYmplY3QuZW1pdChcInJlbW92ZVwiLCBnYW1lT2JqZWN0KTtcbiAgICAgICAgaWYgKGNsZWFyKSBnYW1lT2JqZWN0LmNsZWFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiU2NlbmUucmVtb3ZlR2FtZU9iamVjdDogR2FtZU9iamVjdCBpcyBub3QgYSBtZW1iZXIgb2YgU2NlbmVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5yZW1vdmVHYW1lT2JqZWN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIGlsID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoOyBpIDwgaWw7IGkrKykgdGhpcy5yZW1vdmVHYW1lT2JqZWN0KGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5fcmVtb3ZlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgY2xlYXIpIHtcbiAgICBpZiAoIWNvbXBvbmVudCkgcmV0dXJuO1xuICAgIHZhciB0eXBlID0gY29tcG9uZW50Ll90eXBlLFxuICAgICAgICBjb21wb25lbnRNYW5hZ2VycyA9IHRoaXMuY29tcG9uZW50TWFuYWdlcnMsXG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXIgPSBjb21wb25lbnRNYW5hZ2Vyc1t0eXBlXSxcbiAgICAgICAgY29tcG9uZW50TWFuYWdlclR5cGVzID0gdGhpcy5fY29tcG9uZW50TWFuYWdlclR5cGVzO1xuXG4gICAgY29tcG9uZW50TWFuYWdlci5yZW1vdmUoY29tcG9uZW50KTtcbiAgICB0aGlzLl9jb21wb25lbnRIYXNoW2NvbXBvbmVudC5faWRdID0gdW5kZWZpbmVkO1xuICAgIGlmIChjb21wb25lbnQuX2pzb25JZCAhPT0gLTEpIHRoaXMuX2NvbXBvbmVudEpTT05IYXNoW2NvbXBvbmVudC5fanNvbklkXSA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChjb21wb25lbnRNYW5hZ2VyLmVtcHR5KCkpIHtcbiAgICAgICAgY29tcG9uZW50TWFuYWdlcnNbdHlwZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbXBvbmVudE1hbmFnZXJUeXBlcy5zcGxpY2UoY29tcG9uZW50TWFuYWdlclR5cGVzLmluZGV4T2YoY29tcG9uZW50TWFuYWdlciksIDEpO1xuICAgICAgICBjb21wb25lbnRNYW5hZ2VyLnNjZW5lID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdChcInJlbW92ZVwiICsgdHlwZSwgY29tcG9uZW50KTtcbiAgICB0aGlzLmVtaXQoXCJyZW1vdmVDb21wb25lbnRcIiwgY29tcG9uZW50KTtcblxuICAgIGlmIChjbGVhcikgY29tcG9uZW50LmNsZWFyKCk7XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5oYXNHYW1lT2JqZWN0ID0gZnVuY3Rpb24gKGdhbWVPYmplY3QpIHtcblxuICAgIHJldHVybiAhIX50aGlzLmdhbWVPYmplY3RzLmluZGV4T2YoZ2FtZU9iamVjdCk7XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5maW5kQnlUYWcgPSBmdW5jdGlvbiAodGFnLCBvdXQpIHtcbiAgICBvdXQgfHwgKG91dCA9IFtdKTtcbiAgICB2YXIgZ2FtZU9iamVjdHMgPSB0aGlzLmdhbWVPYmplY3RzLFxuICAgICAgICBnYW1lT2JqZWN0LCBpID0gZ2FtZU9iamVjdHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoKGdhbWVPYmplY3QgPSBnYW1lT2JqZWN0c1tpXSkuaGFzVGFnKHRhZykpIG91dC5wdXNoKGdhbWVPYmplY3QpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5maW5kQnlUYWdGaXJzdCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICB2YXIgZ2FtZU9iamVjdHMgPSB0aGlzLmdhbWVPYmplY3RzLFxuICAgICAgICBnYW1lT2JqZWN0LCBpID0gZ2FtZU9iamVjdHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoKGdhbWVPYmplY3QgPSBnYW1lT2JqZWN0c1tpXSkuaGFzVGFnKHRhZykpIHJldHVybiBnYW1lT2JqZWN0O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5maW5kQnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2dhbWVPYmplY3RIYXNoW2lkXTtcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLmZpbmRCeUpTT05JZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2dhbWVPYmplY3RKU09OSGFzaFtpZF07XG59O1xuXG5cblNjZW5lLnByb3RvdHlwZS5maW5kQ29tcG9uZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEhhc2hbaWRdO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUuZmluZENvbXBvbmVudEJ5SlNPTklkID0gZnVuY3Rpb24gKGlkKSB7XG5cbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50SlNPTkhhc2hbaWRdO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGdhbWVPYmplY3RzID0gdGhpcy5nYW1lT2JqZWN0cyxcbiAgICAgICAgY2hpbGQsIGkgPSBnYW1lT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNoaWxkID0gZ2FtZU9iamVjdHNbaV07XG5cbiAgICAgICAgaWYgKGNoaWxkLm5hbWUgPT09IG5hbWUpIHJldHVybiBjaGlsZDtcbiAgICAgICAgaWYgKChjaGlsZCA9IGNoaWxkLmZpbmQobmFtZSkpKSByZXR1cm4gY2hpbGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cblxuU2NlbmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcbiAgICB2YXIgZ2FtZU9iamVjdHMgPSB0aGlzLmdhbWVPYmplY3RzLFxuICAgICAgICBqc29uR2FtZU9iamVjdHMgPSBqc29uLmdhbWVPYmplY3RzIHx8IChqc29uLmdhbWVPYmplY3RzID0gW10pLFxuICAgICAgICBnYW1lT2JqZWN0LFxuICAgICAgICBpID0gZ2FtZU9iamVjdHMubGVuZ3RoO1xuXG4gICAganNvbi5uYW1lID0gdGhpcy5uYW1lO1xuICAgIGpzb24ud29ybGQgPSB0aGlzLndvcmxkLnRvSlNPTihqc29uLndvcmxkKTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKChnYW1lT2JqZWN0ID0gZ2FtZU9iamVjdHNbaV0pKSBqc29uR2FtZU9iamVjdHNbaV0gPSBnYW1lT2JqZWN0LnRvSlNPTihqc29uR2FtZU9iamVjdHNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5TY2VuZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENsYXNzLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBqc29uR2FtZU9iamVjdHMgPSBqc29uLmdhbWVPYmplY3RzLFxuICAgICAgICBnYW1lT2JqZWN0LCBqc29uR2FtZU9iamVjdCxcbiAgICAgICAgaSA9IGpzb25HYW1lT2JqZWN0cy5sZW5ndGg7XG5cbiAgICB0aGlzLm5hbWUgPSBqc29uLm5hbWU7XG5cbiAgICBpZiAodGhpcy53b3JsZC5fY2xhc3NOYW1lID09PSBqc29uLndvcmxkLl9jbGFzc05hbWUpIHtcbiAgICAgICAgdGhpcy53b3JsZC5mcm9tSlNPTihqc29uLndvcmxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFdvcmxkKENsYXNzLmZyb21KU09OKGpzb24ud29ybGQpKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICghKGpzb25HYW1lT2JqZWN0ID0ganNvbkdhbWVPYmplY3RzW2ldKSkgY29udGludWU7XG5cbiAgICAgICAgaWYgKChnYW1lT2JqZWN0ID0gdGhpcy5fZ2FtZU9iamVjdEpTT05IYXNoW2pzb25HYW1lT2JqZWN0Ll9pZF0pKSB7XG4gICAgICAgICAgICBnYW1lT2JqZWN0LmZyb21KU09OKGpzb25HYW1lT2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkR2FtZU9iamVjdChDbGFzcy5mcm9tSlNPTihqc29uR2FtZU9iamVjdCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU2NlbmU7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBDb2xvciA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL2NvbG9yXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gV29ybGQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBDbGFzcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5zY2VuZSA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuYW1iaWVudCA9IG9wdHMuYW1iaWVudCAhPSB1bmRlZmluZWQgPyBvcHRzLmFtYmllbnQgOiBuZXcgQ29sb3I7XG59XG5cbkNsYXNzLmV4dGVuZChXb3JsZCk7XG5cblxuV29ybGQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cblxuV29ybGQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5cbldvcmxkLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cblxuV29ybGQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbldvcmxkLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zY2VuZSkge1xuICAgICAgICBMb2cuZXJyb3IoXCJXb3JsZC5kZXN0cm95OiBjYW4ndCBkZXN0cm95IFdvcmxkIGlmIGl0J3Mgbm90IHNldCB0byBhIFNjZW5lXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLnNjZW5lLnJlbW92ZVdvcmxkKCk7XG4gICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKTtcblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Xb3JsZC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gQ2xhc3MucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi5hbWJpZW50ID0gdGhpcy5hbWJpZW50LnRvSlNPTihqc29uLmFtYmllbnQpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cbldvcmxkLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLmFtYmllbnQuZnJvbUpTT04oanNvbi5hbWJpZW50KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmxkO1xuIiwidmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS91dGlsXCIpO1xudmFyIFRpbWUgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS90aW1lXCIpO1xudmFyIENvbG9yID0gcmVxdWlyZShcIi4uLy4uL21hdGgvY29sb3JcIik7XG52YXIgV29ybGQgPSByZXF1aXJlKFwiLi93b3JsZFwiKTtcbnZhciBQaHlzMkQgPSByZXF1aXJlKFwiLi4vLi4vcGh5czJkL3BoeXMyZFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFdvcmxkMkQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBXb3JsZC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy5zcGFjZSA9IG5ldyBQaHlzMkQuUDJTcGFjZShvcHRzLnNwYWNlKTtcbn1cblxuV29ybGQuZXh0ZW5kKFdvcmxkMkQpO1xuXG5cbldvcmxkMkQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNwYWNlID0gdGhpcy5zcGFjZSxcbiAgICAgICAgc2NlbmUgPSB0aGlzLnNjZW5lLFxuICAgICAgICBSaWdpZEJvZGllcyA9IHNjZW5lLmNvbXBvbmVudE1hbmFnZXJzLlJpZ2lkQm9keTJEO1xuXG4gICAgZnVuY3Rpb24gYWRkQm9keShjb21wb25lbnQpIHtcblxuICAgICAgICBzcGFjZS5hZGRCb2R5KGNvbXBvbmVudC5ib2R5KTtcbiAgICB9XG5cbiAgICBpZiAoUmlnaWRCb2RpZXMpIFJpZ2lkQm9kaWVzLmZvckVhY2goYWRkQm9keSk7XG4gICAgc2NlbmUub24oXCJhZGRSaWdpZEJvZHkyRFwiLCBhZGRCb2R5KTtcblxuICAgIHNjZW5lLm9uKFwicmVtb3ZlUmlnaWRCb2R5MkRcIiwgZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICBzcGFjZS5yZW1vdmVCb2R5KGNvbXBvbmVudC5ib2R5KTtcbiAgICB9KTtcbn07XG5cblxuV29ybGQyRC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5zcGFjZS5zdGVwKFRpbWUuZGVsdGEpO1xufTtcblxuXG5Xb3JsZDJELnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBXb3JsZC5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5Xb3JsZDJELnByb3RvdHlwZS50b1NZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBXb3JsZC5wcm90b3R5cGUudG9TWU5DLmNhbGwodGhpcywganNvbik7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuV29ybGQyRC5wcm90b3R5cGUuZnJvbVNZTkMgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIFdvcmxkLnByb3RvdHlwZS5mcm9tU1lOQy5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbldvcmxkMkQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IFdvcmxkLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24uc3BhY2UgPSB0aGlzLnNwYWNlLnRvSlNPTihqc29uLnNwYWNlKTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5Xb3JsZDJELnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgV29ybGQucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnNwYWNlLmZyb21KU09OKGpzb24uc3BhY2UpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gV29ybGQyRDtcbiIsInZhciBNYXRoZiA9IHJlcXVpcmUoXCIuL21hdGhmXCIpO1xudmFyIFZlYzIgPSByZXF1aXJlKFwiLi92ZWMyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBAY2xhc3MgQUFCQjJcbiAqIDJkIGF4aXMgYWxpZ25lZCBib3VuZGluZyBib3hcbiAqIEBwYXJhbSBWZWMyIG1pblxuICogQHBhcmFtIFZlYzIgbWF4XG4gKi9cbmZ1bmN0aW9uIEFBQkIyKG1pbiwgbWF4KSB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgVmVjMiBtaW5cbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICAgICAqL1xuICAgIHRoaXMubWluID0gbWluIHx8IG5ldyBWZWMyKEluZmluaXR5LCBJbmZpbml0eSk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgVmVjMiBtYXhcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICAgICAqL1xuICAgIHRoaXMubWF4ID0gbWF4IHx8IG5ldyBWZWMyKC1JbmZpbml0eSwgLUluZmluaXR5KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGNsb25lXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICogcmV0dXJucyBuZXcgY29weSBvZiB0aGlzXG4gKiBAcmV0dXJuIEFBQkIyXG4gKi9cbkFBQkIyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBuZXcgQUFCQjIodGhpcy5taW4uY2xvbmUoKSwgdGhpcy5tYXguY2xvbmUoKSk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY29weVxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIGNvcGllcyBvdGhlciBBQUJCXG4gKiBAcGFyYW0gQUFCQjIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5taW4uY29weShvdGhlci5taW4pO1xuICAgIHRoaXMubWF4LmNvcHkob3RoZXIubWF4KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIHNldCBtaW4gYW5kIG1heCB2ZWN0b3JzXG4gKiBAcGFyYW0gVmVjMiBtaW5cbiAqIEBwYXJhbSBWZWMyIG1heFxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobWluLCBtYXgpIHtcblxuICAgIHRoaXMubWluLmNvcHkobWluKTtcbiAgICB0aGlzLm1heC5jb3B5KG1heCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBleHBhbmRQb2ludFxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIEBwYXJhbSBWZWMyIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMi5wcm90b3R5cGUuZXhwYW5kUG9pbnQgPSBmdW5jdGlvbiAodikge1xuXG4gICAgdGhpcy5taW4ubWluKHYpO1xuICAgIHRoaXMubWF4Lm1heCh2KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGV4cGFuZFZlY1xuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIEBwYXJhbSBWZWMyIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMi5wcm90b3R5cGUuZXhwYW5kVmVjID0gZnVuY3Rpb24gKHYpIHtcblxuICAgIHRoaXMubWluLnN1Yih2KTtcbiAgICB0aGlzLm1heC5hZGQodik7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBleHBhbmRTY2FsYXJcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIyXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMi5wcm90b3R5cGUuZXhwYW5kU2NhbGFyID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMubWluLnNzdWIocyk7XG4gICAgdGhpcy5tYXguc2FkZChzKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHVuaW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICogam9pbnMgdGhpcyBhbmQgYW5vdGhlciBhYWJiXG4gKiBAcGFyYW0gQUFCQjIgYWFiYlxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIyLnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5taW4ubWluKG90aGVyLm1pbik7XG4gICAgdGhpcy5tYXgubWF4KG90aGVyLm1heCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjbGVhclxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIGNsZWFycyBhYWJiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5taW4uc2V0KEluZmluaXR5LCBJbmZpbml0eSk7XG4gICAgdGhpcy5tYXguc2V0KC1JbmZpbml0eSwgLUluZmluaXR5KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvbnRhaW5zXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICogY2hlY2tzIGlmIEFBQkIgY29udGFpbnMgcG9pbnRcbiAqIEBwYXJhbSBWZWMyIHBvaW50XG4gKiBAcmV0dXJuIEJvb2xlYW5cbiAqL1xuQUFCQjIucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgdmFyIG1pbiA9IHRoaXMubWluLFxuICAgICAgICBtYXggPSB0aGlzLm1heCxcbiAgICAgICAgcHggPSBwb2ludC54LFxuICAgICAgICBweSA9IHBvaW50Lnk7XG5cbiAgICByZXR1cm4gIShcbiAgICBweCA8IG1pbi54IHx8IHB4ID4gbWF4LnggfHxcbiAgICBweSA8IG1pbi55IHx8IHB5ID4gbWF4LnlcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludGVyc2VjdHNcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIyXG4gKiBjaGVja3MgaWYgQUFCQiBpbnRlcnNlY3RzIEFBQkJcbiAqIEBwYXJhbSBBQUJCMiBvdGhlclxuICogQHJldHVybiBCb29sZWFuXG4gKi9cbkFBQkIyLnByb3RvdHlwZS5pbnRlcnNlY3RzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGFNaW4gPSB0aGlzLm1pbixcbiAgICAgICAgYU1heCA9IHRoaXMubWF4LFxuICAgICAgICBiTWluID0gb3RoZXIubWluLFxuICAgICAgICBiTWF4ID0gb3RoZXIubWF4O1xuXG4gICAgcmV0dXJuICEoXG4gICAgYk1heC54IDwgYU1pbi54IHx8IGJNaW4ueCA+IGFNYXgueCB8fFxuICAgIGJNYXgueSA8IGFNaW4ueSB8fCBiTWluLnkgPiBhTWF4LnlcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21Qb2ludHNcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIyXG4gKiBzZXQgbWluIGFuZCBtYXggZnJvbSBhcnJheSBvZiB2ZWN0b3JzXG4gKiBAcGFyYW0gQXJyYXkgcG9pbnRzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjIucHJvdG90eXBlLmZyb21Qb2ludHMgPSBmdW5jdGlvbiAocG9pbnRzKSB7XG4gICAgdmFyIHYsIGkgPSBwb2ludHMubGVuZ3RoLFxuICAgICAgICBtaW54ID0gSW5maW5pdHksXG4gICAgICAgIG1pbnkgPSBJbmZpbml0eSxcbiAgICAgICAgbWF4eCA9IC1JbmZpbml0eSxcbiAgICAgICAgbWF4eSA9IC1JbmZpbml0eSxcbiAgICAgICAgbWluID0gdGhpcy5taW4sXG4gICAgICAgIG1heCA9IHRoaXMubWF4LFxuICAgICAgICB4LCB5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2ID0gcG9pbnRzW2ldO1xuICAgICAgICB4ID0gdi54O1xuICAgICAgICB5ID0gdi55O1xuXG4gICAgICAgIG1pbnggPSBtaW54ID4geCA/IHggOiBtaW54O1xuICAgICAgICBtaW55ID0gbWlueSA+IHkgPyB5IDogbWlueTtcblxuICAgICAgICBtYXh4ID0gbWF4eCA8IHggPyB4IDogbWF4eDtcbiAgICAgICAgbWF4eSA9IG1heHkgPCB5ID8geSA6IG1heHk7XG4gICAgfVxuXG4gICAgbWluLnggPSBtaW54O1xuICAgIG1pbi55ID0gbWlueTtcbiAgICBtYXgueCA9IG1heHg7XG4gICAgbWF4LnkgPSBtYXh5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUNlbnRlclNpemVcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIyXG4gKiBzZXRzIHRoaXMgZnJvbSBhIGNlbnRlciBwb2ludCBhbmQgYSBzaXplIHZlY3RvclxuICogQHBhcmFtIFZlYzIgY2VudGVyXG4gKiBAcGFyYW0gVmVjMiBzaXplXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjIucHJvdG90eXBlLmZyb21DZW50ZXJTaXplID0gZnVuY3Rpb24gKGNlbnRlciwgc2l6ZSkge1xuICAgIHZhciBtaW4gPSB0aGlzLm1pbixcbiAgICAgICAgbWF4ID0gdGhpcy5tYXgsXG4gICAgICAgIHggPSBjZW50ZXIueCxcbiAgICAgICAgeSA9IGNlbnRlci55LFxuICAgICAgICBoeCA9IHNpemUueCAqIDAuNSxcbiAgICAgICAgaHkgPSBzaXplLnkgKiAwLjU7XG5cbiAgICBtaW4ueCA9IHggLSBoeDtcbiAgICBtaW4ueSA9IHkgLSBoeTtcblxuICAgIG1heC54ID0geCArIGh4O1xuICAgIG1heC55ID0geSArIGh5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIyXG4gKiBAcGFyYW0gT2Rpbi5BQUJCMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiAhKCF0aGlzLm1pbi5lcXVhbHMob3RoZXIubWluKSB8fCAhdGhpcy5tYXguZXF1YWxzKG90aGVyLm1heCkpO1xufTtcblxuLyoqXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICogQHBhcmFtIE9kaW4uQUFCQjIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMi5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICByZXR1cm4gKHRoaXMubWluLm5vdEVxdWFscyhvdGhlci5taW4pIHx8IHRoaXMubWF4Lm5vdEVxdWFscyhvdGhlci5tYXgpKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tSlNPTlxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIHNldHMgdmFsdWVzIGZyb20ganNvbiBvYmplY3RcbiAqIEBwYXJhbSBPYmplY3QganNvblxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIyLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICB0aGlzLm1pbi5mcm9tSlNPTihqc29uLm1pbik7XG4gICAgdGhpcy5tYXguZnJvbUpTT04oanNvbi5tYXgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCMlxuICogcmV0dXJucyBqc29uIG9iamVjdFxuICogQHJldHVybiBPYmplY3RcbiAqL1xuQUFCQjIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHt9KTtcblxuICAgIGpzb24ubWluID0gdGhpcy5taW4udG9KU09OKGpzb24ubWluKTtcbiAgICBqc29uLm1heCA9IHRoaXMubWF4LnRvSlNPTihqc29uLm1heCk7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b1N0cmluZ1xuICogQG1lbWJlcm9mIE9kaW4uQUFCQjJcbiAqIGNvbnZlcnRzIEFBQkIgdG8gc3RyaW5nIFwiQUFCQjIoIG1pbjogVmVjMiggLTEsIC0xICksIG1heDogVmVjMiggMSwgMSApIClcIlxuICogQHJldHVybiBTdHJpbmdcbiAqL1xuQUFCQjIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtaW4gPSB0aGlzLm1pbixcbiAgICAgICAgbWF4ID0gdGhpcy5tYXg7XG5cbiAgICByZXR1cm4gXCJBQUJCMiggbWluOiBcIiArIG1pbiArIFwiLCBtYXg6IFwiICsgbWF4ICsgXCIgKVwiO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEFBQkIyO1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4vbWF0aGZcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuL3ZlYzNcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIEBjbGFzcyBBQUJCM1xuICogMmQgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveFxuICogQHBhcmFtIFZlYzMgbWluXG4gKiBAcGFyYW0gVmVjMyBtYXhcbiAqL1xuZnVuY3Rpb24gQUFCQjMobWluLCBtYXgpIHtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBWZWMzIG1pblxuICAgICAqIEBtZW1iZXJvZiBPZGluLkFBQkIzXG4gICAgICovXG4gICAgdGhpcy5taW4gPSBtaW4gfHwgbmV3IFZlYzMoSW5maW5pdHksIEluZmluaXR5LCBJbmZpbml0eSk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgVmVjMyBtYXhcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICAgICAqL1xuICAgIHRoaXMubWF4ID0gbWF4IHx8IG5ldyBWZWMzKC1JbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHkpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgY2xvbmVcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIzXG4gKiByZXR1cm5zIG5ldyBjb3B5IG9mIHRoaXNcbiAqIEByZXR1cm4gQUFCQjNcbiAqL1xuQUFCQjMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIG5ldyBBQUJCMyh0aGlzLm1pbi5jbG9uZSgpLCB0aGlzLm1heC5jbG9uZSgpKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjb3B5XG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogY29waWVzIG90aGVyIEFBQkJcbiAqIEBwYXJhbSBBQUJCMyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLm1pbi5jb3B5KG90aGVyLm1pbik7XG4gICAgdGhpcy5tYXguY29weShvdGhlci5tYXgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0XG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogc2V0IG1pbiBhbmQgbWF4IHZlY3RvcnNcbiAqIEBwYXJhbSBWZWMzIG1pblxuICogQHBhcmFtIFZlYzMgbWF4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuXG4gICAgdGhpcy5taW4uY29weShtaW4pO1xuICAgIHRoaXMubWF4LmNvcHkobWF4KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGV4cGFuZFBvaW50XG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogQHBhcmFtIFZlYzMgdlxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIzLnByb3RvdHlwZS5leHBhbmRQb2ludCA9IGZ1bmN0aW9uICh2KSB7XG5cbiAgICB0aGlzLm1pbi5taW4odik7XG4gICAgdGhpcy5tYXgubWF4KHYpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZXhwYW5kVmVjXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogQHBhcmFtIFZlYzMgdlxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIzLnByb3RvdHlwZS5leHBhbmRWZWMgPSBmdW5jdGlvbiAodikge1xuXG4gICAgdGhpcy5taW4uc3ViKHYpO1xuICAgIHRoaXMubWF4LmFkZCh2KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGV4cGFuZFNjYWxhclxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjNcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIzLnByb3RvdHlwZS5leHBhbmRTY2FsYXIgPSBmdW5jdGlvbiAocykge1xuXG4gICAgdGhpcy5taW4uc3N1YihzKTtcbiAgICB0aGlzLm1heC5zYWRkKHMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdW5pb25cbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIzXG4gKiBqb2lucyB0aGlzIGFuZCBhbm90aGVyIGFhYmJcbiAqIEBwYXJhbSBBQUJCMyBhYWJiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjMucHJvdG90eXBlLnVuaW9uID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLm1pbi5taW4ob3RoZXIubWluKTtcbiAgICB0aGlzLm1heC5tYXgob3RoZXIubWF4KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsZWFyXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogY2xlYXJzIGFhYmJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLm1pbi5zZXQoSW5maW5pdHksIEluZmluaXR5LCBJbmZpbml0eSk7XG4gICAgdGhpcy5tYXguc2V0KC1JbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY29udGFpbnNcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIzXG4gKiBjaGVja3MgaWYgQUFCQiBjb250YWlucyBwb2ludFxuICogQHBhcmFtIFZlYzMgcG9pbnRcbiAqIEByZXR1cm4gQm9vbGVhblxuICovXG5BQUJCMy5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICB2YXIgbWluID0gdGhpcy5taW4sXG4gICAgICAgIG1heCA9IHRoaXMubWF4LFxuICAgICAgICBweCA9IHBvaW50LngsXG4gICAgICAgIHB5ID0gcG9pbnQueSxcbiAgICAgICAgcHogPSBwb2ludC56O1xuXG4gICAgcmV0dXJuICEoXG4gICAgcHggPCBtaW4ueCB8fCBweCA+IG1heC54IHx8XG4gICAgcHkgPCBtaW4ueSB8fCBweSA+IG1heC55IHx8XG4gICAgcHogPCBtaW4ueiB8fCBweiA+IG1heC56XG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnRlcnNlY3RzXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogY2hlY2tzIGlmIEFBQkIgaW50ZXJzZWN0cyBBQUJCXG4gKiBAcGFyYW0gQUFCQjMgb3RoZXJcbiAqIEByZXR1cm4gQm9vbGVhblxuICovXG5BQUJCMy5wcm90b3R5cGUuaW50ZXJzZWN0cyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhTWluID0gdGhpcy5taW4sXG4gICAgICAgIGFNYXggPSB0aGlzLm1heCxcbiAgICAgICAgYk1pbiA9IG90aGVyLm1pbixcbiAgICAgICAgYk1heCA9IG90aGVyLm1heDtcblxuICAgIHJldHVybiAhKFxuICAgIGJNYXgueCA8IGFNaW4ueCB8fCBiTWluLnggPiBhTWF4LnggfHxcbiAgICBiTWF4LnkgPCBhTWluLnkgfHwgYk1pbi55ID4gYU1heC55IHx8XG4gICAgYk1heC56IDwgYU1pbi56IHx8IGJNaW4ueiA+IGFNYXguelxuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVBvaW50c1xuICogQG1lbWJlcm9mIE9kaW4uQUFCQjNcbiAqIHNldCBtaW4gYW5kIG1heCBmcm9tIGFycmF5IG9mIHZlY3RvcnNcbiAqIEBwYXJhbSBBcnJheSBwb2ludHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMy5wcm90b3R5cGUuZnJvbVBvaW50cyA9IGZ1bmN0aW9uIChwb2ludHMpIHtcbiAgICB2YXIgdiwgaSA9IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIG1pbnggPSBJbmZpbml0eSxcbiAgICAgICAgbWlueSA9IEluZmluaXR5LFxuICAgICAgICBtaW56ID0gSW5maW5pdHksXG4gICAgICAgIG1heHggPSAtSW5maW5pdHksXG4gICAgICAgIG1heHkgPSAtSW5maW5pdHksXG4gICAgICAgIG1heHogPSAtSW5maW5pdHksXG4gICAgICAgIG1pbiA9IHRoaXMubWluLFxuICAgICAgICBtYXggPSB0aGlzLm1heCxcbiAgICAgICAgeCwgeSwgejtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdiA9IHBvaW50c1tpXTtcbiAgICAgICAgeCA9IHYueDtcbiAgICAgICAgeSA9IHYueTtcbiAgICAgICAgeiA9IHYuejtcblxuICAgICAgICBtaW54ID0gbWlueCA+IHggPyB4IDogbWlueDtcbiAgICAgICAgbWlueSA9IG1pbnkgPiB5ID8geSA6IG1pbnk7XG4gICAgICAgIG1pbnogPSBtaW56ID4geiA/IHogOiBtaW56O1xuXG4gICAgICAgIG1heHggPSBtYXh4IDwgeCA/IHggOiBtYXh4O1xuICAgICAgICBtYXh5ID0gbWF4eSA8IHkgPyB5IDogbWF4eTtcbiAgICAgICAgbWF4eiA9IG1heHogPCB6ID8geiA6IG1heHo7XG4gICAgfVxuXG4gICAgbWluLnggPSBtaW54O1xuICAgIG1pbi55ID0gbWlueTtcbiAgICBtaW4ueiA9IG1pbno7XG4gICAgbWF4LnggPSBtYXh4O1xuICAgIG1heC55ID0gbWF4eTtcbiAgICBtYXgueiA9IG1heHo7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tQ2VudGVyU2l6ZVxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjNcbiAqIHNldHMgdGhpcyBmcm9tIGEgY2VudGVyIHBvaW50IGFuZCBhIHNpemUgdmVjdG9yXG4gKiBAcGFyYW0gVmVjMyBjZW50ZXJcbiAqIEBwYXJhbSBWZWMzIHNpemVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5BQUJCMy5wcm90b3R5cGUuZnJvbUNlbnRlclNpemUgPSBmdW5jdGlvbiAoY2VudGVyLCBzaXplKSB7XG4gICAgdmFyIG1pbiA9IHRoaXMubWluLFxuICAgICAgICBtYXggPSB0aGlzLm1heCxcbiAgICAgICAgeCA9IGNlbnRlci54LFxuICAgICAgICB5ID0gY2VudGVyLnksXG4gICAgICAgIHogPSBjZW50ZXIueixcbiAgICAgICAgaHggPSBzaXplLnggKiAwLjUsXG4gICAgICAgIGh5ID0gc2l6ZS55ICogMC41LFxuICAgICAgICBoeiA9IHNpemUueiAqIDAuNTtcblxuICAgIG1pbi54ID0geCAtIGh4O1xuICAgIG1pbi55ID0geSAtIGh5O1xuICAgIG1pbi56ID0geiAtIGh6O1xuXG4gICAgbWF4LnggPSB4ICsgaHg7XG4gICAgbWF4LnkgPSB5ICsgaHk7XG4gICAgbWF4LnogPSB6ICsgaHo7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uQUFCQjNcbiAqIEBwYXJhbSBPZGluLkFBQkIzIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjMucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuICEoIXRoaXMubWluLmVxdWFscyhvdGhlci5taW4pIHx8ICF0aGlzLm1heC5lcXVhbHMob3RoZXIubWF4KSk7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIzXG4gKiBAcGFyYW0gT2Rpbi5BQUJCMyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbkFBQkIzLnByb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiAodGhpcy5taW4ubm90RXF1YWxzKG90aGVyLm1pbikgfHwgdGhpcy5tYXgubm90RXF1YWxzKG90aGVyLm1heCkpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogc2V0cyB2YWx1ZXMgZnJvbSBqc29uIG9iamVjdFxuICogQHBhcmFtIE9iamVjdCBqc29uXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQUFCQjMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMubWluLmZyb21KU09OKGpzb24ubWluKTtcbiAgICB0aGlzLm1heC5mcm9tSlNPTihqc29uLm1heCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b0pTT05cbiAqIEBtZW1iZXJvZiBPZGluLkFBQkIzXG4gKiByZXR1cm5zIGpzb24gb2JqZWN0XG4gKiBAcmV0dXJuIE9iamVjdFxuICovXG5BQUJCMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAganNvbi5taW4gPSB0aGlzLm1pbi50b0pTT04oanNvbi5taW4pO1xuICAgIGpzb24ubWF4ID0gdGhpcy5tYXgudG9KU09OKGpzb24ubWF4KTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvU3RyaW5nXG4gKiBAbWVtYmVyb2YgT2Rpbi5BQUJCM1xuICogY29udmVydHMgQUFCQiB0byBzdHJpbmcgXCJBQUJCMyggbWluOiBWZWMzKCAtMSwgLTEgKSwgbWF4OiBWZWMzKCAxLCAxICkgKVwiXG4gKiBAcmV0dXJuIFN0cmluZ1xuICovXG5BQUJCMy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1pbiA9IHRoaXMubWluLFxuICAgICAgICBtYXggPSB0aGlzLm1heDtcblxuICAgIHJldHVybiBcIkFBQkIzKCBtaW46IFwiICsgbWluICsgXCIsIG1heDogXCIgKyBtYXggKyBcIiApXCI7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQUFCQjM7XG4iLCJ2YXIgTWF0aGYgPSByZXF1aXJlKFwiLi9tYXRoZlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICBjbGFtcDAxID0gTWF0aGYuY2xhbXAwMSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLyoqXG4gKiBAY2xhc3MgQ29sb3JcbiAqIHJnYiBjb2xvciwgdmFsdWVzIDAuMCAtIDFcbiAqIEBwYXJhbSBOdW1iZXIgclxuICogQHBhcmFtIE51bWJlciBnXG4gKiBAcGFyYW0gTnVtYmVyIGJcbiAqL1xuZnVuY3Rpb24gQ29sb3IociwgZywgYikge1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciByXG4gICAgICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAgICAgKi9cbiAgICB0aGlzLnIgPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIGdcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICAgICAqL1xuICAgIHRoaXMuZyA9IDAuMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgYlxuICAgICAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gICAgICovXG4gICAgdGhpcy5iID0gMC4wO1xuXG4gICAgdGhpcy5fciA9IDAuMDtcbiAgICB0aGlzLl9nID0gMC4wO1xuICAgIHRoaXMuX2IgPSAwLjA7XG4gICAgdGhpcy5faGV4ID0gXCIjMDAwMDAwXCI7XG4gICAgdGhpcy5fcmdiID0gXCJyZ2IoMCwwLDApXCI7XG5cbiAgICB0aGlzLnNldChyLCBnLCBiKTtcbn1cblxuTWF0aGYuX2NsYXNzZXNbXCJDb2xvclwiXSA9IENvbG9yO1xuXG5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnI7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnIgPSB2YWx1ZTtcbiAgICB9XG59KTtcbmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZyA9IHZhbHVlO1xuICAgIH1cbn0pO1xuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcInpcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5iID0gdmFsdWU7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQG1ldGhvZCBjbG9uZVxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHJldHVybnMgbmV3IGluc3RhbmNlIG9mIHRoaXNcbiAqIEByZXR1cm4gQ29sb3JcbiAqL1xuQ29sb3IucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIG5ldyBDb2xvcih0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjb3B5XG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogY29waWVzIG90aGVyXG4gKiBAcGFyYW0gQ29sb3Igb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5Db2xvci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5yID0gb3RoZXIucjtcbiAgICB0aGlzLmcgPSBvdGhlci5nO1xuICAgIHRoaXMuYiA9IG90aGVyLmI7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBzZXRzIHZhbHVlcyBvZiB0aGlzXG4gKiBAcGFyYW0gTnVtYmVyIHJcbiAqIEBwYXJhbSBOdW1iZXIgZ1xuICogQHBhcmFtIE51bWJlciBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChyLCBnLCBiKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Yocik7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aGlzLnNldFN0eWxlKHIpO1xuICAgIH0gZWxzZSBpZiAociBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICAgIHRoaXMuciA9IHIucjtcbiAgICAgICAgdGhpcy5nID0gci5nO1xuICAgICAgICB0aGlzLmIgPSByLmI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0UkdCXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogc2V0cyByZ2IgdmFsdWVzIG9mIHRoaXNcbiAqIEBwYXJhbSBOdW1iZXIgclxuICogQHBhcmFtIE51bWJlciBnXG4gKiBAcGFyYW0gTnVtYmVyIGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5Db2xvci5wcm90b3R5cGUuc2V0UkdCID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcblxuICAgIHRoaXMuciA9IHI7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLmIgPSBiO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0U3R5bGVcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBzZXRzIHZhbHVlcyBvZiB0aGlzIGZyb20gc3RyaW5nXG4gKiBAcGFyYW0gU3RyaW5nIHN0eWxlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZ2IyNTUgPSAvXnJnYlxcKChcXGQrKSwoXFxkKyksKFxcZCspXFwpJC9pLFxuICAgICAgICByZ2IxMDAgPSAvXnJnYlxcKChcXGQrKVxcJSwoXFxkKylcXCUsKFxcZCspXFwlXFwpJC9pLFxuICAgICAgICBoZXg2ID0gL15cXCMoWzAuMC05YS1mXXs2fSkkL2ksXG4gICAgICAgIGhleDMgPSAvXlxcIyhbMC4wLTlhLWZdKShbMC4wLTlhLWZdKShbMC4wLTlhLWZdKSQvaSxcbiAgICAgICAgaGV4M3RvNiA9IC8jKC4pKC4pKC4pLyxcbiAgICAgICAgaGV4M3RvNlN0cmluZyA9IFwiIyQxJDEkMiQyJDMkM1wiLFxuICAgICAgICBjb2xvck5hbWUgPSAvXihcXHcrKSQvaSxcbiAgICAgICAgaW52MjU1ID0gMS4wIC8gMjU1LjAsXG4gICAgICAgIGludjEwMCA9IDEuMCAvIDEwMC4wO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsZSkge1xuXG4gICAgICAgIGlmIChyZ2IyNTUudGVzdChzdHlsZSkpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IHJnYjI1NS5leGVjKHN0eWxlKTtcblxuICAgICAgICAgICAgdGhpcy5yID0gbWluKDI1NSwgTnVtYmVyKGNvbG9yWzFdKSkgKiBpbnYyNTU7XG4gICAgICAgICAgICB0aGlzLmcgPSBtaW4oMjU1LCBOdW1iZXIoY29sb3JbMl0pKSAqIGludjI1NTtcbiAgICAgICAgICAgIHRoaXMuYiA9IG1pbigyNTUsIE51bWJlcihjb2xvclszXSkpICogaW52MjU1O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZ2IxMDAudGVzdChzdHlsZSkpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IHJnYjEwMC5leGVjKHN0eWxlKTtcblxuICAgICAgICAgICAgdGhpcy5yID0gbWluKDEwMCwgTnVtYmVyKGNvbG9yWzFdKSkgKiBpbnYxMDA7XG4gICAgICAgICAgICB0aGlzLmcgPSBtaW4oMTAwLCBOdW1iZXIoY29sb3JbMl0pKSAqIGludjEwMDtcbiAgICAgICAgICAgIHRoaXMuYiA9IG1pbigxMDAsIE51bWJlcihjb2xvclszXSkpICogaW52MTAwO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoZXg2LnRlc3Qoc3R5bGUpKSB7XG5cbiAgICAgICAgICAgIHRoaXMuciA9IHBhcnNlSW50KHN0eWxlLnN1YnN0cigxLCAyKSwgMTYpICogaW52MjU1O1xuICAgICAgICAgICAgdGhpcy5nID0gcGFyc2VJbnQoc3R5bGUuc3Vic3RyKDMsIDIpLCAxNikgKiBpbnYyNTU7XG4gICAgICAgICAgICB0aGlzLmIgPSBwYXJzZUludChzdHlsZS5zdWJzdHIoNSwgMiksIDE2KSAqIGludjI1NTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGV4My50ZXN0KHN0eWxlKSkge1xuICAgICAgICAgICAgc3R5bGUgPSBzdHlsZS5yZXBsYWNlKGhleDN0bzYsIGhleDN0bzZTdHJpbmcpO1xuXG4gICAgICAgICAgICB0aGlzLnIgPSBwYXJzZUludChzdHlsZS5zdWJzdHIoMSwgMiksIDE2KSAqIGludjI1NTtcbiAgICAgICAgICAgIHRoaXMuZyA9IHBhcnNlSW50KHN0eWxlLnN1YnN0cigzLCAyKSwgMTYpICogaW52MjU1O1xuICAgICAgICAgICAgdGhpcy5iID0gcGFyc2VJbnQoc3R5bGUuc3Vic3RyKDUsIDIpLCAxNikgKiBpbnYyNTU7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbG9yTmFtZS50ZXN0KHN0eWxlKSkge1xuICAgICAgICAgICAgc3R5bGUgPSBjb2xvck5hbWVzW3N0eWxlXTtcblxuICAgICAgICAgICAgdGhpcy5yID0gcGFyc2VJbnQoc3R5bGUuc3Vic3RyKDEsIDIpLCAxNikgKiBpbnYyNTU7XG4gICAgICAgICAgICB0aGlzLmcgPSBwYXJzZUludChzdHlsZS5zdWJzdHIoMywgMiksIDE2KSAqIGludjI1NTtcbiAgICAgICAgICAgIHRoaXMuYiA9IHBhcnNlSW50KHN0eWxlLnN1YnN0cig1LCAyKSwgMTYpICogaW52MjU1O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCk7XG5cbi8qKlxuICogQG1ldGhvZCB0b0hFWFxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHJldHVybnMgdGhpcyBjb2xvciBpbiBIRVggZm9ybWF0XG4gKiBAcmV0dXJuIENvbG9yXG4gKi9cbkNvbG9yLnByb3RvdHlwZS50b0hFWCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmICh0aGlzLnIgIT09IHRoaXMuX3IgfHwgdGhpcy5nICE9PSB0aGlzLl9nIHx8IHRoaXMuYiAhPT0gdGhpcy5fYikge1xuICAgICAgICB2YXIgaGV4UiA9IHNpbmdsZVRvSEVYKHRoaXMuciksXG4gICAgICAgICAgICBoZXhHID0gc2luZ2xlVG9IRVgodGhpcy5nKSxcbiAgICAgICAgICAgIGhleEIgPSBzaW5nbGVUb0hFWCh0aGlzLmIpO1xuXG4gICAgICAgIHRoaXMuX3IgPSB0aGlzLnI7XG4gICAgICAgIHRoaXMuX2cgPSB0aGlzLmc7XG4gICAgICAgIHRoaXMuX2IgPSB0aGlzLmI7XG4gICAgICAgIHRoaXMuX2hleCA9IFwiI1wiICsgaGV4UiArIGhleEcgKyBoZXhCO1xuICAgICAgICB0aGlzLl9yZ2IgPSBcInJnYihcIiArIGZsb29yKGNsYW1wMDEodGhpcy5yKSAqIDI1NikgKyBcIixcIiArIGZsb29yKGNsYW1wMDEodGhpcy5nKSAqIDI1NikgKyBcIixcIiArIGZsb29yKGNsYW1wMDEodGhpcy5iKSAqIDI1NikgKyBcIilcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faGV4O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvUkdCXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogcmV0dXJucyB0aGlzIGNvbG9yIGluIFJHQiBmb3JtYXRcbiAqIEByZXR1cm4gQ29sb3JcbiAqL1xuQ29sb3IucHJvdG90eXBlLnRvUkdCID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYgKHRoaXMuciAhPT0gdGhpcy5fciB8fCB0aGlzLmcgIT09IHRoaXMuX2cgfHwgdGhpcy5iICE9PSB0aGlzLl9iKSB7XG4gICAgICAgIHZhciByID0gZmxvb3IoY2xhbXAwMSh0aGlzLnIpICogMjU2KSxcbiAgICAgICAgICAgIGcgPSBmbG9vcihjbGFtcDAxKHRoaXMuZykgKiAyNTYpLFxuICAgICAgICAgICAgYiA9IGZsb29yKGNsYW1wMDEodGhpcy5iKSAqIDI1Nik7XG5cbiAgICAgICAgdGhpcy5fciA9IHRoaXMucjtcbiAgICAgICAgdGhpcy5fZyA9IHRoaXMuZztcbiAgICAgICAgdGhpcy5fYiA9IHRoaXMuYjtcbiAgICAgICAgdGhpcy5fcmdiID0gXCJyZ2IoXCIgKyByICsgXCIsXCIgKyBnICsgXCIsXCIgKyBiICsgXCIpXCI7XG4gICAgICAgIHRoaXMuX2hleCA9IFwiI1wiICsgc2luZ2xlVG9IRVgodGhpcy5yKSArIHNpbmdsZVRvSEVYKHRoaXMuZykgKyBzaW5nbGVUb0hFWCh0aGlzLmIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZ2I7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgYWRkXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogYWRkcyBvdGhlcidzIHZhbHVlcyB0byB0aGlzXG4gKiBAcGFyYW0gQ29sb3Igb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5Db2xvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnIgKz0gb3RoZXIucjtcbiAgICB0aGlzLmcgKz0gb3RoZXIuZztcbiAgICB0aGlzLmIgKz0gb3RoZXIuYjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNhZGRcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBhZGRzIGEgYW5kIGIgdG9nZXRoZXIgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIENvbG9yIGFcbiAqIEBwYXJhbSBDb2xvciBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmNhZGQgPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgdGhpcy5yID0gYS5yICsgYi5yO1xuICAgIHRoaXMuZyA9IGEuZyArIGIuZztcbiAgICB0aGlzLmIgPSBhLmIgKyBiLmI7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzYWRkXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogYWRkcyBzY2FsYXIgdmFsdWUgdG8gdGhpc1xuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLnNhZGQgPSBmdW5jdGlvbiAocykge1xuXG4gICAgdGhpcy5yICs9IHM7XG4gICAgdGhpcy5nICs9IHM7XG4gICAgdGhpcy5iICs9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzdWJcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBzdWJ0cmFjdHMgb3RoZXIncyB2YWx1ZXMgZnJvbSB0aGlzXG4gKiBAcGFyYW0gQ29sb3Igb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5Db2xvci5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnIgLT0gb3RoZXIucjtcbiAgICB0aGlzLmcgLT0gb3RoZXIuZztcbiAgICB0aGlzLmIgLT0gb3RoZXIuYjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNzdWJcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBzdWJ0cmFjdHMgYiBmcm9tIGEgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIENvbG9yIGFcbiAqIEBwYXJhbSBDb2xvciBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmNzdWIgPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgdGhpcy5yID0gYS5yIC0gYi5yO1xuICAgIHRoaXMuZyA9IGEuZyAtIGIuZztcbiAgICB0aGlzLmIgPSBhLmIgLSBiLmI7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzc3ViXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogc3VidHJhY3RzIHRoaXMgYnkgYSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5zc3ViID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMuciAtPSBzO1xuICAgIHRoaXMuZyAtPSBzO1xuICAgIHRoaXMuYiAtPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbXVsXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gQ29sb3Igb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5Db2xvci5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnIgKj0gb3RoZXIucjtcbiAgICB0aGlzLmcgKj0gb3RoZXIuZztcbiAgICB0aGlzLmIgKj0gb3RoZXIuYjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNtdWxcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBtdWxpcGxlcyBhIGFuZCBiIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBDb2xvciBhXG4gKiBAcGFyYW0gQ29sb3IgYlxuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5jbXVsID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHRoaXMuciA9IGEuciAqIGIucjtcbiAgICB0aGlzLmcgPSBhLmcgKiBiLmc7XG4gICAgdGhpcy5iID0gYS5iICogYi5iO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc211bFxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIG11bGlwbGVzIHRoaXMgYnkgYSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5zbXVsID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMuciAqPSBzO1xuICAgIHRoaXMuZyAqPSBzO1xuICAgIHRoaXMuYiAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogZGl2aWRlcyB0aGlzJ3MgdmFsdWVzIGJ5IG90aGVyJ3NcbiAqIEBwYXJhbSBDb2xvciBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgeCA9IG90aGVyLnIsXG4gICAgICAgIHkgPSBvdGhlci5nLFxuICAgICAgICB6ID0gb3RoZXIuYjtcblxuICAgIHRoaXMuciAqPSB4ICE9PSAwLjAgPyAxLjAgLyB4IDogMC4wO1xuICAgIHRoaXMuZyAqPSB5ICE9PSAwLjAgPyAxLjAgLyB5IDogMC4wO1xuICAgIHRoaXMuYiAqPSB6ICE9PSAwLjAgPyAxLjAgLyB6IDogMC4wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY2RpdlxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIGRpdmlkZXMgYiBmcm9tIGEgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIENvbG9yIGFcbiAqIEBwYXJhbSBDb2xvciBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmNkaXYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciB4ID0gYi5yLFxuICAgICAgICB5ID0gYi5nLFxuICAgICAgICB6ID0gYi5iO1xuXG4gICAgdGhpcy5yID0geCAhPT0gMC4wID8gYS5yIC8geCA6IDAuMDtcbiAgICB0aGlzLmcgPSB5ICE9PSAwLjAgPyBhLmcgLyB5IDogMC4wO1xuICAgIHRoaXMuYiA9IHogIT09IDAuMCA/IGEuYiAvIHogOiAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogZGl2aWRlcyB0aGlzIGJ5IHNjYWxhciB2YWx1ZVxuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLnNkaXYgPSBmdW5jdGlvbiAocykge1xuICAgIHMgPSBzID09PSAwLjAgPyAwLjAgOiAxLjAgLyBzO1xuXG4gICAgdGhpcy5yICo9IHM7XG4gICAgdGhpcy5nICo9IHM7XG4gICAgdGhpcy5iICo9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZW5ndGhcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiByZXR1cm5zIGxlbmd0aCBvZiB0aGlzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgciA9IHRoaXMucixcbiAgICAgICAgZyA9IHRoaXMuZyxcbiAgICAgICAgYiA9IHRoaXMuYixcbiAgICAgICAgbCA9IHIgKiByICsgZyAqIGcgKyBiICogYjtcblxuICAgIHJldHVybiBsID4gMC4wID8gMS4wIC8gc3FydChsKSA6IDAuMDtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZW5ndGhTcVxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHJldHVybnMgbGVuZ3RoIHNxdWFyZWQgb2YgdGhpc1xuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5sZW5ndGhTcSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgciA9IHRoaXMucixcbiAgICAgICAgZyA9IHRoaXMuZyxcbiAgICAgICAgYiA9IHRoaXMuYjtcblxuICAgIHJldHVybiByICogciArIGcgKiBnICsgYiAqIGI7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgbm9ybWFsaXplXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogcmV0dXJucyB0aGlzIHdpdGggYSBsZW5ndGggb2YgMVxuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHIgPSB0aGlzLnIsXG4gICAgICAgIGcgPSB0aGlzLmcsXG4gICAgICAgIGIgPSB0aGlzLmIsXG4gICAgICAgIGwgPSByICogciArIGcgKiBnICsgYiAqIGI7XG5cbiAgICBsID0gbCA+IDAuMCA/IDEuMCAvIHNxcnQobCkgOiAwLjA7XG5cbiAgICB0aGlzLnIgKj0gbDtcbiAgICB0aGlzLmcgKj0gbDtcbiAgICB0aGlzLmIgKj0gbDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNub3JtYWxpemVcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBlbnN1cmVzIHRoYXQgZWFjaCB2YWx1ZSBpcyBubyBsYXJnZXIgdGhhbiAxXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmNub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHIgPSB0aGlzLnIsXG4gICAgICAgIGcgPSB0aGlzLmcsXG4gICAgICAgIGIgPSB0aGlzLmI7XG5cbiAgICB0aGlzLnIgPSByID4gMS4wID8gMS4wIDogcjtcbiAgICB0aGlzLmcgPSBnID4gMS4wID8gMS4wIDogZztcbiAgICB0aGlzLmIgPSBiID4gMS4wID8gMS4wIDogYjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlcnBcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoaXMgYW5kIG90aGVyIGJ5IHhcbiAqIEBwYXJhbSBDb2xvciBvdGhlclxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIENvbG9yXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5sZXJwID0gZnVuY3Rpb24gKG90aGVyLCB4KSB7XG5cbiAgICB0aGlzLnIgKz0gKG90aGVyLnIgLSB0aGlzLnIpICogeDtcbiAgICB0aGlzLmcgKz0gKG90aGVyLmcgLSB0aGlzLmcpICogeDtcbiAgICB0aGlzLmIgKz0gKG90aGVyLmIgLSB0aGlzLmIpICogeDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsZXJwXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiBhIGFuZCBiIGJ5IHhcbiAqIEBwYXJhbSBDb2xvciBhXG4gKiBAcGFyYW0gQ29sb3IgYlxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIENvbG9yXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5jbGVycCA9IGZ1bmN0aW9uIChhLCBiLCB4KSB7XG4gICAgdmFyIGF4ID0gYS5yLFxuICAgICAgICBheSA9IGEuZyxcbiAgICAgICAgYXogPSBhLmI7XG5cbiAgICB0aGlzLnIgPSBheCArIChiLnIgLSBheCkgKiB4O1xuICAgIHRoaXMuZyA9IGF5ICsgKGIuZyAtIGF5KSAqIHg7XG4gICAgdGhpcy5iID0gYXogKyAoYi5iIC0gYXopICogeDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1pblxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHJldHVybnMgbWluIHZhbHVlcyBmcm9tIHRoaXMgYW5kIG90aGVyIHZlY3RvclxuICogQHBhcmFtIENvbG9yIG90aGVyXG4gKiBAcmV0dXJuIENvbG9yXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYXIgPSB0aGlzLnIsXG4gICAgICAgIGFnID0gdGhpcy5nLFxuICAgICAgICBhYiA9IHRoaXMuYixcbiAgICAgICAgYnIgPSBvdGhlci5yLFxuICAgICAgICBiZyA9IG90aGVyLmcsXG4gICAgICAgIGJiID0gb3RoZXIuYjtcblxuICAgIHRoaXMuciA9IGJyIDwgYXIgPyBiciA6IGFyO1xuICAgIHRoaXMuZyA9IGJnIDwgYWcgPyBiZyA6IGFnO1xuICAgIHRoaXMuYiA9IGJiIDwgYWIgPyBiYiA6IGFiO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbWF4XG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogcmV0dXJucyBtYXggdmFsdWVzIGZyb20gdGhpcyBhbmQgb3RoZXIgdmVjdG9yXG4gKiBAcGFyYW0gQ29sb3Igb3RoZXJcbiAqIEByZXR1cm4gQ29sb3JcbiAqL1xuQ29sb3IucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhciA9IHRoaXMucixcbiAgICAgICAgYWcgPSB0aGlzLmcsXG4gICAgICAgIGFiID0gdGhpcy5iLFxuICAgICAgICBiciA9IG90aGVyLnIsXG4gICAgICAgIGJnID0gb3RoZXIuZyxcbiAgICAgICAgYmIgPSBvdGhlci5iO1xuXG4gICAgdGhpcy5yID0gYnIgPiBhciA/IGJyIDogYXI7XG4gICAgdGhpcy5nID0gYmcgPiBhZyA/IGJnIDogYWc7XG4gICAgdGhpcy5iID0gYmIgPiBhYiA/IGJiIDogYWI7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tVmVjMlxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHNldHMgdmFsdWVzIGZyb20gVmVjMlxuICogQHBhcmFtIFZlYzIgdlxuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5mcm9tVmVjMiA9IGZ1bmN0aW9uICh2KSB7XG5cbiAgICB0aGlzLnIgPSB2Lng7XG4gICAgdGhpcy5nID0gdi55O1xuICAgIHRoaXMuYiA9IDAuMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21WZWMzXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogc2V0cyB2YWx1ZXMgZnJvbSBWZWMzXG4gKiBAcGFyYW0gVmVjMyB2XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmZyb21WZWMzID0gZnVuY3Rpb24gKHYpIHtcblxuICAgIHRoaXMuciA9IHYueDtcbiAgICB0aGlzLmcgPSB2Lnk7XG4gICAgdGhpcy5iID0gdi56O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVZlYzRcbiAqIEBtZW1iZXJvZiBPZGluLkNvbG9yXG4gKiBzZXRzIHZhbHVlcyBmcm9tIFZlYzRcbiAqIEBwYXJhbSBWZWM0IHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5Db2xvci5wcm90b3R5cGUuZnJvbVZlYzQgPSBDb2xvci5wcm90b3R5cGUuZnJvbVZlYzM7XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIEBwYXJhbSBPZGluLkNvbG9yIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuICEoXG4gICAgdGhpcy5yICE9PSBvdGhlci5yIHx8XG4gICAgdGhpcy5nICE9PSBvdGhlci5nIHx8XG4gICAgdGhpcy5iICE9PSBvdGhlci5iXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIEBwYXJhbSBPZGluLkNvbG9yIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuIChcbiAgICB0aGlzLnIgIT09IG90aGVyLnIgfHxcbiAgICB0aGlzLmcgIT09IG90aGVyLmcgfHxcbiAgICB0aGlzLmIgIT09IG90aGVyLmJcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogc2V0cyB2YWx1ZXMgZnJvbSBKU09OIG9iamVjdFxuICogQHBhcmFtIE9iamVjdCBqc29uXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuQ29sb3IucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMuciA9IGpzb24ucjtcbiAgICB0aGlzLmcgPSBqc29uLmc7XG4gICAgdGhpcy5iID0ganNvbi5iO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogcmV0dXJucyBqc29uIG9iamVjdCBvZiB0aGlzXG4gKiBAcmV0dXJuIE9iamVjdFxuICovXG5Db2xvci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAganNvbi5fY2xhc3NOYW1lID0gXCJDb2xvclwiO1xuICAgIGpzb24uciA9IHRoaXMucjtcbiAgICBqc29uLmcgPSB0aGlzLmc7XG4gICAganNvbi5iID0gdGhpcy5iO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUFycmF5XG4gKiBAbWVtYmVyb2YgT2Rpbi5Db2xvclxuICogc2V0cyB2YWx1ZXMgZnJvbSBBcnJheSBvYmplY3RcbiAqIEBwYXJhbSBBcnJheSBhcnJheVxuICogQHJldHVybiB0aGlzXG4gKi9cbkNvbG9yLnByb3RvdHlwZS5mcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcblxuICAgIHRoaXMuciA9IGFycmF5WzBdO1xuICAgIHRoaXMuZyA9IGFycmF5WzFdO1xuICAgIHRoaXMuYiA9IGFycmF5WzJdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9BcnJheVxuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gQXJyYXlcbiAqL1xuQ29sb3IucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBhcnJheSB8fCAoYXJyYXkgPSBbXSk7XG5cbiAgICBhcnJheVswXSA9IHRoaXMucjtcbiAgICBhcnJheVsxXSA9IHRoaXMuZztcbiAgICBhcnJheVsyXSA9IHRoaXMuYjtcblxuICAgIHJldHVybiBhcnJheTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b1N0cmluZ1xuICogQG1lbWJlcm9mIE9kaW4uQ29sb3JcbiAqIHJldHVybnMgc3RyaW5nIG9mIHRoaXNcbiAqIEByZXR1cm4gU3RyaW5nXG4gKi9cbkNvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBcIkNvbG9yKCBcIiArIHRoaXMuciArIFwiLCBcIiArIHRoaXMuZyArIFwiLCBcIiArIHRoaXMuYiArIFwiIClcIjtcbn07XG5cblxuZnVuY3Rpb24gc2luZ2xlVG9IRVgodmFsdWUpIHtcbiAgICB2YXIgc3RyID0gKH5+KGNsYW1wMDEodmFsdWUpICogMjU1KSkudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBzdHIubGVuZ3RoID09PSAxID8gXCIwXCIgKyBzdHIgOiBzdHI7XG59XG5cblxudmFyIGNvbG9yTmFtZXMgPSBDb2xvci5jb2xvck5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogXCIjZjBmOGZmXCIsXG4gICAgYW50aXF1ZXdoaXRlOiBcIiNmYWViZDdcIixcbiAgICBhcXVhOiBcIiMwMGZmZmZcIixcbiAgICBhcXVhbWFyaW5lOiBcIiM3ZmZmZDRcIixcbiAgICBhenVyZTogXCIjZjBmZmZmXCIsXG4gICAgYmVpZ2U6IFwiI2Y1ZjVkY1wiLFxuICAgIGJpc3F1ZTogXCIjZmZlNGM0XCIsXG4gICAgYmxhY2s6IFwiIzAwMDAwMFwiLFxuICAgIGJsYW5jaGVkYWxtb25kOiBcIiNmZmViY2RcIixcbiAgICBibHVlOiBcIiMwMDAwZmZcIixcbiAgICBibHVldmlvbGV0OiBcIiM4YTJiZTJcIixcbiAgICBicm93bjogXCIjYTUyYTJhXCIsXG4gICAgYnVybHl3b29kOiBcIiNkZWI4ODdcIixcbiAgICBjYWRldGJsdWU6IFwiIzVmOWVhMFwiLFxuICAgIGNoYXJ0cmV1c2U6IFwiIzdmZmYwMFwiLFxuICAgIGNob2NvbGF0ZTogXCIjZDI2OTFlXCIsXG4gICAgY29yYWw6IFwiI2ZmN2Y1MFwiLFxuICAgIGNvcm5mbG93ZXJibHVlOiBcIiM2NDk1ZWRcIixcbiAgICBjb3Juc2lsazogXCIjZmZmOGRjXCIsXG4gICAgY3JpbXNvbjogXCIjZGMxNDNjXCIsXG4gICAgY3lhbjogXCIjMDBmZmZmXCIsXG4gICAgZGFya2JsdWU6IFwiIzAwMDA4YlwiLFxuICAgIGRhcmtjeWFuOiBcIiMwMDhiOGJcIixcbiAgICBkYXJrZ29sZGVucm9kOiBcIiNiODg2MGJcIixcbiAgICBkYXJrZ3JheTogXCIjYTlhOWE5XCIsXG4gICAgZGFya2dyZWVuOiBcIiMwMDY0MDBcIixcbiAgICBkYXJra2hha2k6IFwiI2JkYjc2YlwiLFxuICAgIGRhcmttYWdlbnRhOiBcIiM4YjAwOGJcIixcbiAgICBkYXJrb2xpdmVncmVlbjogXCIjNTU2YjJmXCIsXG4gICAgZGFya29yYW5nZTogXCIjZmY4YzAwXCIsXG4gICAgZGFya29yY2hpZDogXCIjOTkzMmNjXCIsXG4gICAgZGFya3JlZDogXCIjOGIwMDAwXCIsXG4gICAgZGFya3NhbG1vbjogXCIjZTk5NjdhXCIsXG4gICAgZGFya3NlYWdyZWVuOiBcIiM4ZmJjOGZcIixcbiAgICBkYXJrc2xhdGVibHVlOiBcIiM0ODNkOGJcIixcbiAgICBkYXJrc2xhdGVncmF5OiBcIiMyZjRmNGZcIixcbiAgICBkYXJrdHVycXVvaXNlOiBcIiMwMGNlZDFcIixcbiAgICBkYXJrdmlvbGV0OiBcIiM5NDAwZDNcIixcbiAgICBkZWVwcGluazogXCIjZmYxNDkzXCIsXG4gICAgZGVlcHNreWJsdWU6IFwiIzAwYmZmZlwiLFxuICAgIGRpbWdyYXk6IFwiIzY5Njk2OVwiLFxuICAgIGRvZGdlcmJsdWU6IFwiIzFlOTBmZlwiLFxuICAgIGZpcmVicmljazogXCIjYjIyMjIyXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiI2ZmZmFmMFwiLFxuICAgIGZvcmVzdGdyZWVuOiBcIiMyMjhiMjJcIixcbiAgICBmdWNoc2lhOiBcIiNmZjAwZmZcIixcbiAgICBnYWluc2Jvcm86IFwiI2RjZGNkY1wiLFxuICAgIGdob3N0d2hpdGU6IFwiI2Y4ZjhmZlwiLFxuICAgIGdvbGQ6IFwiI2ZmZDcwMFwiLFxuICAgIGdvbGRlbnJvZDogXCIjZGFhNTIwXCIsXG4gICAgZ3JheTogXCIjODA4MDgwXCIsXG4gICAgZ3JlZW46IFwiIzAwODAwMFwiLFxuICAgIGdyZWVueWVsbG93OiBcIiNhZGZmMmZcIixcbiAgICBncmV5OiBcIiM4MDgwODBcIixcbiAgICBob25leWRldzogXCIjZjBmZmYwXCIsXG4gICAgaG90cGluazogXCIjZmY2OWI0XCIsXG4gICAgaW5kaWFucmVkOiBcIiNjZDVjNWNcIixcbiAgICBpbmRpZ286IFwiIzRiMDA4MlwiLFxuICAgIGl2b3J5OiBcIiNmZmZmZjBcIixcbiAgICBraGFraTogXCIjZjBlNjhjXCIsXG4gICAgbGF2ZW5kZXI6IFwiI2U2ZTZmYVwiLFxuICAgIGxhdmVuZGVyYmx1c2g6IFwiI2ZmZjBmNVwiLFxuICAgIGxhd25ncmVlbjogXCIjN2NmYzAwXCIsXG4gICAgbGVtb25jaGlmZm9uOiBcIiNmZmZhY2RcIixcbiAgICBsaWdodGJsdWU6IFwiI2FkZDhlNlwiLFxuICAgIGxpZ2h0Y29yYWw6IFwiI2YwODA4MFwiLFxuICAgIGxpZ2h0Y3lhbjogXCIjZTBmZmZmXCIsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFwiI2ZhZmFkMlwiLFxuICAgIGxpZ2h0Z3JleTogXCIjZDNkM2QzXCIsXG4gICAgbGlnaHRncmVlbjogXCIjOTBlZTkwXCIsXG4gICAgbGlnaHRwaW5rOiBcIiNmZmI2YzFcIixcbiAgICBsaWdodHNhbG1vbjogXCIjZmZhMDdhXCIsXG4gICAgbGlnaHRzZWFncmVlbjogXCIjMjBiMmFhXCIsXG4gICAgbGlnaHRza3libHVlOiBcIiM4N2NlZmFcIixcbiAgICBsaWdodHNsYXRlZ3JheTogXCIjNzc4ODk5XCIsXG4gICAgbGlnaHRzdGVlbGJsdWU6IFwiI2IwYzRkZVwiLFxuICAgIGxpZ2h0eWVsbG93OiBcIiNmZmZmZTBcIixcbiAgICBsaW1lOiBcIiMwMGZmMDBcIixcbiAgICBsaW1lZ3JlZW46IFwiIzMyY2QzMlwiLFxuICAgIGxpbmVuOiBcIiNmYWYwZTZcIixcbiAgICBtYWdlbnRhOiBcIiNmZjAwZmZcIixcbiAgICBtYXJvb246IFwiIzgwMDAwMFwiLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IFwiIzY2Y2RhYVwiLFxuICAgIG1lZGl1bWJsdWU6IFwiIzAwMDBjZFwiLFxuICAgIG1lZGl1bW9yY2hpZDogXCIjYmE1NWQzXCIsXG4gICAgbWVkaXVtcHVycGxlOiBcIiM5MzcwZDhcIixcbiAgICBtZWRpdW1zZWFncmVlbjogXCIjM2NiMzcxXCIsXG4gICAgbWVkaXVtc2xhdGVibHVlOiBcIiM3YjY4ZWVcIixcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogXCIjMDBmYTlhXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIiM0OGQxY2NcIixcbiAgICBtZWRpdW12aW9sZXRyZWQ6IFwiI2M3MTU4NVwiLFxuICAgIG1pZG5pZ2h0Ymx1ZTogXCIjMTkxOTcwXCIsXG4gICAgbWludGNyZWFtOiBcIiNmNWZmZmFcIixcbiAgICBtaXN0eXJvc2U6IFwiI2ZmZTRlMVwiLFxuICAgIG1vY2Nhc2luOiBcIiNmZmU0YjVcIixcbiAgICBuYXZham93aGl0ZTogXCIjZmZkZWFkXCIsXG4gICAgbmF2eTogXCIjMDAwMDgwXCIsXG4gICAgb2xkbGFjZTogXCIjZmRmNWU2XCIsXG4gICAgb2xpdmU6IFwiIzgwODAwMFwiLFxuICAgIG9saXZlZHJhYjogXCIjNmI4ZTIzXCIsXG4gICAgb3JhbmdlOiBcIiNmZmE1MDBcIixcbiAgICBvcmFuZ2VyZWQ6IFwiI2ZmNDUwMFwiLFxuICAgIG9yY2hpZDogXCIjZGE3MGQ2XCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCIjZWVlOGFhXCIsXG4gICAgcGFsZWdyZWVuOiBcIiM5OGZiOThcIixcbiAgICBwYWxldHVycXVvaXNlOiBcIiNhZmVlZWVcIixcbiAgICBwYWxldmlvbGV0cmVkOiBcIiNkODcwOTNcIixcbiAgICBwYXBheWF3aGlwOiBcIiNmZmVmZDVcIixcbiAgICBwZWFjaHB1ZmY6IFwiI2ZmZGFiOVwiLFxuICAgIHBlcnU6IFwiI2NkODUzZlwiLFxuICAgIHBpbms6IFwiI2ZmYzBjYlwiLFxuICAgIHBsdW06IFwiI2RkYTBkZFwiLFxuICAgIHBvd2RlcmJsdWU6IFwiI2IwZTBlNlwiLFxuICAgIHB1cnBsZTogXCIjODAwMDgwXCIsXG4gICAgcmVkOiBcIiNmZjAwMDBcIixcbiAgICByb3N5YnJvd246IFwiI2JjOGY4ZlwiLFxuICAgIHJveWFsYmx1ZTogXCIjNDE2OWUxXCIsXG4gICAgc2FkZGxlYnJvd246IFwiIzhiNDUxM1wiLFxuICAgIHNhbG1vbjogXCIjZmE4MDcyXCIsXG4gICAgc2FuZHlicm93bjogXCIjZjRhNDYwXCIsXG4gICAgc2VhZ3JlZW46IFwiIzJlOGI1N1wiLFxuICAgIHNlYXNoZWxsOiBcIiNmZmY1ZWVcIixcbiAgICBzaWVubmE6IFwiI2EwNTIyZFwiLFxuICAgIHNpbHZlcjogXCIjYzBjMGMwXCIsXG4gICAgc2t5Ymx1ZTogXCIjODdjZWViXCIsXG4gICAgc2xhdGVibHVlOiBcIiM2YTVhY2RcIixcbiAgICBzbGF0ZWdyYXk6IFwiIzcwODA5MFwiLFxuICAgIHNub3c6IFwiI2ZmZmFmYVwiLFxuICAgIHNwcmluZ2dyZWVuOiBcIiMwMGZmN2ZcIixcbiAgICBzdGVlbGJsdWU6IFwiIzQ2ODJiNFwiLFxuICAgIHRhbjogXCIjZDJiNDhjXCIsXG4gICAgdGVhbDogXCIjMDA4MDgwXCIsXG4gICAgdGhpc3RsZTogXCIjZDhiZmQ4XCIsXG4gICAgdG9tYXRvOiBcIiNmZjYzNDdcIixcbiAgICB0dXJxdW9pc2U6IFwiIzQwZTBkMFwiLFxuICAgIHZpb2xldDogXCIjZWU4MmVlXCIsXG4gICAgd2hlYXQ6IFwiI2Y1ZGViM1wiLFxuICAgIHdoaXRlOiBcIiNmZmZmZmZcIixcbiAgICB3aGl0ZXNtb2tlOiBcIiNmNWY1ZjVcIixcbiAgICB5ZWxsb3c6IFwiI2ZmZmYwMFwiLFxuICAgIHllbGxvd2dyZWVuOiBcIiM5YWNkMzJcIlxufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yO1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4vbWF0aGZcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY29zID0gTWF0aC5jb3MsXG4gICAgc2luID0gTWF0aC5zaW4sXG4gICAgYXRhbjIgPSBNYXRoLmF0YW4yO1xuXG4vKipcbiAqIEBjbGFzcyBNYXQyXG4gKiAyeDIgbWF0cml4XG4gKiBAcGFyYW0gTnVtYmVyIG0xMVxuICogQHBhcmFtIE51bWJlciBtMTJcbiAqIEBwYXJhbSBOdW1iZXIgbTIxXG4gKiBAcGFyYW0gTnVtYmVyIG0yMlxuICovXG5mdW5jdGlvbiBNYXQyKG0xMSwgbTEyLCBtMjEsIG0yMikge1xuICAgIHZhciB0ZSA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgRmxvYXQzMkFycmF5IGVsZW1lbnRzXG4gICAgICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICAgICAqL1xuICAgIHRoaXMuZWxlbWVudHMgPSB0ZTtcblxuICAgIHRlWzBdID0gbTExICE9IHVuZGVmaW5lZCA/IG0xMSA6IDEuMDtcbiAgICB0ZVsyXSA9IG0xMiB8fCAwLjA7XG4gICAgdGVbMV0gPSBtMjEgfHwgMC4wO1xuICAgIHRlWzNdID0gbTIyICE9IHVuZGVmaW5lZCA/IG0yMiA6IDEuMDtcbn1cblxuTWF0aGYuX2NsYXNzZXNbXCJNYXQyXCJdID0gTWF0MjtcblxuLyoqXG4gKiBAbWV0aG9kIGNsb25lXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiByZXR1cm5zIG5ldyBpbnN0YW5jZSBvZiB0aGlzXG4gKiBAcmV0dXJuIE1hdDJcbiAqL1xuTWF0Mi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHJldHVybiBuZXcgTWF0MihcbiAgICAgICAgdGVbMF0sIHRlWzFdLFxuICAgICAgICB0ZVsyXSwgdGVbM11cbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIGNvcGllcyBvdGhlclxuICogQHBhcmFtIE1hdDIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBvdGhlci5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuICAgIHRlWzNdID0gbWVbM107XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIHNldHMgdmFsdWVzIG9mIHRoaXNcbiAqIEBwYXJhbSBOdW1iZXIgbTExXG4gKiBAcGFyYW0gTnVtYmVyIG0xMlxuICogQHBhcmFtIE51bWJlciBtMjFcbiAqIEBwYXJhbSBOdW1iZXIgbTIyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG0xMSwgbTEyLCBtMjEsIG0yMikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IG0xMTtcbiAgICB0ZVsyXSA9IG0xMjtcbiAgICB0ZVsxXSA9IG0yMTtcbiAgICB0ZVszXSA9IG0yMjtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG11bFxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gTWF0MiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDIucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGJlID0gb3RoZXIuZWxlbWVudHMsXG5cbiAgICAgICAgYTExID0gYWVbMF0sXG4gICAgICAgIGExMiA9IGFlWzJdLFxuICAgICAgICBhMjEgPSBhZVsxXSxcbiAgICAgICAgYTIyID0gYWVbM10sXG5cbiAgICAgICAgYjExID0gYmVbMF0sXG4gICAgICAgIGIxMiA9IGJlWzJdLFxuICAgICAgICBiMjEgPSBiZVsxXSxcbiAgICAgICAgYjIyID0gYmVbM107XG5cbiAgICBhZVswXSA9IGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgICBhZVsxXSA9IGExMiAqIGIxMSArIGEyMiAqIGIxMjtcblxuICAgIGFlWzJdID0gYTExICogYjIxICsgYTIxICogYjIyO1xuICAgIGFlWzNdID0gYTEyICogYjIxICsgYTIyICogYjIyO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbW11bFxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogbXVsaXBsZXMgYSBhbmQgYiBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gTWF0MiBhXG4gKiBAcGFyYW0gTWF0MiBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUubW11bCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgYWUgPSBhLmVsZW1lbnRzLFxuICAgICAgICBiZSA9IGIuZWxlbWVudHMsXG5cbiAgICAgICAgYTExID0gYWVbMF0sXG4gICAgICAgIGExMiA9IGFlWzJdLFxuICAgICAgICBhMjEgPSBhZVsxXSxcbiAgICAgICAgYTIyID0gYWVbM10sXG5cbiAgICAgICAgYjExID0gYmVbMF0sXG4gICAgICAgIGIxMiA9IGJlWzJdLFxuICAgICAgICBiMjEgPSBiZVsxXSxcbiAgICAgICAgYjIyID0gYmVbM107XG5cbiAgICB0ZVswXSA9IGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgICB0ZVsxXSA9IGExMiAqIGIxMSArIGEyMiAqIGIxMjtcblxuICAgIHRlWzJdID0gYTExICogYjIxICsgYTIxICogYjIyO1xuICAgIHRlWzNdID0gYTEyICogYjIxICsgYTIyICogYjIyO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc211bFxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogbXVsaXBsZXMgdGhpcyBieSBhIHNjYWxhciB2YWx1ZVxuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUuc211bCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHRlWzBdICo9IHM7XG4gICAgdGVbMV0gKj0gcztcbiAgICB0ZVsyXSAqPSBzO1xuICAgIHRlWzNdICo9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiBkaXZpZGVzIHRoaXMgYnkgc2NhbGFyIHZhbHVlXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS5zZGl2ID0gZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgcyA9IHMgIT09IDAuMCA/IDEuMCAvIHMgOiAxLjA7XG5cbiAgICB0ZVswXSAqPSBzO1xuICAgIHRlWzFdICo9IHM7XG4gICAgdGVbMl0gKj0gcztcbiAgICB0ZVszXSAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaWRlbnRpdHlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIGlkZW50aXR5IG1hdHJpeFxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDIucHJvdG90eXBlLmlkZW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IDE7XG4gICAgdGVbMV0gPSAwLjA7XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAxO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgemVyb1xuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogemVybyBtYXRyaXhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS56ZXJvID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IDAuMDtcbiAgICB0ZVsxXSA9IDAuMDtcbiAgICB0ZVsyXSA9IDAuMDtcbiAgICB0ZVszXSA9IDAuMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGRldGVybWluYW50XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiByZXR1cm5zIHRoZSBkZXRlcm1pbmFudCBvZiB0aGlzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUuZGV0ZXJtaW5hbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHJldHVybiB0ZVswXSAqIHRlWzNdIC0gdGVbMl0gKiB0ZVsxXTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnZlcnNlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiByZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoaXNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cbiAgICAgICAgbTExID0gdGVbMF0sXG4gICAgICAgIG0xMiA9IHRlWzJdLFxuICAgICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgICAgbTIyID0gdGVbM10sXG5cbiAgICAgICAgZGV0ID0gbTExICogbTIyIC0gbTEyICogbTIxO1xuXG4gICAgaWYgKGRldCA9PT0gMC4wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIHRlWzBdID0gbTIyICogZGV0O1xuICAgIHRlWzFdID0gLW0xMiAqIGRldDtcbiAgICB0ZVsyXSA9IC1tMjEgKiBkZXQ7XG4gICAgdGVbM10gPSBtMTEgKiBkZXQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnZlcnNlTWF0XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiByZXR1cm5zIHRoZSBpbnZlcnNlIG9mIG90aGVyXG4gKiBAcGFyYW0gTWF0MiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDIucHJvdG90eXBlLmludmVyc2VNYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG90aGVyLmVsZW1lbnRzLFxuXG4gICAgICAgIG0xMSA9IG1lWzBdLFxuICAgICAgICBtMTIgPSBtZVsyXSxcbiAgICAgICAgbTIxID0gbWVbMV0sXG4gICAgICAgIG0yMiA9IG1lWzNdLFxuXG4gICAgICAgIGRldCA9IG0xMSAqIG0yMiAtIG0xMiAqIG0yMTtcblxuICAgIGlmIChkZXQgPT09IDAuMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eSgpO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICB0ZVswXSA9IG0yMiAqIGRldDtcbiAgICB0ZVsxXSA9IC1tMTIgKiBkZXQ7XG4gICAgdGVbMl0gPSAtbTIxICogZGV0O1xuICAgIHRlWzNdID0gbTExICogZGV0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdHJhbnNwb3NlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiB0cmFuc3Bvc2VzIHRoaXMgbWF0cml4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUudHJhbnNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHRtcDtcblxuICAgIHRtcCA9IHRlWzFdO1xuICAgIHRlWzFdID0gdGVbMl07XG4gICAgdGVbMl0gPSB0bXA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRUcmFjZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogc2V0cyB0aGUgZGlhZ29uYWwgb2YgbWF0cml4XG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgeVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDIucHJvdG90eXBlLnNldFRyYWNlID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSB4O1xuICAgIHRlWzNdID0geTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFJvdGF0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiBzZXRzIHRoZSByb3RhdGlvbiBpbiByYWRpYW5zIHRoaXNcbiAqIEBwYXJhbSBOdW1iZXIgYW5nbGVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGMgPSBjb3MoYW5nbGUpLFxuICAgICAgICBzID0gc2luKGFuZ2xlKTtcblxuICAgIHRlWzBdID0gYztcbiAgICB0ZVsxXSA9IHM7XG4gICAgdGVbMl0gPSAtcztcbiAgICB0ZVszXSA9IGM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBnZXRSb3RhdGlvblxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogcmV0dXJucyB0aGUgcm90YXRpb24gaW4gcmFkaWFucyBvZiB0aGlzXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXQyLnByb3RvdHlwZS5nZXRSb3RhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgcmV0dXJuIGF0YW4yKHRlWzFdLCB0ZVswXSk7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgcm90YXRlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiByb3RhdGVzIHRoaXMgYnkgYW5nbGUgaW4gcmFkaWFuc1xuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDIucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cbiAgICAgICAgbTExID0gdGVbMF0sXG4gICAgICAgIG0xMiA9IHRlWzJdLFxuICAgICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgICAgbTIyID0gdGVbM10sXG5cbiAgICAgICAgcyA9IHNpbihhbmdsZSksXG4gICAgICAgIGMgPSBzaW4oYW5nbGUpO1xuXG4gICAgdGVbMF0gPSBtMTEgKiBjICsgbTEyICogcztcbiAgICB0ZVsxXSA9IG0xMSAqIC1zICsgbTEyICogYztcbiAgICB0ZVsyXSA9IG0yMSAqIGMgKyBtMjIgKiBzO1xuICAgIHRlWzNdID0gbTIxICogLXMgKyBtMjIgKiBjO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbU1hdDNcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIHNldHMgdGhpcyBmcm9tIE1hdDNcbiAqIEBwYXJhbSBNYXQzIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS5mcm9tTWF0MyA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBtLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBtZVswXTtcbiAgICB0ZVsxXSA9IG1lWzFdO1xuICAgIHRlWzJdID0gbWVbM107XG4gICAgdGVbM10gPSBtZVs0XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21NYXQ0XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiBzZXRzIHRoaXMgZnJvbSBNYXQ0XG4gKiBAcGFyYW0gTWF0NCBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUuZnJvbU1hdDQgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gbS5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzRdO1xuICAgIHRlWzNdID0gbWVbNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogQHBhcmFtIE9kaW4uTWF0MiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGJlID0gb3RoZXIuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gIShcbiAgICBhZVswXSAhPT0gYmVbMF0gfHxcbiAgICBhZVsxXSAhPT0gYmVbMV0gfHxcbiAgICBhZVsyXSAhPT0gYmVbMl0gfHxcbiAgICBhZVszXSAhPT0gYmVbM11cbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQyXG4gKiBAcGFyYW0gT2Rpbi5NYXQyIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUubm90RXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGFlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgYmUgPSBvdGhlci5lbGVtZW50cztcblxuICAgIHJldHVybiAoXG4gICAgYWVbMF0gIT09IGJlWzBdIHx8XG4gICAgYWVbMV0gIT09IGJlWzFdIHx8XG4gICAgYWVbMl0gIT09IGJlWzJdIHx8XG4gICAgYWVbM10gIT09IGJlWzNdXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tSlNPTlxuICogQG1lbWJlcm9mIE9kaW4uTWF0MlxuICogc2V0cyB2YWx1ZXMgZnJvbSBKU09OIG9iamVjdFxuICogQHBhcmFtIE9iamVjdCBqc29uXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0Mi5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0ganNvbi5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuICAgIHRlWzNdID0gbWVbM107XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b0pTT05cbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIHJldHVybnMganNvbiBvYmplY3Qgb2YgdGhpc1xuICogQHJldHVybiBPYmplY3RcbiAqL1xuTWF0Mi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGplID0ganNvbi5lbGVtZW50cyB8fCAoanNvbi5lbGVtZW50cyA9IFtdKTtcblxuICAgIGpzb24uX2NsYXNzTmFtZSA9IFwiTWF0MlwiO1xuICAgIGplWzBdID0gdGVbMF07XG4gICAgamVbMV0gPSB0ZVsxXTtcbiAgICBqZVsyXSA9IHRlWzJdO1xuICAgIGplWzNdID0gdGVbM107XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tQXJyYXlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIHNldHMgdmFsdWVzIGZyb20gQXJyYXkgb2JqZWN0XG4gKiBAcGFyYW0gT2JqZWN0IGpzb25cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQyLnByb3RvdHlwZS5mcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBhcnJheVswXTtcbiAgICB0ZVsxXSA9IGFycmF5WzFdO1xuICAgIHRlWzJdID0gYXJyYXlbMl07XG4gICAgdGVbM10gPSBhcnJheVszXTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gT2JqZWN0XG4gKi9cbk1hdDIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBhcnJheSB8fCAoYXJyYXkgPSBbXSk7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGFycmF5WzBdID0gdGVbMF07XG4gICAgYXJyYXlbMV0gPSB0ZVsxXTtcbiAgICBhcnJheVsyXSA9IHRlWzJdO1xuICAgIGFycmF5WzNdID0gdGVbM107XG5cbiAgICByZXR1cm4gYXJyYXk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9TdHJpbmdcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDJcbiAqIHJldHVybnMgc3RyaW5nIG9mIHRoaXNcbiAqIEByZXR1cm4gU3RyaW5nXG4gKi9cbk1hdDIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgIFwiTWF0MlsgXCIgKyB0ZVswXSArIFwiLCBcIiArIHRlWzJdICsgXCJdXFxuXCIgK1xuICAgIFwiICAgICBbIFwiICsgdGVbMV0gKyBcIiwgXCIgKyB0ZVszXSArIFwiXVwiXG4gICAgKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXQyO1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4vbWF0aGZcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY29zID0gTWF0aC5jb3MsXG4gICAgc2luID0gTWF0aC5zaW47XG5cbi8qKlxuICogQGNsYXNzIE1hdDNcbiAqIDN4MyBtYXRyaXhcbiAqIEBwYXJhbSBOdW1iZXIgbTExXG4gKiBAcGFyYW0gTnVtYmVyIG0xMlxuICogQHBhcmFtIE51bWJlciBtMTNcbiAqIEBwYXJhbSBOdW1iZXIgbTIxXG4gKiBAcGFyYW0gTnVtYmVyIG0yMlxuICogQHBhcmFtIE51bWJlciBtMjNcbiAqIEBwYXJhbSBOdW1iZXIgbTMxXG4gKiBAcGFyYW0gTnVtYmVyIG0zMlxuICogQHBhcmFtIE51bWJlciBtMzNcbiAqL1xuZnVuY3Rpb24gTWF0MyhtMTEsIG0xMiwgbTEzLCBtMjEsIG0yMiwgbTIzLCBtMzEsIG0zMiwgbTMzKSB7XG4gICAgdmFyIHRlID0gbmV3IEZsb2F0MzJBcnJheSg5KTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBGbG9hdDMyQXJyYXkgZWxlbWVudHNcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5NYXQzXG4gICAgICovXG4gICAgdGhpcy5lbGVtZW50cyA9IHRlO1xuXG4gICAgdGVbMF0gPSBtMTEgIT0gdW5kZWZpbmVkID8gbTExIDogMS4wO1xuICAgIHRlWzNdID0gbTEyIHx8IDAuMDtcbiAgICB0ZVs2XSA9IG0xMyB8fCAwLjA7XG4gICAgdGVbMV0gPSBtMjEgfHwgMC4wO1xuICAgIHRlWzRdID0gbTIyICE9IHVuZGVmaW5lZCA/IG0yMiA6IDEuMDtcbiAgICB0ZVs3XSA9IG0yMyB8fCAwLjA7XG4gICAgdGVbMl0gPSBtMzEgfHwgMC4wO1xuICAgIHRlWzVdID0gbTMyIHx8IDAuMDtcbiAgICB0ZVs4XSA9IG0zMyAhPSB1bmRlZmluZWQgPyBtMzMgOiAxLjA7XG59XG5cbk1hdGhmLl9jbGFzc2VzW1wiTWF0M1wiXSA9IE1hdDM7XG5cbi8qKlxuICogQG1ldGhvZCBjbG9uZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogcmV0dXJucyBuZXcgaW5zdGFuY2Ugb2YgdGhpc1xuICogQHJldHVybiBNYXQzXG4gKi9cbk1hdDMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gbmV3IE1hdDMoXG4gICAgICAgIHRlWzBdLCB0ZVszXSwgdGVbNl0sXG4gICAgICAgIHRlWzFdLCB0ZVs0XSwgdGVbN10sXG4gICAgICAgIHRlWzJdLCB0ZVs1XSwgdGVbOF1cbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIGNvcGllcyBvdGhlclxuICogQHBhcmFtIE1hdDMgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBvdGhlci5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuICAgIHRlWzNdID0gbWVbM107XG4gICAgdGVbNF0gPSBtZVs0XTtcbiAgICB0ZVs1XSA9IG1lWzVdO1xuICAgIHRlWzZdID0gbWVbNl07XG4gICAgdGVbN10gPSBtZVs3XTtcbiAgICB0ZVs4XSA9IG1lWzhdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzXG4gKiBzZXRzIHZhbHVlcyBvZiB0aGlzXG4gKiBAcGFyYW0gTnVtYmVyIG0xMVxuICogQHBhcmFtIE51bWJlciBtMTJcbiAqIEBwYXJhbSBOdW1iZXIgbTEzXG4gKiBAcGFyYW0gTnVtYmVyIG0yMVxuICogQHBhcmFtIE51bWJlciBtMjJcbiAqIEBwYXJhbSBOdW1iZXIgbTIzXG4gKiBAcGFyYW0gTnVtYmVyIG0zMVxuICogQHBhcmFtIE51bWJlciBtMzJcbiAqIEBwYXJhbSBOdW1iZXIgbTMzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG0xMSwgbTEyLCBtMTMsIG0yMSwgbTIyLCBtMjMsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBtMTE7XG4gICAgdGVbM10gPSBtMTI7XG4gICAgdGVbNl0gPSBtMTM7XG4gICAgdGVbMV0gPSBtMjE7XG4gICAgdGVbNF0gPSBtMjI7XG4gICAgdGVbN10gPSBtMjM7XG4gICAgdGVbMl0gPSBtMzE7XG4gICAgdGVbNV0gPSBtMzI7XG4gICAgdGVbOF0gPSBtMzM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBtdWxcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIG11bGlwbGVzIHRoaXMncyB2YWx1ZXMgYnkgb3RoZXInc1xuICogQHBhcmFtIE1hdDMgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYWUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBiZSA9IG90aGVyLmVsZW1lbnRzLFxuXG4gICAgICAgIGExMSA9IGFlWzBdLFxuICAgICAgICBhMTIgPSBhZVszXSxcbiAgICAgICAgYTEzID0gYWVbNl0sXG4gICAgICAgIGEyMSA9IGFlWzFdLFxuICAgICAgICBhMjIgPSBhZVs0XSxcbiAgICAgICAgYTIzID0gYWVbN10sXG4gICAgICAgIGEzMSA9IGFlWzJdLFxuICAgICAgICBhMzIgPSBhZVs1XSxcbiAgICAgICAgYTMzID0gYWVbOF0sXG5cbiAgICAgICAgYjExID0gYmVbMF0sXG4gICAgICAgIGIxMiA9IGJlWzNdLFxuICAgICAgICBiMTMgPSBiZVs2XSxcbiAgICAgICAgYjIxID0gYmVbMV0sXG4gICAgICAgIGIyMiA9IGJlWzRdLFxuICAgICAgICBiMjMgPSBiZVs3XSxcbiAgICAgICAgYjMxID0gYmVbMl0sXG4gICAgICAgIGIzMiA9IGJlWzVdLFxuICAgICAgICBiMzMgPSBiZVs4XTtcblxuICAgIGFlWzBdID0gYTExICogYjExICsgYTIxICogYjEyICsgYTMxICogYjEzO1xuICAgIGFlWzNdID0gYTEyICogYjExICsgYTIyICogYjEyICsgYTMyICogYjEzO1xuICAgIGFlWzZdID0gYTEzICogYjExICsgYTIzICogYjEyICsgYTMzICogYjEzO1xuXG4gICAgYWVbMV0gPSBhMTEgKiBiMjEgKyBhMjEgKiBiMjIgKyBhMzEgKiBiMjM7XG4gICAgYWVbNF0gPSBhMTIgKiBiMjEgKyBhMjIgKiBiMjIgKyBhMzIgKiBiMjM7XG4gICAgYWVbN10gPSBhMTMgKiBiMjEgKyBhMjMgKiBiMjIgKyBhMzMgKiBiMjM7XG5cbiAgICBhZVsyXSA9IGExMSAqIGIzMSArIGEyMSAqIGIzMiArIGEzMSAqIGIzMztcbiAgICBhZVs1XSA9IGExMiAqIGIzMSArIGEyMiAqIGIzMiArIGEzMiAqIGIzMztcbiAgICBhZVs4XSA9IGExMyAqIGIzMSArIGEyMyAqIGIzMiArIGEzMyAqIGIzMztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1tdWxcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIG11bGlwbGVzIGEgYW5kIGIgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIE1hdDMgYVxuICogQHBhcmFtIE1hdDMgYlxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLm1tdWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGFlID0gYS5lbGVtZW50cyxcbiAgICAgICAgYmUgPSBiLmVsZW1lbnRzLFxuXG4gICAgICAgIGExMSA9IGFlWzBdLFxuICAgICAgICBhMTIgPSBhZVszXSxcbiAgICAgICAgYTEzID0gYWVbNl0sXG4gICAgICAgIGEyMSA9IGFlWzFdLFxuICAgICAgICBhMjIgPSBhZVs0XSxcbiAgICAgICAgYTIzID0gYWVbN10sXG4gICAgICAgIGEzMSA9IGFlWzJdLFxuICAgICAgICBhMzIgPSBhZVs1XSxcbiAgICAgICAgYTMzID0gYWVbOF0sXG5cbiAgICAgICAgYjExID0gYmVbMF0sXG4gICAgICAgIGIxMiA9IGJlWzNdLFxuICAgICAgICBiMTMgPSBiZVs2XSxcbiAgICAgICAgYjIxID0gYmVbMV0sXG4gICAgICAgIGIyMiA9IGJlWzRdLFxuICAgICAgICBiMjMgPSBiZVs3XSxcbiAgICAgICAgYjMxID0gYmVbMl0sXG4gICAgICAgIGIzMiA9IGJlWzVdLFxuICAgICAgICBiMzMgPSBiZVs4XTtcblxuICAgIHRlWzBdID0gYTExICogYjExICsgYTIxICogYjEyICsgYTMxICogYjEzO1xuICAgIHRlWzNdID0gYTEyICogYjExICsgYTIyICogYjEyICsgYTMyICogYjEzO1xuICAgIHRlWzZdID0gYTEzICogYjExICsgYTIzICogYjEyICsgYTMzICogYjEzO1xuXG4gICAgdGVbMV0gPSBhMTEgKiBiMjEgKyBhMjEgKiBiMjIgKyBhMzEgKiBiMjM7XG4gICAgdGVbNF0gPSBhMTIgKiBiMjEgKyBhMjIgKiBiMjIgKyBhMzIgKiBiMjM7XG4gICAgdGVbN10gPSBhMTMgKiBiMjEgKyBhMjMgKiBiMjIgKyBhMzMgKiBiMjM7XG5cbiAgICB0ZVsyXSA9IGExMSAqIGIzMSArIGEyMSAqIGIzMiArIGEzMSAqIGIzMztcbiAgICB0ZVs1XSA9IGExMiAqIGIzMSArIGEyMiAqIGIzMiArIGEzMiAqIGIzMztcbiAgICB0ZVs4XSA9IGExMyAqIGIzMSArIGEyMyAqIGIzMiArIGEzMyAqIGIzMztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNtdWxcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIG11bGlwbGVzIHRoaXMgYnkgYSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLnNtdWwgPSBmdW5jdGlvbiAocykge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSAqPSBzO1xuICAgIHRlWzFdICo9IHM7XG4gICAgdGVbMl0gKj0gcztcbiAgICB0ZVszXSAqPSBzO1xuICAgIHRlWzRdICo9IHM7XG4gICAgdGVbNV0gKj0gcztcbiAgICB0ZVs2XSAqPSBzO1xuICAgIHRlWzddICo9IHM7XG4gICAgdGVbOF0gKj0gcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNkaXZcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIGRpdmlkZXMgdGhpcyBieSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLnNkaXYgPSBmdW5jdGlvbiAocykge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBzID0gcyA9PT0gMC4wID8gMC4wIDogMS4wIC8gcztcblxuICAgIHRlWzBdICo9IHM7XG4gICAgdGVbMV0gKj0gcztcbiAgICB0ZVsyXSAqPSBzO1xuICAgIHRlWzNdICo9IHM7XG4gICAgdGVbNF0gKj0gcztcbiAgICB0ZVs1XSAqPSBzO1xuICAgIHRlWzZdICo9IHM7XG4gICAgdGVbN10gKj0gcztcbiAgICB0ZVs4XSAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaWRlbnRpdHlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIGlkZW50aXR5IG1hdHJpeFxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLmlkZW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IDE7XG4gICAgdGVbMV0gPSAwLjA7XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSAxO1xuICAgIHRlWzVdID0gMC4wO1xuICAgIHRlWzZdID0gMC4wO1xuICAgIHRlWzddID0gMC4wO1xuICAgIHRlWzhdID0gMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHplcm9cbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHplcm8gbWF0cml4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUuemVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSAwLjA7XG4gICAgdGVbMV0gPSAwLjA7XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSAwLjA7XG4gICAgdGVbNV0gPSAwLjA7XG4gICAgdGVbNl0gPSAwLjA7XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbOF0gPSAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBkZXRlcm1pbmFudFxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogcmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhpc1xuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLmRldGVybWluYW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cbiAgICAgICAgYSA9IHRlWzBdLFxuICAgICAgICBiID0gdGVbMV0sXG4gICAgICAgIGMgPSB0ZVsyXSxcbiAgICAgICAgZCA9IHRlWzNdLFxuICAgICAgICBlID0gdGVbNF0sXG4gICAgICAgIGYgPSB0ZVs1XSxcbiAgICAgICAgZyA9IHRlWzZdLFxuICAgICAgICBoID0gdGVbN10sXG4gICAgICAgIGkgPSB0ZVs4XTtcblxuICAgIHJldHVybiBhICogZSAqIGkgLSBhICogZiAqIGggLSBiICogZCAqIGkgKyBiICogZiAqIGcgKyBjICogZCAqIGggLSBjICogZSAqIGc7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaW52ZXJzZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogcmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGlzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUuaW52ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtMTEgPSB0ZVswXSxcbiAgICAgICAgbTEyID0gdGVbM10sXG4gICAgICAgIG0xMyA9IHRlWzZdLFxuICAgICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgICAgbTIyID0gdGVbNF0sXG4gICAgICAgIG0yMyA9IHRlWzddLFxuICAgICAgICBtMzEgPSB0ZVsyXSxcbiAgICAgICAgbTMyID0gdGVbNV0sXG4gICAgICAgIG0zMyA9IHRlWzhdLFxuXG4gICAgICAgIG0wID0gbTIyICogbTMzIC0gbTIzICogbTMyLFxuICAgICAgICBtMyA9IG0xMyAqIG0zMiAtIG0xMiAqIG0zMyxcbiAgICAgICAgbTYgPSBtMTIgKiBtMjMgLSBtMTMgKiBtMjIsXG5cbiAgICAgICAgZGV0ID0gbTExICogbTAgKyBtMjEgKiBtMyArIG0zMSAqIG02O1xuXG4gICAgaWYgKGRldCA9PT0gMC4wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIHRlWzBdID0gbTAgKiBkZXQ7XG4gICAgdGVbMV0gPSAobTIzICogbTMxIC0gbTIxICogbTMzKSAqIGRldDtcbiAgICB0ZVsyXSA9IChtMjEgKiBtMzIgLSBtMjIgKiBtMzEpICogZGV0O1xuXG4gICAgdGVbM10gPSBtMyAqIGRldDtcbiAgICB0ZVs0XSA9IChtMTEgKiBtMzMgLSBtMTMgKiBtMzEpICogZGV0O1xuICAgIHRlWzVdID0gKG0xMiAqIG0zMSAtIG0xMSAqIG0zMikgKiBkZXQ7XG5cbiAgICB0ZVs2XSA9IG02ICogZGV0O1xuICAgIHRlWzddID0gKG0xMyAqIG0yMSAtIG0xMSAqIG0yMykgKiBkZXQ7XG4gICAgdGVbOF0gPSAobTExICogbTIyIC0gbTEyICogbTIxKSAqIGRldDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VNYXRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2Ygb3RoZXJcbiAqIEBwYXJhbSBNYXQzIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUuaW52ZXJzZU1hdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gb3RoZXIuZWxlbWVudHMsXG4gICAgICAgIG0xMSA9IG1lWzBdLFxuICAgICAgICBtMTIgPSBtZVszXSxcbiAgICAgICAgbTEzID0gbWVbNl0sXG4gICAgICAgIG0yMSA9IG1lWzFdLFxuICAgICAgICBtMjIgPSBtZVs0XSxcbiAgICAgICAgbTIzID0gbWVbN10sXG4gICAgICAgIG0zMSA9IG1lWzJdLFxuICAgICAgICBtMzIgPSBtZVs1XSxcbiAgICAgICAgbTMzID0gbWVbOF0sXG5cbiAgICAgICAgbTAgPSBtMjIgKiBtMzMgLSBtMjMgKiBtMzIsXG4gICAgICAgIG0zID0gbTEzICogbTMyIC0gbTEyICogbTMzLFxuICAgICAgICBtNiA9IG0xMiAqIG0yMyAtIG0xMyAqIG0yMixcblxuICAgICAgICBkZXQgPSBtMTEgKiBtMCArIG0yMSAqIG0zICsgbTMxICogbTY7XG5cbiAgICBpZiAoZGV0ID09PSAwLjApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRlbnRpdHkoKTtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgdGVbMF0gPSBtMCAqIGRldDtcbiAgICB0ZVsxXSA9IChtMjMgKiBtMzEgLSBtMjEgKiBtMzMpICogZGV0O1xuICAgIHRlWzJdID0gKG0yMSAqIG0zMiAtIG0yMiAqIG0zMSkgKiBkZXQ7XG5cbiAgICB0ZVszXSA9IG0zICogZGV0O1xuICAgIHRlWzRdID0gKG0xMSAqIG0zMyAtIG0xMyAqIG0zMSkgKiBkZXQ7XG4gICAgdGVbNV0gPSAobTEyICogbTMxIC0gbTExICogbTMyKSAqIGRldDtcblxuICAgIHRlWzZdID0gbTYgKiBkZXQ7XG4gICAgdGVbN10gPSAobTEzICogbTIxIC0gbTExICogbTIzKSAqIGRldDtcbiAgICB0ZVs4XSA9IChtMTEgKiBtMjIgLSBtMTIgKiBtMjEpICogZGV0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaW52ZXJzZU1hdDRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2YgYSBNYXQ0XG4gKiBAcGFyYW0gTWF0NCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLmludmVyc2VNYXQ0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBvdGhlci5lbGVtZW50cyxcbiAgICAgICAgbTExID0gbWVbMF0sXG4gICAgICAgIG0xMiA9IG1lWzRdLFxuICAgICAgICBtMTMgPSBtZVs4XSxcbiAgICAgICAgbTIxID0gbWVbMV0sXG4gICAgICAgIG0yMiA9IG1lWzVdLFxuICAgICAgICBtMjMgPSBtZVs5XSxcbiAgICAgICAgbTMxID0gbWVbMl0sXG4gICAgICAgIG0zMiA9IG1lWzZdLFxuICAgICAgICBtMzMgPSBtZVsxMF0sXG5cbiAgICAgICAgbTAgPSBtMjIgKiBtMzMgLSBtMjMgKiBtMzIsXG4gICAgICAgIG0zID0gbTEzICogbTMyIC0gbTEyICogbTMzLFxuICAgICAgICBtNiA9IG0xMiAqIG0yMyAtIG0xMyAqIG0yMixcblxuICAgICAgICBkZXQgPSBtMTEgKiBtMCArIG0yMSAqIG0zICsgbTMxICogbTY7XG5cbiAgICBpZiAoZGV0ID09PSAwLjApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRlbnRpdHkoKTtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgdGVbMF0gPSBtMCAqIGRldDtcbiAgICB0ZVsxXSA9IChtMjMgKiBtMzEgLSBtMjEgKiBtMzMpICogZGV0O1xuICAgIHRlWzJdID0gKG0yMSAqIG0zMiAtIG0yMiAqIG0zMSkgKiBkZXQ7XG5cbiAgICB0ZVszXSA9IG0zICogZGV0O1xuICAgIHRlWzRdID0gKG0xMSAqIG0zMyAtIG0xMyAqIG0zMSkgKiBkZXQ7XG4gICAgdGVbNV0gPSAobTEyICogbTMxIC0gbTExICogbTMyKSAqIGRldDtcblxuICAgIHRlWzZdID0gbTYgKiBkZXQ7XG4gICAgdGVbN10gPSAobTEzICogbTIxIC0gbTExICogbTIzKSAqIGRldDtcbiAgICB0ZVs4XSA9IChtMTEgKiBtMjIgLSBtMTIgKiBtMjEpICogZGV0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdHJhbnNwb3NlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzXG4gKiB0cmFuc3Bvc2VzIHRoaXMgbWF0cml4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUudHJhbnNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHRtcDtcblxuICAgIHRtcCA9IHRlWzFdO1xuICAgIHRlWzFdID0gdGVbM107XG4gICAgdGVbM10gPSB0bXA7XG4gICAgdG1wID0gdGVbMl07XG4gICAgdGVbMl0gPSB0ZVs2XTtcbiAgICB0ZVs2XSA9IHRtcDtcbiAgICB0bXAgPSB0ZVs1XTtcbiAgICB0ZVs1XSA9IHRlWzddO1xuICAgIHRlWzddID0gdG1wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0VHJhY2VcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHNldHMgdGhlIGRpYWdvbmFsIG9mIG1hdHJpeFxuICogQHBhcmFtIFZlYzMgdlxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLnNldFRyYWNlID0gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSB2Lng7XG4gICAgdGVbNF0gPSB2Lnk7XG4gICAgdGVbOF0gPSB2Lno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzY2FsZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogc2NhbGVzIHRoaXMgYnkgdmVjdG9yXG4gKiBAcGFyYW0gVmVjMyB2XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHggPSB2LngsXG4gICAgICAgIHkgPSB2LnksXG4gICAgICAgIHogPSB2Lno7XG5cbiAgICB0ZVswXSAqPSB4O1xuICAgIHRlWzNdICo9IHk7XG4gICAgdGVbNl0gKj0gejtcbiAgICB0ZVsxXSAqPSB4O1xuICAgIHRlWzRdICo9IHk7XG4gICAgdGVbN10gKj0gejtcbiAgICB0ZVsyXSAqPSB4O1xuICAgIHRlWzVdICo9IHk7XG4gICAgdGVbOF0gKj0gejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VTY2FsZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogbWFrZXMgdGhpcyBhIHNjYWxlIG1hdHJpeFxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIHlcbiAqIEBwYXJhbSBOdW1iZXIgelxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLm1ha2VTY2FsZSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIHgsIDAuMCwgMC4wLFxuICAgICAgICAwLjAsIHksIDAuMCxcbiAgICAgICAgMC4wLCAwLjAsIHpcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VSb3RhdGlvblhcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIG1ha2VzIHRoaXMgYSByb3RhdGlvbiBtYXRyaXggYWxvbmcgeCBheGlzXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUubWFrZVJvdGF0aW9uWCA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIDEsIDAuMCwgMC4wLFxuICAgICAgICAwLjAsIGMsIC1zLFxuICAgICAgICAwLjAsIHMsIGNcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VSb3RhdGlvbllcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIG1ha2VzIHRoaXMgYSByb3RhdGlvbiBtYXRyaXggYWxvbmcgeSBheGlzXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUubWFrZVJvdGF0aW9uWSA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIGMsIDAuMCwgcyxcbiAgICAgICAgMC4wLCAxLCAwLjAsIC1zLCAwLjAsIGNcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VSb3RhdGlvblpcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIG1ha2VzIHRoaXMgYSByb3RhdGlvbiBtYXRyaXggYWxvbmcgeiBheGlzXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUubWFrZVJvdGF0aW9uWiA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIGMsIC1zLCAwLjAsXG4gICAgICAgIHMsIGMsIDAuMCxcbiAgICAgICAgMC4wLCAwLjAsIDFcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21NYXQyXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzXG4gKiBzZXRzIHRoaXMgZnJvbSBNYXQyXG4gKiBAcGFyYW0gTWF0MiBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0My5wcm90b3R5cGUuZnJvbU1hdDIgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gbS5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IDAuMDtcbiAgICB0ZVszXSA9IG1lWzJdO1xuICAgIHRlWzRdID0gbWVbM107XG4gICAgdGVbNV0gPSAwLjA7XG4gICAgdGVbNl0gPSAwLjA7XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbOF0gPSAxO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbU1hdDRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHNldHMgdGhpcyBmcm9tIE1hdDRcbiAqIEBwYXJhbSBNYXQyIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzLnByb3RvdHlwZS5mcm9tTWF0NCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBtLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBtZVswXTtcbiAgICB0ZVsxXSA9IG1lWzFdO1xuICAgIHRlWzJdID0gbWVbMl07XG4gICAgdGVbM10gPSBtZVs0XTtcbiAgICB0ZVs0XSA9IG1lWzVdO1xuICAgIHRlWzVdID0gbWVbNl07XG4gICAgdGVbNl0gPSBtZVs4XTtcbiAgICB0ZVs3XSA9IG1lWzldO1xuICAgIHRlWzhdID0gbWVbMTBdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVF1YXRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHNldHMgcm90YXRpb24gb2YgdGhpcyBmcm9tIHF1YXRlcmlhblxuICogQHBhcmFtIFF1YXQgcVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLmZyb21RdWF0ID0gZnVuY3Rpb24gKHEpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB4ID0gcS54LFxuICAgICAgICB5ID0gcS55LFxuICAgICAgICB6ID0gcS56LFxuICAgICAgICB3ID0gcS53LFxuICAgICAgICB4MiA9IHggKyB4LFxuICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICB6MiA9IHogKyB6LFxuICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgeHkgPSB4ICogeTIsXG4gICAgICAgIHh6ID0geCAqIHoyLFxuICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgeXogPSB5ICogejIsXG4gICAgICAgIHp6ID0geiAqIHoyLFxuICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgd3kgPSB3ICogeTIsXG4gICAgICAgIHd6ID0gdyAqIHoyO1xuXG4gICAgdGVbMF0gPSAxIC0gKHl5ICsgenopO1xuICAgIHRlWzFdID0geHkgKyB3ejtcbiAgICB0ZVsyXSA9IHh6IC0gd3k7XG5cbiAgICB0ZVszXSA9IHh5IC0gd3o7XG4gICAgdGVbNF0gPSAxIC0gKHh4ICsgenopO1xuICAgIHRlWzVdID0geXogKyB3eDtcblxuICAgIHRlWzZdID0geHogKyB3eTtcbiAgICB0ZVs3XSA9IHl6IC0gd3g7XG4gICAgdGVbOF0gPSAxIC0gKHh4ICsgeXkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIEBwYXJhbSBPZGluLk1hdDMgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYWUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBiZSA9IG90aGVyLmVsZW1lbnRzO1xuXG4gICAgcmV0dXJuICEoXG4gICAgYWVbMF0gIT09IGJlWzBdIHx8XG4gICAgYWVbMV0gIT09IGJlWzFdIHx8XG4gICAgYWVbMl0gIT09IGJlWzJdIHx8XG4gICAgYWVbM10gIT09IGJlWzNdIHx8XG4gICAgYWVbNF0gIT09IGJlWzRdIHx8XG4gICAgYWVbNV0gIT09IGJlWzVdIHx8XG4gICAgYWVbNl0gIT09IGJlWzZdIHx8XG4gICAgYWVbN10gIT09IGJlWzddIHx8XG4gICAgYWVbOF0gIT09IGJlWzhdXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogQHBhcmFtIE9kaW4uTWF0MyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGJlID0gb3RoZXIuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgIGFlWzBdICE9PSBiZVswXSB8fFxuICAgIGFlWzFdICE9PSBiZVsxXSB8fFxuICAgIGFlWzJdICE9PSBiZVsyXSB8fFxuICAgIGFlWzNdICE9PSBiZVszXSB8fFxuICAgIGFlWzRdICE9PSBiZVs0XSB8fFxuICAgIGFlWzVdICE9PSBiZVs1XSB8fFxuICAgIGFlWzZdICE9PSBiZVs2XSB8fFxuICAgIGFlWzddICE9PSBiZVs3XSB8fFxuICAgIGFlWzhdICE9PSBiZVs4XVxuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUpTT05cbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHNldHMgdmFsdWVzIGZyb20gSlNPTiBvYmplY3RcbiAqIEBwYXJhbSBPYmplY3QganNvblxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IGpzb24uZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IG1lWzBdO1xuICAgIHRlWzFdID0gbWVbMV07XG4gICAgdGVbMl0gPSBtZVsyXTtcbiAgICB0ZVszXSA9IG1lWzNdO1xuICAgIHRlWzRdID0gbWVbNF07XG4gICAgdGVbNV0gPSBtZVs1XTtcbiAgICB0ZVs2XSA9IG1lWzZdO1xuICAgIHRlWzddID0gbWVbN107XG4gICAgdGVbOF0gPSBtZVs4XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvSlNPTlxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogcmV0dXJucyBqc29uIG9iamVjdCBvZiB0aGlzXG4gKiBAcGFyYW0gQXJyYXkgYXJyYXlcbiAqIEByZXR1cm4gT2JqZWN0XG4gKi9cbk1hdDMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHt9KTtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBqZSA9IGpzb24uZWxlbWVudHMgfHwgKGpzb24uZWxlbWVudHMgPSBbXSk7XG5cbiAgICBqc29uLl9jbGFzc05hbWUgPSBcIk1hdDNcIjtcbiAgICBqZVswXSA9IHRlWzBdO1xuICAgIGplWzFdID0gdGVbMV07XG4gICAgamVbMl0gPSB0ZVsyXTtcbiAgICBqZVszXSA9IHRlWzNdO1xuICAgIGplWzRdID0gdGVbNF07XG4gICAgamVbNV0gPSB0ZVs1XTtcbiAgICBqZVs2XSA9IHRlWzZdO1xuICAgIGplWzddID0gdGVbN107XG4gICAgamVbOF0gPSB0ZVs4XTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21BcnJheVxuICogQG1lbWJlcm9mIE9kaW4uTWF0M1xuICogc2V0cyB2YWx1ZXMgZnJvbSBBcnJheSBvYmplY3RcbiAqIEBwYXJhbSBPYmplY3QganNvblxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMucHJvdG90eXBlLmZyb21BcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IGFycmF5WzBdO1xuICAgIHRlWzFdID0gYXJyYXlbMV07XG4gICAgdGVbMl0gPSBhcnJheVsyXTtcbiAgICB0ZVszXSA9IGFycmF5WzNdO1xuICAgIHRlWzRdID0gYXJyYXlbNF07XG4gICAgdGVbNV0gPSBhcnJheVs1XTtcbiAgICB0ZVs2XSA9IGFycmF5WzZdO1xuICAgIHRlWzddID0gYXJyYXlbN107XG4gICAgdGVbOF0gPSBhcnJheVs4XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDNcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gT2JqZWN0XG4gKi9cbk1hdDMucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBhcnJheSB8fCAoYXJyYXkgPSBbXSk7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGFycmF5WzBdID0gdGVbMF07XG4gICAgYXJyYXlbMV0gPSB0ZVsxXTtcbiAgICBhcnJheVsyXSA9IHRlWzJdO1xuICAgIGFycmF5WzNdID0gdGVbM107XG4gICAgYXJyYXlbNF0gPSB0ZVs0XTtcbiAgICBhcnJheVs1XSA9IHRlWzVdO1xuICAgIGFycmF5WzZdID0gdGVbNl07XG4gICAgYXJyYXlbN10gPSB0ZVs3XTtcbiAgICBhcnJheVs4XSA9IHRlWzhdO1xuXG4gICAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvU3RyaW5nXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzXG4gKiByZXR1cm5zIHN0cmluZyBvZiB0aGlzXG4gKiBAcmV0dXJuIFN0cmluZ1xuICovXG5NYXQzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgcmV0dXJuIChcbiAgICBcIk1hdDNbXCIgKyB0ZVswXSArIFwiLCBcIiArIHRlWzNdICsgXCIsIFwiICsgdGVbNl0gKyBcIl1cXG5cIiArXG4gICAgXCIgICAgIFtcIiArIHRlWzFdICsgXCIsIFwiICsgdGVbNF0gKyBcIiwgXCIgKyB0ZVs3XSArIFwiXVxcblwiICtcbiAgICBcIiAgICAgW1wiICsgdGVbMl0gKyBcIiwgXCIgKyB0ZVs1XSArIFwiLCBcIiArIHRlWzhdICsgXCJdXCJcbiAgICApO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdDM7XG4iLCJ2YXIgTWF0aGYgPSByZXF1aXJlKFwiLi9tYXRoZlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIGNvcyA9IE1hdGguY29zLFxuICAgIHNpbiA9IE1hdGguc2luLFxuICAgIGF0YW4yID0gTWF0aC5hdGFuMjtcblxuLyoqXG4gKiBAY2xhc3MgTWF0MzJcbiAqIDN4MiBtYXRyaXhcbiAqIEBwYXJhbSBOdW1iZXIgbTExXG4gKiBAcGFyYW0gTnVtYmVyIG0xMlxuICogQHBhcmFtIE51bWJlciBtMTNcbiAqIEBwYXJhbSBOdW1iZXIgbTIxXG4gKiBAcGFyYW0gTnVtYmVyIG0yMlxuICogQHBhcmFtIE51bWJlciBtMjNcbiAqL1xuZnVuY3Rpb24gTWF0MzIobTExLCBtMTIsIG0xMywgbTIxLCBtMjIsIG0yMykge1xuICAgIHZhciB0ZSA9IG5ldyBGbG9hdDMyQXJyYXkoNik7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgRmxvYXQzMkFycmF5IGVsZW1lbnRzXG4gICAgICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAgICAgKi9cbiAgICB0aGlzLmVsZW1lbnRzID0gdGU7XG5cbiAgICB0ZVswXSA9IG0xMSAhPSB1bmRlZmluZWQgPyBtMTEgOiAxLjA7XG4gICAgdGVbMl0gPSBtMTIgfHwgMC4wO1xuICAgIHRlWzRdID0gbTEzIHx8IDAuMDtcbiAgICB0ZVsxXSA9IG0yMSB8fCAwLjA7XG4gICAgdGVbM10gPSBtMjIgIT0gdW5kZWZpbmVkID8gbTIyIDogMS4wO1xuICAgIHRlWzVdID0gbTIzIHx8IDAuMDtcbn1cblxuTWF0aGYuX2NsYXNzZXNbXCJNYXQzMlwiXSA9IE1hdDMyO1xuXG4vKipcbiAqIEBtZXRob2QgY2xvbmVcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiByZXR1cm5zIG5ldyBpbnN0YW5jZSBvZiB0aGlzXG4gKiBAcmV0dXJuIE1hdDMyXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgcmV0dXJuIG5ldyBNYXQzMihcbiAgICAgICAgdGVbMF0sIHRlWzFdLCB0ZVsyXSxcbiAgICAgICAgdGVbM10sIHRlWzRdLCB0ZVs1XVxuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY29weVxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIGNvcGllcyBvdGhlclxuICogQHBhcmFtIE1hdDMyIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG90aGVyLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBtZVswXTtcbiAgICB0ZVsxXSA9IG1lWzFdO1xuICAgIHRlWzJdID0gbWVbMl07XG4gICAgdGVbM10gPSBtZVszXTtcbiAgICB0ZVs0XSA9IG1lWzRdO1xuICAgIHRlWzVdID0gbWVbNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBzZXRzIHZhbHVlcyBvZiB0aGlzXG4gKiBAcGFyYW0gTnVtYmVyIG0xMVxuICogQHBhcmFtIE51bWJlciBtMTJcbiAqIEBwYXJhbSBOdW1iZXIgbTEzXG4gKiBAcGFyYW0gTnVtYmVyIG0yMVxuICogQHBhcmFtIE51bWJlciBtMjJcbiAqIEBwYXJhbSBOdW1iZXIgbTIzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChtMTEsIG0xMiwgbTEzLCBtMjEsIG0yMiwgbTIzKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbTExO1xuICAgIHRlWzJdID0gbTEyO1xuICAgIHRlWzRdID0gbTEzO1xuICAgIHRlWzFdID0gbTIxO1xuICAgIHRlWzNdID0gbTIyO1xuICAgIHRlWzVdID0gbTIzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbXVsXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gTWF0MzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGFlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgYmUgPSBvdGhlci5lbGVtZW50cyxcblxuICAgICAgICBhMTEgPSBhZVswXSxcbiAgICAgICAgYTEyID0gYWVbMl0sXG4gICAgICAgIGExMyA9IGFlWzRdLFxuICAgICAgICBhMjEgPSBhZVsxXSxcbiAgICAgICAgYTIyID0gYWVbM10sXG4gICAgICAgIGEyMyA9IGFlWzVdLFxuXG4gICAgICAgIGIxMSA9IGJlWzBdLFxuICAgICAgICBiMTIgPSBiZVsyXSxcbiAgICAgICAgYjEzID0gYmVbNF0sXG4gICAgICAgIGIyMSA9IGJlWzFdLFxuICAgICAgICBiMjIgPSBiZVszXSxcbiAgICAgICAgYjIzID0gYmVbNV07XG5cbiAgICBhZVswXSA9IGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgICBhZVsyXSA9IGExMiAqIGIxMSArIGEyMiAqIGIxMjtcblxuICAgIGFlWzFdID0gYTExICogYjIxICsgYTIxICogYjIyO1xuICAgIGFlWzNdID0gYTEyICogYjIxICsgYTIyICogYjIyO1xuXG4gICAgYWVbNF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTM7XG4gICAgYWVbNV0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBtbXVsXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogbXVsaXBsZXMgYSBhbmQgYiBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gTWF0MzIgYVxuICogQHBhcmFtIE1hdDMyIGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUubW11bCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgYWUgPSBhLmVsZW1lbnRzLFxuICAgICAgICBiZSA9IGIuZWxlbWVudHMsXG5cbiAgICAgICAgYTExID0gYWVbMF0sXG4gICAgICAgIGExMiA9IGFlWzJdLFxuICAgICAgICBhMTMgPSBhZVs0XSxcbiAgICAgICAgYTIxID0gYWVbMV0sXG4gICAgICAgIGEyMiA9IGFlWzNdLFxuICAgICAgICBhMjMgPSBhZVs1XSxcblxuICAgICAgICBiMTEgPSBiZVswXSxcbiAgICAgICAgYjEyID0gYmVbMl0sXG4gICAgICAgIGIxMyA9IGJlWzRdLFxuICAgICAgICBiMjEgPSBiZVsxXSxcbiAgICAgICAgYjIyID0gYmVbM10sXG4gICAgICAgIGIyMyA9IGJlWzVdO1xuXG4gICAgdGVbMF0gPSBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gICAgdGVbMl0gPSBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG5cbiAgICB0ZVsxXSA9IGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgICB0ZVszXSA9IGExMiAqIGIyMSArIGEyMiAqIGIyMjtcblxuICAgIHRlWzRdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzO1xuICAgIHRlWzVdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc211bFxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIG11bGlwbGVzIHRoaXMgYnkgYSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5zbXVsID0gZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gKj0gcztcbiAgICB0ZVsxXSAqPSBzO1xuICAgIHRlWzJdICo9IHM7XG4gICAgdGVbM10gKj0gcztcbiAgICB0ZVs0XSAqPSBzO1xuICAgIHRlWzVdICo9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogZGl2aWRlcyB0aGlzIGJ5IHNjYWxhciB2YWx1ZVxuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLnNkaXYgPSBmdW5jdGlvbiAocykge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBzID0gcyAhPT0gMC4wID8gMS4wIC8gcyA6IDEuMDtcblxuICAgIHRlWzBdICo9IHM7XG4gICAgdGVbMV0gKj0gcztcbiAgICB0ZVsyXSAqPSBzO1xuICAgIHRlWzNdICo9IHM7XG4gICAgdGVbNF0gKj0gcztcbiAgICB0ZVs1XSAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaWRlbnRpdHlcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBpZGVudGl0eSBtYXRyaXhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHRlWzBdID0gMTtcbiAgICB0ZVsxXSA9IDAuMDtcbiAgICB0ZVsyXSA9IDAuMDtcbiAgICB0ZVszXSA9IDE7XG4gICAgdGVbNF0gPSAwLjA7XG4gICAgdGVbNV0gPSAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB6ZXJvXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogemVybyBtYXRyaXhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuemVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSAwLjA7XG4gICAgdGVbMV0gPSAwLjA7XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSAwLjA7XG4gICAgdGVbNV0gPSAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBkZXRlcm1pbmFudFxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHJldHVybnMgdGhlIGRldGVybWluYW50IG9mIHRoaXNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuZGV0ZXJtaW5hbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHJldHVybiB0ZVswXSAqIHRlWzNdIC0gdGVbMl0gKiB0ZVsxXTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnZlcnNlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogcmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGlzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLmludmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcblxuICAgICAgICBtMTEgPSB0ZVswXSxcbiAgICAgICAgbTEyID0gdGVbMl0sXG4gICAgICAgIG0xMyA9IHRlWzRdLFxuICAgICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgICAgbTIyID0gdGVbM10sXG4gICAgICAgIG0yMyA9IHRlWzVdLFxuXG4gICAgICAgIGRldCA9IG0xMSAqIG0yMiAtIG0xMiAqIG0yMTtcblxuICAgIGlmIChkZXQgPT09IDAuMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eSgpO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICB0ZVswXSA9IG0yMiAqIGRldDtcbiAgICB0ZVsxXSA9IC1tMTIgKiBkZXQ7XG4gICAgdGVbMl0gPSAtbTIxICogZGV0O1xuICAgIHRlWzNdID0gbTExICogZGV0O1xuXG4gICAgdGVbNF0gPSAobTIxICogbTIzIC0gbTIyICogbTEzKSAqIGRldDtcbiAgICB0ZVs1XSA9IC0obTExICogbTIzIC0gbTEyICogbTEzKSAqIGRldDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VNYXRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiByZXR1cm5zIHRoZSBpbnZlcnNlIG9mIG90aGVyXG4gKiBAcGFyYW0gTWF0MzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuaW52ZXJzZU1hdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gb3RoZXIuZWxlbWVudHMsXG5cbiAgICAgICAgbTExID0gbWVbMF0sXG4gICAgICAgIG0xMiA9IG1lWzJdLFxuICAgICAgICBtMTMgPSBtZVs0XSxcbiAgICAgICAgbTIxID0gbWVbMV0sXG4gICAgICAgIG0yMiA9IG1lWzNdLFxuICAgICAgICBtMjMgPSBtZVs1XSxcblxuICAgICAgICBkZXQgPSBtMTEgKiBtMjIgLSBtMTIgKiBtMjE7XG5cbiAgICBpZiAoZGV0ID09PSAwLjApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRlbnRpdHkoKTtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgdGVbMF0gPSBtMjIgKiBkZXQ7XG4gICAgdGVbMV0gPSAtbTEyICogZGV0O1xuICAgIHRlWzJdID0gLW0yMSAqIGRldDtcbiAgICB0ZVszXSA9IG0xMSAqIGRldDtcblxuICAgIHRlWzRdID0gKG0yMSAqIG0yMyAtIG0yMiAqIG0xMykgKiBkZXQ7XG4gICAgdGVbNV0gPSAtKG0xMSAqIG0yMyAtIG0xMiAqIG0xMykgKiBkZXQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0cmFuc3Bvc2VcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiB0cmFuc3Bvc2VzIHRoaXMgbWF0cml4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLnRyYW5zcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB0bXA7XG5cbiAgICB0bXAgPSB0ZVsxXTtcbiAgICB0ZVsxXSA9IHRlWzJdO1xuICAgIHRlWzJdID0gdG1wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0VHJhY2VcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBzZXRzIHRoZSBkaWFnb25hbCBvZiBtYXRyaXhcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciB5XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLnNldFRyYWNlID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSB4O1xuICAgIHRlWzNdID0geTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxvb2tBdFxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIG1ha2VzIG1hdHJpeCBsb29rIGZyb20gZXllIHRvIHRhcmdldFxuICogQHBhcmFtIFZlYzIgZXllXG4gKiBAcGFyYW0gVmVjMiB0YXJnZXRcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUubG9va0F0ID0gZnVuY3Rpb24gKGV5ZSwgdGFyZ2V0KSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgeCA9IHRhcmdldC54IC0gZXllLngsXG4gICAgICAgIHkgPSB0YXJnZXQueSAtIGV5ZS55LFxuICAgICAgICBhID0gYXRhbjIoeSwgeCkgLSBIQUxGX1BJLFxuICAgICAgICBjID0gY29zKGEpLFxuICAgICAgICBzID0gc2luKGEpO1xuXG4gICAgdGVbMF0gPSBjO1xuICAgIHRlWzFdID0gcztcbiAgICB0ZVsyXSA9IC1zO1xuICAgIHRlWzNdID0gYztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvbXBvc2VcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBzZXRzIG1hdHJpeCBmcm9tIHBvc2l0aW9uLCBzY2FsZSwgYW5kIGFuIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEBwYXJhbSBWZWMyIHBvc2l0aW9uXG4gKiBAcGFyYW0gVmVjMiBzY2FsZVxuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5jb21wb3NlID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBzY2FsZSwgYW5nbGUpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBzeCA9IHNjYWxlLngsXG4gICAgICAgIHN5ID0gc2NhbGUueSxcbiAgICAgICAgYyA9IGNvcyhhbmdsZSksXG4gICAgICAgIHMgPSBzaW4oYW5nbGUpO1xuXG4gICAgdGVbMF0gPSBjICogc3g7XG4gICAgdGVbMV0gPSBzICogc3g7XG4gICAgdGVbMl0gPSAtcyAqIHN5O1xuICAgIHRlWzNdID0gYyAqIHN5O1xuXG4gICAgdGVbNF0gPSBwb3NpdGlvbi54O1xuICAgIHRlWzVdID0gcG9zaXRpb24ueTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGRlY29tcG9zZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIGdldHMgbWF0cml4IHBvc2l0aW9uLCBzY2FsZSwgYW5kIHJldHVybnMgaXRzIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEBwYXJhbSBWZWMyIHBvc2l0aW9uXG4gKiBAcGFyYW0gVmVjMiBzY2FsZVxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0MzIucHJvdG90eXBlLmRlY29tcG9zZSA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgc2NhbGUpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtMTEgPSB0ZVswXSxcbiAgICAgICAgbTEyID0gdGVbMV0sXG4gICAgICAgIHN4ID0gc2NhbGUuc2V0KG0xMSwgbTEyKS5sZW5ndGgoKSxcbiAgICAgICAgc3kgPSBzY2FsZS5zZXQodGVbMl0sIHRlWzNdKS5sZW5ndGgoKTtcblxuICAgIHBvc2l0aW9uLnggPSB0ZVs0XTtcbiAgICBwb3NpdGlvbi55ID0gdGVbNV07XG5cbiAgICBzY2FsZS54ID0gc3g7XG4gICAgc2NhbGUueSA9IHN5O1xuXG4gICAgcmV0dXJuIGF0YW4yKG0xMiwgbTExKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRSb3RhdGlvblxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHNldHMgdGhlIHJvdGF0aW9uIGluIHJhZGlhbnMgdGhpc1xuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGMgPSBjb3MoYW5nbGUpLFxuICAgICAgICBzID0gc2luKGFuZ2xlKTtcblxuICAgIHRlWzBdID0gYztcbiAgICB0ZVsxXSA9IHM7XG4gICAgdGVbMl0gPSAtcztcbiAgICB0ZVszXSA9IGM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBnZXRSb3RhdGlvblxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHJldHVybnMgdGhlIHJvdGF0aW9uIGluIHJhZGlhbnMgb2YgdGhpc1xuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0MzIucHJvdG90eXBlLmdldFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gYXRhbjIodGVbMV0sIHRlWzBdKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRQb3NpdGlvblxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHNldHMgdGhlIHBvc2l0aW9uIG9mIHRoaXNcbiAqIEBwYXJhbSBWZWMyIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAodikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVs0XSA9IHYueDtcbiAgICB0ZVs1XSA9IHYueTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGdldFBvc2l0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogZ2V0cyB0aGUgcG9zaXRpb24gb2YgdGhpc1xuICogQHBhcmFtIFZlYzIgdlxuICogQHJldHVybiBWZWMyXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHYueCA9IHRlWzRdO1xuICAgIHYueSA9IHRlWzVdO1xuXG4gICAgcmV0dXJuIHY7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZXh0cmFjdFBvc2l0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogZ2V0cyBwb3NpdGlvbiBmcm9tIG90aGVyIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBNYXQzMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5leHRyYWN0UG9zaXRpb24gPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG90aGVyLmVsZW1lbnRzO1xuXG4gICAgdGVbNF0gPSBtZVs0XTtcbiAgICB0ZVs1XSA9IG1lWzVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZXh0cmFjdFJvdGF0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogZ2V0cyByb3RhdGlvbiBmcm9tIG90aGVyIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBNYXQzMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5leHRyYWN0Um90YXRpb24gPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG90aGVyLmVsZW1lbnRzLFxuXG4gICAgICAgIG0xMSA9IG1lWzBdLFxuICAgICAgICBtMTIgPSBtZVsyXSxcbiAgICAgICAgbTIxID0gbWVbMV0sXG4gICAgICAgIG0yMiA9IG1lWzNdLFxuXG4gICAgICAgIHggPSBtMTEgKiBtMTEgKyBtMjEgKiBtMjEsXG4gICAgICAgIHkgPSBtMTIgKiBtMTIgKyBtMjIgKiBtMjIsXG5cbiAgICAgICAgc3ggPSB4ID4gMC4wID8gMS4wIC8gc3FydCh4KSA6IDAuMCxcbiAgICAgICAgc3kgPSB5ID4gMC4wID8gMS4wIC8gc3FydCh5KSA6IDAuMDtcblxuICAgIHRlWzBdID0gbTExICogc3g7XG4gICAgdGVbMV0gPSBtMjEgKiBzeDtcblxuICAgIHRlWzJdID0gbTEyICogc3k7XG4gICAgdGVbM10gPSBtMjIgKiBzeTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHRyYW5zbGF0ZXMgbWF0cml4IGJ5IHZlY3RvclxuICogQHBhcmFtIFZlYzIgdlxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHggPSB2LngsXG4gICAgICAgIHkgPSB2Lnk7XG5cbiAgICB0ZVs0XSA9IHRlWzBdICogeCArIHRlWzJdICogeSArIHRlWzRdO1xuICAgIHRlWzVdID0gdGVbMV0gKiB4ICsgdGVbM10gKiB5ICsgdGVbNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCByb3RhdGVcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiByb3RhdGVzIHRoaXMgYnkgYW5nbGUgaW4gcmFkaWFuc1xuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuXG4gICAgICAgIG0xMSA9IHRlWzBdLFxuICAgICAgICBtMTIgPSB0ZVsyXSxcbiAgICAgICAgbTIxID0gdGVbMV0sXG4gICAgICAgIG0yMiA9IHRlWzNdLFxuXG4gICAgICAgIHMgPSBzaW4oYW5nbGUpLFxuICAgICAgICBjID0gc2luKGFuZ2xlKTtcblxuICAgIHRlWzBdID0gbTExICogYyArIG0xMiAqIHM7XG4gICAgdGVbMV0gPSBtMTEgKiAtcyArIG0xMiAqIGM7XG4gICAgdGVbMl0gPSBtMjEgKiBjICsgbTIyICogcztcbiAgICB0ZVszXSA9IG0yMSAqIC1zICsgbTIyICogYztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNjYWxlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogc2NhbGVzIG1hdHJpeCBieSB2ZWN0b3JcbiAqIEBwYXJhbSBWZWMyIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHggPSB2LngsXG4gICAgICAgIHkgPSB2Lnk7XG5cbiAgICB0ZVswXSAqPSB4O1xuICAgIHRlWzFdICo9IHg7XG4gICAgdGVbNF0gKj0geDtcblxuICAgIHRlWzJdICo9IHk7XG4gICAgdGVbM10gKj0geTtcbiAgICB0ZVs1XSAqPSB5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgb3J0aG9ncmFwaGljXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogbWFrZXMgb3J0aG9ncmFwaGljIG1hdHJpeFxuICogQHBhcmFtIE51bWJlciBsZWZ0XG4gKiBAcGFyYW0gTnVtYmVyIHJpZ2h0XG4gKiBAcGFyYW0gTnVtYmVyIGJvdHRvbVxuICogQHBhcmFtIE51bWJlciB0b3BcbiAqIEByZXR1cm4gTWF0MzJcbiAqL1xuTWF0MzIucHJvdG90eXBlLm9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCwgdG9wLCBib3R0b20pIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB3ID0gcmlnaHQgLSBsZWZ0LFxuICAgICAgICBoID0gdG9wIC0gYm90dG9tLFxuXG4gICAgICAgIHggPSAocmlnaHQgKyBsZWZ0KSAvIHcsXG4gICAgICAgIHkgPSAodG9wICsgYm90dG9tKSAvIGg7XG5cbiAgICB0ZVswXSA9IDIgLyB3O1xuICAgIHRlWzFdID0gMC4wO1xuICAgIHRlWzJdID0gMC4wO1xuICAgIHRlWzNdID0gMiAvIGg7XG4gICAgdGVbNF0gPSAteDtcbiAgICB0ZVs1XSA9IC15O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbU1hdDNcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBzZXRzIHRoaXMgZnJvbSBNYXQzXG4gKiBAcGFyYW0gTWF0MyBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLmZyb21NYXQzID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG0uZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IG1lWzBdO1xuICAgIHRlWzFdID0gbWVbMV07XG4gICAgdGVbMl0gPSBtZVszXTtcbiAgICB0ZVszXSA9IG1lWzRdO1xuICAgIHRlWzRdID0gMC4wO1xuICAgIHRlWzVdID0gMC4wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbU1hdDRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBzZXRzIHRoaXMgZnJvbSBNYXQ0XG4gKiBAcGFyYW0gTWF0NCBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLmZyb21NYXQ0ID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG0uZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IG1lWzBdO1xuICAgIHRlWzFdID0gbWVbMV07XG4gICAgdGVbMl0gPSBtZVs0XTtcbiAgICB0ZVszXSA9IG1lWzVdO1xuICAgIHRlWzRdID0gbWVbMTJdO1xuICAgIHRlWzVdID0gbWVbMTNdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBAcGFyYW0gT2Rpbi5NYXQzMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDMyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYWUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBiZSA9IG90aGVyLmVsZW1lbnRzO1xuXG4gICAgcmV0dXJuICEoXG4gICAgYWVbMF0gIT09IGJlWzBdIHx8XG4gICAgYWVbMV0gIT09IGJlWzFdIHx8XG4gICAgYWVbMl0gIT09IGJlWzJdIHx8XG4gICAgYWVbM10gIT09IGJlWzNdIHx8XG4gICAgYWVbNF0gIT09IGJlWzRdIHx8XG4gICAgYWVbNV0gIT09IGJlWzVdXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIEBwYXJhbSBPZGluLk1hdDMyIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0MzIucHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGJlID0gb3RoZXIuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgIGFlWzBdICE9PSBiZVswXSB8fFxuICAgIGFlWzFdICE9PSBiZVsxXSB8fFxuICAgIGFlWzJdICE9PSBiZVsyXSB8fFxuICAgIGFlWzNdICE9PSBiZVszXSB8fFxuICAgIGFlWzRdICE9PSBiZVs0XSB8fFxuICAgIGFlWzVdICE9PSBiZVs1XVxuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUpTT05cbiAqIEBtZW1iZXJvZiBPZGluLk1hdDMyXG4gKiBzZXRzIHZhbHVlcyBmcm9tIEpTT04gb2JqZWN0XG4gKiBAcGFyYW0gT2JqZWN0IGpzb25cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0ganNvbi5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuICAgIHRlWzNdID0gbWVbM107XG4gICAgdGVbNF0gPSBtZVs0XTtcbiAgICB0ZVs1XSA9IG1lWzVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXQzMlxuICogcmV0dXJucyBqc29uIG9iamVjdCBvZiB0aGlzXG4gKiBAcmV0dXJuIE9iamVjdFxuICovXG5NYXQzMi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGplID0ganNvbi5lbGVtZW50cyB8fCAoanNvbi5lbGVtZW50cyA9IFtdKTtcblxuICAgIGpzb24uX2NsYXNzTmFtZSA9IFwiTWF0MzJcIjtcbiAgICBqZVswXSA9IHRlWzBdO1xuICAgIGplWzFdID0gdGVbMV07XG4gICAgamVbMl0gPSB0ZVsyXTtcbiAgICBqZVszXSA9IHRlWzNdO1xuICAgIGplWzRdID0gdGVbNF07XG4gICAgamVbNV0gPSB0ZVs1XTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21BcnJheVxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHNldHMgdmFsdWVzIGZyb20gQXJyYXkgb2JqZWN0XG4gKiBAcGFyYW0gT2JqZWN0IGpzb25cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQzMi5wcm90b3R5cGUuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHRlWzBdID0gYXJyYXlbMF07XG4gICAgdGVbMV0gPSBhcnJheVsxXTtcbiAgICB0ZVsyXSA9IGFycmF5WzJdO1xuICAgIHRlWzNdID0gYXJyYXlbM107XG4gICAgdGVbNF0gPSBhcnJheVs0XTtcbiAgICB0ZVs1XSA9IGFycmF5WzVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9BcnJheVxuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gT2JqZWN0XG4gKi9cbk1hdDMyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgYXJyYXkgfHwgKGFycmF5ID0gW10pO1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBhcnJheVswXSA9IHRlWzBdO1xuICAgIGFycmF5WzFdID0gdGVbMV07XG4gICAgYXJyYXlbMl0gPSB0ZVsyXTtcbiAgICBhcnJheVszXSA9IHRlWzNdO1xuICAgIGFycmF5WzRdID0gdGVbNF07XG4gICAgYXJyYXlbNV0gPSB0ZVs1XTtcblxuICAgIHJldHVybiBhcnJheTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b1N0cmluZ1xuICogQG1lbWJlcm9mIE9kaW4uTWF0MzJcbiAqIHJldHVybnMgc3RyaW5nIG9mIHRoaXNcbiAqIEByZXR1cm4gU3RyaW5nXG4gKi9cbk1hdDMyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgcmV0dXJuIChcbiAgICBcIk1hdDMyWyBcIiArIHRlWzBdICsgXCIsIFwiICsgdGVbMl0gKyBcIiwgXCIgKyB0ZVs0XSArIFwiXVxcblwiICtcbiAgICBcIiAgICAgWyBcIiArIHRlWzFdICsgXCIsIFwiICsgdGVbM10gKyBcIiwgXCIgKyB0ZVs1XSArIFwiXVwiXG4gICAgKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXQzMjtcbiIsInZhciBNYXRoZiA9IHJlcXVpcmUoXCIuL21hdGhmXCIpO1xudmFyIFZlYzMgPSByZXF1aXJlKFwiLi92ZWMzXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHNxcnQgPSBNYXRoLnNxcnQsXG4gICAgY29zID0gTWF0aC5jb3MsXG4gICAgc2luID0gTWF0aC5zaW4sXG4gICAgdGFuID0gTWF0aC50YW47XG5cbi8qKlxuICogQGNsYXNzIE1hdDRcbiAqIDR4NCBtYXRyaXhcbiAqIEBwYXJhbSBOdW1iZXIgbTExXG4gKiBAcGFyYW0gTnVtYmVyIG0xMlxuICogQHBhcmFtIE51bWJlciBtMTNcbiAqIEBwYXJhbSBOdW1iZXIgbTE0XG4gKiBAcGFyYW0gTnVtYmVyIG0yMVxuICogQHBhcmFtIE51bWJlciBtMjJcbiAqIEBwYXJhbSBOdW1iZXIgbTIzXG4gKiBAcGFyYW0gTnVtYmVyIG0yNFxuICogQHBhcmFtIE51bWJlciBtMzFcbiAqIEBwYXJhbSBOdW1iZXIgbTMyXG4gKiBAcGFyYW0gTnVtYmVyIG0zM1xuICogQHBhcmFtIE51bWJlciBtMzRcbiAqIEBwYXJhbSBOdW1iZXIgbTQxXG4gKiBAcGFyYW0gTnVtYmVyIG00MlxuICogQHBhcmFtIE51bWJlciBtNDNcbiAqIEBwYXJhbSBOdW1iZXIgbTQ0XG4gKi9cbmZ1bmN0aW9uIE1hdDQobTExLCBtMTIsIG0xMywgbTE0LCBtMjEsIG0yMiwgbTIzLCBtMjQsIG0zMSwgbTMyLCBtMzMsIG0zNCwgbTQxLCBtNDIsIG00MywgbTQ0KSB7XG4gICAgdmFyIHRlID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgRmxvYXQzMkFycmF5IGVsZW1lbnRzXG4gICAgICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICAgICAqL1xuICAgIHRoaXMuZWxlbWVudHMgPSB0ZTtcblxuICAgIHRlWzBdID0gbTExICE9IHVuZGVmaW5lZCA/IG0xMSA6IDEuMDtcbiAgICB0ZVs0XSA9IG0xMiB8fCAwLjA7XG4gICAgdGVbOF0gPSBtMTMgfHwgMC4wO1xuICAgIHRlWzEyXSA9IG0xNCB8fCAwLjA7XG4gICAgdGVbMV0gPSBtMjEgfHwgMC4wO1xuICAgIHRlWzVdID0gbTIyICE9IHVuZGVmaW5lZCA/IG0yMiA6IDEuMDtcbiAgICB0ZVs5XSA9IG0yMyB8fCAwLjA7XG4gICAgdGVbMTNdID0gbTI0IHx8IDAuMDtcbiAgICB0ZVsyXSA9IG0zMSB8fCAwLjA7XG4gICAgdGVbNl0gPSBtMzIgfHwgMC4wO1xuICAgIHRlWzEwXSA9IG0zMyAhPSB1bmRlZmluZWQgPyBtMzMgOiAxLjA7XG4gICAgdGVbMTRdID0gbTM0IHx8IDAuMDtcbiAgICB0ZVszXSA9IG00MSB8fCAwLjA7XG4gICAgdGVbN10gPSBtNDIgfHwgMC4wO1xuICAgIHRlWzExXSA9IG00MyB8fCAwLjA7XG4gICAgdGVbMTVdID0gbTQ0ICE9IHVuZGVmaW5lZCA/IG00NCA6IDEuMDtcbn1cblxuTWF0aGYuX2NsYXNzZXNbXCJNYXQ0XCJdID0gTWF0NDtcblxuLyoqXG4gKiBAbWV0aG9kIGNsb25lXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiByZXR1cm5zIG5ldyBpbnN0YW5jZSBvZiB0aGlzXG4gKiBAcmV0dXJuIE1hdDRcbiAqL1xuTWF0NC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHJldHVybiBuZXcgTWF0NChcbiAgICAgICAgdGVbMF0sIHRlWzRdLCB0ZVs4XSwgdGVbMTJdLFxuICAgICAgICB0ZVsxXSwgdGVbNV0sIHRlWzldLCB0ZVsxM10sXG4gICAgICAgIHRlWzJdLCB0ZVs2XSwgdGVbMTBdLCB0ZVsxNF0sXG4gICAgICAgIHRlWzNdLCB0ZVs3XSwgdGVbMTFdLCB0ZVsxNV1cbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIGNvcGllcyBvdGhlclxuICogQHBhcmFtIE1hdDQgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBvdGhlci5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuICAgIHRlWzNdID0gbWVbM107XG4gICAgdGVbNF0gPSBtZVs0XTtcbiAgICB0ZVs1XSA9IG1lWzVdO1xuICAgIHRlWzZdID0gbWVbNl07XG4gICAgdGVbN10gPSBtZVs3XTtcbiAgICB0ZVs4XSA9IG1lWzhdO1xuICAgIHRlWzldID0gbWVbOV07XG4gICAgdGVbMTBdID0gbWVbMTBdO1xuICAgIHRlWzExXSA9IG1lWzExXTtcbiAgICB0ZVsxMl0gPSBtZVsxMl07XG4gICAgdGVbMTNdID0gbWVbMTNdO1xuICAgIHRlWzE0XSA9IG1lWzE0XTtcbiAgICB0ZVsxNV0gPSBtZVsxNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHNldHMgdmFsdWVzIG9mIHRoaXNcbiAqIEBwYXJhbSBOdW1iZXIgbTExXG4gKiBAcGFyYW0gTnVtYmVyIG0xMlxuICogQHBhcmFtIE51bWJlciBtMTNcbiAqIEBwYXJhbSBOdW1iZXIgbTE0XG4gKiBAcGFyYW0gTnVtYmVyIG0yMVxuICogQHBhcmFtIE51bWJlciBtMjJcbiAqIEBwYXJhbSBOdW1iZXIgbTIzXG4gKiBAcGFyYW0gTnVtYmVyIG0yNFxuICogQHBhcmFtIE51bWJlciBtMzFcbiAqIEBwYXJhbSBOdW1iZXIgbTMyXG4gKiBAcGFyYW0gTnVtYmVyIG0zM1xuICogQHBhcmFtIE51bWJlciBtMzRcbiAqIEBwYXJhbSBOdW1iZXIgbTQxXG4gKiBAcGFyYW0gTnVtYmVyIG00MlxuICogQHBhcmFtIE51bWJlciBtNDNcbiAqIEBwYXJhbSBOdW1iZXIgbTQ0XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG0xMSwgbTEyLCBtMTMsIG0xNCwgbTIxLCBtMjIsIG0yMywgbTI0LCBtMzEsIG0zMiwgbTMzLCBtMzQsIG00MSwgbTQyLCBtNDMsIG00NCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IG0xMTtcbiAgICB0ZVs0XSA9IG0xMjtcbiAgICB0ZVs4XSA9IG0xMztcbiAgICB0ZVsxMl0gPSBtMTQ7XG4gICAgdGVbMV0gPSBtMjE7XG4gICAgdGVbNV0gPSBtMjI7XG4gICAgdGVbOV0gPSBtMjM7XG4gICAgdGVbMTNdID0gbTI0O1xuICAgIHRlWzJdID0gbTMxO1xuICAgIHRlWzZdID0gbTMyO1xuICAgIHRlWzEwXSA9IG0zMztcbiAgICB0ZVsxNF0gPSBtMzQ7XG4gICAgdGVbM10gPSBtNDE7XG4gICAgdGVbN10gPSBtNDI7XG4gICAgdGVbMTFdID0gbTQzO1xuICAgIHRlWzE1XSA9IG00NDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG11bFxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gTWF0NCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGJlID0gb3RoZXIuZWxlbWVudHMsXG5cbiAgICAgICAgYTExID0gYWVbMF0sXG4gICAgICAgIGExMiA9IGFlWzRdLFxuICAgICAgICBhMTMgPSBhZVs4XSxcbiAgICAgICAgYTE0ID0gYWVbMTJdLFxuICAgICAgICBhMjEgPSBhZVsxXSxcbiAgICAgICAgYTIyID0gYWVbNV0sXG4gICAgICAgIGEyMyA9IGFlWzldLFxuICAgICAgICBhMjQgPSBhZVsxM10sXG4gICAgICAgIGEzMSA9IGFlWzJdLFxuICAgICAgICBhMzIgPSBhZVs2XSxcbiAgICAgICAgYTMzID0gYWVbMTBdLFxuICAgICAgICBhMzQgPSBhZVsxNF0sXG4gICAgICAgIGE0MSA9IGFlWzNdLFxuICAgICAgICBhNDIgPSBhZVs3XSxcbiAgICAgICAgYTQzID0gYWVbMTFdLFxuICAgICAgICBhNDQgPSBhZVsxNV0sXG5cbiAgICAgICAgYjExID0gYmVbMF0sXG4gICAgICAgIGIxMiA9IGJlWzRdLFxuICAgICAgICBiMTMgPSBiZVs4XSxcbiAgICAgICAgYjE0ID0gYmVbMTJdLFxuICAgICAgICBiMjEgPSBiZVsxXSxcbiAgICAgICAgYjIyID0gYmVbNV0sXG4gICAgICAgIGIyMyA9IGJlWzldLFxuICAgICAgICBiMjQgPSBiZVsxM10sXG4gICAgICAgIGIzMSA9IGJlWzJdLFxuICAgICAgICBiMzIgPSBiZVs2XSxcbiAgICAgICAgYjMzID0gYmVbMTBdLFxuICAgICAgICBiMzQgPSBiZVsxNF0sXG4gICAgICAgIGI0MSA9IGJlWzNdLFxuICAgICAgICBiNDIgPSBiZVs3XSxcbiAgICAgICAgYjQzID0gYmVbMTFdLFxuICAgICAgICBiNDQgPSBiZVsxNV07XG5cbiAgICBhZVswXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcbiAgICBhZVs0XSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMiArIGExNCAqIGI0MjtcbiAgICBhZVs4XSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMyArIGExNCAqIGI0MztcbiAgICBhZVsxMl0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XG5cbiAgICBhZVsxXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTtcbiAgICBhZVs1XSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0MjtcbiAgICBhZVs5XSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0MztcbiAgICBhZVsxM10gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7XG5cbiAgICBhZVsyXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMSArIGEzNCAqIGI0MTtcbiAgICBhZVs2XSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0MjtcbiAgICBhZVsxMF0gPSBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzMgKyBhMzQgKiBiNDM7XG4gICAgYWVbMTRdID0gYTMxICogYjE0ICsgYTMyICogYjI0ICsgYTMzICogYjM0ICsgYTM0ICogYjQ0O1xuXG4gICAgYWVbM10gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XG4gICAgYWVbN10gPSBhNDEgKiBiMTIgKyBhNDIgKiBiMjIgKyBhNDMgKiBiMzIgKyBhNDQgKiBiNDI7XG4gICAgYWVbMTFdID0gYTQxICogYjEzICsgYTQyICogYjIzICsgYTQzICogYjMzICsgYTQ0ICogYjQzO1xuICAgIGFlWzE1XSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1tdWxcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIG11bGlwbGVzIGEgYW5kIGIgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIE1hdDQgYVxuICogQHBhcmFtIE1hdDQgYlxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLm1tdWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGFlID0gYS5lbGVtZW50cyxcbiAgICAgICAgYmUgPSBiLmVsZW1lbnRzLFxuXG4gICAgICAgIGExMSA9IGFlWzBdLFxuICAgICAgICBhMTIgPSBhZVs0XSxcbiAgICAgICAgYTEzID0gYWVbOF0sXG4gICAgICAgIGExNCA9IGFlWzEyXSxcbiAgICAgICAgYTIxID0gYWVbMV0sXG4gICAgICAgIGEyMiA9IGFlWzVdLFxuICAgICAgICBhMjMgPSBhZVs5XSxcbiAgICAgICAgYTI0ID0gYWVbMTNdLFxuICAgICAgICBhMzEgPSBhZVsyXSxcbiAgICAgICAgYTMyID0gYWVbNl0sXG4gICAgICAgIGEzMyA9IGFlWzEwXSxcbiAgICAgICAgYTM0ID0gYWVbMTRdLFxuICAgICAgICBhNDEgPSBhZVszXSxcbiAgICAgICAgYTQyID0gYWVbN10sXG4gICAgICAgIGE0MyA9IGFlWzExXSxcbiAgICAgICAgYTQ0ID0gYWVbMTVdLFxuXG4gICAgICAgIGIxMSA9IGJlWzBdLFxuICAgICAgICBiMTIgPSBiZVs0XSxcbiAgICAgICAgYjEzID0gYmVbOF0sXG4gICAgICAgIGIxNCA9IGJlWzEyXSxcbiAgICAgICAgYjIxID0gYmVbMV0sXG4gICAgICAgIGIyMiA9IGJlWzVdLFxuICAgICAgICBiMjMgPSBiZVs5XSxcbiAgICAgICAgYjI0ID0gYmVbMTNdLFxuICAgICAgICBiMzEgPSBiZVsyXSxcbiAgICAgICAgYjMyID0gYmVbNl0sXG4gICAgICAgIGIzMyA9IGJlWzEwXSxcbiAgICAgICAgYjM0ID0gYmVbMTRdLFxuICAgICAgICBiNDEgPSBiZVszXSxcbiAgICAgICAgYjQyID0gYmVbN10sXG4gICAgICAgIGI0MyA9IGJlWzExXSxcbiAgICAgICAgYjQ0ID0gYmVbMTVdO1xuXG4gICAgdGVbMF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzEgKyBhMTQgKiBiNDE7XG4gICAgdGVbNF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XG4gICAgdGVbOF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7XG4gICAgdGVbMTJdID0gYTExICogYjE0ICsgYTEyICogYjI0ICsgYTEzICogYjM0ICsgYTE0ICogYjQ0O1xuXG4gICAgdGVbMV0gPSBhMjEgKiBiMTEgKyBhMjIgKiBiMjEgKyBhMjMgKiBiMzEgKyBhMjQgKiBiNDE7XG4gICAgdGVbNV0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XG4gICAgdGVbOV0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzMgKyBhMjQgKiBiNDM7XG4gICAgdGVbMTNdID0gYTIxICogYjE0ICsgYTIyICogYjI0ICsgYTIzICogYjM0ICsgYTI0ICogYjQ0O1xuXG4gICAgdGVbMl0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XG4gICAgdGVbNl0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzIgKyBhMzQgKiBiNDI7XG4gICAgdGVbMTBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzICsgYTM0ICogYjQzO1xuICAgIHRlWzE0XSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcblxuICAgIHRlWzNdID0gYTQxICogYjExICsgYTQyICogYjIxICsgYTQzICogYjMxICsgYTQ0ICogYjQxO1xuICAgIHRlWzddID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xuICAgIHRlWzExXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0MztcbiAgICB0ZVsxNV0gPSBhNDEgKiBiMTQgKyBhNDIgKiBiMjQgKyBhNDMgKiBiMzQgKyBhNDQgKiBiNDQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzbXVsXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBtdWxpcGxlcyB0aGlzIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5zbXVsID0gZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gKj0gcztcbiAgICB0ZVsxXSAqPSBzO1xuICAgIHRlWzJdICo9IHM7XG4gICAgdGVbM10gKj0gcztcbiAgICB0ZVs0XSAqPSBzO1xuICAgIHRlWzVdICo9IHM7XG4gICAgdGVbNl0gKj0gcztcbiAgICB0ZVs3XSAqPSBzO1xuICAgIHRlWzhdICo9IHM7XG4gICAgdGVbOV0gKj0gcztcbiAgICB0ZVsxMF0gKj0gcztcbiAgICB0ZVsxMV0gKj0gcztcbiAgICB0ZVsxMl0gKj0gcztcbiAgICB0ZVsxM10gKj0gcztcbiAgICB0ZVsxNF0gKj0gcztcbiAgICB0ZVsxNV0gKj0gcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNkaXZcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIGRpdmlkZXMgdGhpcyBieSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLnNkaXYgPSBmdW5jdGlvbiAocykge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBzID0gcyAhPT0gMC4wID8gMS4wIC8gcyA6IDEuMDtcblxuICAgIHRlWzBdICo9IHM7XG4gICAgdGVbMV0gKj0gcztcbiAgICB0ZVsyXSAqPSBzO1xuICAgIHRlWzNdICo9IHM7XG4gICAgdGVbNF0gKj0gcztcbiAgICB0ZVs1XSAqPSBzO1xuICAgIHRlWzZdICo9IHM7XG4gICAgdGVbN10gKj0gcztcbiAgICB0ZVs4XSAqPSBzO1xuICAgIHRlWzldICo9IHM7XG4gICAgdGVbMTBdICo9IHM7XG4gICAgdGVbMTFdICo9IHM7XG4gICAgdGVbMTJdICo9IHM7XG4gICAgdGVbMTNdICo9IHM7XG4gICAgdGVbMTRdICo9IHM7XG4gICAgdGVbMTVdICo9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpZGVudGl0eVxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogaWRlbnRpdHkgbWF0cml4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIHRlWzBdID0gMTtcbiAgICB0ZVsxXSA9IDAuMDtcbiAgICB0ZVsyXSA9IDAuMDtcbiAgICB0ZVszXSA9IDAuMDtcbiAgICB0ZVs0XSA9IDAuMDtcbiAgICB0ZVs1XSA9IDE7XG4gICAgdGVbNl0gPSAwLjA7XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbOF0gPSAwLjA7XG4gICAgdGVbOV0gPSAwLjA7XG4gICAgdGVbMTBdID0gMTtcbiAgICB0ZVsxMV0gPSAwLjA7XG4gICAgdGVbMTJdID0gMC4wO1xuICAgIHRlWzEzXSA9IDAuMDtcbiAgICB0ZVsxNF0gPSAwLjA7XG4gICAgdGVbMTVdID0gMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHplcm9cbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHplcm8gbWF0cml4XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuemVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSAwLjA7XG4gICAgdGVbMV0gPSAwLjA7XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSAwLjA7XG4gICAgdGVbNV0gPSAwLjA7XG4gICAgdGVbNl0gPSAwLjA7XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbOF0gPSAwLjA7XG4gICAgdGVbOV0gPSAwLjA7XG4gICAgdGVbMTBdID0gMC4wO1xuICAgIHRlWzExXSA9IDAuMDtcbiAgICB0ZVsxMl0gPSAwLjA7XG4gICAgdGVbMTNdID0gMC4wO1xuICAgIHRlWzE0XSA9IDAuMDtcbiAgICB0ZVsxNV0gPSAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBkZXRlcm1pbmFudFxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogcmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhpc1xuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmRldGVybWluYW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtMTEgPSBhZVswXSxcbiAgICAgICAgbTEyID0gYWVbNF0sXG4gICAgICAgIG0xMyA9IGFlWzhdLFxuICAgICAgICBtMTQgPSBhZVsxMl0sXG4gICAgICAgIG0yMSA9IGFlWzFdLFxuICAgICAgICBtMjIgPSBhZVs1XSxcbiAgICAgICAgbTIzID0gYWVbOV0sXG4gICAgICAgIG0yNCA9IGFlWzEzXSxcbiAgICAgICAgbTMxID0gYWVbMl0sXG4gICAgICAgIG0zMiA9IGFlWzZdLFxuICAgICAgICBtMzMgPSBhZVsxMF0sXG4gICAgICAgIG0zNCA9IGFlWzE0XSxcbiAgICAgICAgbTQxID0gYWVbM10sXG4gICAgICAgIG00MiA9IGFlWzddLFxuICAgICAgICBtNDMgPSBhZVsxMV0sXG4gICAgICAgIG00NCA9IGFlWzE1XTtcblxuICAgIHJldHVybiAoXG4gICAgbTQxICogKG0xNCAqIG0yMyAqIG0zMiAtIG0xMyAqIG0yNCAqIG0zMiAtIG0xNCAqIG0yMiAqIG0zMyArIG0xMiAqIG0yNCAqIG0zMyArIG0xMyAqIG0yMiAqIG0zNCAtIG0xMiAqIG0yMyAqIG0zNCkgK1xuICAgIG00MiAqIChtMTEgKiBtMjMgKiBtMzQgLSBtMTEgKiBtMjQgKiBtMzMgKyBtMTQgKiBtMjEgKiBtMzMgLSBtMTMgKiBtMjEgKiBtMzQgKyBtMTMgKiBtMjQgKiBtMzEgLSBtMTQgKiBtMjMgKiBtMzEpICtcbiAgICBtNDMgKiAobTExICogbTI0ICogbTMyIC0gbTExICogbTIyICogbTM0IC0gbTE0ICogbTIxICogbTMyICsgbTEyICogbTIxICogbTM0ICsgbTE0ICogbTIyICogbTMxIC0gbTEyICogbTI0ICogbTMxKSArXG4gICAgbTQ0ICogKC1tMTMgKiBtMjIgKiBtMzEgLSBtMTEgKiBtMjMgKiBtMzIgKyBtMTEgKiBtMjIgKiBtMzMgKyBtMTMgKiBtMjEgKiBtMzIgLSBtMTIgKiBtMjEgKiBtMzMgKyBtMTIgKiBtMjMgKiBtMzEpXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnZlcnNlXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiByZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoaXNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cbiAgICAgICAgbTExID0gdGVbMF0sXG4gICAgICAgIG0xMiA9IHRlWzRdLFxuICAgICAgICBtMTMgPSB0ZVs4XSxcbiAgICAgICAgbTE0ID0gdGVbMTJdLFxuICAgICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgICAgbTIyID0gdGVbNV0sXG4gICAgICAgIG0yMyA9IHRlWzldLFxuICAgICAgICBtMjQgPSB0ZVsxM10sXG4gICAgICAgIG0zMSA9IHRlWzJdLFxuICAgICAgICBtMzIgPSB0ZVs2XSxcbiAgICAgICAgbTMzID0gdGVbMTBdLFxuICAgICAgICBtMzQgPSB0ZVsxNF0sXG4gICAgICAgIG00MSA9IHRlWzNdLFxuICAgICAgICBtNDIgPSB0ZVs3XSxcbiAgICAgICAgbTQzID0gdGVbMTFdLFxuICAgICAgICBtNDQgPSB0ZVsxNV0sXG5cbiAgICAgICAgbWUwID0gbTIzICogbTM0ICogbTQyIC0gbTI0ICogbTMzICogbTQyICsgbTI0ICogbTMyICogbTQzIC0gbTIyICogbTM0ICogbTQzIC0gbTIzICogbTMyICogbTQ0ICsgbTIyICogbTMzICogbTQ0LFxuICAgICAgICBtZTQgPSBtMTQgKiBtMzMgKiBtNDIgLSBtMTMgKiBtMzQgKiBtNDIgLSBtMTQgKiBtMzIgKiBtNDMgKyBtMTIgKiBtMzQgKiBtNDMgKyBtMTMgKiBtMzIgKiBtNDQgLSBtMTIgKiBtMzMgKiBtNDQsXG4gICAgICAgIG1lOCA9IG0xMyAqIG0yNCAqIG00MiAtIG0xNCAqIG0yMyAqIG00MiArIG0xNCAqIG0yMiAqIG00MyAtIG0xMiAqIG0yNCAqIG00MyAtIG0xMyAqIG0yMiAqIG00NCArIG0xMiAqIG0yMyAqIG00NCxcbiAgICAgICAgbWUxMiA9IG0xNCAqIG0yMyAqIG0zMiAtIG0xMyAqIG0yNCAqIG0zMiAtIG0xNCAqIG0yMiAqIG0zMyArIG0xMiAqIG0yNCAqIG0zMyArIG0xMyAqIG0yMiAqIG0zNCAtIG0xMiAqIG0yMyAqIG0zNCxcblxuICAgICAgICBkZXQgPSBtMTEgKiBtZTAgKyBtMjEgKiBtZTQgKyBtMzEgKiBtZTggKyBtNDEgKiBtZTEyO1xuXG4gICAgaWYgKGRldCA9PT0gMC4wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIHRlWzBdID0gbWUwICogZGV0O1xuICAgIHRlWzRdID0gbWU0ICogZGV0O1xuICAgIHRlWzhdID0gbWU4ICogZGV0O1xuICAgIHRlWzEyXSA9IG1lMTIgKiBkZXQ7XG4gICAgdGVbMV0gPSAobTI0ICogbTMzICogbTQxIC0gbTIzICogbTM0ICogbTQxIC0gbTI0ICogbTMxICogbTQzICsgbTIxICogbTM0ICogbTQzICsgbTIzICogbTMxICogbTQ0IC0gbTIxICogbTMzICogbTQ0KSAqIGRldDtcbiAgICB0ZVs1XSA9IChtMTMgKiBtMzQgKiBtNDEgLSBtMTQgKiBtMzMgKiBtNDEgKyBtMTQgKiBtMzEgKiBtNDMgLSBtMTEgKiBtMzQgKiBtNDMgLSBtMTMgKiBtMzEgKiBtNDQgKyBtMTEgKiBtMzMgKiBtNDQpICogZGV0O1xuICAgIHRlWzldID0gKG0xNCAqIG0yMyAqIG00MSAtIG0xMyAqIG0yNCAqIG00MSAtIG0xNCAqIG0yMSAqIG00MyArIG0xMSAqIG0yNCAqIG00MyArIG0xMyAqIG0yMSAqIG00NCAtIG0xMSAqIG0yMyAqIG00NCkgKiBkZXQ7XG4gICAgdGVbMTNdID0gKG0xMyAqIG0yNCAqIG0zMSAtIG0xNCAqIG0yMyAqIG0zMSArIG0xNCAqIG0yMSAqIG0zMyAtIG0xMSAqIG0yNCAqIG0zMyAtIG0xMyAqIG0yMSAqIG0zNCArIG0xMSAqIG0yMyAqIG0zNCkgKiBkZXQ7XG4gICAgdGVbMl0gPSAobTIyICogbTM0ICogbTQxIC0gbTI0ICogbTMyICogbTQxICsgbTI0ICogbTMxICogbTQyIC0gbTIxICogbTM0ICogbTQyIC0gbTIyICogbTMxICogbTQ0ICsgbTIxICogbTMyICogbTQ0KSAqIGRldDtcbiAgICB0ZVs2XSA9IChtMTQgKiBtMzIgKiBtNDEgLSBtMTIgKiBtMzQgKiBtNDEgLSBtMTQgKiBtMzEgKiBtNDIgKyBtMTEgKiBtMzQgKiBtNDIgKyBtMTIgKiBtMzEgKiBtNDQgLSBtMTEgKiBtMzIgKiBtNDQpICogZGV0O1xuICAgIHRlWzEwXSA9IChtMTIgKiBtMjQgKiBtNDEgLSBtMTQgKiBtMjIgKiBtNDEgKyBtMTQgKiBtMjEgKiBtNDIgLSBtMTEgKiBtMjQgKiBtNDIgLSBtMTIgKiBtMjEgKiBtNDQgKyBtMTEgKiBtMjIgKiBtNDQpICogZGV0O1xuICAgIHRlWzE0XSA9IChtMTQgKiBtMjIgKiBtMzEgLSBtMTIgKiBtMjQgKiBtMzEgLSBtMTQgKiBtMjEgKiBtMzIgKyBtMTEgKiBtMjQgKiBtMzIgKyBtMTIgKiBtMjEgKiBtMzQgLSBtMTEgKiBtMjIgKiBtMzQpICogZGV0O1xuICAgIHRlWzNdID0gKG0yMyAqIG0zMiAqIG00MSAtIG0yMiAqIG0zMyAqIG00MSAtIG0yMyAqIG0zMSAqIG00MiArIG0yMSAqIG0zMyAqIG00MiArIG0yMiAqIG0zMSAqIG00MyAtIG0yMSAqIG0zMiAqIG00MykgKiBkZXQ7XG4gICAgdGVbN10gPSAobTEyICogbTMzICogbTQxIC0gbTEzICogbTMyICogbTQxICsgbTEzICogbTMxICogbTQyIC0gbTExICogbTMzICogbTQyIC0gbTEyICogbTMxICogbTQzICsgbTExICogbTMyICogbTQzKSAqIGRldDtcbiAgICB0ZVsxMV0gPSAobTEzICogbTIyICogbTQxIC0gbTEyICogbTIzICogbTQxIC0gbTEzICogbTIxICogbTQyICsgbTExICogbTIzICogbTQyICsgbTEyICogbTIxICogbTQzIC0gbTExICogbTIyICogbTQzKSAqIGRldDtcbiAgICB0ZVsxNV0gPSAobTEyICogbTIzICogbTMxIC0gbTEzICogbTIyICogbTMxICsgbTEzICogbTIxICogbTMyIC0gbTExICogbTIzICogbTMyIC0gbTEyICogbTIxICogbTMzICsgbTExICogbTIyICogbTMzKSAqIGRldDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VNYXRcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2Ygb3RoZXJcbiAqIEBwYXJhbSBNYXQ0IG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuaW52ZXJzZU1hdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gb3RoZXIuZWxlbWVudHMsXG5cbiAgICAgICAgbTExID0gbWVbMF0sXG4gICAgICAgIG0xMiA9IG1lWzRdLFxuICAgICAgICBtMTMgPSBtZVs4XSxcbiAgICAgICAgbTE0ID0gbWVbMTJdLFxuICAgICAgICBtMjEgPSBtZVsxXSxcbiAgICAgICAgbTIyID0gbWVbNV0sXG4gICAgICAgIG0yMyA9IG1lWzldLFxuICAgICAgICBtMjQgPSBtZVsxM10sXG4gICAgICAgIG0zMSA9IG1lWzJdLFxuICAgICAgICBtMzIgPSBtZVs2XSxcbiAgICAgICAgbTMzID0gbWVbMTBdLFxuICAgICAgICBtMzQgPSBtZVsxNF0sXG4gICAgICAgIG00MSA9IG1lWzNdLFxuICAgICAgICBtNDIgPSBtZVs3XSxcbiAgICAgICAgbTQzID0gbWVbMTFdLFxuICAgICAgICBtNDQgPSBtZVsxNV0sXG5cbiAgICAgICAgbWUwID0gbTIzICogbTM0ICogbTQyIC0gbTI0ICogbTMzICogbTQyICsgbTI0ICogbTMyICogbTQzIC0gbTIyICogbTM0ICogbTQzIC0gbTIzICogbTMyICogbTQ0ICsgbTIyICogbTMzICogbTQ0LFxuICAgICAgICBtZTQgPSBtMTQgKiBtMzMgKiBtNDIgLSBtMTMgKiBtMzQgKiBtNDIgLSBtMTQgKiBtMzIgKiBtNDMgKyBtMTIgKiBtMzQgKiBtNDMgKyBtMTMgKiBtMzIgKiBtNDQgLSBtMTIgKiBtMzMgKiBtNDQsXG4gICAgICAgIG1lOCA9IG0xMyAqIG0yNCAqIG00MiAtIG0xNCAqIG0yMyAqIG00MiArIG0xNCAqIG0yMiAqIG00MyAtIG0xMiAqIG0yNCAqIG00MyAtIG0xMyAqIG0yMiAqIG00NCArIG0xMiAqIG0yMyAqIG00NCxcbiAgICAgICAgbWUxMiA9IG0xNCAqIG0yMyAqIG0zMiAtIG0xMyAqIG0yNCAqIG0zMiAtIG0xNCAqIG0yMiAqIG0zMyArIG0xMiAqIG0yNCAqIG0zMyArIG0xMyAqIG0yMiAqIG0zNCAtIG0xMiAqIG0yMyAqIG0zNCxcblxuICAgICAgICBkZXQgPSBtMTEgKiBtZTAgKyBtMjEgKiBtZTQgKyBtMzEgKiBtZTggKyBtNDEgKiBtZTEyO1xuXG4gICAgaWYgKGRldCA9PT0gMC4wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIHRlWzBdID0gbWUwICogZGV0O1xuICAgIHRlWzRdID0gbWU0ICogZGV0O1xuICAgIHRlWzhdID0gbWU4ICogZGV0O1xuICAgIHRlWzEyXSA9IG1lMTIgKiBkZXQ7XG4gICAgdGVbMV0gPSAobTI0ICogbTMzICogbTQxIC0gbTIzICogbTM0ICogbTQxIC0gbTI0ICogbTMxICogbTQzICsgbTIxICogbTM0ICogbTQzICsgbTIzICogbTMxICogbTQ0IC0gbTIxICogbTMzICogbTQ0KSAqIGRldDtcbiAgICB0ZVs1XSA9IChtMTMgKiBtMzQgKiBtNDEgLSBtMTQgKiBtMzMgKiBtNDEgKyBtMTQgKiBtMzEgKiBtNDMgLSBtMTEgKiBtMzQgKiBtNDMgLSBtMTMgKiBtMzEgKiBtNDQgKyBtMTEgKiBtMzMgKiBtNDQpICogZGV0O1xuICAgIHRlWzldID0gKG0xNCAqIG0yMyAqIG00MSAtIG0xMyAqIG0yNCAqIG00MSAtIG0xNCAqIG0yMSAqIG00MyArIG0xMSAqIG0yNCAqIG00MyArIG0xMyAqIG0yMSAqIG00NCAtIG0xMSAqIG0yMyAqIG00NCkgKiBkZXQ7XG4gICAgdGVbMTNdID0gKG0xMyAqIG0yNCAqIG0zMSAtIG0xNCAqIG0yMyAqIG0zMSArIG0xNCAqIG0yMSAqIG0zMyAtIG0xMSAqIG0yNCAqIG0zMyAtIG0xMyAqIG0yMSAqIG0zNCArIG0xMSAqIG0yMyAqIG0zNCkgKiBkZXQ7XG4gICAgdGVbMl0gPSAobTIyICogbTM0ICogbTQxIC0gbTI0ICogbTMyICogbTQxICsgbTI0ICogbTMxICogbTQyIC0gbTIxICogbTM0ICogbTQyIC0gbTIyICogbTMxICogbTQ0ICsgbTIxICogbTMyICogbTQ0KSAqIGRldDtcbiAgICB0ZVs2XSA9IChtMTQgKiBtMzIgKiBtNDEgLSBtMTIgKiBtMzQgKiBtNDEgLSBtMTQgKiBtMzEgKiBtNDIgKyBtMTEgKiBtMzQgKiBtNDIgKyBtMTIgKiBtMzEgKiBtNDQgLSBtMTEgKiBtMzIgKiBtNDQpICogZGV0O1xuICAgIHRlWzEwXSA9IChtMTIgKiBtMjQgKiBtNDEgLSBtMTQgKiBtMjIgKiBtNDEgKyBtMTQgKiBtMjEgKiBtNDIgLSBtMTEgKiBtMjQgKiBtNDIgLSBtMTIgKiBtMjEgKiBtNDQgKyBtMTEgKiBtMjIgKiBtNDQpICogZGV0O1xuICAgIHRlWzE0XSA9IChtMTQgKiBtMjIgKiBtMzEgLSBtMTIgKiBtMjQgKiBtMzEgLSBtMTQgKiBtMjEgKiBtMzIgKyBtMTEgKiBtMjQgKiBtMzIgKyBtMTIgKiBtMjEgKiBtMzQgLSBtMTEgKiBtMjIgKiBtMzQpICogZGV0O1xuICAgIHRlWzNdID0gKG0yMyAqIG0zMiAqIG00MSAtIG0yMiAqIG0zMyAqIG00MSAtIG0yMyAqIG0zMSAqIG00MiArIG0yMSAqIG0zMyAqIG00MiArIG0yMiAqIG0zMSAqIG00MyAtIG0yMSAqIG0zMiAqIG00MykgKiBkZXQ7XG4gICAgdGVbN10gPSAobTEyICogbTMzICogbTQxIC0gbTEzICogbTMyICogbTQxICsgbTEzICogbTMxICogbTQyIC0gbTExICogbTMzICogbTQyIC0gbTEyICogbTMxICogbTQzICsgbTExICogbTMyICogbTQzKSAqIGRldDtcbiAgICB0ZVsxMV0gPSAobTEzICogbTIyICogbTQxIC0gbTEyICogbTIzICogbTQxIC0gbTEzICogbTIxICogbTQyICsgbTExICogbTIzICogbTQyICsgbTEyICogbTIxICogbTQzIC0gbTExICogbTIyICogbTQzKSAqIGRldDtcbiAgICB0ZVsxNV0gPSAobTEyICogbTIzICogbTMxIC0gbTEzICogbTIyICogbTMxICsgbTEzICogbTIxICogbTMyIC0gbTExICogbTIzICogbTMyIC0gbTEyICogbTIxICogbTMzICsgbTExICogbTIyICogbTMzKSAqIGRldDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zcG9zZVxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogdHJhbnNwb3NlcyB0aGlzIG1hdHJpeFxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLnRyYW5zcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB0bXA7XG5cbiAgICB0bXAgPSB0ZVsxXTtcbiAgICB0ZVsxXSA9IHRlWzRdO1xuICAgIHRlWzRdID0gdG1wO1xuICAgIHRtcCA9IHRlWzJdO1xuICAgIHRlWzJdID0gdGVbOF07XG4gICAgdGVbOF0gPSB0bXA7XG4gICAgdG1wID0gdGVbNl07XG4gICAgdGVbNl0gPSB0ZVs5XTtcbiAgICB0ZVs5XSA9IHRtcDtcblxuICAgIHRtcCA9IHRlWzNdO1xuICAgIHRlWzNdID0gdGVbMTJdO1xuICAgIHRlWzEyXSA9IHRtcDtcbiAgICB0bXAgPSB0ZVs3XTtcbiAgICB0ZVs3XSA9IHRlWzEzXTtcbiAgICB0ZVsxM10gPSB0bXA7XG4gICAgdG1wID0gdGVbMTFdO1xuICAgIHRlWzExXSA9IHRlWzE0XTtcbiAgICB0ZVsxNF0gPSB0bXA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRUcmFjZVxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogc2V0cyB0aGUgZGlhZ29uYWwgb2YgbWF0cml4XG4gKiBAcGFyYW0gVmVjNCB2XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuc2V0VHJhY2UgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHcgPSB2Lnc7XG5cbiAgICB0ZVswXSA9IHYueDtcbiAgICB0ZVs1XSA9IHYueTtcbiAgICB0ZVsxMF0gPSB2Lno7XG4gICAgdGVbMTVdID0gdyAhPSB1bmRlZmluZWQgPyB3IDogMS4wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbG9va0F0XG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBtYWtlcyBtYXRyaXggbG9vayBmcm9tIGV5ZSBhdCB0YXJnZXQgYWxvbmcgdXAgdmVjdG9yXG4gKiBAcGFyYW0gVmVjMyBleWVcbiAqIEBwYXJhbSBWZWMzIHRhcmdldFxuICogQHBhcmFtIFZlYzMgdXBcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5sb29rQXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGR1cCA9IG5ldyBWZWMzKDAuMCwgMC4wLCAxLjApLFxuICAgICAgICB4ID0gbmV3IFZlYzMsXG4gICAgICAgIHkgPSBuZXcgVmVjMyxcbiAgICAgICAgeiA9IG5ldyBWZWMzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChleWUsIHRhcmdldCwgdXApIHtcbiAgICAgICAgdXAgfHwgKHVwID0gZHVwKTtcbiAgICAgICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgICAgICB6LnZzdWIoZXllLCB0YXJnZXQpLm5vcm1hbGl6ZSgpO1xuICAgICAgICBpZiAoei5sZW5ndGgoKSA9PT0gMC4wKSB6LnogPSAxLjA7XG5cbiAgICAgICAgeC52Y3Jvc3ModXAsIHopLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgIGlmICh4Lmxlbmd0aCgpID09PSAwLjApIHtcbiAgICAgICAgICAgIHoueCArPSAwLjAwMDAwMTtcbiAgICAgICAgICAgIHgudmNyb3NzKHVwLCB6KS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHkudmNyb3NzKHosIHgpO1xuXG5cbiAgICAgICAgdGVbMF0gPSB4Lng7XG4gICAgICAgIHRlWzRdID0geS54O1xuICAgICAgICB0ZVs4XSA9IHoueDtcbiAgICAgICAgdGVbMV0gPSB4Lnk7XG4gICAgICAgIHRlWzVdID0geS55O1xuICAgICAgICB0ZVs5XSA9IHoueTtcbiAgICAgICAgdGVbMl0gPSB4Lno7XG4gICAgICAgIHRlWzZdID0geS56O1xuICAgICAgICB0ZVsxMF0gPSB6Lno7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0oKTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvbXBvc2VcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHNldHMgbWF0cml4IGZyb20gcG9zaXRpb24sIHNjYWxlLCBhbmQgcXVhdGVybmlvblxuICogQHBhcmFtIFZlYzMgcG9zaXRpb25cbiAqIEBwYXJhbSBWZWMzIHNjYWxlXG4gKiBAcGFyYW0gUXVhdCByb3RhdGlvblxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAocG9zaXRpb24sIHNjYWxlLCByb3RhdGlvbikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHggPSByb3RhdGlvbi54LFxuICAgICAgICB5ID0gcm90YXRpb24ueSxcbiAgICAgICAgeiA9IHJvdGF0aW9uLnosXG4gICAgICAgIHcgPSByb3RhdGlvbi53LFxuICAgICAgICB4MiA9IHggKyB4LFxuICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICB6MiA9IHogKyB6LFxuICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgeHkgPSB4ICogeTIsXG4gICAgICAgIHh6ID0geCAqIHoyLFxuICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgeXogPSB5ICogejIsXG4gICAgICAgIHp6ID0geiAqIHoyLFxuICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgd3kgPSB3ICogeTIsXG4gICAgICAgIHd6ID0gdyAqIHoyLFxuXG4gICAgICAgIHN4ID0gc2NhbGUueCxcbiAgICAgICAgc3kgPSBzY2FsZS55LFxuICAgICAgICBzeiA9IHNjYWxlLno7XG5cbiAgICB0ZVswXSA9ICgxLjAgLSAoeXkgKyB6eikpICogc3g7XG4gICAgdGVbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgICB0ZVs4XSA9ICh4eiArIHd5KSAqIHN6O1xuXG4gICAgdGVbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICB0ZVs1XSA9ICgxLjAgLSAoeHggKyB6eikpICogc3k7XG4gICAgdGVbOV0gPSAoeXogLSB3eCkgKiBzejtcblxuICAgIHRlWzJdID0gKHh6IC0gd3kpICogc3g7XG4gICAgdGVbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICB0ZVsxMF0gPSAoMS4wIC0gKHh4ICsgeXkpKSAqIHN6O1xuXG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbMTFdID0gMC4wO1xuXG4gICAgdGVbMTJdID0gcG9zaXRpb24ueDtcbiAgICB0ZVsxM10gPSBwb3NpdGlvbi55O1xuICAgIHRlWzE0XSA9IHBvc2l0aW9uLno7XG4gICAgdGVbMTVdID0gMS4wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZGVjb21wb3NlXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBnZXRzIG1hdHJpeCBwb3NpdGlvbiwgc2NhbGUsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSBWZWMzIHBvc2l0aW9uXG4gKiBAcGFyYW0gVmVjMyBzY2FsZVxuICogQHBhcmFtIFF1YXQgcXVhdGVybmlvblxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmRlY29tcG9zZSA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgc2NhbGUsIHF1YXRlcm5pb24pIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuXG4gICAgICAgIG0xMSA9IHRlWzBdLFxuICAgICAgICBtMTIgPSB0ZVs0XSxcbiAgICAgICAgbTEzID0gdGVbOF0sXG4gICAgICAgIG0yMSA9IHRlWzFdLFxuICAgICAgICBtMjIgPSB0ZVs1XSxcbiAgICAgICAgbTIzID0gdGVbOV0sXG4gICAgICAgIG0zMSA9IHRlWzJdLFxuICAgICAgICBtMzIgPSB0ZVs2XSxcbiAgICAgICAgbTMzID0gdGVbMTBdLFxuICAgICAgICB0cmFjZSwgeCA9IDAuMCxcbiAgICAgICAgeSA9IDAuMCxcbiAgICAgICAgeiA9IDAuMCxcbiAgICAgICAgdyA9IDEsXG4gICAgICAgIHMsXG5cbiAgICAgICAgc3ggPSBzY2FsZS5zZXQobTExLCBtMjEsIG0zMSkubGVuZ3RoKCksXG4gICAgICAgIHN5ID0gc2NhbGUuc2V0KG0xMiwgbTIyLCBtMzIpLmxlbmd0aCgpLFxuICAgICAgICBzeiA9IHNjYWxlLnNldChtMTMsIG0yMywgbTMzKS5sZW5ndGgoKSxcblxuICAgICAgICBpbnZTeCA9IDEgLyBzeCxcbiAgICAgICAgaW52U3kgPSAxIC8gc3ksXG4gICAgICAgIGludlN6ID0gMSAvIHN6O1xuXG4gICAgc2NhbGUueCA9IHN4O1xuICAgIHNjYWxlLnkgPSBzeTtcbiAgICBzY2FsZS56ID0gc3o7XG5cbiAgICBwb3NpdGlvbi54ID0gdGVbMTJdO1xuICAgIHBvc2l0aW9uLnkgPSB0ZVsxM107XG4gICAgcG9zaXRpb24ueiA9IHRlWzE0XTtcblxuICAgIG0xMSAqPSBpbnZTeDtcbiAgICBtMTIgKj0gaW52U3k7XG4gICAgbTEzICo9IGludlN6O1xuICAgIG0yMSAqPSBpbnZTeDtcbiAgICBtMjIgKj0gaW52U3k7XG4gICAgbTIzICo9IGludlN6O1xuICAgIG0zMSAqPSBpbnZTeDtcbiAgICBtMzIgKj0gaW52U3k7XG4gICAgbTMzICo9IGludlN6O1xuXG4gICAgdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzM7XG5cbiAgICBpZiAodHJhY2UgPiAwLjApIHtcbiAgICAgICAgcyA9IDAuNSAvIHNxcnQodHJhY2UgKyAxLjApO1xuXG4gICAgICAgIHcgPSAwLjI1IC8gcztcbiAgICAgICAgeCA9IChtMzIgLSBtMjMpICogcztcbiAgICAgICAgeSA9IChtMTMgLSBtMzEpICogcztcbiAgICAgICAgeiA9IChtMjEgLSBtMTIpICogcztcbiAgICB9IGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcblxuICAgICAgICB3ID0gKG0zMiAtIG0yMykgLyBzO1xuICAgICAgICB4ID0gMC4yNSAqIHM7XG4gICAgICAgIHkgPSAobTEyICsgbTIxKSAvIHM7XG4gICAgICAgIHogPSAobTEzICsgbTMxKSAvIHM7XG4gICAgfSBlbHNlIGlmIChtMjIgPiBtMzMpIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTIyIC0gbTExIC0gbTMzKTtcblxuICAgICAgICB3ID0gKG0xMyAtIG0zMSkgLyBzO1xuICAgICAgICB4ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICB5ID0gMC4yNSAqIHM7XG4gICAgICAgIHogPSAobTIzICsgbTMyKSAvIHM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKTtcblxuICAgICAgICB3ID0gKG0yMSAtIG0xMikgLyBzO1xuICAgICAgICB4ID0gKG0xMyArIG0zMSkgLyBzO1xuICAgICAgICB5ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICB6ID0gMC4yNSAqIHM7XG4gICAgfVxuXG4gICAgcXVhdGVybmlvbi54ID0geDtcbiAgICBxdWF0ZXJuaW9uLnkgPSB5O1xuICAgIHF1YXRlcm5pb24udyA9IHc7XG4gICAgcXVhdGVybmlvbi56ID0gejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFBvc2l0aW9uXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBzZXRzIHBvc2l0aW9uIG9mIG1hdHJpeFxuICogQHBhcmFtIFZlYzMgdlxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB6ID0gdi56O1xuXG4gICAgdGVbMTJdID0gdi54O1xuICAgIHRlWzEzXSA9IHYueTtcbiAgICB0ZVsxNF0gPSB6ICE9IHVuZGVmaW5lZCA/IHogOiAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBleHRyYWN0UG9zaXRpb25cbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIGdldHMgcG9zaXRpb24gZnJvbSBvdGhlciBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gTWF0NCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmV4dHJhY3RQb3NpdGlvbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gb3RoZXIuZWxlbWVudHM7XG5cbiAgICB0ZVsxMl0gPSBtZVsxMl07XG4gICAgdGVbMTNdID0gbWVbMTNdO1xuICAgIHRlWzE0XSA9IG1lWzE0XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGV4dHJhY3RSb3RhdGlvblxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogZ2V0cyByb3RhdGlvbiBmcm9tIG90aGVyIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBNYXQ0IG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuZXh0cmFjdFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2ZWMgPSBuZXcgVmVjMygpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICAgICAgbWUgPSBvdGhlci5lbGVtZW50cyxcblxuICAgICAgICAgICAgbHggPSB2ZWMuc2V0KG1lWzBdLCBtZVsxXSwgbWVbMl0pLmxlbmd0aFNxKCksXG4gICAgICAgICAgICBseSA9IHZlYy5zZXQobWVbNF0sIG1lWzVdLCBtZVs2XSkubGVuZ3RoU3EoKSxcbiAgICAgICAgICAgIGx6ID0gdmVjLnNldChtZVs4XSwgbWVbOV0sIG1lWzEwXSkubGVuZ3RoU3EoKSxcblxuICAgICAgICAgICAgc2NhbGVYID0gbHggPiAwLjAgPyAxLjAgLyBzcXJ0KGx4KSA6IDAuMCxcbiAgICAgICAgICAgIHNjYWxlWSA9IGx5ID4gMC4wID8gMS4wIC8gc3FydChseSkgOiAwLjAsXG4gICAgICAgICAgICBzY2FsZVogPSBseiA+IDAuMCA/IDEuMCAvIHNxcnQobHopIDogMC4wO1xuXG4gICAgICAgIHRlWzBdID0gbWVbMF0gKiBzY2FsZVg7XG4gICAgICAgIHRlWzFdID0gbWVbMV0gKiBzY2FsZVg7XG4gICAgICAgIHRlWzJdID0gbWVbMl0gKiBzY2FsZVg7XG5cbiAgICAgICAgdGVbNF0gPSBtZVs0XSAqIHNjYWxlWTtcbiAgICAgICAgdGVbNV0gPSBtZVs1XSAqIHNjYWxlWTtcbiAgICAgICAgdGVbNl0gPSBtZVs2XSAqIHNjYWxlWTtcblxuICAgICAgICB0ZVs4XSA9IG1lWzhdICogc2NhbGVaO1xuICAgICAgICB0ZVs5XSA9IG1lWzldICogc2NhbGVaO1xuICAgICAgICB0ZVsxMF0gPSBtZVsxMF0gKiBzY2FsZVo7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0oKTtcblxuLyoqXG4gKiBAbWV0aG9kIGV4dHJhY3RSb3RhdGlvblNjYWxlXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBnZXRzIHJvdGF0aW9uIHdpdGggc2NhbGUgZnJvbSBvdGhlciBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gTWF0NCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmV4dHJhY3RSb3RhdGlvblNjYWxlID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBvdGhlci5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuXG4gICAgdGVbNF0gPSBtZVs0XTtcbiAgICB0ZVs1XSA9IG1lWzVdO1xuICAgIHRlWzZdID0gbWVbNl07XG5cbiAgICB0ZVs4XSA9IG1lWzhdO1xuICAgIHRlWzldID0gbWVbOV07XG4gICAgdGVbMTBdID0gbWVbMTBdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdHJhbnNsYXRlXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiB0cmFuc2xhdGVzIG1hdHJpeCBieSB2ZWN0b3JcbiAqIEBwYXJhbSBWZWMzIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHggPSB2LngsXG4gICAgICAgIHkgPSB2LnksXG4gICAgICAgIHogPSB2LnogfHwgMC4wO1xuXG4gICAgdGVbMTJdID0gdGVbMF0gKiB4ICsgdGVbNF0gKiB5ICsgdGVbOF0gKiB6ICsgdGVbMTJdO1xuICAgIHRlWzEzXSA9IHRlWzFdICogeCArIHRlWzVdICogeSArIHRlWzldICogeiArIHRlWzEzXTtcbiAgICB0ZVsxNF0gPSB0ZVsyXSAqIHggKyB0ZVs2XSAqIHkgKyB0ZVsxMF0gKiB6ICsgdGVbMTRdO1xuICAgIHRlWzE1XSA9IHRlWzNdICogeCArIHRlWzddICogeSArIHRlWzExXSAqIHogKyB0ZVsxNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzY2FsZVxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogc2NhbGVzIG1hdHJpeCBieSB2ZWN0b3JcbiAqIEBwYXJhbSBWZWMzIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgeCA9IHYueCxcbiAgICAgICAgeSA9IHYueSxcbiAgICAgICAgeiA9IHYuejtcblxuICAgIHRlWzBdICo9IHg7XG4gICAgdGVbNF0gKj0geTtcbiAgICB0ZVs4XSAqPSB6O1xuICAgIHRlWzFdICo9IHg7XG4gICAgdGVbNV0gKj0geTtcbiAgICB0ZVs5XSAqPSB6O1xuICAgIHRlWzJdICo9IHg7XG4gICAgdGVbNl0gKj0geTtcbiAgICB0ZVsxMF0gKj0gejtcbiAgICB0ZVszXSAqPSB4O1xuICAgIHRlWzddICo9IHk7XG4gICAgdGVbMTFdICo9IHo7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCByb3RhdGVYXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiByb3RhdGVzIG1hdHJpeCBhbG9uZyB4IGF4aXMgYnkgYW5nbGVcbiAqIEBwYXJhbSBOdW1iZXIgYW5nbGVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5yb3RhdGVYID0gZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbTEyID0gdGVbNF0sXG4gICAgICAgIG0yMiA9IHRlWzVdLFxuICAgICAgICBtMzIgPSB0ZVs2XSxcbiAgICAgICAgbTQyID0gdGVbN10sXG4gICAgICAgIG0xMyA9IHRlWzhdLFxuICAgICAgICBtMjMgPSB0ZVs5XSxcbiAgICAgICAgbTMzID0gdGVbMTBdLFxuICAgICAgICBtNDMgPSB0ZVsxMV0sXG4gICAgICAgIGMgPSBjb3MoYW5nbGUpLFxuICAgICAgICBzID0gc2luKGFuZ2xlKTtcblxuICAgIHRlWzRdID0gYyAqIG0xMiArIHMgKiBtMTM7XG4gICAgdGVbNV0gPSBjICogbTIyICsgcyAqIG0yMztcbiAgICB0ZVs2XSA9IGMgKiBtMzIgKyBzICogbTMzO1xuICAgIHRlWzddID0gYyAqIG00MiArIHMgKiBtNDM7XG5cbiAgICB0ZVs4XSA9IGMgKiBtMTMgLSBzICogbTEyO1xuICAgIHRlWzldID0gYyAqIG0yMyAtIHMgKiBtMjI7XG4gICAgdGVbMTBdID0gYyAqIG0zMyAtIHMgKiBtMzI7XG4gICAgdGVbMTFdID0gYyAqIG00MyAtIHMgKiBtNDI7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCByb3RhdGVZXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiByb3RhdGVzIG1hdHJpeCBhbG9uZyB5IGF4aXMgYnkgYW5nbGVcbiAqIEBwYXJhbSBOdW1iZXIgYW5nbGVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5yb3RhdGVZID0gZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbTExID0gdGVbMF0sXG4gICAgICAgIG0yMSA9IHRlWzFdLFxuICAgICAgICBtMzEgPSB0ZVsyXSxcbiAgICAgICAgbTQxID0gdGVbM10sXG4gICAgICAgIG0xMyA9IHRlWzhdLFxuICAgICAgICBtMjMgPSB0ZVs5XSxcbiAgICAgICAgbTMzID0gdGVbMTBdLFxuICAgICAgICBtNDMgPSB0ZVsxMV0sXG4gICAgICAgIGMgPSBjb3MoYW5nbGUpLFxuICAgICAgICBzID0gc2luKGFuZ2xlKTtcblxuICAgIHRlWzBdID0gYyAqIG0xMSAtIHMgKiBtMTM7XG4gICAgdGVbMV0gPSBjICogbTIxIC0gcyAqIG0yMztcbiAgICB0ZVsyXSA9IGMgKiBtMzEgLSBzICogbTMzO1xuICAgIHRlWzNdID0gYyAqIG00MSAtIHMgKiBtNDM7XG5cbiAgICB0ZVs4XSA9IGMgKiBtMTMgKyBzICogbTExO1xuICAgIHRlWzldID0gYyAqIG0yMyArIHMgKiBtMjE7XG4gICAgdGVbMTBdID0gYyAqIG0zMyArIHMgKiBtMzE7XG4gICAgdGVbMTFdID0gYyAqIG00MyArIHMgKiBtNDE7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCByb3RhdGVaXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiByb3RhdGVzIG1hdHJpeCBhbG9uZyB6IGF4aXMgYnkgYW5nbGVcbiAqIEBwYXJhbSBOdW1iZXIgYW5nbGVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5yb3RhdGVaID0gZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbTExID0gdGVbMF0sXG4gICAgICAgIG0yMSA9IHRlWzFdLFxuICAgICAgICBtMzEgPSB0ZVsyXSxcbiAgICAgICAgbTQxID0gdGVbM10sXG4gICAgICAgIG0xMiA9IHRlWzRdLFxuICAgICAgICBtMjIgPSB0ZVs1XSxcbiAgICAgICAgbTMyID0gdGVbNl0sXG4gICAgICAgIG00MiA9IHRlWzddLFxuICAgICAgICBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICB0ZVswXSA9IGMgKiBtMTEgKyBzICogbTEyO1xuICAgIHRlWzFdID0gYyAqIG0yMSArIHMgKiBtMjI7XG4gICAgdGVbMl0gPSBjICogbTMxICsgcyAqIG0zMjtcbiAgICB0ZVszXSA9IGMgKiBtNDEgKyBzICogbTQyO1xuXG4gICAgdGVbNF0gPSBjICogbTEyIC0gcyAqIG0xMTtcbiAgICB0ZVs1XSA9IGMgKiBtMjIgLSBzICogbTIxO1xuICAgIHRlWzZdID0gYyAqIG0zMiAtIHMgKiBtMzE7XG4gICAgdGVbN10gPSBjICogbTQyIC0gcyAqIG00MTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VUcmFuc2xhdGlvblxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogbWFrZXMgdGhpcyBhIHRyYW5zbGF0aW9uIG1hdHJpeFxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIHlcbiAqIEBwYXJhbSBOdW1iZXIgelxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLm1ha2VUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIDEsIDAuMCwgMC4wLCB4LFxuICAgICAgICAwLjAsIDEsIDAuMCwgeSxcbiAgICAgICAgMC4wLCAwLjAsIDEsIHosXG4gICAgICAgIDAuMCwgMC4wLCAwLjAsIDFcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VTY2FsZVxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogbWFrZXMgdGhpcyBhIHNjYWxlIG1hdHJpeFxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIHlcbiAqIEBwYXJhbSBOdW1iZXIgelxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLm1ha2VTY2FsZSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIHgsIDAuMCwgMC4wLCAwLjAsXG4gICAgICAgIDAuMCwgeSwgMC4wLCAwLjAsXG4gICAgICAgIDAuMCwgMC4wLCB6LCAwLjAsXG4gICAgICAgIDAuMCwgMC4wLCAwLjAsIDFcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VSb3RhdGlvblhcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIG1ha2VzIHRoaXMgYSByb3RhdGlvbiBtYXRyaXggYWxvbmcgeCBheGlzXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUubWFrZVJvdGF0aW9uWCA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIDEsIDAuMCwgMC4wLCAwLjAsXG4gICAgICAgIDAuMCwgYywgLXMsIDAuMCxcbiAgICAgICAgMC4wLCBzLCBjLCAwLjAsXG4gICAgICAgIDAuMCwgMC4wLCAwLjAsIDFcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VSb3RhdGlvbllcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIG1ha2VzIHRoaXMgYSByb3RhdGlvbiBtYXRyaXggYWxvbmcgeSBheGlzXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUubWFrZVJvdGF0aW9uWSA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIGMsIDAuMCwgcywgMC4wLFxuICAgICAgICAwLjAsIDEsIDAuMCwgMC4wLCAtcywgMC4wLCBjLCAwLjAsXG4gICAgICAgIDAuMCwgMC4wLCAwLjAsIDFcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1ha2VSb3RhdGlvblpcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIG1ha2VzIHRoaXMgYSByb3RhdGlvbiBtYXRyaXggYWxvbmcgeiBheGlzXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUubWFrZVJvdGF0aW9uWiA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBjID0gY29zKGFuZ2xlKSxcbiAgICAgICAgcyA9IHNpbihhbmdsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5zZXQoXG4gICAgICAgIGMsIC1zLCAwLjAsIDAuMCxcbiAgICAgICAgcywgYywgMC4wLCAwLjAsXG4gICAgICAgIDAuMCwgMC4wLCAxLCAwLjAsXG4gICAgICAgIDAuMCwgMC4wLCAwLjAsIDFcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZydXN0dW1cbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIG1ha2VzIGZydXN0dW0gbWF0cml4XG4gKiBAcGFyYW0gTnVtYmVyIGxlZnRcbiAqIEBwYXJhbSBOdW1iZXIgcmlnaHRcbiAqIEBwYXJhbSBOdW1iZXIgYm90dG9tXG4gKiBAcGFyYW0gTnVtYmVyIHRvcFxuICogQHBhcmFtIE51bWJlciBuZWFyXG4gKiBAcGFyYW0gTnVtYmVyIGZhclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmZydXN0dW0gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB4ID0gMiAqIG5lYXIgLyAocmlnaHQgLSBsZWZ0KSxcbiAgICAgICAgeSA9IDIgKiBuZWFyIC8gKHRvcCAtIGJvdHRvbSksXG5cbiAgICAgICAgYSA9IChyaWdodCArIGxlZnQpIC8gKHJpZ2h0IC0gbGVmdCksXG4gICAgICAgIGIgPSAodG9wICsgYm90dG9tKSAvICh0b3AgLSBib3R0b20pLFxuICAgICAgICBjID0gLShmYXIgKyBuZWFyKSAvIChmYXIgLSBuZWFyKSxcbiAgICAgICAgZCA9IC0yICogZmFyICogbmVhciAvIChmYXIgLSBuZWFyKTtcblxuICAgIHRlWzBdID0geDtcbiAgICB0ZVs0XSA9IDAuMDtcbiAgICB0ZVs4XSA9IGE7XG4gICAgdGVbMTJdID0gMC4wO1xuICAgIHRlWzFdID0gMC4wO1xuICAgIHRlWzVdID0geTtcbiAgICB0ZVs5XSA9IGI7XG4gICAgdGVbMTNdID0gMC4wO1xuICAgIHRlWzJdID0gMC4wO1xuICAgIHRlWzZdID0gMC4wO1xuICAgIHRlWzEwXSA9IGM7XG4gICAgdGVbMTRdID0gZDtcbiAgICB0ZVszXSA9IDAuMDtcbiAgICB0ZVs3XSA9IDAuMDtcbiAgICB0ZVsxMV0gPSAtMTtcbiAgICB0ZVsxNV0gPSAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBwZXJzcGVjdGl2ZVxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogbWFrZXMgcGVyc3BlY3RpdmUgbWF0cml4XG4gKiBAcGFyYW0gTnVtYmVyIGZvdlxuICogQHBhcmFtIE51bWJlciBhc3BlY3RcbiAqIEBwYXJhbSBOdW1iZXIgbmVhclxuICogQHBhcmFtIE51bWJlciBmYXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5wZXJzcGVjdGl2ZSA9IGZ1bmN0aW9uIChmb3YsIGFzcGVjdCwgbmVhciwgZmFyKSB7XG4gICAgdmFyIHltYXggPSBuZWFyICogdGFuKGZvdiAqIDAuNSksXG4gICAgICAgIHltaW4gPSAteW1heCxcbiAgICAgICAgeG1pbiA9IHltaW4gKiBhc3BlY3QsXG4gICAgICAgIHhtYXggPSB5bWF4ICogYXNwZWN0O1xuXG4gICAgcmV0dXJuIHRoaXMuZnJ1c3R1bSh4bWluLCB4bWF4LCB5bWF4LCB5bWluLCBuZWFyLCBmYXIpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG9ydGhvZ3JhcGhpY1xuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogbWFrZXMgb3J0aG9ncmFwaGljIG1hdHJpeFxuICogQHBhcmFtIE51bWJlciBsZWZ0XG4gKiBAcGFyYW0gTnVtYmVyIHJpZ2h0XG4gKiBAcGFyYW0gTnVtYmVyIGJvdHRvbVxuICogQHBhcmFtIE51bWJlciB0b3BcbiAqIEBwYXJhbSBOdW1iZXIgbmVhclxuICogQHBhcmFtIE51bWJlciBmYXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5vcnRob2dyYXBoaWMgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB3ID0gcmlnaHQgLSBsZWZ0LFxuICAgICAgICBoID0gdG9wIC0gYm90dG9tLFxuICAgICAgICBwID0gZmFyIC0gbmVhcixcblxuICAgICAgICB4ID0gKHJpZ2h0ICsgbGVmdCkgLyB3LFxuICAgICAgICB5ID0gKHRvcCArIGJvdHRvbSkgLyBoLFxuICAgICAgICB6ID0gKGZhciArIG5lYXIpIC8gcDtcblxuICAgIHRlWzBdID0gMiAvIHc7XG4gICAgdGVbMV0gPSAwLjA7XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSAwLjA7XG4gICAgdGVbNV0gPSAyIC8gaDtcbiAgICB0ZVs2XSA9IDAuMDtcbiAgICB0ZVs3XSA9IDAuMFxuICAgIHRlWzhdID0gMC4wO1xuICAgIHRlWzldID0gMC4wO1xuICAgIHRlWzEwXSA9IC0yIC8gcDtcbiAgICB0ZVsxMV0gPSAwLjA7XG4gICAgdGVbMTJdID0gLXg7XG4gICAgdGVbMTNdID0gLXk7XG4gICAgdGVbMTRdID0gLXo7XG4gICAgdGVbMTVdID0gMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21NYXQyXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBzZXRzIHRoaXMgZnJvbSBNYXQyXG4gKiBAcGFyYW0gTWF0MiBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuZnJvbU1hdDIgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0gbS5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IDAuMDtcbiAgICB0ZVszXSA9IDAuMDtcbiAgICB0ZVs0XSA9IG1lWzJdO1xuICAgIHRlWzVdID0gbWVbM107XG4gICAgdGVbNl0gPSAwLjA7XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbOF0gPSAwLjA7XG4gICAgdGVbOV0gPSAwLjA7XG4gICAgdGVbMTBdID0gMTtcbiAgICB0ZVsxMV0gPSAwLjA7XG4gICAgdGVbMTJdID0gMC4wO1xuICAgIHRlWzEzXSA9IDAuMDtcbiAgICB0ZVsxNF0gPSAwLjA7XG4gICAgdGVbMTVdID0gMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21NYXQzMlxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogc2V0cyB0aGlzIGZyb20gTWF0MzJcbiAqIEBwYXJhbSBNYXQzMiBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuZnJvbU1hdDMyID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICBtZSA9IG0uZWxlbWVudHM7XG5cbiAgICB0ZVswXSA9IG1lWzBdO1xuICAgIHRlWzFdID0gbWVbMV07XG4gICAgdGVbMl0gPSAwLjA7XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSBtZVsyXTtcbiAgICB0ZVs1XSA9IG1lWzNdO1xuICAgIHRlWzZdID0gMC4wO1xuICAgIHRlWzddID0gMC4wO1xuICAgIHRlWzhdID0gMC4wO1xuICAgIHRlWzldID0gMC4wO1xuICAgIHRlWzEwXSA9IDE7XG4gICAgdGVbMTFdID0gMC4wO1xuICAgIHRlWzEyXSA9IG1lWzRdO1xuICAgIHRlWzEzXSA9IG1lWzVdO1xuICAgIHRlWzE0XSA9IDAuMDtcbiAgICB0ZVsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbU1hdDNcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHNldHMgdGhpcyBmcm9tIE1hdDNcbiAqIEBwYXJhbSBNYXQzIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5mcm9tTWF0MyA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgbWUgPSBtLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBtZVswXTtcbiAgICB0ZVsxXSA9IG1lWzFdO1xuICAgIHRlWzJdID0gbWVbMl07XG4gICAgdGVbM10gPSAwLjA7XG4gICAgdGVbNF0gPSBtZVszXTtcbiAgICB0ZVs1XSA9IG1lWzRdO1xuICAgIHRlWzZdID0gbWVbNV07XG4gICAgdGVbN10gPSAwLjA7XG4gICAgdGVbOF0gPSBtZVs2XTtcbiAgICB0ZVs5XSA9IG1lWzddO1xuICAgIHRlWzEwXSA9IG1lWzhdO1xuICAgIHRlWzExXSA9IDAuMDtcbiAgICB0ZVsxMl0gPSAwLjA7XG4gICAgdGVbMTNdID0gMC4wO1xuICAgIHRlWzE0XSA9IDAuMDtcbiAgICB0ZVsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVF1YXRcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHNldHMgcm90YXRpb24gb2YgdGhpcyBmcm9tIHF1YXRlcmlhblxuICogQHBhcmFtIFF1YXQgcVxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmZyb21RdWF0ID0gZnVuY3Rpb24gKHEpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxuICAgICAgICB4ID0gcS54LFxuICAgICAgICB5ID0gcS55LFxuICAgICAgICB6ID0gcS56LFxuICAgICAgICB3ID0gcS53LFxuICAgICAgICB4MiA9IHggKyB4LFxuICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICB6MiA9IHogKyB6LFxuICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgeHkgPSB4ICogeTIsXG4gICAgICAgIHh6ID0geCAqIHoyLFxuICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgeXogPSB5ICogejIsXG4gICAgICAgIHp6ID0geiAqIHoyLFxuICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgd3kgPSB3ICogeTIsXG4gICAgICAgIHd6ID0gdyAqIHoyO1xuXG4gICAgdGVbMF0gPSAxIC0gKHl5ICsgenopO1xuICAgIHRlWzRdID0geHkgLSB3ejtcbiAgICB0ZVs4XSA9IHh6ICsgd3k7XG5cbiAgICB0ZVsxXSA9IHh5ICsgd3o7XG4gICAgdGVbNV0gPSAxIC0gKHh4ICsgenopO1xuICAgIHRlWzldID0geXogLSB3eDtcblxuICAgIHRlWzJdID0geHogLSB3eTtcbiAgICB0ZVs2XSA9IHl6ICsgd3g7XG4gICAgdGVbMTBdID0gMSAtICh4eCArIHl5KTtcblxuICAgIHRlWzNdID0gMC4wO1xuICAgIHRlWzddID0gMC4wO1xuICAgIHRlWzExXSA9IDAuMDtcblxuICAgIHRlWzEyXSA9IDAuMDtcbiAgICB0ZVsxM10gPSAwLjA7XG4gICAgdGVbMTRdID0gMC4wO1xuICAgIHRlWzE1XSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogQHBhcmFtIFhpYW4uTWF0NCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cbk1hdDQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBhZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGJlID0gb3RoZXIuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gIShcbiAgICBhZVswXSAhPT0gYmVbMF0gfHxcbiAgICBhZVsxXSAhPT0gYmVbMV0gfHxcbiAgICBhZVsyXSAhPT0gYmVbMl0gfHxcbiAgICBhZVszXSAhPT0gYmVbM10gfHxcbiAgICBhZVs0XSAhPT0gYmVbNF0gfHxcbiAgICBhZVs1XSAhPT0gYmVbNV0gfHxcbiAgICBhZVs2XSAhPT0gYmVbNl0gfHxcbiAgICBhZVs3XSAhPT0gYmVbN10gfHxcbiAgICBhZVs4XSAhPT0gYmVbOF0gfHxcbiAgICBhZVs5XSAhPT0gYmVbOV0gfHxcbiAgICBhZVsxMF0gIT09IGJlWzEwXSB8fFxuICAgIGFlWzExXSAhPT0gYmVbMTFdIHx8XG4gICAgYWVbMTJdICE9PSBiZVsxMl0gfHxcbiAgICBhZVsxM10gIT09IGJlWzEzXSB8fFxuICAgIGFlWzE0XSAhPT0gYmVbMTRdIHx8XG4gICAgYWVbMTVdICE9PSBiZVsxNV1cbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWVtYmVyb2YgWGlhbi5NYXQ0XG4gKiBAcGFyYW0gWGlhbi5NYXQ0IG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUubm90RXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGFlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgYmUgPSBvdGhlci5lbGVtZW50cztcblxuICAgIHJldHVybiAoXG4gICAgYWVbMF0gIT09IGJlWzBdIHx8XG4gICAgYWVbMV0gIT09IGJlWzFdIHx8XG4gICAgYWVbMl0gIT09IGJlWzJdIHx8XG4gICAgYWVbM10gIT09IGJlWzNdIHx8XG4gICAgYWVbNF0gIT09IGJlWzRdIHx8XG4gICAgYWVbNV0gIT09IGJlWzVdIHx8XG4gICAgYWVbNl0gIT09IGJlWzZdIHx8XG4gICAgYWVbN10gIT09IGJlWzddIHx8XG4gICAgYWVbOF0gIT09IGJlWzhdIHx8XG4gICAgYWVbOV0gIT09IGJlWzldIHx8XG4gICAgYWVbMTBdICE9PSBiZVsxMF0gfHxcbiAgICBhZVsxMV0gIT09IGJlWzExXSB8fFxuICAgIGFlWzEyXSAhPT0gYmVbMTJdIHx8XG4gICAgYWVbMTNdICE9PSBiZVsxM10gfHxcbiAgICBhZVsxNF0gIT09IGJlWzE0XSB8fFxuICAgIGFlWzE1XSAhPT0gYmVbMTVdXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tSlNPTlxuICogQG1lbWJlcm9mIFhpYW4uTWF0NFxuICogc2V0cyB2YWx1ZXMgZnJvbSBKU09OIG9iamVjdFxuICogQHBhcmFtIE9iamVjdCBqc29uXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuTWF0NC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIG1lID0ganNvbi5lbGVtZW50cztcblxuICAgIHRlWzBdID0gbWVbMF07XG4gICAgdGVbMV0gPSBtZVsxXTtcbiAgICB0ZVsyXSA9IG1lWzJdO1xuICAgIHRlWzNdID0gbWVbM107XG4gICAgdGVbNF0gPSBtZVs0XTtcbiAgICB0ZVs1XSA9IG1lWzVdO1xuICAgIHRlWzZdID0gbWVbNl07XG4gICAgdGVbN10gPSBtZVs3XTtcbiAgICB0ZVs4XSA9IG1lWzhdO1xuICAgIHRlWzldID0gbWVbOV07XG4gICAgdGVbMTBdID0gbWVbMTBdO1xuICAgIHRlWzExXSA9IG1lWzExXTtcbiAgICB0ZVsxMl0gPSBtZVsxMl07XG4gICAgdGVbMTNdID0gbWVbMTNdO1xuICAgIHRlWzE0XSA9IG1lWzE0XTtcbiAgICB0ZVsxNV0gPSBtZVsxNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b0pTT05cbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHJldHVybnMganNvbiBvYmplY3Qgb2YgdGhpc1xuICogQHJldHVybiBPYmplY3RcbiAqL1xuTWF0NC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGplID0ganNvbi5lbGVtZW50cyB8fCAoanNvbi5lbGVtZW50cyA9IFtdKTtcblxuICAgIGpzb24uX2NsYXNzTmFtZSA9IFwiTWF0NFwiO1xuICAgIGplWzBdID0gdGVbMF07XG4gICAgamVbMV0gPSB0ZVsxXTtcbiAgICBqZVsyXSA9IHRlWzJdO1xuICAgIGplWzNdID0gdGVbM107XG4gICAgamVbNF0gPSB0ZVs0XTtcbiAgICBqZVs1XSA9IHRlWzVdO1xuICAgIGplWzZdID0gdGVbNl07XG4gICAgamVbN10gPSB0ZVs3XTtcbiAgICBqZVs4XSA9IHRlWzhdO1xuICAgIGplWzldID0gdGVbOV07XG4gICAgamVbMTBdID0gdGVbMTBdO1xuICAgIGplWzExXSA9IHRlWzExXTtcbiAgICBqZVsxMl0gPSB0ZVsxMl07XG4gICAgamVbMTNdID0gdGVbMTNdO1xuICAgIGplWzE0XSA9IHRlWzE0XTtcbiAgICBqZVsxNV0gPSB0ZVsxNV07XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tQXJyYXlcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHNldHMgdmFsdWVzIGZyb20gQXJyYXkgb2JqZWN0XG4gKiBAcGFyYW0gT2JqZWN0IGpzb25cbiAqIEByZXR1cm4gdGhpc1xuICovXG5NYXQ0LnByb3RvdHlwZS5mcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICB2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgdGVbMF0gPSBhcnJheVswXTtcbiAgICB0ZVsxXSA9IGFycmF5WzFdO1xuICAgIHRlWzJdID0gYXJyYXlbMl07XG4gICAgdGVbM10gPSBhcnJheVszXTtcbiAgICB0ZVs0XSA9IGFycmF5WzRdO1xuICAgIHRlWzVdID0gYXJyYXlbNV07XG4gICAgdGVbNl0gPSBhcnJheVs2XTtcbiAgICB0ZVs3XSA9IGFycmF5WzddO1xuICAgIHRlWzhdID0gYXJyYXlbOF07XG4gICAgdGVbOV0gPSBhcnJheVs5XTtcbiAgICB0ZVsxMF0gPSBhcnJheVsxMF07XG4gICAgdGVbMTFdID0gYXJyYXlbMTFdO1xuICAgIHRlWzEyXSA9IGFycmF5WzEyXTtcbiAgICB0ZVsxM10gPSBhcnJheVsxM107XG4gICAgdGVbMTRdID0gYXJyYXlbMTRdO1xuICAgIHRlWzE1XSA9IGFycmF5WzE1XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gT2JqZWN0XG4gKi9cbk1hdDQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBhcnJheSB8fCAoYXJyYXkgPSBbXSk7XG4gICAgdmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGFycmF5WzBdID0gdGVbMF07XG4gICAgYXJyYXlbMV0gPSB0ZVsxXTtcbiAgICBhcnJheVsyXSA9IHRlWzJdO1xuICAgIGFycmF5WzNdID0gdGVbM107XG4gICAgYXJyYXlbNF0gPSB0ZVs0XTtcbiAgICBhcnJheVs1XSA9IHRlWzVdO1xuICAgIGFycmF5WzZdID0gdGVbNl07XG4gICAgYXJyYXlbN10gPSB0ZVs3XTtcbiAgICBhcnJheVs4XSA9IHRlWzhdO1xuICAgIGFycmF5WzldID0gdGVbOV07XG4gICAgYXJyYXlbMTBdID0gdGVbMTBdO1xuICAgIGFycmF5WzExXSA9IHRlWzExXTtcbiAgICBhcnJheVsxMl0gPSB0ZVsxMl07XG4gICAgYXJyYXlbMTNdID0gdGVbMTNdO1xuICAgIGFycmF5WzE0XSA9IHRlWzE0XTtcbiAgICBhcnJheVsxNV0gPSB0ZVsxNV07XG5cbiAgICByZXR1cm4gYXJyYXk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9TdHJpbmdcbiAqIEBtZW1iZXJvZiBYaWFuLk1hdDRcbiAqIHJldHVybnMgc3RyaW5nIG9mIHRoaXNcbiAqIEByZXR1cm4gU3RyaW5nXG4gKi9cbk1hdDQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgIFwiTWF0NFtcIiArIHRlWzBdICsgXCIsIFwiICsgdGVbNF0gKyBcIiwgXCIgKyB0ZVs4XSArIFwiLCBcIiArIHRlWzEyXSArIFwiXVxcblwiICtcbiAgICBcIiAgICAgW1wiICsgdGVbMV0gKyBcIiwgXCIgKyB0ZVs1XSArIFwiLCBcIiArIHRlWzldICsgXCIsIFwiICsgdGVbMTNdICsgXCJdXFxuXCIgK1xuICAgIFwiICAgICBbXCIgKyB0ZVsyXSArIFwiLCBcIiArIHRlWzZdICsgXCIsIFwiICsgdGVbMTBdICsgXCIsIFwiICsgdGVbMTRdICsgXCJdXFxuXCIgK1xuICAgIFwiICAgICBbXCIgKyB0ZVszXSArIFwiLCBcIiArIHRlWzddICsgXCIsIFwiICsgdGVbMTFdICsgXCIsIFwiICsgdGVbMTVdICsgXCJdXCJcbiAgICApO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdDQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgYWJzID0gTWF0aC5hYnMsXG4gICAgY29zID0gTWF0aC5jb3MsXG4gICAgcG93ID0gTWF0aC5wb3csXG4gICAgZmxvb3IgPSBNYXRoLmZsb29yLFxuICAgIGNlaWwgPSBNYXRoLmNlaWwsXG4gICAgYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgIEVQU0lMT04gPSAwLjAwMDAwMSxcbiAgICBQSSA9IDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NTAyODg0MTk2OCxcbiAgICBUV09fUEkgPSBQSSAqIDIsXG4gICAgSEFMRl9QSSA9IFBJICogMC41LFxuICAgIFRPX1JBRFMgPSBQSSAvIDE4MC4wLFxuICAgIFRPX0RFR1MgPSAxODAuMCAvIFBJLFxuICAgIGtleXMgPSBPYmplY3Qua2V5cyxcbiAgICBtb2R1bG8sIGNsYW1wMDEsIHN0YW5kYXJkUmFkaWFuLCBzdGFuZGFyZEFuZ2xlLCByYWRzVG9EZWdzO1xuXG5cbi8qKlxuICogQGNsYXNzIE1hdGhmXG4gKiBjb2xsZWN0aW9uIG9mIGNvbW1vbiBtYXRoIGZ1bmN0aW9uc1xuICovXG5mdW5jdGlvbiBNYXRoZigpIHtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgUElcbiAgICAgKiBUaGUgaW5mYW1vdXMgMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MC4wMjg4NDE5NjhcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICAgICAqL1xuICAgIHRoaXMuUEkgPSBQSTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgVFdPX1BJXG4gICAgICogMiAqIFBJXG4gICAgICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAgICAgKi9cbiAgICB0aGlzLlRXT19QSSA9IFRXT19QSTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgSEFMRl9QSVxuICAgICAqIFBJIC8gMlxuICAgICAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gICAgICovXG4gICAgdGhpcy5IQUxGX1BJID0gSEFMRl9QSTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgRVBTSUxPTlxuICAgICAqIEEgc21hbGwgbnVtYmVyIHZhbHVlXG4gICAgICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAgICAgKi9cbiAgICB0aGlzLkVQU0lMT04gPSBFUFNJTE9OO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciBUT19SQURTXG4gICAgICogRGVncmVlcyB0byByYWRpYW5zIGNvbnZlcnNpb24gY29uc3RhbnRcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICAgICAqL1xuICAgIHRoaXMuVE9fUkFEUyA9IFRPX1JBRFM7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIFRPX0RFR1NcbiAgICAgKiBSYWRpYW5zIHRvIGRlZ3JlZXMgY29udmVyc2lvbiBjb25zdGFudFxuICAgICAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gICAgICovXG4gICAgdGhpcy5UT19ERUdTID0gVE9fREVHUztcbn1cblxuTWF0aGYucHJvdG90eXBlLl9jbGFzc2VzID0ge307XG5cbk1hdGhmLnByb3RvdHlwZS5hY29zID0gTWF0aC5hY29zO1xuTWF0aGYucHJvdG90eXBlLmFzaW4gPSBNYXRoLmFzaW47XG5NYXRoZi5wcm90b3R5cGUuYXRhbiA9IE1hdGguYXRhbjtcbk1hdGhmLnByb3RvdHlwZS5hdGFuMiA9IE1hdGguYXRhbjI7XG5cbk1hdGhmLnByb3RvdHlwZS5jb3MgPSBNYXRoLmNvcztcbk1hdGhmLnByb3RvdHlwZS5zaW4gPSBNYXRoLnNpbjtcbk1hdGhmLnByb3RvdHlwZS50YW4gPSBNYXRoLnRhbjtcblxuTWF0aGYucHJvdG90eXBlLmFicyA9IE1hdGguYWJzO1xuTWF0aGYucHJvdG90eXBlLmNlaWwgPSBNYXRoLmNlaWw7XG5NYXRoZi5wcm90b3R5cGUuZXhwID0gTWF0aC5leHA7XG5NYXRoZi5wcm90b3R5cGUuZmxvb3IgPSBNYXRoLmZsb29yO1xuTWF0aGYucHJvdG90eXBlLmxvZyA9IE1hdGgubG9nO1xuTWF0aGYucHJvdG90eXBlLm1heCA9IE1hdGgubWF4O1xuTWF0aGYucHJvdG90eXBlLm1pbiA9IE1hdGgubWluO1xuTWF0aGYucHJvdG90eXBlLnBvdyA9IE1hdGgucG93O1xuTWF0aGYucHJvdG90eXBlLnJhbmRvbSA9IE1hdGgucmFuZG9tO1xuTWF0aGYucHJvdG90eXBlLnJvdW5kID0gTWF0aC5yb3VuZDtcbk1hdGhmLnByb3RvdHlwZS5zcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vKipcbiAqIEBtZXRob2QgZXF1YWxzXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyBpZiBhID0gYiB3aXRoaW4gc29tZSB2YWx1ZSwgZGVmYXVsdHMgdG8gTWF0aGYuRVBTSUxPTlxuICogQHBhcmFtIE51bWJlciBhXG4gKiBAcGFyYW0gTnVtYmVyIGJcbiAqIEBwYXJhbSBOdW1iZXIgZVxuICogQHJldHVybiBCb29sZWFuXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAoYSwgYiwgZSkge1xuXG4gICAgcmV0dXJuIGFicyhhIC0gYikgPCAoZSB8fCBFUFNJTE9OKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBtb2R1bG9cbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiByZXR1cm5zIHJlbWFpbmRlciBvZiBhIC8gYlxuICogQHBhcmFtIE51bWJlciBhXG4gKiBAcGFyYW0gTnVtYmVyIGJcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5tb2R1bG8gPSBtb2R1bG8gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciByID0gYSAlIGI7XG5cbiAgICByZXR1cm4gKHIgKiBiIDwgMC4wKSA/IHIgKyBiIDogcjtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzdGFuZGFyZFJhZGlhblxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIGNvbnZlcnRlcyB4IHRvIHJhZGlhbiB3aGVyZSAwLjAgPD0geCA8IDJQSVxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUuc3RhbmRhcmRSYWRpYW4gPSBzdGFuZGFyZFJhZGlhbiA9IGZ1bmN0aW9uICh4KSB7XG5cbiAgICByZXR1cm4gbW9kdWxvKHgsIFRXT19QSSk7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc3RhbmRhcmRBbmdsZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIGNvbnZlcnRlcyB4IHRvIGFuZ2xlIHdoZXJlIDAuMCA8PSB4IDwgMzYwLjBcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnN0YW5kYXJkQW5nbGUgPSBzdGFuZGFyZEFuZ2xlID0gZnVuY3Rpb24gKHgpIHtcblxuICAgIHJldHVybiBtb2R1bG8oeCwgMzYwLjApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNpZ25cbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBnZXRzIHNpZ24gb2YgeFxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uICh4KSB7XG5cbiAgICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY2xhbXBcbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBjbGFtcCB4IGJldHdlZW4gbWluIGFuZCBtYXhcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciBtaW5cbiAqIEBwYXJhbSBOdW1iZXIgbWF4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUuY2xhbXAgPSBmdW5jdGlvbiAoeCwgbWluLCBtYXgpIHtcblxuICAgIHJldHVybiB4IDwgbWluID8gbWluIDogeCA+IG1heCA/IG1heCA6IHg7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY2xhbXBCb3R0b21cbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBjbGFtcCB4IGJldHdlZW4gbWluIGFuZCBJbmZpbml0eVxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIG1pblxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLmNsYW1wQm90dG9tID0gZnVuY3Rpb24gKHgsIG1pbikge1xuXG4gICAgcmV0dXJuIHggPCBtaW4gPyBtaW4gOiB4O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsYW1wVG9wXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogY2xhbXAgeCBiZXR3ZWVuIC1JbmZpbml0eSBhbmQgbWF4XG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgbWF4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUuY2xhbXBUb3AgPSBmdW5jdGlvbiAoeCwgbWF4KSB7XG5cbiAgICByZXR1cm4geCA+IG1heCA/IG1heCA6IHg7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY2xhbXAwMVxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIGNsYW1wIHggYmV0d2VlbiAwLjAgYW5kIDFcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLmNsYW1wMDEgPSBjbGFtcDAxID0gZnVuY3Rpb24gKHgpIHtcblxuICAgIHJldHVybiB4IDwgMC4wID8gMC4wIDogeCA+IDEgPyAxIDogeDtcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0cnVuY2F0ZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIHRydW5jYXRlIHggdG8gaGF2ZSBuIG51bWJlciBvZiBkZWNpYWwgcGxhY2VzXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgblxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnRydW5jYXRlID0gZnVuY3Rpb24gKHgsIG4pIHtcbiAgICB2YXIgcCA9IHBvdygxMC4wLCBuKSxcbiAgICAgICAgbnVtID0geCAqIHA7XG5cbiAgICByZXR1cm4gKG51bSA8IDAuMCA/IGNlaWwobnVtKSA6IGZsb29yKG51bSkpIC8gcDtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZXJwXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiBhIGFuZCBiIGJ5IHhcbiAqIEBwYXJhbSBOdW1iZXIgYVxuICogQHBhcmFtIE51bWJlciBiXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5sZXJwID0gZnVuY3Rpb24gKGEsIGIsIHgpIHtcblxuICAgIHJldHVybiBhICsgKGIgLSBhKSAqIHg7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbGVycEFuZ2xlXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiBhIGFuZCBiIGJ5IHggaW5zdXJlcyAwLjAgPD0geCA8IDJQSVxuICogQHBhcmFtIE51bWJlciBhXG4gKiBAcGFyYW0gTnVtYmVyIGJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLmxlcnBBbmdsZSA9IGZ1bmN0aW9uIChhLCBiLCB4KSB7XG5cbiAgICByZXR1cm4gc3RhbmRhcmRSYWRpYW4oYSArIChiIC0gYSkgKiB4KTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjb3NMZXJwXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogY29zaW5lIGludGVycG9sYXRpb24gYmV0d2VlbiBhIGFuZCBiIGJ5IHhcbiAqIEBwYXJhbSBOdW1iZXIgYVxuICogQHBhcmFtIE51bWJlciBiXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5sZXJwQ29zID0gZnVuY3Rpb24gKGEsIGIsIHgpIHtcbiAgICB2YXIgZnQgPSB4ICogUEksXG4gICAgICAgIGYgPSAoMS4wIC0gY29zKGZ0KSkgKiAwLjU7XG5cbiAgICByZXR1cm4gYSAqICgxLjAgLSBmKSArIGIgKiBmO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlcnBDdWJpY1xuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIGN1YmljIGludGVycG9sYXRpb24gYmV0d2VlbiB2MSBhbmQgdjIgYnkgeFxuICogQHBhcmFtIE51bWJlciB2MFxuICogQHBhcmFtIE51bWJlciB2MVxuICogQHBhcmFtIE51bWJlciB2MlxuICogQHBhcmFtIE51bWJlciB2M1xuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUubGVycEN1YmljID0gZnVuY3Rpb24gKHYwLCB2MSwgdjIsIHYzLCB4KSB7XG4gICAgdjAgfHwgKHYwID0gdjEpO1xuICAgIHYzIHx8ICh2MyA9IHYyKTtcbiAgICB2YXIgUCA9ICh2MyAtIHYyKSAtICh2MCAtIHYxKSxcbiAgICAgICAgUSA9ICh2MCAtIHYxKSAtIFAsXG4gICAgICAgIFIgPSB2MiAtIHYwLFxuICAgICAgICBTID0gdjEsXG5cbiAgICAgICAgUHggPSBQICogeCxcbiAgICAgICAgUXggPSBRICogeCxcbiAgICAgICAgUnggPSBSICogeDtcblxuICAgIHJldHVybiAoUHggKiBQeCAqIFB4KSArIChReCAqIFF4KSArIFJ4ICsgUztcbn07XG5cbi8qKlxuICogc21vb3RoIHN0ZXAsIGlmIGlucHV0IGlzIGJldHdlZW4gbWluIGFuZCBtYXggdGhpcyByZXR1cm5zIGEgdmFsdWUgcHJvcG9ydGlvbmF0ZWx5IGJldHdlZW4gMC4wIGFuZCAxXG4gKiBAbWV0aG9kIHNtb290aFN0ZXBcbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgbWluXG4gKiBAcGFyYW0gTnVtYmVyIG1heFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnNtb290aFN0ZXAgPSBmdW5jdGlvbiAoeCwgbWluLCBtYXgpIHtcbiAgICBpZiAoeCA8PSBtaW4pIHJldHVybiAwLjA7XG4gICAgaWYgKHggPj0gbWF4KSByZXR1cm4gMTtcblxuICAgIHggPSAoeCAtIG1pbikgLyAobWF4IC0gbWluKTtcblxuICAgIHJldHVybiB4ICogeCAqICgzIC0gMiAqIHgpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNtb290aGVyU3RlcFxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIHNtb290aGVyIHN0ZXAsIGlmIGlucHV0IGlzIGJldHdlZW4gbWluIGFuZCBtYXggdGhpcyByZXR1cm5zIGEgdmFsdWUgcHJvcG9ydGlvbmF0ZWx5IGJldHdlZW4gMC4wIGFuZCAxXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgbWluXG4gKiBAcGFyYW0gTnVtYmVyIG1heFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnNtb290aGVyU3RlcCA9IGZ1bmN0aW9uICh4LCBtaW4sIG1heCkge1xuICAgIGlmICh4IDw9IG1pbikgcmV0dXJuIDAuMDtcbiAgICBpZiAoeCA+PSBtYXgpIHJldHVybiAxO1xuXG4gICAgeCA9ICh4IC0gbWluKSAvIChtYXggLSBtaW4pO1xuXG4gICAgcmV0dXJuIHggKiB4ICogeCAqICh4ICogKHggKiA2IC0gMTUpICsgMTAuMCk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgcGluZ1BvbmdcbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBQaW5nUG9uZ3MgdGhlIHZhbHVlIHgsIHNvIHRoYXQgaXQgaXMgbmV2ZXIgbGFyZ2VyIHRoYW4gbGVuZ3RoIGFuZCBuZXZlciBzbWFsbGVyIHRoYW4gMC4wLlxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIGxlbmd0aFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnBpbmdQb25nID0gZnVuY3Rpb24gKHgsIGxlbmd0aCkge1xuICAgIGxlbmd0aCB8fCAobGVuZ3RoID0gMSk7XG5cbiAgICByZXR1cm4gbGVuZ3RoIC0gYWJzKHggJSAoMiAqIGxlbmd0aCkgLSBsZW5ndGgpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGRlZ3NUb1JhZHNcbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBjb252ZXJ0ZXMgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5kZWdzVG9SYWRzID0gZnVuY3Rpb24gKHgpIHtcblxuICAgIHJldHVybiBzdGFuZGFyZFJhZGlhbih4ICogVE9fUkFEUyk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgcmFkc1RvRGVnc1xuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIGNvbnZlcnRlcyByYWRpYW5zIHRvIGRlZ3JlZXNcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnJhZHNUb0RlZ3MgPSByYWRzVG9EZWdzID0gZnVuY3Rpb24gKHgpIHtcblxuICAgIHJldHVybiBzdGFuZGFyZEFuZ2xlKHggKiBUT19ERUdTKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCByYW5kSW50XG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyByYW5kb20gbnVtYmVyIGJldHdlZW4gbWluIGFuZCBtYXhcbiAqIEBwYXJhbSBOdW1iZXIgbWluXG4gKiBAcGFyYW0gTnVtYmVyIG1heFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLnJhbmRJbnQgPSBmdW5jdGlvbiAobWluLCBtYXgpIHtcblxuICAgIHJldHVybiBmbG9vcihtaW4gKyAocmFuZG9tKCkgKiAobWF4ICsgMSAtIG1pbikpKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCByYW5kRmxvYXRcbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiByZXR1cm5zIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBtaW4gYW5kIG1heFxuICogQHBhcmFtIE51bWJlciBtaW5cbiAqIEBwYXJhbSBOdW1iZXIgbWF4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUucmFuZEZsb2F0ID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG5cbiAgICByZXR1cm4gbWluICsgKHJhbmRvbSgpICogKG1heCAtIG1pbikpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHJhbmRTaWduXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyBlaXRoZXIgLTEgb3IgMVxuICogQHBhcmFtIE51bWJlciBtaW5cbiAqIEBwYXJhbSBOdW1iZXIgbWF4XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUucmFuZFNpZ24gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gcmFuZG9tKCkgPCAwLjUgPyAxIDogLTE7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgcmFuZENob2ljZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIHJldHVybnMgcmFuZG9tIGl0ZW0gZnJvbSBhcnJheVxuICogQHBhcmFtIEFycmF5IGFycmF5XG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5NYXRoZi5wcm90b3R5cGUucmFuZENob2ljZSA9IGZ1bmN0aW9uIChhcnJheSkge1xuXG4gICAgcmV0dXJuIGFycmF5WyhyYW5kb20oKSAqIGFycmF5Lmxlbmd0aCkgfCAwLjBdO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNodWZmbGVcbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBzaHVmZmxlcyBhcnJheVxuICogQHBhcmFtIEFycmF5IGFycmF5XG4gKiBAcmV0dXJuIEFycmF5XG4gKi9cbk1hdGhmLnByb3RvdHlwZS5zaHVmZmxlID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cbiAgICBmb3IgKHZhciBqLCB4LCBpID0gYXJyYXkubGVuZ3RoOyBpOyBqID0gKHJhbmRvbSgpICogaSkgfCAwLjAsIHggPSBhcnJheVstLWldLCBhcnJheVtpXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHgpO1xuICAgIHJldHVybiBhcnJheTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCByYW5kQXJnXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyByYW5kb20gYXJndW1lbnQgZnJvbSBhcmd1bWVudHNcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5yYW5kQXJnID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50c1socmFuZG9tKCkgKiBhcmd1bWVudHMubGVuZ3RoKSB8IDAuMF07XG59O1xuXG4vKipcbiAqIEBtZXRob2QgcmFuZENob2ljZU9iamVjdFxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIHJldHVybnMgcmFuZG9tIGtleSBmcm9tIG9iamVjdFxuICogQHBhcmFtIE9iamVjdCBvYmpcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5yYW5kQ2hvaWNlT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBhcnJheSA9IGtleXMob2JqKTtcblxuICAgIHJldHVybiBhcnJheVsocmFuZG9tKCkgKiBhcnJheS5sZW5ndGgpIHwgMC4wXTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpc1Bvd2VyT2ZUd29cbiAqIEBtZW1iZXJvZiBPZGluLk1hdGhmXG4gKiBjaGVja3MgaWYgeCBpcyBhIHBvd2VyIG9mIDJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLmlzUG93ZXJPZlR3byA9IGZ1bmN0aW9uICh4KSB7XG5cbiAgICByZXR1cm4gKHggJiAteCkgPT09IHg7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZmxvb3JQb3dlck9mVHdvXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyBudW1iZXIncyBmbG9vciBwb3dlciBvZiAyXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cbk1hdGhmLnByb3RvdHlwZS5mbG9vclBvd2VyT2ZUd28gPSBmdW5jdGlvbiAoeCkge1xuICAgIHZhciBpID0gMixcbiAgICAgICAgcHJldjtcblxuICAgIHdoaWxlIChpIDwgeCkge1xuICAgICAgICBwcmV2ID0gaTtcbiAgICAgICAgaSAqPSAyO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNlaWxQb3dlck9mVHdvXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyBudW1iZXIncyBjZWlsIHBvd2VyIG9mIDJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuTWF0aGYucHJvdG90eXBlLmNlaWxQb3dlck9mVHdvID0gZnVuY3Rpb24gKHgpIHtcbiAgICB2YXIgaSA9IDI7XG5cbiAgICB3aGlsZSAoaSA8IHgpIHtcbiAgICAgICAgaSAqPSAyO1xuICAgIH1cblxuICAgIHJldHVybiBpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyBNYXRoIGNsYXNzIGJhc2VkIG9uIGpzb24gX2NsYXNzTmFtZVxuICogQHBhcmFtIE9iamVjdCBqc29uXG4gKiBAcmV0dXJuIE1BVEhfQ0xBU1NcbiAqL1xuTWF0aGYucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHJldHVybiBuZXcgdGhpcy5fY2xhc3Nlc1tqc29uLl9jbGFzc05hbWVdKCkuZnJvbUpTT04oanNvbik7XG59O1xuXG5cbi8qKlxuICogQG1ldGhvZCBkaXJlY3Rpb25BbmdsZVxuICogQG1lbWJlcm9mIE9kaW4uTWF0aGZcbiAqIHJldHVybnMgZGlyZWN0aW9uIHN0cmluZyBvZiBhbiBhbmdsZSBpbiByYWRpYW5zXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgeVxuICogQHJldHVybiBTdHJpbmdcbiAqL1xuXG52YXIgbjIyNSA9IDAuMzkyNjk5MDgxNjk4NzI0MTQsXG4gICAgbjY3NSA9IDEuMTc4MDk3MjQ1MDk2MTcyNCxcbiAgICBuMTEyNSA9IDEuOTYzNDk1NDA4NDkzNjIwNyxcbiAgICBuMTU3NSA9IDIuNzQ4ODkzNTcxODkxMDY5LFxuICAgIG4yMDI1ID0gMy41MzQyOTE3MzUyODg1MTczLFxuICAgIG4yNDc1ID0gNC4zMTk2ODk4OTg2ODU5NjYsXG4gICAgbjI5MjUgPSA1LjEwNTA4ODA2MjA4MzQxNCxcbiAgICBuMzM3NSA9IDUuODkwNDg2MjI1NDgwODYyNSxcblxuICAgIFJJR0hUID0gXCJyaWdodFwiLFxuICAgIFVQX1JJR0hUID0gXCJ1cF9yaWdodFwiLFxuICAgIFVQID0gXCJ1cFwiLFxuICAgIFVQX0xFRlQgPSBcInVwX2xlZnRcIixcbiAgICBMRUZUID0gXCJsZWZ0XCIsXG4gICAgRE9XTl9MRUZUID0gXCJkb3duX2xlZnRcIixcbiAgICBET1dOID0gXCJkb3duXCIsXG4gICAgRE9XTl9SSUdIVCA9IFwiZG93bl9yaWdodFwiO1xuXG5NYXRoZi5wcm90b3R5cGUuZGlyZWN0aW9uQW5nbGUgPSBmdW5jdGlvbiAoYSkge1xuICAgIGEgPSBzdGFuZGFyZFJhZGlhbihhKTtcblxuICAgIGlmIChhID49IG4zMzc1ICYmIGEgPCBuMjI1KSByZXR1cm4gUklHSFQ7XG4gICAgaWYgKGEgPj0gbjIyNSAmJiBhIDwgbjY3NSkgcmV0dXJuIFVQX1JJR0hUO1xuICAgIGlmIChhID49IG42NzUgJiYgYSA8IG4xMTI1KSByZXR1cm4gVVA7XG4gICAgaWYgKGEgPj0gbjExMjUgJiYgYSA8IG4xNTc1KSByZXR1cm4gVVBfTEVGVDtcbiAgICBpZiAoYSA+PSBuMTU3NSAmJiBhIDwgbjIwMjUpIHJldHVybiBMRUZUO1xuICAgIGlmIChhID49IG4yMDI1ICYmIGEgPCBuMjQ3NSkgcmV0dXJuIERPV05fTEVGVDtcbiAgICBpZiAoYSA+PSBuMjQ3NSAmJiBhIDwgbjI5MjUpIHJldHVybiBET1dOO1xuICAgIGlmIChhID49IG4yOTI1ICYmIGEgPCBuMzM3NSkgcmV0dXJuIERPV05fUklHSFQ7XG5cbiAgICByZXR1cm4gUklHSFQ7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZGlyZWN0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5NYXRoZlxuICogcmV0dXJucyBkaXJlY3Rpb24gc3RyaW5nIGZyb20gYW4geCBhbmQgYSB5IGNvb3JkaW5hdGVcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciB5XG4gKiBAcmV0dXJuIFN0cmluZ1xuICovXG5NYXRoZi5wcm90b3R5cGUuZGlyZWN0aW9uID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgYSA9IHN0YW5kYXJkUmFkaWFuKGF0YW4yKHksIHgpKTtcblxuICAgIGlmIChhID49IG4zMzc1ICYmIGEgPCBuMjI1KSByZXR1cm4gUklHSFQ7XG4gICAgaWYgKGEgPj0gbjIyNSAmJiBhIDwgbjY3NSkgcmV0dXJuIFVQX1JJR0hUO1xuICAgIGlmIChhID49IG42NzUgJiYgYSA8IG4xMTI1KSByZXR1cm4gVVA7XG4gICAgaWYgKGEgPj0gbjExMjUgJiYgYSA8IG4xNTc1KSByZXR1cm4gVVBfTEVGVDtcbiAgICBpZiAoYSA+PSBuMTU3NSAmJiBhIDwgbjIwMjUpIHJldHVybiBMRUZUO1xuICAgIGlmIChhID49IG4yMDI1ICYmIGEgPCBuMjQ3NSkgcmV0dXJuIERPV05fTEVGVDtcbiAgICBpZiAoYSA+PSBuMjQ3NSAmJiBhIDwgbjI5MjUpIHJldHVybiBET1dOO1xuICAgIGlmIChhID49IG4yOTI1ICYmIGEgPCBuMzM3NSkgcmV0dXJuIERPV05fUklHSFQ7XG5cbiAgICByZXR1cm4gUklHSFQ7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IE1hdGhmO1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4vbWF0aGZcIik7XG52YXIgVmVjMyA9IHJlcXVpcmUoXCIuL3ZlYzNcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYWJzID0gTWF0aC5hYnMsXG4gICAgc3FydCA9IE1hdGguc3FydCxcbiAgICBhY29zID0gTWF0aC5hY29zLFxuICAgIHNpbiA9IE1hdGguc2luLFxuICAgIGNvcyA9IE1hdGguY29zLFxuICAgIEVQU0lMT04gPSBNYXRoZi5FUFNJTE9OO1xuXG4vKipcbiAqIEBjbGFzcyBRdWF0XG4gKiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgeVxuICogQHBhcmFtIE51bWJlciB6XG4gKiBAcGFyYW0gTnVtYmVyIHdcbiAqL1xuZnVuY3Rpb24gUXVhdCh4LCB5LCB6LCB3KSB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHhcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gICAgICovXG4gICAgdGhpcy54ID0geCB8fCAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHlcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gICAgICovXG4gICAgdGhpcy55ID0geSB8fCAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHpcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gICAgICovXG4gICAgdGhpcy56ID0geiB8fCAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHdcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gICAgICovXG4gICAgdGhpcy53ID0gdyAhPSB1bmRlZmluZWQgPyB3IDogMS4wO1xufVxuXG5NYXRoZi5fY2xhc3Nlc1tcIlF1YXRcIl0gPSBRdWF0O1xuXG4vKipcbiAqIEBtZXRob2QgY2xvbmVcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIHJldHVybnMgbmV3IGluc3RhbmNlIG9mIHRoaXNcbiAqIEByZXR1cm4gUXVhdFxuICovXG5RdWF0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBuZXcgUXVhdCh0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIGNvcGllcyBvdGhlclxuICogQHBhcmFtIFF1YXQgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnggPSBvdGhlci54O1xuICAgIHRoaXMueSA9IG90aGVyLnk7XG4gICAgdGhpcy56ID0gb3RoZXIuejtcbiAgICB0aGlzLncgPSBvdGhlci53O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0XG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBzZXRzIHZhbHVlcyBvZiB0aGlzXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgeVxuICogQHBhcmFtIE51bWJlciB6XG4gKiBAcGFyYW0gTnVtYmVyIHdcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoeCwgeSwgeiwgdykge1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG4gICAgdGhpcy53ID0gdztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG11bFxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gUXVhdCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBheCA9IHRoaXMueCxcbiAgICAgICAgYXkgPSB0aGlzLnksXG4gICAgICAgIGF6ID0gdGhpcy56LFxuICAgICAgICBhdyA9IHRoaXMudyxcbiAgICAgICAgYnggPSBvdGhlci54LFxuICAgICAgICBieSA9IG90aGVyLnksXG4gICAgICAgIGJ6ID0gb3RoZXIueixcbiAgICAgICAgYncgPSBvdGhlci53O1xuXG4gICAgdGhpcy54ID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcbiAgICB0aGlzLnkgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xuICAgIHRoaXMueiA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gICAgdGhpcy53ID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHFtdWxcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIG11bGlwbGVzIGEgYW5kIGIgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIFF1YXQgYVxuICogQHBhcmFtIFF1YXQgYlxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLnFtdWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBheCA9IGEueCxcbiAgICAgICAgYXkgPSBhLnksXG4gICAgICAgIGF6ID0gYS56LFxuICAgICAgICBhdyA9IGEudyxcbiAgICAgICAgYnggPSBiLngsXG4gICAgICAgIGJ5ID0gYi55LFxuICAgICAgICBieiA9IGIueixcbiAgICAgICAgYncgPSBiLnc7XG5cbiAgICB0aGlzLnggPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIHRoaXMueSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gICAgdGhpcy56ID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICB0aGlzLncgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBkaXZpZGVzIHRoaXMncyB2YWx1ZXMgYnkgb3RoZXInc1xuICogQHBhcmFtIFF1YXQgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYXggPSB0aGlzLngsXG4gICAgICAgIGF5ID0gdGhpcy55LFxuICAgICAgICBheiA9IHRoaXMueixcbiAgICAgICAgYXcgPSB0aGlzLncsXG4gICAgICAgIGJ4ID0gLW90aGVyLngsXG4gICAgICAgIGJ5ID0gLW90aGVyLnksXG4gICAgICAgIGJ6ID0gLW90aGVyLnosXG4gICAgICAgIGJ3ID0gb3RoZXIudztcblxuICAgIHRoaXMueCA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gICAgdGhpcy55ID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICB0aGlzLnogPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIHRoaXMudyA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBxZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBkaXZpZGVzIGIgZnJvbSBhIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBRdWF0IGFcbiAqIEBwYXJhbSBRdWF0IGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5xZGl2ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBheiA9IGEueixcbiAgICAgICAgYXcgPSBhLncsXG4gICAgICAgIGJ4ID0gLWIueCxcbiAgICAgICAgYnkgPSAtYi55LFxuICAgICAgICBieiA9IC1iLnosXG4gICAgICAgIGJ3ID0gYi53O1xuXG4gICAgdGhpcy54ID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcbiAgICB0aGlzLnkgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xuICAgIHRoaXMueiA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gICAgdGhpcy53ID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlbmd0aFxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoaXNcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cblF1YXQucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgdyA9IHRoaXMudyxcbiAgICAgICAgbHNxID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG5cbiAgICByZXR1cm4gbHNxID4gMC4wID8gc3FydChsc3EpIDogMC4wO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlbmd0aFNxXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiByZXR1cm5zIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5RdWF0LnByb3RvdHlwZS5sZW5ndGhTcSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgdyA9IHRoaXMudztcblxuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBub3JtYWxpemVcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIHJldHVybnMgdGhpcyB3aXRoIGEgbGVuZ3RoIG9mIDFcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHcgPSB0aGlzLncsXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcblxuICAgIGwgPSBsID4gMC4wID8gMS4wIC8gc3FydChsKSA6IDAuMDtcblxuICAgIHRoaXMueCAqPSBsO1xuICAgIHRoaXMueSAqPSBsO1xuICAgIHRoaXMueiAqPSBsO1xuICAgIHRoaXMudyAqPSBsO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaW52ZXJzZVxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogcmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGlzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuUXVhdC5wcm90b3R5cGUuaW52ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgdyA9IHRoaXMudyxcbiAgICAgICAgZCA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3LFxuICAgICAgICBpbnZEID0gZCA+IDAuMCA/IDEuMCAvIGQgOiAwLjA7XG5cbiAgICB0aGlzLnggKj0gLWludkQ7XG4gICAgdGhpcy55ICo9IC1pbnZEO1xuICAgIHRoaXMueiAqPSAtaW52RDtcbiAgICB0aGlzLncgKj0gaW52RDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VRdWF0XG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiByZXR1cm5zIHRoZSBpbnZlcnNlIG9mIG90aGVyXG4gKiBAcGFyYW0gUXVhdCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLmludmVyc2VRdWF0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHggPSBvdGhlci54LFxuICAgICAgICB5ID0gb3RoZXIueSxcbiAgICAgICAgeiA9IG90aGVyLnosXG4gICAgICAgIHcgPSBvdGhlci53LFxuICAgICAgICBkID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcsXG4gICAgICAgIGludkQgPSBkID4gMC4wID8gMS4wIC8gZCA6IDAuMDtcblxuICAgIHRoaXMueCA9IC14ICogaW52RDtcbiAgICB0aGlzLnkgPSAteSAqIGludkQ7XG4gICAgdGhpcy56ID0gLXogKiBpbnZEO1xuICAgIHRoaXMudyA9IHcgKiBpbnZEO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY29uanVnYXRlXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiB0aGlzIGZhc3RlciB0aGFuIGludmVyc2UsIGlmIHF1YXQgaXMgbm9ybWFsaXplZCBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuUXVhdC5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy54ID0gLXRoaXMueDtcbiAgICB0aGlzLnkgPSAtdGhpcy55O1xuICAgIHRoaXMueiA9IC10aGlzLno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjYWxjdWxhdGVXXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBjYWxjdWxhdGVzIHcgY29tcG9uZW50IG9mIHF1YXRcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5jYWxjdWxhdGVXID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICB6ID0gdGhpcy56O1xuXG4gICAgdGhpcy53ID0gLXNxcnQoYWJzKDEgLSB4ICogeCAtIHkgKiB5IC0geiAqIHopKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlcnBcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhpcyBhbmQgb3RoZXIgYnkgeFxuICogQHBhcmFtIFF1YXQgb3RoZXJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLmxlcnAgPSBmdW5jdGlvbiAob3RoZXIsIHgpIHtcblxuICAgIHRoaXMueCArPSAob3RoZXIueCAtIHRoaXMueCkgKiB4O1xuICAgIHRoaXMueSArPSAob3RoZXIueSAtIHRoaXMueSkgKiB4O1xuICAgIHRoaXMueiArPSAob3RoZXIueiAtIHRoaXMueikgKiB4O1xuICAgIHRoaXMudyArPSAob3RoZXIudyAtIHRoaXMudykgKiB4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgcWxlcnBcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gYSBhbmQgYiBieSB4XG4gKiBAcGFyYW0gUXVhdCBhXG4gKiBAcGFyYW0gUXVhdCBiXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5xbGVycCA9IGZ1bmN0aW9uIChhLCBiLCB4KSB7XG4gICAgdmFyIGF4ID0gYS54LFxuICAgICAgICBheSA9IGEueSxcbiAgICAgICAgYXogPSBhLnosXG4gICAgICAgIGF3ID0gYS53O1xuXG4gICAgdGhpcy54ID0gYXggKyAoYi54IC0gYXgpICogeDtcbiAgICB0aGlzLnkgPSBheSArIChiLnkgLSBheSkgKiB4O1xuICAgIHRoaXMueiA9IGF6ICsgKGIueiAtIGF6KSAqIHg7XG4gICAgdGhpcy53ID0gYXcgKyAoYi53IC0gYXcpICogeDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG5sZXJwXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBmYXN0ZXIgYnV0IGxlc3MgYWNjdXJhdGUgdGhhbiBzbGVycFxuICogQHBhcmFtIFF1YXQgb3RoZXJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLm5sZXJwID0gZnVuY3Rpb24gKG90aGVyLCB4KSB7XG5cbiAgICB0aGlzLnggKz0gKG90aGVyLnggLSB0aGlzLngpICogeDtcbiAgICB0aGlzLnkgKz0gKG90aGVyLnkgLSB0aGlzLnkpICogeDtcbiAgICB0aGlzLnogKz0gKG90aGVyLnogLSB0aGlzLnopICogeDtcbiAgICB0aGlzLncgKz0gKG90aGVyLncgLSB0aGlzLncpICogeDtcblxuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHFubGVycFxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogZmFzdGVyIGJ1dCBsZXNzIGFjY3VyYXRlIHRoYW4gcXNsZXJwXG4gKiBAcGFyYW0gUXVhdCBhXG4gKiBAcGFyYW0gUXVhdCBiXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5xbmxlcnAgPSBmdW5jdGlvbiAoYSwgYiwgeCkge1xuICAgIHZhciBheCA9IGEueCxcbiAgICAgICAgYXkgPSBhLnksXG4gICAgICAgIGF6ID0gYS56LFxuICAgICAgICBhdyA9IGEudztcblxuICAgIHRoaXMueCA9IGF4ICsgKGIueCAtIGF4KSAqIHg7XG4gICAgdGhpcy55ID0gYXkgKyAoYi55IC0gYXkpICogeDtcbiAgICB0aGlzLnogPSBheiArIChiLnogLSBheikgKiB4O1xuICAgIHRoaXMudyA9IGF3ICsgKGIudyAtIGF3KSAqIHg7XG5cbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzbGVycFxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogc3BoZXJpY2FsIGxpbmVhciBJbnRlcnBvbGF0aW9uIG9mIHRoaXMgYW5kIG90aGVyIGJ5IHhcbiAqIEBwYXJhbSBRdWF0IG90aGVyXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5zbGVycCA9IGZ1bmN0aW9uIChvdGhlciwgeCkge1xuICAgIHZhciBheCA9IHRoaXMueCxcbiAgICAgICAgYXkgPSB0aGlzLnksXG4gICAgICAgIGF6ID0gdGhpcy56LFxuICAgICAgICBhdyA9IHRoaXMudyxcbiAgICAgICAgYnggPSBvdGhlci54LFxuICAgICAgICBieSA9IG90aGVyLnksXG4gICAgICAgIGJ6ID0gb3RoZXIueixcbiAgICAgICAgYncgPSBvdGhlci53LFxuXG4gICAgICAgIG9tZWdhLCBzaW5vbSwgc2NhbGUwLCBzY2FsZTEsXG4gICAgICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcblxuICAgIGlmIChjb3NvbSA8IDAuMCkge1xuICAgICAgICBjb3NvbSAqPSAtMTtcbiAgICAgICAgYnggKj0gLTE7XG4gICAgICAgIGJ5ICo9IC0xO1xuICAgICAgICBieiAqPSAtMTtcbiAgICAgICAgYncgKj0gLTE7XG4gICAgfVxuXG4gICAgaWYgKDEgLSBjb3NvbSA+IEVQU0lMT04pIHtcbiAgICAgICAgb21lZ2EgPSBhY29zKGNvc29tKTtcbiAgICAgICAgc2lub20gPSAxIC8gc2luKG9tZWdhKTtcbiAgICAgICAgc2NhbGUwID0gc2luKCgxIC0geCkgKiBvbWVnYSkgKiBzaW5vbTtcbiAgICAgICAgc2NhbGUxID0gc2luKHggKiBvbWVnYSkgKiBzaW5vbTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzY2FsZTAgPSAxIC0geDtcbiAgICAgICAgc2NhbGUxID0geDtcbiAgICB9XG5cbiAgICB0aGlzLnggPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICAgIHRoaXMueSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XG4gICAgdGhpcy56ID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgICB0aGlzLncgPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgcXNsZXJwXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBzcGhlcmljYWwgbGluZWFyIEludGVycG9sYXRpb24gYmV0d2VlbiBhIGFuZCBiIGJ5IHhcbiAqIEBwYXJhbSBRdWF0IGFcbiAqIEBwYXJhbSBRdWF0IGJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLnFzbGVycCA9IGZ1bmN0aW9uIChhLCBiLCB4KSB7XG4gICAgdmFyIGF4ID0gYS54LFxuICAgICAgICBheSA9IGEueSxcbiAgICAgICAgYXogPSBhLnosXG4gICAgICAgIGF3ID0gYS53LFxuICAgICAgICBieCA9IGIueCxcbiAgICAgICAgYnkgPSBiLnksXG4gICAgICAgIGJ6ID0gYi56LFxuICAgICAgICBidyA9IGIudyxcblxuICAgICAgICBvbWVnYSwgc2lub20sIHNjYWxlMCwgc2NhbGUxLFxuICAgICAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7XG5cbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgICAgY29zb20gKj0gLTE7XG4gICAgICAgIGJ4ICo9IC0xO1xuICAgICAgICBieSAqPSAtMTtcbiAgICAgICAgYnogKj0gLTE7XG4gICAgICAgIGJ3ICo9IC0xO1xuICAgIH1cblxuICAgIGlmICgxIC0gY29zb20gPiBFUFNJTE9OKSB7XG4gICAgICAgIG9tZWdhID0gYWNvcyhjb3NvbSk7XG4gICAgICAgIHNpbm9tID0gMSAvIHNpbihvbWVnYSk7XG4gICAgICAgIHNjYWxlMCA9IHNpbigoMSAtIHgpICogb21lZ2EpICogc2lub207XG4gICAgICAgIHNjYWxlMSA9IHNpbih4ICogb21lZ2EpICogc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2NhbGUwID0gMSAtIHg7XG4gICAgICAgIHNjYWxlMSA9IHg7XG4gICAgfVxuXG4gICAgdGhpcy54ID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICB0aGlzLnkgPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIHRoaXMueiA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgdGhpcy53ID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHFkb3RcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0cywgY2FuIGJlIGNhbGxlZCBhcyBhIHN0YXRpYyBmdW5jdGlvbiBRdWF0LnFkb3QoIGEsIGIgKVxuICogQHBhcmFtIFF1YXQgYVxuICogQHBhcmFtIFF1YXQgYlxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuUXVhdC5xZG90ID0gUXVhdC5wcm90b3R5cGUucWRvdCA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55ICsgYS56ICogYi56ICsgYS53ICogYi53O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGRvdFxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogZG90IHByb2R1Y3Qgb2YgdGhpcyBhbmQgb3RoZXJcbiAqIEBwYXJhbSBRdWF0IG90aGVyXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5RdWF0LnByb3RvdHlwZS5kb3QgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiB0aGlzLnggKiBvdGhlci54ICsgdGhpcy55ICogb3RoZXIueSArIHRoaXMueiAqIG90aGVyLnogKyB0aGlzLncgKiBvdGhlci53O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHJvdGF0aW9uWFxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogZ2V0cyBxdWF0J3MgeCByb3RhdGlvbiBhcyBhbiBldWxhciBhbmdsZVxuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLnJvdGF0aW9uWCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdyA9IHRoaXMudztcblxuICAgIHJldHVybiB0aGlzLnggLyBzcXJ0KDEgLSAodyAqIHcpKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCByb3RhdGlvbllcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIGdldHMgcXVhdCdzIHkgcm90YXRpb24gYXMgYW4gZXVsYXIgYW5nbGVcbiAqIEBwYXJhbSBOdW1iZXIgYW5nbGVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5yb3RhdGlvblkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICByZXR1cm4gdGhpcy55IC8gc3FydCgxIC0gKHcgKiB3KSk7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgcm90YXRpb25aXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBnZXRzIHF1YXQncyB6IHJvdGF0aW9uIGFzIGFuIGV1bGFyIGFuZ2xlXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuUXVhdC5wcm90b3R5cGUucm90YXRpb25aID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgcmV0dXJuIHRoaXMueiAvIHNxcnQoMSAtICh3ICogdykpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHJvdGF0ZVhcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIHNldHMgcXVhdCdzIHggcm90YXRpb25cbiAqIEBwYXJhbSBOdW1iZXIgYW5nbGVcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5yb3RhdGVYID0gZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgdmFyIGhhbGZBbmdsZSA9IGFuZ2xlICogMC41LFxuICAgICAgICB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICB6ID0gdGhpcy56LFxuICAgICAgICB3ID0gdGhpcy53LFxuICAgICAgICBzID0gc2luKGhhbGZBbmdsZSksXG4gICAgICAgIGMgPSBjb3MoaGFsZkFuZ2xlKTtcblxuICAgIHRoaXMueCA9IHggKiBjICsgdyAqIHM7XG4gICAgdGhpcy55ID0geSAqIGMgKyB6ICogcztcbiAgICB0aGlzLnogPSB6ICogYyAtIHkgKiBzO1xuICAgIHRoaXMudyA9IHcgKiBjIC0geCAqIHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCByb3RhdGVZXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBzZXRzIHF1YXQncyB5IHJvdGF0aW9uXG4gKiBAcGFyYW0gTnVtYmVyIGFuZ2xlXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuUXVhdC5wcm90b3R5cGUucm90YXRlWSA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgIHZhciBoYWxmQW5nbGUgPSBhbmdsZSAqIDAuNSxcbiAgICAgICAgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgdyA9IHRoaXMudyxcbiAgICAgICAgcyA9IHNpbihoYWxmQW5nbGUpLFxuICAgICAgICBjID0gY29zKGhhbGZBbmdsZSk7XG5cbiAgICB0aGlzLnggPSB4ICogYyAtIHogKiBzO1xuICAgIHRoaXMueSA9IHkgKiBjICsgdyAqIHM7XG4gICAgdGhpcy56ID0geiAqIGMgKyB4ICogcztcbiAgICB0aGlzLncgPSB3ICogYyAtIHkgKiBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgcm90YXRlWlxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogc2V0cyBxdWF0J3MgeiByb3RhdGlvblxuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLnJvdGF0ZVogPSBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICB2YXIgaGFsZkFuZ2xlID0gYW5nbGUgKiAwLjUsXG4gICAgICAgIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHcgPSB0aGlzLncsXG4gICAgICAgIHMgPSBzaW4oaGFsZkFuZ2xlKSxcbiAgICAgICAgYyA9IGNvcyhoYWxmQW5nbGUpO1xuXG4gICAgdGhpcy54ID0geCAqIGMgKyB5ICogcztcbiAgICB0aGlzLnkgPSB5ICogYyAtIHggKiBzO1xuICAgIHRoaXMueiA9IHogKiBjICsgdyAqIHM7XG4gICAgdGhpcy53ID0gdyAqIGMgLSB6ICogcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHJvdGF0ZVxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogcm90YXRlcyBxdWF0IGJ5IHogdGhlbiB4IHRoZW4geSBpbiB0aGF0IG9yZGVyXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEBwYXJhbSBOdW1iZXIgeVxuICogQHBhcmFtIE51bWJlciB6XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuUXVhdC5wcm90b3R5cGUucm90YXRlID0gZnVuY3Rpb24gKHgsIHksIHopIHtcblxuICAgIHRoaXMucm90YXRlWih6KTtcbiAgICB0aGlzLnJvdGF0ZVgoeCk7XG4gICAgdGhpcy5yb3RhdGVZKHkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbG9va1JvdGF0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBjcmVhdGVzIGEgcm90YXRpb24gd2l0aCB0aGUgc3BlY2lmaWVkIGZvcndhcmQgYW5kIHVwd2FyZHMgZGlyZWN0aW9uc1xuICogQHBhcmFtIFZlYzMgZm9yd2FyZFxuICogQHBhcmFtIFZlYzMgdXBcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5sb29rUm90YXRpb24gPSBmdW5jdGlvbiAoZm9yd2FyZCwgdXApIHtcbiAgICB2YXIgZnggPSBmb3J3YXJkLngsXG4gICAgICAgIGZ5ID0gZm9yd2FyZC55LFxuICAgICAgICBmeiA9IGZvcndhcmQueixcbiAgICAgICAgdXggPSB1cC54LFxuICAgICAgICB1eSA9IHVwLnksXG4gICAgICAgIHV6ID0gdXAueixcblxuICAgICAgICBheCA9IHV5ICogZnogLSB1eiAqIGZ5LFxuICAgICAgICBheSA9IHV6ICogZnggLSB1eCAqIGZ6LFxuICAgICAgICBheiA9IHV4ICogZnkgLSB1eSAqIGZ4LFxuXG4gICAgICAgIGQgPSAoMS4wICsgdXggKiBmeCArIHV5ICogZnkgKyB1eiAqIGZ6KSAqIDIuMCxcbiAgICAgICAgZHNxID0gZCAqIGQsXG4gICAgICAgIHMgPSAxLjAgLyBkc3E7XG5cbiAgICB0aGlzLnggPSBheCAqIHM7XG4gICAgdGhpcy55ID0gYXkgKiBzO1xuICAgIHRoaXMueiA9IGF6ICogcztcbiAgICB0aGlzLncgPSBkc3EgKiAwLjU7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tQXhpc0FuZ2xlXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBzZXRzIHF1YXQgZnJvbSBheGlzIGFuZCBhbmdsZVxuICogQHBhcmFtIFZlYzMgYXhpc1xuICogQHBhcmFtIE51bWJlciBhbmdsZVxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLmZyb21BeGlzQW5nbGUgPSBmdW5jdGlvbiAoYXhpcywgYW5nbGUpIHtcbiAgICB2YXIgaGFsZkFuZ2xlID0gYW5nbGUgKiAwLjUsXG4gICAgICAgIHMgPSBzaW4oaGFsZkFuZ2xlKTtcblxuICAgIHRoaXMueCA9IGF4aXMueCAqIHM7XG4gICAgdGhpcy55ID0gYXhpcy55ICogcztcbiAgICB0aGlzLnogPSBheGlzLnogKiBzO1xuICAgIHRoaXMudyA9IGNvcyhoYWxmQW5nbGUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVZlYzNzXG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBzZXRzIHF1YXQgZnJvbSB0d28gdmVjdG9yc1xuICogQHBhcmFtIFZlYzMgdVxuICogQHBhcmFtIFZlYzMgdlxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLmZyb21WZWMzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYSA9IG5ldyBWZWMzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh1LCB2KSB7XG4gICAgICAgIGEudmNyb3NzKHUsIHYpO1xuXG4gICAgICAgIHRoaXMueCA9IGEueDtcbiAgICAgICAgdGhpcy55ID0gYS55O1xuICAgICAgICB0aGlzLnogPSBhLno7XG4gICAgICAgIHRoaXMudyA9IHNxcnQodS5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpKSArIHUuZG90KHYpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgIH07XG59KCk7XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tTWF0M1xuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogc2V0cyB2YWx1ZXMgZnJvbSBNYXQzXG4gKiBAcGFyYW0gTWF0MyBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuUXVhdC5wcm90b3R5cGUuZnJvbU1hdDMgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciB0ZSA9IG0uZWxlbWVudHMsXG4gICAgICAgIG0xMSA9IHRlWzBdLFxuICAgICAgICBtMTIgPSB0ZVszXSxcbiAgICAgICAgbTEzID0gdGVbNl0sXG4gICAgICAgIG0yMSA9IHRlWzFdLFxuICAgICAgICBtMjIgPSB0ZVs0XSxcbiAgICAgICAgbTIzID0gdGVbN10sXG4gICAgICAgIG0zMSA9IHRlWzJdLFxuICAgICAgICBtMzIgPSB0ZVs1XSxcbiAgICAgICAgbTMzID0gdGVbOF0sXG4gICAgICAgIHRyYWNlID0gbTExICsgbTIyICsgbTMzLFxuICAgICAgICBzLCBpbnZTO1xuXG4gICAgaWYgKHRyYWNlID4gMC4wKSB7XG4gICAgICAgIHMgPSAwLjUgLyBzcXJ0KHRyYWNlICsgMS4wKTtcblxuICAgICAgICB0aGlzLncgPSAwLjI1IC8gcztcbiAgICAgICAgdGhpcy54ID0gKG0zMiAtIG0yMykgKiBzO1xuICAgICAgICB0aGlzLnkgPSAobTEzIC0gbTMxKSAqIHM7XG4gICAgICAgIHRoaXMueiA9IChtMjEgLSBtMTIpICogcztcbiAgICB9IGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcbiAgICAgICAgaW52UyA9IDEuMCAvIHM7XG5cbiAgICAgICAgdGhpcy53ID0gKG0zMiAtIG0yMykgKiBpbnZTO1xuICAgICAgICB0aGlzLnggPSAwLjI1ICogcztcbiAgICAgICAgdGhpcy55ID0gKG0xMiArIG0yMSkgKiBpbnZTO1xuICAgICAgICB0aGlzLnogPSAobTEzICsgbTMxKSAqIGludlM7XG4gICAgfSBlbHNlIGlmIChtMjIgPiBtMzMpIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTIyIC0gbTExIC0gbTMzKTtcbiAgICAgICAgaW52UyA9IDEuMCAvIHM7XG5cbiAgICAgICAgdGhpcy53ID0gKG0xMyAtIG0zMSkgKiBpbnZTO1xuICAgICAgICB0aGlzLnggPSAobTEyICsgbTIxKSAqIGludlM7XG4gICAgICAgIHRoaXMueSA9IDAuMjUgKiBzO1xuICAgICAgICB0aGlzLnogPSAobTIzICsgbTMyKSAqIGludlM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKTtcbiAgICAgICAgaW52UyA9IDEuMCAvIHM7XG5cbiAgICAgICAgdGhpcy53ID0gKG0yMSAtIG0xMikgKiBpbnZTO1xuICAgICAgICB0aGlzLnggPSAobTEzICsgbTMxKSAqIGludlM7XG4gICAgICAgIHRoaXMueSA9IChtMjMgKyBtMzIpICogaW52UztcbiAgICAgICAgdGhpcy56ID0gMC4yNSAqIHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbU1hdDRcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIHNldHMgdmFsdWVzIGZyb20gTWF0NFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLmZyb21NYXQ0ID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgdGUgPSBtLmVsZW1lbnRzLFxuICAgICAgICBtMTEgPSB0ZVswXSxcbiAgICAgICAgbTEyID0gdGVbNF0sXG4gICAgICAgIG0xMyA9IHRlWzhdLFxuICAgICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgICAgbTIyID0gdGVbNV0sXG4gICAgICAgIG0yMyA9IHRlWzldLFxuICAgICAgICBtMzEgPSB0ZVsyXSxcbiAgICAgICAgbTMyID0gdGVbNl0sXG4gICAgICAgIG0zMyA9IHRlWzEwXSxcbiAgICAgICAgdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzMsXG4gICAgICAgIHMsIGludlM7XG5cbiAgICBpZiAodHJhY2UgPiAwLjApIHtcbiAgICAgICAgcyA9IDAuNSAvIHNxcnQodHJhY2UgKyAxKTtcblxuICAgICAgICB0aGlzLncgPSAwLjI1IC8gcztcbiAgICAgICAgdGhpcy54ID0gKG0zMiAtIG0yMykgKiBzO1xuICAgICAgICB0aGlzLnkgPSAobTEzIC0gbTMxKSAqIHM7XG4gICAgICAgIHRoaXMueiA9IChtMjEgLSBtMTIpICogcztcbiAgICB9IGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcbiAgICAgICAgaW52UyA9IDEuMCAvIHM7XG5cbiAgICAgICAgdGhpcy53ID0gKG0zMiAtIG0yMykgKiBpbnZTO1xuICAgICAgICB0aGlzLnggPSAwLjI1ICogcztcbiAgICAgICAgdGhpcy55ID0gKG0xMiArIG0yMSkgKiBpbnZTO1xuICAgICAgICB0aGlzLnogPSAobTEzICsgbTMxKSAqIGludlM7XG4gICAgfSBlbHNlIGlmIChtMjIgPiBtMzMpIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTIyIC0gbTExIC0gbTMzKTtcbiAgICAgICAgaW52UyA9IDEuMCAvIHM7XG5cbiAgICAgICAgdGhpcy53ID0gKG0xMyAtIG0zMSkgKiBpbnZTO1xuICAgICAgICB0aGlzLnggPSAobTEyICsgbTIxKSAqIGludlM7XG4gICAgICAgIHRoaXMueSA9IDAuMjUgKiBzO1xuICAgICAgICB0aGlzLnogPSAobTIzICsgbTMyKSAqIGludlM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IDIuMCAqIHNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKTtcbiAgICAgICAgaW52UyA9IDEuMCAvIHM7XG5cbiAgICAgICAgdGhpcy53ID0gKG0yMSAtIG0xMikgKiBpbnZTO1xuICAgICAgICB0aGlzLnggPSAobTEzICsgbTMxKSAqIGludlM7XG4gICAgICAgIHRoaXMueSA9IChtMjMgKyBtMzIpICogaW52UztcbiAgICAgICAgdGhpcy56ID0gMC4yNSAqIHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUFycmF5XG4gKiBAbWVtYmVyb2YgT2Rpbi5RdWF0XG4gKiBzZXRzIHZhbHVlcyBmcm9tIGFycmF5XG4gKiBAcGFyYW0gQXJyYXkgYXJyYXlcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5mcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcblxuICAgIHRoaXMueCA9IGFycmF5WzBdO1xuICAgIHRoaXMueSA9IGFycmF5WzFdO1xuICAgIHRoaXMueiA9IGFycmF5WzJdO1xuICAgIHRoaXMudyA9IGFycmF5WzNdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIEBwYXJhbSBPZGluLlF1YXQgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5RdWF0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiAhKFxuICAgIHRoaXMueCAhPT0gb3RoZXIueCB8fFxuICAgIHRoaXMueSAhPT0gb3RoZXIueSB8fFxuICAgIHRoaXMueiAhPT0gb3RoZXIueiB8fFxuICAgIHRoaXMudyAhPT0gb3RoZXIud1xuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUpTT05cbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIHNldHMgdmFsdWVzIGZyb20gSlNPTiBvYmplY3RcbiAqIEBwYXJhbSBPYmplY3QganNvblxuICogQHJldHVybiB0aGlzXG4gKi9cblF1YXQucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMueCA9IGpzb24ueDtcbiAgICB0aGlzLnkgPSBqc29uLnk7XG4gICAgdGhpcy56ID0ganNvbi56O1xuICAgIHRoaXMudyA9IGpzb24udztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBPZGluLlF1YXRcbiAqIHJldHVybnMgYXJyYXkgb2YgdGhpc1xuICogQHJldHVybiBPYmplY3RcbiAqL1xuUXVhdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIGFycmF5IHx8IChhcnJheSA9IFtdKTtcblxuICAgIGFycmF5WzBdID0gdGhpcy54O1xuICAgIGFycmF5WzFdID0gdGhpcy55O1xuICAgIGFycmF5WzJdID0gdGhpcy56O1xuICAgIGFycmF5WzNdID0gdGhpcy53O1xuXG4gICAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvSlNPTlxuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogcmV0dXJucyBqc29uIG9iamVjdCBvZiB0aGlzXG4gKiBAcmV0dXJuIE9iamVjdFxuICovXG5RdWF0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLl9jbGFzc05hbWUgPSBcIlF1YXRcIjtcbiAgICBqc29uLnggPSB0aGlzLng7XG4gICAganNvbi55ID0gdGhpcy55O1xuICAgIGpzb24ueiA9IHRoaXMuejtcbiAgICBqc29uLncgPSB0aGlzLnc7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b1N0cmluZ1xuICogQG1lbWJlcm9mIE9kaW4uUXVhdFxuICogcmV0dXJucyBzdHJpbmcgb2YgdGhpc1xuICogQHJldHVybiBTdHJpbmdcbiAqL1xuUXVhdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gXCJRdWF0KCBcIiArIHRoaXMueCArIFwiLCBcIiArIHRoaXMueSArIFwiLCBcIiArIHRoaXMueiArIFwiLCBcIiArIHRoaXMudyArIFwiIClcIjtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBRdWF0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5cbmZ1bmN0aW9uIFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuXG4gICAgdGhpcy5feCA9IHggfHwgMC4wO1xuICAgIHRoaXMuX3kgPSB5IHx8IDAuMDtcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoIHx8IDAuMDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQgfHwgMC4wO1xuXG4gICAgdGhpcy5feE1pbiA9IHRoaXMuX3g7XG4gICAgdGhpcy5feE1heCA9IHRoaXMuX3ggKyB0aGlzLl93aWR0aDtcbiAgICB0aGlzLl95TWluID0gdGhpcy5feTtcbiAgICB0aGlzLl95TWF4ID0gdGhpcy5feSArIHRoaXMuX2hlaWdodDtcbn1cblxuZGVmaW5lUHJvcGVydHkoUmVjdC5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5feCA9IHZhbHVlO1xuICAgICAgICB0aGlzLl94TWluID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3hNYXggPSB2YWx1ZSArIHRoaXMuX3dpZHRoO1xuICAgIH1cbn0pO1xuZGVmaW5lUHJvcGVydHkoUmVjdC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5feSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl95TWluID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3lNYXggPSB2YWx1ZSArIHRoaXMuX2hlaWdodDtcbiAgICB9XG59KTtcbmRlZmluZVByb3BlcnR5KFJlY3QucHJvdG90eXBlLCBcIndpZHRoXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5feE1heCA9IHRoaXMuX3hNaW4gKyB2YWx1ZTtcbiAgICB9XG59KTtcbmRlZmluZVByb3BlcnR5KFJlY3QucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5feU1heCA9IHRoaXMuX3lNaW4gKyB2YWx1ZTtcbiAgICB9XG59KTtcbmRlZmluZVByb3BlcnR5KFJlY3QucHJvdG90eXBlLCBcInhNaW5cIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5feE1pbjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3hNaW4gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5feCA9IHZhbHVlO1xuICAgICAgICB0aGlzLl93aWR0aCA9IHRoaXMuX3hNYXggLSB0aGlzLl94TWluO1xuICAgICAgICB0aGlzLl94TWF4ID0gdmFsdWUgKyB0aGlzLl93aWR0aDtcbiAgICB9XG59KTtcbmRlZmluZVByb3BlcnR5KFJlY3QucHJvdG90eXBlLCBcInhNYXhcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5feE1heDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3hNYXggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB2YWx1ZSAtIHRoaXMuX3hNaW47XG4gICAgfVxufSk7XG5kZWZpbmVQcm9wZXJ0eShSZWN0LnByb3RvdHlwZSwgXCJ5TWluXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3lNaW47XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl95TWluID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3kgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdGhpcy5feU1heCAtIHRoaXMuX3lNaW47XG4gICAgICAgIHRoaXMuX3lNYXggPSB2YWx1ZSArIHRoaXMuX2hlaWdodDtcbiAgICB9XG59KTtcbmRlZmluZVByb3BlcnR5KFJlY3QucHJvdG90eXBlLCBcInlNYXhcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5feU1heDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3lNYXggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdmFsdWUgLSB0aGlzLl95TWluO1xuICAgIH1cbn0pO1xuZGVmaW5lUHJvcGVydHkoUmVjdC5wcm90b3R5cGUsIFwielwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHZhbHVlO1xuICAgIH1cbn0pO1xuZGVmaW5lUHJvcGVydHkoUmVjdC5wcm90b3R5cGUsIFwid1wiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlaWdodDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdmFsdWU7XG4gICAgfVxufSk7XG5cblxuUmVjdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gbmV3IFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cblxuUmVjdC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy5feCA9IG90aGVyLl94O1xuICAgIHRoaXMuX3kgPSBvdGhlci5feTtcbiAgICB0aGlzLl93aWR0aCA9IG90aGVyLl93aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBvdGhlci5faGVpZ2h0O1xuXG4gICAgdGhpcy5feE1pbiA9IG90aGVyLl94TWluO1xuICAgIHRoaXMuX3hNYXggPSBvdGhlci5feE1heDtcbiAgICB0aGlzLl95TWluID0gb3RoZXIuX3lNaW47XG4gICAgdGhpcy5feU1heCA9IG90aGVyLl95TWF4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblJlY3QucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblJlY3QucHJvdG90eXBlLmNlbnRlciA9IGZ1bmN0aW9uICh2KSB7XG5cbiAgICB2LnggPSB0aGlzLl94ICsgdGhpcy5fd2lkdGggKiAwLjU7XG4gICAgdi55ID0gdGhpcy5feSArIHRoaXMuX2hlaWdodCAqIDAuNTtcblxuICAgIHJldHVybiB2O1xufTtcblxuXG5SZWN0LnByb3RvdHlwZS5pbnRlcnNlY3RzID0gZnVuY3Rpb24gKHJlY3QpIHtcblxuICAgIHJldHVybiAhKFxuICAgIHJlY3QuX3hNYXggPCB0aGlzLl94TWluIHx8IHJlY3QuX3hNaW4gPiB0aGlzLl94TWF4IHx8XG4gICAgcmVjdC5feU1heCA8IHRoaXMuX3lNaW4gfHwgcmVjdC5feU1pbiA+IHRoaXMuX3lNYXhcbiAgICApO1xufTtcblxuXG5SZWN0LnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIHZhciB4ID0gcG9pbnQueCxcbiAgICAgICAgeSA9IHBvaW50Lnk7XG5cbiAgICByZXR1cm4gIShcbiAgICB4IDwgdGhpcy5feE1pbiB8fCB4ID4gdGhpcy5feE1heCB8fFxuICAgIHkgPCB0aGlzLl95TWluIHx8IHkgPiB0aGlzLl95TWF4XG4gICAgKTtcbn07XG5cblxuUmVjdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAganNvbi54ID0gdGhpcy5feDtcbiAgICBqc29uLnkgPSB0aGlzLl95O1xuICAgIGpzb24ud2lkdGggPSB0aGlzLl93aWR0aDtcbiAgICBqc29uLmhlaWdodCA9IHRoaXMuX2hlaWdodDtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5SZWN0LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICB0aGlzLnggPSBqc29uLng7XG4gICAgdGhpcy55ID0ganNvbi55O1xuICAgIHRoaXMud2lkdGggPSBqc29uLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0ganNvbi5oZWlnaHQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUmVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gXCJSZWN0KCBcIiArIHRoaXMuX3ggKyBcIiwgXCIgKyB0aGlzLl95ICsgXCIsIFwiICsgdGhpcy5fd2lkdGggKyBcIiwgXCIgKyB0aGlzLl9oZWlnaHQgKyBcIiApXCI7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUmVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuXG5mdW5jdGlvbiBSZWN0T2Zmc2V0KGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSkge1xuXG4gICAgdGhpcy5sZWZ0ID0gbGVmdCB8fCAwLjA7XG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0IHx8IDAuMDtcbiAgICB0aGlzLnRvcCA9IHRvcCB8fCAwLjA7XG4gICAgdGhpcy5ib3R0b20gPSBib3R0b20gfHwgMC4wO1xufVxuXG5cbmRlZmluZVByb3BlcnR5KFJlY3RPZmZzZXQucHJvdG90eXBlLCBcImhvcml6b250YWxcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQgKyB0aGlzLnJpZ2h0O1xuICAgIH1cbn0pO1xuXG5cbmRlZmluZVByb3BlcnR5KFJlY3RPZmZzZXQucHJvdG90eXBlLCBcInZlcnRpY2FsXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy50b3AgKyB0aGlzLmJvdHRvbTtcbiAgICB9XG59KTtcblxuXG5SZWN0T2Zmc2V0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBuZXcgUmVjdE9mZnNldCh0aGlzLmxlZnQsIHRoaXMucmlnaHQsIHRoaXMudG9wLCB0aGlzLmJvdHRvbSk7XG59O1xuXG5cblJlY3RPZmZzZXQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMubGVmdCA9IG90aGVyLmxlZnQ7XG4gICAgdGhpcy5yaWdodCA9IG90aGVyLnJpZ2h0O1xuICAgIHRoaXMudG9wID0gb3RoZXIudG9wO1xuICAgIHRoaXMuYm90dG9tID0gb3RoZXIuYm90dG9tO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblJlY3RPZmZzZXQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCwgdG9wLCBib3R0b20pIHtcblxuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMudG9wID0gdG9wO1xuICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblJlY3RPZmZzZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChyZWN0KSB7XG5cbiAgICByZWN0LnhNaW4gLT0gdGhpcy5sZWZ0O1xuICAgIHJlY3QueE1heCArPSB0aGlzLnJpZ2h0O1xuICAgIHJlY3QueU1pbiAtPSB0aGlzLnRvcDtcbiAgICByZWN0LnlNYXggKz0gdGhpcy5ib3R0b207XG5cbiAgICByZXR1cm4gcmVjdDtcbn07XG5cblxuUmVjdE9mZnNldC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gKHJlY3QpIHtcblxuICAgIHJlY3QueE1pbiArPSB0aGlzLmxlZnQ7XG4gICAgcmVjdC54TWF4IC09IHRoaXMucmlnaHQ7XG4gICAgcmVjdC55TWluICs9IHRoaXMudG9wO1xuICAgIHJlY3QueU1heCAtPSB0aGlzLmJvdHRvbTtcblxuICAgIHJldHVybiByZWN0O1xufTtcblxuXG5SZWN0T2Zmc2V0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLmxlZnQgPSB0aGlzLmxlZnQ7XG4gICAganNvbi5yaWdodCA9IHRoaXMucmlnaHQ7XG4gICAganNvbi50b3AgPSB0aGlzLnRvcDtcbiAgICBqc29uLmJvdHRvbSA9IHRoaXMuYm90dG9tO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblJlY3RPZmZzZXQucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMubGVmdCA9IGpzb24ubGVmdDtcbiAgICB0aGlzLnJpZ2h0ID0ganNvbi5yaWdodDtcbiAgICB0aGlzLnRvcCA9IGpzb24udG9wO1xuICAgIHRoaXMuYm90dG9tID0ganNvbi5ib3R0b207XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUmVjdE9mZnNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gXCJSZWN0T2Zmc2V0KCBcIiArIHRoaXMubGVmdCArIFwiLCBcIiArIHRoaXMucmlnaHQgKyBcIiwgXCIgKyB0aGlzLnRvcCArIFwiLCBcIiArIHRoaXMuYm90dG9tICsgXCIgKVwiO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY3RPZmZzZXQ7XG4iLCJ2YXIgTWF0aGYgPSByZXF1aXJlKFwiLi9tYXRoZlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vKipcbiAqIEBjbGFzcyBWZWMyXG4gKiAyZCB2ZWN0b3JcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciB5XG4gKi9cbmZ1bmN0aW9uIFZlYzIoeCwgeSkge1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciB4XG4gICAgICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICAgICAqL1xuICAgIHRoaXMueCA9IHggfHwgMC4wO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciB5XG4gICAgICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICAgICAqL1xuICAgIHRoaXMueSA9IHkgfHwgMC4wO1xufVxuXG5NYXRoZi5fY2xhc3Nlc1tcIlZlYzJcIl0gPSBWZWMyO1xuXG4vKipcbiAqIEBtZXRob2QgY2xvbmVcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgbmV3IGluc3RhbmNlIG9mIHRoaXNcbiAqIEByZXR1cm4gVmVjMlxuICovXG5WZWMyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBuZXcgVmVjMih0aGlzLngsIHRoaXMueSk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY29weVxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogY29waWVzIG90aGVyXG4gKiBAcGFyYW0gVmVjMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMueCA9IG90aGVyLng7XG4gICAgdGhpcy55ID0gb3RoZXIueTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc2V0cyB2YWx1ZXMgb2YgdGhpc1xuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIHlcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoeCwgeSkge1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgYWRkXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBhZGRzIG90aGVyJ3MgdmFsdWVzIHRvIHRoaXNcbiAqIEBwYXJhbSBWZWMyIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnggKz0gb3RoZXIueDtcbiAgICB0aGlzLnkgKz0gb3RoZXIueTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHZhZGRcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIGFkZHMgYSBhbmQgYiB0b2dldGhlciBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gVmVjMiBhXG4gKiBAcGFyYW0gVmVjMiBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUudmFkZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICB0aGlzLnggPSBhLnggKyBiLng7XG4gICAgdGhpcy55ID0gYS55ICsgYi55O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2FkZFxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogYWRkcyBzY2FsYXIgdmFsdWUgdG8gdGhpc1xuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuc2FkZCA9IGZ1bmN0aW9uIChzKSB7XG5cbiAgICB0aGlzLnggKz0gcztcbiAgICB0aGlzLnkgKz0gcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHN1YlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc3VidHJhY3RzIG90aGVyJ3MgdmFsdWVzIGZyb20gdGhpc1xuICogQHBhcmFtIFZlYzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMueCAtPSBvdGhlci54O1xuICAgIHRoaXMueSAtPSBvdGhlci55O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdnN1YlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc3VidHJhY3RzIGIgZnJvbSBhIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBWZWMyIGFcbiAqIEBwYXJhbSBWZWMyIGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS52c3ViID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHRoaXMueCA9IGEueCAtIGIueDtcbiAgICB0aGlzLnkgPSBhLnkgLSBiLnk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzc3ViXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBzdWJ0cmFjdHMgdGhpcyBieSBhIHNjYWxhciB2YWx1ZVxuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuc3N1YiA9IGZ1bmN0aW9uIChzKSB7XG5cbiAgICB0aGlzLnggLT0gcztcbiAgICB0aGlzLnkgLT0gcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG11bFxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gVmVjMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54ICo9IG90aGVyLng7XG4gICAgdGhpcy55ICo9IG90aGVyLnk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2bXVsXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBtdWxpcGxlcyBhIGFuZCBiIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBWZWMyIGFcbiAqIEBwYXJhbSBWZWMyIGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS52bXVsID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHRoaXMueCA9IGEueCAqIGIueDtcbiAgICB0aGlzLnkgPSBhLnkgKiBiLnk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzbXVsXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBtdWxpcGxlcyB0aGlzIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5zbXVsID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMueCAqPSBzO1xuICAgIHRoaXMueSAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZGl2XG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBkaXZpZGVzIHRoaXMncyB2YWx1ZXMgYnkgb3RoZXInc1xuICogQHBhcmFtIFZlYzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgeCA9IG90aGVyLngsXG4gICAgICAgIHkgPSBvdGhlci55O1xuXG4gICAgdGhpcy54ICo9IHggIT09IDAuMCA/IDEuMCAvIHggOiAwLjA7XG4gICAgdGhpcy55ICo9IHkgIT09IDAuMCA/IDEuMCAvIHkgOiAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2ZGl2XG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBkaXZpZGVzIGIgZnJvbSBhIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBWZWMyIGFcbiAqIEBwYXJhbSBWZWMyIGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS52ZGl2ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgeCA9IGIueCxcbiAgICAgICAgeSA9IGIueTtcblxuICAgIHRoaXMueCA9IHggIT09IDAuMCA/IGEueCAvIHggOiAwLjA7XG4gICAgdGhpcy55ID0geSAhPT0gMC4wID8gYS55IC8geSA6IDAuMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNkaXZcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIGRpdmlkZXMgdGhpcyBieSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnNkaXYgPSBmdW5jdGlvbiAocykge1xuICAgIHMgPSBzID09PSAwLjAgPyAwLjAgOiAxLjAgLyBzO1xuXG4gICAgdGhpcy54ICo9IHM7XG4gICAgdGhpcy55ICo9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZW5ndGhcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGlzXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWMyLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIGxzcSA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICBpZiAobHNxID09PSAxKSByZXR1cm4gMTtcblxuICAgIHJldHVybiBsc3EgPiAwLjAgPyBzcXJ0KGxzcSkgOiAwLjA7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbGVuZ3RoU3FcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoaXNcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cblZlYzIucHJvdG90eXBlLmxlbmd0aFNxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55O1xuXG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0TGVuZ3RoXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBzZXRzIHRoaXMgc28gaXRzIG1hZ25pdHVkZSBpcyBlcXVhbCB0byBsZW5ndGhcbiAqIEBwYXJhbSBOdW1iZXIgbGVuZ3RoXG4gKiBAcmV0dXJuIFZlYzJcbiAqL1xuVmVjMi5wcm90b3R5cGUuc2V0TGVuZ3RoID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgIHZhciB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIGlmIChsID09PSAxKSB7XG4gICAgICAgIHRoaXMueCAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueSAqPSBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbCA9IGwgPiAwLjAgPyAxLjAgLyBzcXJ0KGwpIDogMC4wO1xuXG4gICAgdGhpcy54ICo9IGwgKiBsZW5ndGg7XG4gICAgdGhpcy55ICo9IGwgKiBsZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBub3JtYWxpemVcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgdGhpcyB3aXRoIGEgbGVuZ3RoIG9mIDFcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuXG4gICAgaWYgKGwgPT09IDEpIHJldHVybiB0aGlzO1xuXG4gICAgbCA9IGwgPiAwLjAgPyAxLjAgLyBzcXJ0KGwpIDogMC4wO1xuXG4gICAgdGhpcy54ICo9IGw7XG4gICAgdGhpcy55ICo9IGw7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBvcnRob05vcm1hbGl6ZVxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogcmV0dXJucyBtYWtlcyB2ZWN0b3JzIG5vcm1hbGl6ZWQgYW5kIG9ydGhvZ29uYWwgdG8gZWFjaCBvdGhlclxuICogQHBhcmFtIFZlYzIgYVxuICogQHBhcmFtIFZlYzIgYlxuICogQHBhcmFtIFZlYzIgY1xuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLm9ydGhvTm9ybWFsaXplID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICBpZiAoYS5sZW5ndGhTcSgpICE9PSAxLjApIGEubm9ybWFsaXplKCk7XG4gICAgYy52Y3Jvc3MoYSwgYik7XG4gICAgaWYgKGEubGVuZ3RoU3EoKSA9PT0gMC4wKSByZXR1cm47XG4gICAgYy5ub3JtYWxpemUoKTtcbiAgICBiLnZjcm9zcyhjLCBhKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnZlcnNlXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiByZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoaXNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy54ICo9IC0xO1xuICAgIHRoaXMueSAqPSAtMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VWZWNcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2Ygb3RoZXJcbiAqIEBwYXJhbSBWZWMyIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuaW52ZXJzZVZlYyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54ID0gLW90aGVyLng7XG4gICAgdGhpcy55ID0gLW90aGVyLnk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZXJwXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoaXMgYW5kIG90aGVyIGJ5IHhcbiAqIEBwYXJhbSBWZWMyIG90aGVyXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gVmVjMlxuICovXG5WZWMyLnByb3RvdHlwZS5sZXJwID0gZnVuY3Rpb24gKG90aGVyLCB4KSB7XG5cbiAgICB0aGlzLnggKz0gKG90aGVyLnggLSB0aGlzLngpICogeDtcbiAgICB0aGlzLnkgKz0gKG90aGVyLnkgLSB0aGlzLnkpICogeDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHZsZXJwXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIGEgYW5kIGIgYnkgeFxuICogQHBhcmFtIFZlYzIgYVxuICogQHBhcmFtIFZlYzIgYlxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIFZlYzJcbiAqL1xuVmVjMi5wcm90b3R5cGUudmxlcnAgPSBmdW5jdGlvbiAoYSwgYiwgeCkge1xuICAgIHZhciBheCA9IGEueCxcbiAgICAgICAgYXkgPSBhLnk7XG5cbiAgICB0aGlzLnggPSBheCArIChiLnggLSBheCkgKiB4O1xuICAgIHRoaXMueSA9IGF5ICsgKGIueSAtIGF5KSAqIHg7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2ZG90XG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBkb3QgcHJvZHVjdCBvZiB0d28gdmVjdG9ycywgY2FuIGJlIGNhbGxlZCBhcyBhIHN0YXRpYyBmdW5jdGlvbiBWZWMyLnZkb3QoIGEsIGIgKVxuICogQHBhcmFtIFZlYzIgYVxuICogQHBhcmFtIFZlYzIgYlxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuVmVjMi52ZG90ID0gVmVjMi5wcm90b3R5cGUudmRvdCA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGRvdFxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogZG90IHByb2R1Y3Qgb2YgdGhpcyBhbmQgb3RoZXIgdmVjdG9yXG4gKiBAcGFyYW0gVmVjMiBvdGhlclxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuVmVjMi5wcm90b3R5cGUuZG90ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICByZXR1cm4gdGhpcy54ICogb3RoZXIueCArIHRoaXMueSAqIG90aGVyLnk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdmNyb3NzXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBjcm9zcyBwcm9kdWN0IGJldHdlZW4gYSB2ZWN0b3IgYW5kIGIgdmVjdG9yLCBjYW4gYmUgY2FsbGVkIGFzIGEgc3RhdGljIGZ1bmN0aW9uIFZlYzIudmNyb3NzKCBhLCBiIClcbiAqIEBwYXJhbSBWZWMyIGFcbiAqIEBwYXJhbSBWZWMyIGJcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cblZlYzIudmNyb3NzID0gVmVjMi5wcm90b3R5cGUudmNyb3NzID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHJldHVybiBhLnggKiBiLnkgLSBhLnkgKiBiLng7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY3Jvc3NcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIGNyb3NzIHByb2R1Y3QgYmV0d2VlbiB0aGlzIHZlY3RvciBhbmQgb3RoZXJcbiAqIEBwYXJhbSBWZWMyIG90aGVyXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWMyLnByb3RvdHlwZS5jcm9zcyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuIHRoaXMueCAqIG90aGVyLnkgLSB0aGlzLnkgKiBvdGhlci54O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHBlcnBcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIEBwYXJhbSBWZWMyIG90aGVyXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWMyLnByb3RvdHlwZS5wZXJwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55O1xuXG4gICAgdGhpcy54ID0gLXk7XG4gICAgdGhpcy55ID0geDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1pblxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogcmV0dXJucyBtaW4gdmFsdWVzIGZyb20gdGhpcyBhbmQgb3RoZXIgdmVjdG9yXG4gKiBAcGFyYW0gVmVjMiBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBheCA9IHRoaXMueCxcbiAgICAgICAgYXkgPSB0aGlzLnksXG4gICAgICAgIGJ4ID0gb3RoZXIueCxcbiAgICAgICAgYnkgPSBvdGhlci55O1xuXG4gICAgdGhpcy54ID0gYnggPCBheCA/IGJ4IDogYXg7XG4gICAgdGhpcy55ID0gYnkgPCBheSA/IGJ5IDogYXk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBtYXhcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgbWF4IHZhbHVlcyBmcm9tIHRoaXMgYW5kIG90aGVyIHZlY3RvclxuICogQHBhcmFtIFZlYzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYXggPSB0aGlzLngsXG4gICAgICAgIGF5ID0gdGhpcy55LFxuICAgICAgICBieCA9IG90aGVyLngsXG4gICAgICAgIGJ5ID0gb3RoZXIueTtcblxuICAgIHRoaXMueCA9IGJ4ID4gYXggPyBieCA6IGF4O1xuICAgIHRoaXMueSA9IGJ5ID4gYXkgPyBieSA6IGF5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY2xhbXBcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIGNsYW1wIHZhbHVlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4J3MgdmFsdWVzXG4gKiBAcGFyYW0gVmVjMiBtaW5cbiAqIEBwYXJhbSBWZWMyIG1heFxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLmNsYW1wID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIG1pbnggPSBtaW4ueCxcbiAgICAgICAgbWlueSA9IG1pbi55LFxuICAgICAgICBtYXh4ID0gbWF4LngsXG4gICAgICAgIG1heHkgPSBtYXgueTtcblxuICAgIHRoaXMueCA9IHggPCBtaW54ID8gbWlueCA6IHggPiBtYXh4ID8gbWF4eCA6IHg7XG4gICAgdGhpcy55ID0geSA8IG1pbnkgPyBtaW55IDogeSA+IG1heHkgPyBtYXh5IDogeTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zZm9ybUFuZ2xlXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiB0cmFuc2Zvcm1zIHRoaXMgd2l0aCBhbmdsZVxuICogQHBhcmFtIE1hdDIgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnRyYW5zZm9ybUFuZ2xlID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgYyA9IGNvcyhhKSxcbiAgICAgICAgcyA9IHNpbihhKTtcblxuICAgIHRoaXMueCA9IHggKiBjIC0geSAqIHM7XG4gICAgdGhpcy55ID0geCAqIHMgKyB5ICogYztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU1hdDJcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHRyYW5zZm9ybXMgdGhpcyB3aXRoIE1hdDJcbiAqIEBwYXJhbSBNYXQyIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS50cmFuc2Zvcm1NYXQyID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzLFxuICAgICAgICB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55O1xuXG4gICAgdGhpcy54ID0geCAqIG1lWzBdICsgeSAqIG1lWzJdO1xuICAgIHRoaXMueSA9IHggKiBtZVsxXSArIHkgKiBtZVszXTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHVudHJhbnNmb3JtTWF0MlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogdW50cmFuc2Zvcm1zIHRoaXMgd2l0aCBNYXQyXG4gKiBAcGFyYW0gTWF0MiBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUudW50cmFuc2Zvcm1NYXQyID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzLFxuICAgICAgICB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55O1xuXG4gICAgdGhpcy54ID0geCAqIG1lWzBdICsgeSAqIG1lWzFdO1xuICAgIHRoaXMueSA9IHggKiBtZVsyXSArIHkgKiBtZVszXTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU1hdDMyXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiB0cmFuc2Zvcm1zIHRoaXMgd2l0aCBNYXQzMlxuICogQHBhcmFtIE1hdDMyIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS50cmFuc2Zvcm1NYXQzMiA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIG1lID0gbS5lbGVtZW50cyxcbiAgICAgICAgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueTtcblxuICAgIHRoaXMueCA9IHggKiBtZVswXSArIHkgKiBtZVsyXSArIG1lWzRdO1xuICAgIHRoaXMueSA9IHggKiBtZVsxXSArIHkgKiBtZVszXSArIG1lWzVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdW50cmFuc2Zvcm1NYXQzMlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogdW50cmFuc2Zvcm1zIHRoaXMgd2l0aCBNYXQzMlxuICogQHBhcmFtIE1hdDMyIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS51bnRyYW5zZm9ybU1hdDMyID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzLFxuICAgICAgICB4ID0gdGhpcy54IC0gbWVbNF0sXG4gICAgICAgIHkgPSB0aGlzLnkgLSBtZVs1XTtcblxuICAgIHRoaXMueCA9IHggKiBtZVswXSArIHkgKiBtZVsxXTtcbiAgICB0aGlzLnkgPSB4ICogbWVbMl0gKyB5ICogbWVbM107XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0cmFuc2Zvcm1NYXQzXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiB0cmFuc2Zvcm1zIHRoaXMgd2l0aCBNYXQzXG4gKiBAcGFyYW0gTWF0MyBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUudHJhbnNmb3JtTWF0MyA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIG1lID0gbS5lbGVtZW50cyxcbiAgICAgICAgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueTtcblxuICAgIHRoaXMueCA9IHggKiBtZVswXSArIHkgKiBtZVszXSArIG1lWzZdO1xuICAgIHRoaXMueSA9IHggKiBtZVsxXSArIHkgKiBtZVs0XSArIG1lWzddO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdHJhbnNmb3JtTWF0NFxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogdHJhbnNmb3JtcyB0aGlzIHdpdGggTWF0NFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnRyYW5zZm9ybU1hdDQgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHMsXG4gICAgICAgIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnk7XG5cbiAgICB0aGlzLnggPSB4ICogbWVbMF0gKyB5ICogbWVbNF0gKyBtZVsxMl07XG4gICAgdGhpcy55ID0geCAqIG1lWzFdICsgeSAqIG1lWzVdICsgbWVbMTNdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdHJhbnNmb3JtUHJvamVjdGlvblxuICogQG1lbWJlcm9mIFhpYW4uVmVjM1xuICogdHJhbnNmb3JtcyB0aGlzIHdpdGggTWF0NCBwcm9qZWN0aW9uIG1hdHJpeFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnRyYW5zZm9ybVByb2plY3Rpb24gPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHMsXG4gICAgICAgIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIGQgPSAxIC8gKG1lWzNdICogeCArIG1lWzddICogeSArIG1lWzExXSAqIHogKyBtZVsxNV0pO1xuXG4gICAgdGhpcy54ID0gKG1lWzBdICogeCArIG1lWzRdICogeSArIG1lWzEyXSkgKiBkO1xuICAgIHRoaXMueSA9IChtZVsxXSAqIHggKyBtZVs1XSAqIHkgKyBtZVsxM10pICogZDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21WZWMzXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBzZXRzIHZhbHVlcyBmcm9tIFZlYzNcbiAqIEBwYXJhbSBWZWMzIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5mcm9tVmVjMyA9IGZ1bmN0aW9uICh2KSB7XG5cbiAgICB0aGlzLnggPSB2Lng7XG4gICAgdGhpcy55ID0gdi55O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVZlYzRcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHNldHMgdmFsdWVzIGZyb20gVmVjNFxuICogQHBhcmFtIFZlYzQgdlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLmZyb21WZWM0ID0gZnVuY3Rpb24gKHYpIHtcblxuICAgIHRoaXMueCA9IHYueDtcbiAgICB0aGlzLnkgPSB2Lnk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBwb3NpdGlvbkZyb21NYXQzMlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc2V0cyBwb3NpdGlvbiBmcm9tIE1hdDMyXG4gKiBAcGFyYW0gTWF0MzIgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnBvc2l0aW9uRnJvbU1hdDMyID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG4gICAgdGhpcy54ID0gbWVbNF07XG4gICAgdGhpcy55ID0gbWVbNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBwb3NpdGlvbkZyb21NYXQ0XG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBzZXRzIHBvc2l0aW9uIGZyb20gTWF0NFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnBvc2l0aW9uRnJvbU1hdDQgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHM7XG5cbiAgICB0aGlzLnggPSBtZVsxMl07XG4gICAgdGhpcy55ID0gbWVbMTNdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2NhbGVGcm9tTWF0MlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc2V0cyB0aGlzIGZyb20gTWF0MiBzY2FsZVxuICogQHBhcmFtIE1hdDIgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzIucHJvdG90eXBlLnNjYWxlRnJvbU1hdDIgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHMsXG4gICAgICAgIHggPSB0aGlzLnNldChtZVswXSwgbVsyXSkubGVuZ3RoKCksXG4gICAgICAgIHkgPSB0aGlzLnNldChtZVsxXSwgbVszXSkubGVuZ3RoKCk7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzY2FsZUZyb21NYXQzMlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc2V0cyB0aGlzIGZyb20gTWF0MzIgc2NhbGVcbiAqIEBwYXJhbSBNYXQzMiBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuc2NhbGVGcm9tTWF0MzIgPSBWZWMyLnByb3RvdHlwZS5zY2FsZUZyb21NYXQyO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIEBwYXJhbSBYaWFuLlZlYzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiAhKFxuICAgIHRoaXMueCAhPT0gb3RoZXIueCB8fFxuICAgIHRoaXMueSAhPT0gb3RoZXIueVxuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIEBwYXJhbSBYaWFuLlZlYzIgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMyLnByb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiAoXG4gICAgdGhpcy54ICE9PSBvdGhlci54IHx8XG4gICAgdGhpcy55ICE9PSBvdGhlci55XG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tSlNPTlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogc2V0cyB2YWx1ZXMgZnJvbSBKU09OIG9iamVjdFxuICogQHBhcmFtIE9iamVjdCBqc29uXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuXG4gICAgdGhpcy54ID0ganNvbi54O1xuICAgIHRoaXMueSA9IGpzb24ueTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvSlNPTlxuICogQG1lbWJlcm9mIFhpYW4uVmVjMlxuICogcmV0dXJucyBqc29uIG9iamVjdCBvZiB0aGlzXG4gKiBAcmV0dXJuIE9iamVjdFxuICovXG5WZWMyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gfHwgKGpzb24gPSB7fSk7XG5cbiAgICBqc29uLl9jbGFzc05hbWUgPSBcIlZlYzJcIjtcbiAgICBqc29uLnggPSB0aGlzLng7XG4gICAganNvbi55ID0gdGhpcy55O1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUFycmF5XG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiBzZXRzIHZhbHVlcyBmcm9tIEFycmF5IG9iamVjdFxuICogQHBhcmFtIEFycmF5IGFycmF5XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMi5wcm90b3R5cGUuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cbiAgICB0aGlzLnggPSBhcnJheVswXTtcbiAgICB0aGlzLnkgPSBhcnJheVsxXTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBYaWFuLlZlYzJcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gQXJyYXlcbiAqL1xuVmVjMi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIGFycmF5IHx8IChhcnJheSA9IFtdKTtcblxuICAgIGFycmF5WzBdID0gdGhpcy54O1xuICAgIGFycmF5WzFdID0gdGhpcy55O1xuXG4gICAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvU3RyaW5nXG4gKiBAbWVtYmVyb2YgWGlhbi5WZWMyXG4gKiByZXR1cm5zIHN0cmluZyBvZiB0aGlzXG4gKiBAcmV0dXJuIFN0cmluZ1xuICovXG5WZWMyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBcIlZlYzIoIFwiICsgdGhpcy54ICsgXCIsIFwiICsgdGhpcy55ICsgXCIgKVwiO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFZlYzI7XG4iLCJ2YXIgTWF0aGYgPSByZXF1aXJlKFwiLi9tYXRoZlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vKipcbiAqIEBjbGFzcyBWZWMzXG4gKiAzZCB2ZWN0b3JcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciB5XG4gKiBAcGFyYW0gTnVtYmVyIHpcbiAqL1xuZnVuY3Rpb24gVmVjMyh4LCB5LCB6KSB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHhcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gICAgICovXG4gICAgdGhpcy54ID0geCB8fCAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHlcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gICAgICovXG4gICAgdGhpcy55ID0geSB8fCAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHpcbiAgICAgKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gICAgICovXG4gICAgdGhpcy56ID0geiB8fCAwLjA7XG59XG5cbk1hdGhmLl9jbGFzc2VzW1wiVmVjM1wiXSA9IFZlYzM7XG5cbi8qKlxuICogQG1ldGhvZCBjbG9uZVxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogcmV0dXJucyBuZXcgaW5zdGFuY2Ugb2YgdGhpc1xuICogQHJldHVybiBWZWMzXG4gKi9cblZlYzMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIGNvcGllcyBvdGhlclxuICogQHBhcmFtIFZlYzMgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnggPSBvdGhlci54O1xuICAgIHRoaXMueSA9IG90aGVyLnk7XG4gICAgdGhpcy56ID0gb3RoZXIuejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogc2V0cyB2YWx1ZXMgb2YgdGhpc1xuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcGFyYW0gTnVtYmVyIHlcbiAqIEBwYXJhbSBOdW1iZXIgelxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGFkZFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogYWRkcyBvdGhlcidzIHZhbHVlcyB0byB0aGlzXG4gKiBAcGFyYW0gVmVjMyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54ICs9IG90aGVyLng7XG4gICAgdGhpcy55ICs9IG90aGVyLnk7XG4gICAgdGhpcy56ICs9IG90aGVyLno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2YWRkXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBhZGRzIGEgYW5kIGIgdG9nZXRoZXIgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIFZlYzMgYVxuICogQHBhcmFtIFZlYzMgYlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLnZhZGQgPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgdGhpcy54ID0gYS54ICsgYi54O1xuICAgIHRoaXMueSA9IGEueSArIGIueTtcbiAgICB0aGlzLnogPSBhLnogKyBiLno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzYWRkXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBhZGRzIHNjYWxhciB2YWx1ZSB0byB0aGlzXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS5zYWRkID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMueCArPSBzO1xuICAgIHRoaXMueSArPSBzO1xuICAgIHRoaXMueiArPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc3ViXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBzdWJ0cmFjdHMgb3RoZXIncyB2YWx1ZXMgZnJvbSB0aGlzXG4gKiBAcGFyYW0gVmVjMyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54IC09IG90aGVyLng7XG4gICAgdGhpcy55IC09IG90aGVyLnk7XG4gICAgdGhpcy56IC09IG90aGVyLno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2c3ViXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBzdWJ0cmFjdHMgYiBmcm9tIGEgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIFZlYzMgYVxuICogQHBhcmFtIFZlYzMgYlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLnZzdWIgPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgdGhpcy54ID0gYS54IC0gYi54O1xuICAgIHRoaXMueSA9IGEueSAtIGIueTtcbiAgICB0aGlzLnogPSBhLnogLSBiLno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzc3ViXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBzdWJ0cmFjdHMgdGhpcyBieSBhIHNjYWxhciB2YWx1ZVxuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuc3N1YiA9IGZ1bmN0aW9uIChzKSB7XG5cbiAgICB0aGlzLnggLT0gcztcbiAgICB0aGlzLnkgLT0gcztcbiAgICB0aGlzLnogLT0gcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG11bFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogbXVsaXBsZXMgdGhpcydzIHZhbHVlcyBieSBvdGhlcidzXG4gKiBAcGFyYW0gVmVjMyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54ICo9IG90aGVyLng7XG4gICAgdGhpcy55ICo9IG90aGVyLnk7XG4gICAgdGhpcy56ICo9IG90aGVyLno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2bXVsXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBtdWxpcGxlcyBhIGFuZCBiIHNhdmVzIGl0IGluIHRoaXNcbiAqIEBwYXJhbSBWZWMzIGFcbiAqIEBwYXJhbSBWZWMzIGJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS52bXVsID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHRoaXMueCA9IGEueCAqIGIueDtcbiAgICB0aGlzLnkgPSBhLnkgKiBiLnk7XG4gICAgdGhpcy56ID0gYS56ICogYi56O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc211bFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogbXVsaXBsZXMgdGhpcyBieSBhIHNjYWxhciB2YWx1ZVxuICogQHBhcmFtIE51bWJlciBzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuc211bCA9IGZ1bmN0aW9uIChzKSB7XG5cbiAgICB0aGlzLnggKj0gcztcbiAgICB0aGlzLnkgKj0gcztcbiAgICB0aGlzLnogKj0gcztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGRpdlxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogZGl2aWRlcyB0aGlzJ3MgdmFsdWVzIGJ5IG90aGVyJ3NcbiAqIEBwYXJhbSBWZWMzIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHggPSBvdGhlci54LFxuICAgICAgICB5ID0gb3RoZXIueSxcbiAgICAgICAgeiA9IG90aGVyLno7XG5cbiAgICB0aGlzLnggKj0geCAhPT0gMC4wID8gMS4wIC8geCA6IDAuMDtcbiAgICB0aGlzLnkgKj0geSAhPT0gMC4wID8gMS4wIC8geSA6IDAuMDtcbiAgICB0aGlzLnogKj0geiAhPT0gMC4wID8gMS4wIC8geiA6IDAuMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHZkaXZcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIGRpdmlkZXMgYiBmcm9tIGEgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIFZlYzMgYVxuICogQHBhcmFtIFZlYzMgYlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLnZkaXYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciB4ID0gYi54LFxuICAgICAgICB5ID0gYi55LFxuICAgICAgICB6ID0gYi56O1xuXG4gICAgdGhpcy54ID0geCAhPT0gMC4wID8gYS54IC8geCA6IDAuMDtcbiAgICB0aGlzLnkgPSB5ICE9PSAwLjAgPyBhLnkgLyB5IDogMC4wO1xuICAgIHRoaXMueiA9IHogIT09IDAuMCA/IGEueiAvIHogOiAwLjA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBkaXZpZGVzIHRoaXMgYnkgc2NhbGFyIHZhbHVlXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS5zZGl2ID0gZnVuY3Rpb24gKHMpIHtcbiAgICBzID0gcyA9PT0gMC4wID8gMC4wIDogMS4wIC8gcztcblxuICAgIHRoaXMueCAqPSBzO1xuICAgIHRoaXMueSAqPSBzO1xuICAgIHRoaXMueiAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbGVuZ3RoXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhpc1xuICogQHJldHVybiBOdW1iZXJcbiAqL1xuVmVjMy5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICB6ID0gdGhpcy56LFxuICAgICAgICBsc3EgPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgICBpZiAobHNxID09PSAxKSByZXR1cm4gMTtcblxuICAgIHJldHVybiBsc3EgPT09IDAuMCA/IDAuMCA6IHNxcnQobHNxKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZW5ndGhTcVxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogcmV0dXJucyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhpc1xuICogQHJldHVybiBOdW1iZXJcbiAqL1xuVmVjMy5wcm90b3R5cGUubGVuZ3RoU3EgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLno7XG5cbiAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldExlbmd0aFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogc2V0cyB0aGlzIHNvIGl0cyBtYWduaXR1ZGUgaXMgZXF1YWwgdG8gbGVuZ3RoXG4gKiBAcGFyYW0gTnVtYmVyIGxlbmd0aFxuICogQHJldHVybiBWZWMzXG4gKi9cblZlYzMucHJvdG90eXBlLnNldExlbmd0aCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgbCA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICAgIGlmIChsID09PSAxKSB7XG4gICAgICAgIHRoaXMueCAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueSAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueiAqPSBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbCA9IGwgPiAwLjAgPyAxLjAgLyBzcXJ0KGwpIDogMC4wO1xuXG4gICAgdGhpcy54ICo9IGwgKiBsZW5ndGg7XG4gICAgdGhpcy55ICo9IGwgKiBsZW5ndGg7XG4gICAgdGhpcy56ICo9IGwgKiBsZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBub3JtYWxpemVcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHJldHVybnMgdGhpcyB3aXRoIGEgbGVuZ3RoIG9mIDFcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgICBpZiAobCA9PT0gMSkgcmV0dXJuIHRoaXM7XG5cbiAgICBsID0gbCA+IDAuMCA/IDEuMCAvIHNxcnQobCkgOiAwLjA7XG5cbiAgICB0aGlzLnggKj0gbDtcbiAgICB0aGlzLnkgKj0gbDtcbiAgICB0aGlzLnogKj0gbDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG9ydGhvTm9ybWFsaXplXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiByZXR1cm5zIG1ha2VzIHZlY3RvcnMgbm9ybWFsaXplZCBhbmQgb3J0aG9nb25hbCB0byBlYWNoIG90aGVyXG4gKiBAcGFyYW0gVmVjMyBhXG4gKiBAcGFyYW0gVmVjMyBiXG4gKiBAcGFyYW0gVmVjMyBjXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUub3J0aG9Ob3JtYWxpemUgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgIGlmIChhLmxlbmd0aFNxKCkgIT09IDEuMCkgYS5ub3JtYWxpemUoKTtcbiAgICBjLnZjcm9zcyhhLCBiKTtcbiAgICBpZiAoYS5sZW5ndGhTcSgpID09PSAwLjApIHJldHVybjtcbiAgICBjLm5vcm1hbGl6ZSgpO1xuICAgIGIudmNyb3NzKGMsIGEpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhpc1xuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLmludmVyc2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLnggKj0gLTE7XG4gICAgdGhpcy55ICo9IC0xO1xuICAgIHRoaXMueiAqPSAtMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VWZWNcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2Ygb3RoZXJcbiAqIEBwYXJhbSBWZWMzIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuaW52ZXJzZVZlYyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54ID0gLW90aGVyLng7XG4gICAgdGhpcy55ID0gLW90aGVyLnk7XG4gICAgdGhpcy56ID0gLShvdGhlci56IHx8IDApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgbGVycFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0aGlzIGFuZCBvdGhlciBieSB4XG4gKiBAcGFyYW0gVmVjMyBvdGhlclxuICogQHBhcmFtIE51bWJlciB4XG4gKiBAcmV0dXJuIFZlYzNcbiAqL1xuVmVjMy5wcm90b3R5cGUubGVycCA9IGZ1bmN0aW9uIChvdGhlciwgeCkge1xuXG4gICAgdGhpcy54ICs9IChvdGhlci54IC0gdGhpcy54KSAqIHg7XG4gICAgdGhpcy55ICs9IChvdGhlci55IC0gdGhpcy55KSAqIHg7XG4gICAgdGhpcy56ICs9IChvdGhlci56IC0gdGhpcy56KSAqIHg7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2bGVycFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiBhIGFuZCBiIGJ5IHhcbiAqIEBwYXJhbSBWZWMzIGFcbiAqIEBwYXJhbSBWZWMzIGJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBWZWMzXG4gKi9cblZlYzMucHJvdG90eXBlLnZsZXJwID0gZnVuY3Rpb24gKGEsIGIsIHgpIHtcbiAgICB2YXIgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBheiA9IGEuejtcblxuICAgIHRoaXMueCA9IGF4ICsgKGIueCAtIGF4KSAqIHg7XG4gICAgdGhpcy55ID0gYXkgKyAoYi55IC0gYXkpICogeDtcbiAgICB0aGlzLnogPSBheiArIChiLnogLSBheikgKiB4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdmRvdFxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMsIGNhbiBiZSBjYWxsZWQgYXMgYSBzdGF0aWMgZnVuY3Rpb24gVmVjMy52ZG90KCBhLCBiIClcbiAqIEBwYXJhbSBWZWMzIGFcbiAqIEBwYXJhbSBWZWMzIGJcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cblZlYzMudmRvdCA9IFZlYzMucHJvdG90eXBlLnZkb3QgPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgcmV0dXJuIGEueCAqIGIueCArIGEueSAqIGIueSArIGEueiAqIGIuejtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBkb3RcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIGRvdCBwcm9kdWN0IG9mIHRoaXMgYW5kIG90aGVyIHZlY3RvclxuICogQHBhcmFtIFZlYzMgb3RoZXJcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cblZlYzMucHJvdG90eXBlLmRvdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuIHRoaXMueCAqIG90aGVyLnggKyB0aGlzLnkgKiBvdGhlci55ICsgdGhpcy56ICogb3RoZXIuejtcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2Y3Jvc3NcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIGNyb3NzIHByb2R1Y3QgYmV0d2VlbiBhIHZlY3RvciBhbmQgYiB2ZWN0b3IsIGNhbiBiZSBjYWxsZWQgYXMgYSBzdGF0aWMgZnVuY3Rpb24gVmVjMy52Y3Jvc3MoIGEsIGIgKVxuICogQHBhcmFtIFZlYzMgYVxuICogQHBhcmFtIFZlYzMgYlxuICogQHJldHVybiBOdW1iZXJcbiAqL1xuVmVjMy52Y3Jvc3MgPSBWZWMzLnByb3RvdHlwZS52Y3Jvc3MgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBheCA9IGEueCxcbiAgICAgICAgYXkgPSBhLnksXG4gICAgICAgIGF6ID0gYS56LFxuICAgICAgICBieCA9IGIueCxcbiAgICAgICAgYnkgPSBiLnksXG4gICAgICAgIGJ6ID0gYi56O1xuXG4gICAgdGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7XG4gICAgdGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XG4gICAgdGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjcm9zc1xuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogY3Jvc3MgcHJvZHVjdCBiZXR3ZWVuIHRoaXMgdmVjdG9yIGFuZCBvdGhlclxuICogQHBhcmFtIFZlYzMgb3RoZXJcbiAqIEByZXR1cm4gTnVtYmVyXG4gKi9cblZlYzMucHJvdG90eXBlLmNyb3NzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGF4ID0gdGhpcy54LFxuICAgICAgICBheSA9IHRoaXMueSxcbiAgICAgICAgYXogPSB0aGlzLnosXG4gICAgICAgIGJ4ID0gb3RoZXIueCxcbiAgICAgICAgYnkgPSBvdGhlci55LFxuICAgICAgICBieiA9IG90aGVyLno7XG5cbiAgICB0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgICB0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgICB0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1pblxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogcmV0dXJucyBtaW4gdmFsdWVzIGZyb20gdGhpcyBhbmQgb3RoZXIgdmVjdG9yXG4gKiBAcGFyYW0gVmVjMyBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBheCA9IHRoaXMueCxcbiAgICAgICAgYXkgPSB0aGlzLnksXG4gICAgICAgIGF6ID0gdGhpcy56LFxuICAgICAgICBieCA9IG90aGVyLngsXG4gICAgICAgIGJ5ID0gb3RoZXIueSxcbiAgICAgICAgYnogPSBvdGhlci56O1xuXG4gICAgdGhpcy54ID0gYnggPCBheCA/IGJ4IDogYXg7XG4gICAgdGhpcy55ID0gYnkgPCBheSA/IGJ5IDogYXk7XG4gICAgdGhpcy56ID0gYnogPCBheiA/IGJ6IDogYXo7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBtYXhcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHJldHVybnMgbWF4IHZhbHVlcyBmcm9tIHRoaXMgYW5kIG90aGVyIHZlY3RvclxuICogQHBhcmFtIFZlYzMgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgYXggPSB0aGlzLngsXG4gICAgICAgIGF5ID0gdGhpcy55LFxuICAgICAgICBheiA9IHRoaXMueixcbiAgICAgICAgYnggPSBvdGhlci54LFxuICAgICAgICBieSA9IG90aGVyLnksXG4gICAgICAgIGJ6ID0gb3RoZXIuejtcblxuICAgIHRoaXMueCA9IGJ4ID4gYXggPyBieCA6IGF4O1xuICAgIHRoaXMueSA9IGJ5ID4gYXkgPyBieSA6IGF5O1xuICAgIHRoaXMueiA9IGJ6ID4gYXogPyBieiA6IGF6O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY2xhbXBcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIGNsYW1wIHZhbHVlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4J3MgdmFsdWVzXG4gKiBAcGFyYW0gVmVjMyBtaW5cbiAqIEBwYXJhbSBWZWMzIG1heFxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLmNsYW1wID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIG1pbnggPSBtaW4ueCxcbiAgICAgICAgbWlueSA9IG1pbi55LFxuICAgICAgICBtaW56ID0gbWluLnosXG4gICAgICAgIG1heHggPSBtYXgueCxcbiAgICAgICAgbWF4eSA9IG1heC55LFxuICAgICAgICBtYXh6ID0gbWF4Lno7XG5cbiAgICB0aGlzLnggPSB4IDwgbWlueCA/IG1pbnggOiB4ID4gbWF4eCA/IG1heHggOiB4O1xuICAgIHRoaXMueSA9IHkgPCBtaW55ID8gbWlueSA6IHkgPiBtYXh5ID8gbWF4eSA6IHk7XG4gICAgdGhpcy56ID0geiA8IG1pbnogPyBtaW56IDogeiA+IG1heHogPyBtYXh6IDogejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU1hdDNcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHRyYW5zZm9ybXMgdGhpcyB3aXRoIE1hdDNcbiAqIEBwYXJhbSBNYXQzIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS50cmFuc2Zvcm1NYXQzID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzLFxuICAgICAgICB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICB6ID0gdGhpcy56O1xuXG4gICAgdGhpcy54ID0geCAqIG1lWzBdICsgeSAqIG1lWzNdICsgeiAqIG1lWzZdO1xuICAgIHRoaXMueSA9IHggKiBtZVsxXSArIHkgKiBtZVs0XSArIHogKiBtZVs3XTtcbiAgICB0aGlzLnogPSB4ICogbWVbMl0gKyB5ICogbWVbNV0gKyB6ICogbWVbOF07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0cmFuc2Zvcm1NYXQ0XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiB0cmFuc2Zvcm1zIHRoaXMgd2l0aCBNYXQ0XG4gKiBAcGFyYW0gTWF0NCBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUudHJhbnNmb3JtTWF0NCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIG1lID0gbS5lbGVtZW50cyxcbiAgICAgICAgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMuejtcblxuICAgIHRoaXMueCA9IHggKiBtZVswXSArIHkgKiBtZVs0XSArIHogKiBtZVs4XSArIG1lWzEyXTtcbiAgICB0aGlzLnkgPSB4ICogbWVbMV0gKyB5ICogbWVbNV0gKyB6ICogbWVbOV0gKyBtZVsxM107XG4gICAgdGhpcy56ID0geCAqIG1lWzJdICsgeSAqIG1lWzZdICsgeiAqIG1lWzEwXSArIG1lWzE0XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU1hdDRcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHRyYW5zZm9ybXMgdGhpcyB3aXRoIE1hdDRcbiAqIEBwYXJhbSBNYXQ0IG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS50cmFuc2Zvcm1NYXQ0Um90YXRpb24gPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHMsXG4gICAgICAgIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLno7XG5cbiAgICB0aGlzLnggPSB4ICogbWVbMF0gKyB5ICogbWVbNF0gKyB6ICogbWVbOF07XG4gICAgdGhpcy55ID0geCAqIG1lWzFdICsgeSAqIG1lWzVdICsgeiAqIG1lWzldO1xuICAgIHRoaXMueiA9IHggKiBtZVsyXSArIHkgKiBtZVs2XSArIHogKiBtZVsxMF07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0cmFuc2Zvcm1Qcm9qZWN0aW9uXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiB0cmFuc2Zvcm1zIHRoaXMgd2l0aCBNYXQ0IHByb2plY3Rpb24gbWF0cml4XG4gKiBAcGFyYW0gTWF0NCBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUudHJhbnNmb3JtUHJvamVjdGlvbiA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIG1lID0gbS5lbGVtZW50cyxcbiAgICAgICAgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgZCA9IDEgLyAobWVbM10gKiB4ICsgbWVbN10gKiB5ICsgbWVbMTFdICogeiArIG1lWzE1XSk7XG5cbiAgICB0aGlzLnggPSAobWVbMF0gKiB4ICsgbWVbNF0gKiB5ICsgbWVbOF0gKiB6ICsgbWVbMTJdKSAqIGQ7XG4gICAgdGhpcy55ID0gKG1lWzFdICogeCArIG1lWzVdICogeSArIG1lWzldICogeiArIG1lWzEzXSkgKiBkO1xuICAgIHRoaXMueiA9IChtZVsyXSAqIHggKyBtZVs2XSAqIHkgKyBtZVsxMF0gKiB6ICsgbWVbMTRdKSAqIGQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0cmFuc2Zvcm1RdWF0XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiB0cmFuc2Zvcm1zIHRoaXMgd2l0aCBRdWF0XG4gKiBAcGFyYW0gUXVhdCBxXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUudHJhbnNmb3JtUXVhdCA9IGZ1bmN0aW9uIChxKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHF4ID0gcS54LFxuICAgICAgICBxeSA9IHEueSxcbiAgICAgICAgcXogPSBxLnosXG4gICAgICAgIHF3ID0gcS53LFxuXG4gICAgICAgIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5LFxuICAgICAgICBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogeixcbiAgICAgICAgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHgsXG4gICAgICAgIGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuICAgIHRoaXMueCA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XG4gICAgdGhpcy55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgICB0aGlzLnogPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVZlYzJcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHNldHMgdmFsdWVzIGZyb20gVmVjMlxuICogQHBhcmFtIFZlYzIgdlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLmZyb21WZWMyID0gZnVuY3Rpb24gKHYpIHtcblxuICAgIHRoaXMueCA9IHYueDtcbiAgICB0aGlzLnkgPSB2Lnk7XG4gICAgdGhpcy56ID0gMC4wO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVZlYzRcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHNldHMgcG9zaXRpb24gZnJvbSBWZWM0XG4gKiBAcGFyYW0gVmVjNCB2XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuZnJvbVZlYzQgPSBmdW5jdGlvbiAodikge1xuXG4gICAgdGhpcy54ID0gdi54O1xuICAgIHRoaXMueSA9IHYueTtcbiAgICB0aGlzLnogPSB2Lno7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBwb3NpdGlvbkZyb21NYXQ0XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBzZXRzIHBvc2l0aW9uIGZyb20gTWF0NFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLnBvc2l0aW9uRnJvbU1hdDQgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHM7XG5cbiAgICB0aGlzLnggPSBtZVsxMl07XG4gICAgdGhpcy55ID0gbWVbMTNdO1xuICAgIHRoaXMueiA9IG1lWzE0XTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNjYWxlRnJvbU1hdDNcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHNldHMgdGhpcyBmcm9tIE1hdDMgc2NhbGVcbiAqIEBwYXJhbSBNYXQzIG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWMzLnByb3RvdHlwZS5zY2FsZUZyb21NYXQzID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzLFxuICAgICAgICB4ID0gdGhpcy5zZXQobWVbMF0sIG1lWzNdLCBtZVs2XSkubGVuZ3RoKCksXG4gICAgICAgIHkgPSB0aGlzLnNldChtZVsxXSwgbWVbNF0sIG1lWzddKS5sZW5ndGgoKSxcbiAgICAgICAgeiA9IHRoaXMuc2V0KG1lWzJdLCBtZVs1XSwgbWVbOF0pLmxlbmd0aCgpO1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzY2FsZUZyb21NYXQ0XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBzZXRzIHRoaXMgZnJvbSBNYXQ0IHNjYWxlXG4gKiBAcGFyYW0gTWF0NCBtXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuc2NhbGVGcm9tTWF0NCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgdmFyIG1lID0gbS5lbGVtZW50cyxcbiAgICAgICAgeCA9IHRoaXMuc2V0KG1lWzBdLCBtZVs0XSwgbWVbOF0pLmxlbmd0aCgpLFxuICAgICAgICB5ID0gdGhpcy5zZXQobWVbMV0sIG1lWzVdLCBtZVs5XSkubGVuZ3RoKCksXG4gICAgICAgIHogPSB0aGlzLnNldChtZVsyXSwgbWVbNl0sIG1lWzEwXSkubGVuZ3RoKCk7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBAcGFyYW0gT2Rpbi5WZWMzIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICByZXR1cm4gIShcbiAgICB0aGlzLnggIT09IG90aGVyLnggfHxcbiAgICB0aGlzLnkgIT09IG90aGVyLnkgfHxcbiAgICB0aGlzLnogIT09IG90aGVyLnpcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBAcGFyYW0gT2Rpbi5WZWMzIG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUubm90RXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICByZXR1cm4gKFxuICAgIHRoaXMueCAhPT0gb3RoZXIueCB8fFxuICAgIHRoaXMueSAhPT0gb3RoZXIueSB8fFxuICAgIHRoaXMueiAhPT0gb3RoZXIuelxuICAgICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUpTT05cbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHNldHMgdmFsdWVzIGZyb20gSlNPTiBvYmplY3RcbiAqIEBwYXJhbSBPYmplY3QganNvblxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHRoaXMueCA9IGpzb24ueDtcbiAgICB0aGlzLnkgPSBqc29uLnk7XG4gICAgdGhpcy56ID0ganNvbi56O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdG9KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiByZXR1cm5zIGpzb24gb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gT2JqZWN0XG4gKi9cblZlYzMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiB8fCAoanNvbiA9IHt9KTtcblxuICAgIGpzb24uX2NsYXNzTmFtZSA9IFwiVmVjM1wiO1xuICAgIGpzb24ueCA9IHRoaXMueDtcbiAgICBqc29uLnkgPSB0aGlzLnk7XG4gICAganNvbi56ID0gdGhpcy56O1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUFycmF5XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiBzZXRzIHZhbHVlcyBmcm9tIEFycmF5IG9iamVjdFxuICogQHBhcmFtIEFycmF5IGFycmF5XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cbiAgICB0aGlzLnggPSBhcnJheVswXTtcbiAgICB0aGlzLnkgPSBhcnJheVsxXTtcbiAgICB0aGlzLnogPSBhcnJheVsyXTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzNcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gQXJyYXlcbiAqL1xuVmVjMy5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIGFycmF5IHx8IChhcnJheSA9IFtdKTtcblxuICAgIGFycmF5WzBdID0gdGhpcy54O1xuICAgIGFycmF5WzFdID0gdGhpcy55O1xuICAgIGFycmF5WzJdID0gdGhpcy56O1xuXG4gICAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvU3RyaW5nXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWMzXG4gKiByZXR1cm5zIHN0cmluZyBvZiB0aGlzXG4gKiBAcmV0dXJuIFN0cmluZ1xuICovXG5WZWMzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBcIlZlYzMoIFwiICsgdGhpcy54ICsgXCIsIFwiICsgdGhpcy55ICsgXCIsIFwiICsgdGhpcy56ICsgXCIgKVwiO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFZlYzM7XG4iLCJ2YXIgTWF0aGYgPSByZXF1aXJlKFwiLi9tYXRoZlwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vKipcbiAqIEBjbGFzcyBWZWM0XG4gKiAzZCB2ZWN0b3JcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciB5XG4gKiBAcGFyYW0gTnVtYmVyIHpcbiAqIEBwYXJhbSBOdW1iZXIgd1xuICovXG5mdW5jdGlvbiBWZWM0KHgsIHksIHosIHcpIHtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgeFxuICAgICAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAgICAgKi9cbiAgICB0aGlzLnggPSB4IHx8IDAuMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgeVxuICAgICAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5IHx8IDAuMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgelxuICAgICAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAgICAgKi9cbiAgICB0aGlzLnogPSB6IHx8IDAuMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgd1xuICAgICAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAgICAgKi9cbiAgICB0aGlzLncgPSB3ICE9IHVuZGVmaW5lZCA/IHcgOiAxLjA7XG59XG5cbk1hdGhmLl9jbGFzc2VzW1wiVmVjNFwiXSA9IFZlYzQ7XG5cbi8qKlxuICogQG1ldGhvZCBjbG9uZVxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogcmV0dXJucyBuZXcgaW5zdGFuY2Ugb2YgdGhpc1xuICogQHJldHVybiBWZWM0XG4gKi9cblZlYzQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIG5ldyBWZWM0KHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY29weVxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogY29waWVzIG90aGVyXG4gKiBAcGFyYW0gVmVjNCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMueCA9IG90aGVyLng7XG4gICAgdGhpcy55ID0gb3RoZXIueTtcbiAgICB0aGlzLnogPSBvdGhlci56O1xuICAgIHRoaXMudyA9IG90aGVyLnc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHNldHMgdmFsdWVzIG9mIHRoaXNcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHBhcmFtIE51bWJlciB5XG4gKiBAcGFyYW0gTnVtYmVyIHpcbiAqIEBwYXJhbSBOdW1iZXIgd1xuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh4LCB5LCB6LCB3KSB7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcbiAgICB0aGlzLncgPSB3O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgYWRkXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBhZGRzIG90aGVyJ3MgdmFsdWVzIHRvIHRoaXNcbiAqIEBwYXJhbSBWZWM0IG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG90aGVyKSB7XG5cbiAgICB0aGlzLnggKz0gb3RoZXIueDtcbiAgICB0aGlzLnkgKz0gb3RoZXIueTtcbiAgICB0aGlzLnogKz0gb3RoZXIuejtcbiAgICB0aGlzLncgKz0gb3RoZXIudztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHZhZGRcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIGFkZHMgYSBhbmQgYiB0b2dldGhlciBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gVmVjNCBhXG4gKiBAcGFyYW0gVmVjNCBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUudmFkZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICB0aGlzLnggPSBhLnggKyBiLng7XG4gICAgdGhpcy55ID0gYS55ICsgYi55O1xuICAgIHRoaXMueiA9IGEueiArIGIuejtcbiAgICB0aGlzLncgPSBhLncgKyBiLnc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzYWRkXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBhZGRzIHNjYWxhciB2YWx1ZSB0byB0aGlzXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5zYWRkID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMueCArPSBzO1xuICAgIHRoaXMueSArPSBzO1xuICAgIHRoaXMueiArPSBzO1xuICAgIHRoaXMudyArPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc3ViXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBzdWJ0cmFjdHMgb3RoZXIncyB2YWx1ZXMgZnJvbSB0aGlzXG4gKiBAcGFyYW0gVmVjNCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54IC09IG90aGVyLng7XG4gICAgdGhpcy55IC09IG90aGVyLnk7XG4gICAgdGhpcy56IC09IG90aGVyLno7XG4gICAgdGhpcy53IC09IG90aGVyLnc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB2c3ViXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBzdWJ0cmFjdHMgYiBmcm9tIGEgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIFZlYzQgYVxuICogQHBhcmFtIFZlYzQgYlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnZzdWIgPSBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgdGhpcy54ID0gYS54IC0gYi54O1xuICAgIHRoaXMueSA9IGEueSAtIGIueTtcbiAgICB0aGlzLnogPSBhLnogLSBiLno7XG4gICAgdGhpcy53ID0gYS53IC0gYi53O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc3N1YlxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogc3VidHJhY3RzIHRoaXMgYnkgYSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnNzdWIgPSBmdW5jdGlvbiAocykge1xuXG4gICAgdGhpcy54IC09IHM7XG4gICAgdGhpcy55IC09IHM7XG4gICAgdGhpcy56IC09IHM7XG4gICAgdGhpcy53IC09IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBtdWxcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIG11bGlwbGVzIHRoaXMncyB2YWx1ZXMgYnkgb3RoZXInc1xuICogQHBhcmFtIFZlYzQgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMueCAqPSBvdGhlci54O1xuICAgIHRoaXMueSAqPSBvdGhlci55O1xuICAgIHRoaXMueiAqPSBvdGhlci56O1xuICAgIHRoaXMudyAqPSBvdGhlci53O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgdm11bFxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogbXVsaXBsZXMgYSBhbmQgYiBzYXZlcyBpdCBpbiB0aGlzXG4gKiBAcGFyYW0gVmVjNCBhXG4gKiBAcGFyYW0gVmVjNCBiXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUudm11bCA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICB0aGlzLnggPSBhLnggKiBiLng7XG4gICAgdGhpcy55ID0gYS55ICogYi55O1xuICAgIHRoaXMueiA9IGEueiAqIGIuejtcbiAgICB0aGlzLncgPSBhLncgKiBiLnc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzbXVsXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBtdWxpcGxlcyB0aGlzIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKiBAcGFyYW0gTnVtYmVyIHNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5zbXVsID0gZnVuY3Rpb24gKHMpIHtcblxuICAgIHRoaXMueCAqPSBzO1xuICAgIHRoaXMueSAqPSBzO1xuICAgIHRoaXMueiAqPSBzO1xuICAgIHRoaXMudyAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZGl2XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBkaXZpZGVzIHRoaXMncyB2YWx1ZXMgYnkgb3RoZXInc1xuICogQHBhcmFtIFZlYzQgb3RoZXJcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgeCA9IG90aGVyLngsXG4gICAgICAgIHkgPSBvdGhlci55LFxuICAgICAgICB6ID0gb3RoZXIueixcbiAgICAgICAgdyA9IG90aGVyLnc7XG5cbiAgICB0aGlzLnggKj0geCAhPT0gMC4wID8gMS4wIC8geCA6IDAuMDtcbiAgICB0aGlzLnkgKj0geSAhPT0gMC4wID8gMS4wIC8geSA6IDAuMDtcbiAgICB0aGlzLnogKj0geiAhPT0gMC4wID8gMS4wIC8geiA6IDAuMDtcbiAgICB0aGlzLncgKj0gdyAhPT0gMC4wID8gMS4wIC8gdyA6IDAuMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHZkaXZcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIGRpdmlkZXMgYiBmcm9tIGEgc2F2ZXMgaXQgaW4gdGhpc1xuICogQHBhcmFtIFZlYzQgYVxuICogQHBhcmFtIFZlYzQgYlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnZkaXYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciB4ID0gYi54LFxuICAgICAgICB5ID0gYi55LFxuICAgICAgICB6ID0gYi56LFxuICAgICAgICB3ID0gYi53O1xuXG4gICAgdGhpcy54ID0geCAhPT0gMC4wID8gYS54IC8geCA6IDAuMDtcbiAgICB0aGlzLnkgPSB5ICE9PSAwLjAgPyBhLnkgLyB5IDogMC4wO1xuICAgIHRoaXMueiA9IHogIT09IDAuMCA/IGEueiAvIHogOiAwLjA7XG4gICAgdGhpcy53ID0gdyAhPT0gMC4wID8gYS53IC8gdyA6IDAuMDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNkaXZcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIGRpdmlkZXMgdGhpcyBieSBzY2FsYXIgdmFsdWVcbiAqIEBwYXJhbSBOdW1iZXIgc1xuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnNkaXYgPSBmdW5jdGlvbiAocykge1xuICAgIHMgPSBzID09PSAwLjAgPyAwLjAgOiAxLjAgLyBzO1xuXG4gICAgdGhpcy54ICo9IHM7XG4gICAgdGhpcy55ICo9IHM7XG4gICAgdGhpcy56ICo9IHM7XG4gICAgdGhpcy53ICo9IHM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBsZW5ndGhcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGlzXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWM0LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHcgPSB0aGlzLncsXG4gICAgICAgIGxzcSA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuXG4gICAgaWYgKGxzcSA9PT0gMSkgcmV0dXJuIDE7XG5cbiAgICByZXR1cm4gbHNxID4gMC4wID8gc3FydChsc3EpIDogMC4wO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlbmd0aFNxXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiByZXR1cm5zIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWM0LnByb3RvdHlwZS5sZW5ndGhTcSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgeSA9IHRoaXMueSxcbiAgICAgICAgeiA9IHRoaXMueixcbiAgICAgICAgdyA9IHRoaXMudztcblxuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRMZW5ndGhcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHNldHMgdGhpcyBzbyBpdHMgbWFnbml0dWRlIGlzIGVxdWFsIHRvIGxlbmd0aFxuICogQHBhcmFtIE51bWJlciBsZW5ndGhcbiAqIEByZXR1cm4gVmVjNFxuICovXG5WZWM0LnByb3RvdHlwZS5zZXRMZW5ndGggPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHcgPSB0aGlzLncsXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcblxuICAgIGlmIChsID09PSAxKSB7XG4gICAgICAgIHRoaXMueCAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueSAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueiAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMudyAqPSBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbCA9IGwgPiAwLjAgPyAxLjAgLyBzcXJ0KGwpIDogMC4wO1xuXG4gICAgdGhpcy54ICo9IGwgKiBsZW5ndGg7XG4gICAgdGhpcy55ICo9IGwgKiBsZW5ndGg7XG4gICAgdGhpcy56ICo9IGwgKiBsZW5ndGg7XG4gICAgdGhpcy53ICo9IGwgKiBsZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBub3JtYWxpemVcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHJldHVybnMgdGhpcyB3aXRoIGEgbGVuZ3RoIG9mIDFcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHcgPSB0aGlzLncsXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcblxuICAgIGlmIChsID09PSAxKSByZXR1cm4gdGhpcztcblxuICAgIGwgPSBsID4gMC4wID8gMS4wIC8gc3FydChsKSA6IDAuMDtcblxuICAgIHRoaXMueCAqPSBsO1xuICAgIHRoaXMueSAqPSBsO1xuICAgIHRoaXMueiAqPSBsO1xuICAgIHRoaXMudyAqPSBsO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgb3J0aG9Ob3JtYWxpemVcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHJldHVybnMgbWFrZXMgdmVjdG9ycyBub3JtYWxpemVkIGFuZCBvcnRob2dvbmFsIHRvIGVhY2ggb3RoZXJcbiAqIEBwYXJhbSBWZWM0IGFcbiAqIEBwYXJhbSBWZWM0IGJcbiAqIEBwYXJhbSBWZWM0IGNcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5vcnRob05vcm1hbGl6ZSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgaWYgKGEubGVuZ3RoU3EoKSAhPT0gMS4wKSBhLm5vcm1hbGl6ZSgpO1xuICAgIGMudmNyb3NzKGEsIGIpO1xuICAgIGlmIChhLmxlbmd0aFNxKCkgPT09IDAuMCkgcmV0dXJuO1xuICAgIGMubm9ybWFsaXplKCk7XG4gICAgYi52Y3Jvc3MoYywgYSk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaW52ZXJzZVxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogcmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGlzXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUuaW52ZXJzZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMueCAqPSAtMTtcbiAgICB0aGlzLnkgKj0gLTE7XG4gICAgdGhpcy56ICo9IC0xO1xuICAgIHRoaXMudyAqPSAtMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGludmVyc2VWZWNcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHJldHVybnMgdGhlIGludmVyc2Ugb2Ygb3RoZXJcbiAqIEBwYXJhbSBWZWM0IG90aGVyXG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUuaW52ZXJzZVZlYyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgdGhpcy54ID0gLW90aGVyLng7XG4gICAgdGhpcy55ID0gLW90aGVyLnk7XG4gICAgdGhpcy56ID0gLShvdGhlci56IHx8IDApO1xuICAgIHRoaXMudyA9IC0ob3RoZXIudyB8fCAwKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGxlcnBcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhpcyBhbmQgb3RoZXIgYnkgeFxuICogQHBhcmFtIFZlYzQgb3RoZXJcbiAqIEBwYXJhbSBOdW1iZXIgeFxuICogQHJldHVybiBWZWM0XG4gKi9cblZlYzQucHJvdG90eXBlLmxlcnAgPSBmdW5jdGlvbiAob3RoZXIsIHgpIHtcblxuICAgIHRoaXMueCArPSAob3RoZXIueCAtIHRoaXMueCkgKiB4O1xuICAgIHRoaXMueSArPSAob3RoZXIueSAtIHRoaXMueSkgKiB4O1xuICAgIHRoaXMueiArPSAob3RoZXIueiAtIHRoaXMueikgKiB4O1xuICAgIHRoaXMudyArPSAob3RoZXIudyAtIHRoaXMudykgKiB4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdmxlcnBcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gYSBhbmQgYiBieSB4XG4gKiBAcGFyYW0gVmVjNCBhXG4gKiBAcGFyYW0gVmVjNCBiXG4gKiBAcGFyYW0gTnVtYmVyIHhcbiAqIEByZXR1cm4gVmVjNFxuICovXG5WZWM0LnByb3RvdHlwZS52bGVycCA9IGZ1bmN0aW9uIChhLCBiLCB4KSB7XG4gICAgdmFyIGF4ID0gYS54LFxuICAgICAgICBheSA9IGEueSxcbiAgICAgICAgYXogPSBhLnosXG4gICAgICAgIGF3ID0gYS53O1xuXG4gICAgdGhpcy54ID0gYXggKyAoYi54IC0gYXgpICogeDtcbiAgICB0aGlzLnkgPSBheSArIChiLnkgLSBheSkgKiB4O1xuICAgIHRoaXMueiA9IGF6ICsgKGIueiAtIGF6KSAqIHg7XG4gICAgdGhpcy53ID0gYXcgKyAoYi53IC0gYXcpICogeDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHZkb3RcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLCBjYW4gYmUgY2FsbGVkIGFzIGEgc3RhdGljIGZ1bmN0aW9uIFZlYzQudmRvdCggYSwgYiApXG4gKiBAcGFyYW0gVmVjNCBhXG4gKiBAcGFyYW0gVmVjNCBiXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWM0LnZkb3QgPSBWZWM0LnByb3RvdHlwZS52ZG90ID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIHJldHVybiBhLnggKiBiLnggKyBhLnkgKiBiLnkgKyBhLnogKiBiLnogKyBhLncgKiBiLnc7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZG90XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBkb3QgcHJvZHVjdCBvZiB0aGlzIGFuZCBvdGhlciB2ZWN0b3JcbiAqIEBwYXJhbSBWZWM0IG90aGVyXG4gKiBAcmV0dXJuIE51bWJlclxuICovXG5WZWM0LnByb3RvdHlwZS5kb3QgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHJldHVybiB0aGlzLnggKiBvdGhlci54ICsgdGhpcy55ICogb3RoZXIueSArIHRoaXMueiAqIG90aGVyLnogKyB0aGlzLncgKiBvdGhlci53O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1pblxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogcmV0dXJucyBtaW4gdmFsdWVzIGZyb20gdGhpcyBhbmQgb3RoZXIgdmVjdG9yXG4gKiBAcGFyYW0gVmVjNCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBheCA9IHRoaXMueCxcbiAgICAgICAgYXkgPSB0aGlzLnksXG4gICAgICAgIGF6ID0gdGhpcy56LFxuICAgICAgICBhdyA9IHRoaXMudyxcbiAgICAgICAgYnggPSBvdGhlci54LFxuICAgICAgICBieSA9IG90aGVyLnksXG4gICAgICAgIGJ6ID0gb3RoZXIueixcbiAgICAgICAgYncgPSB0aGlzLnc7XG5cbiAgICB0aGlzLnggPSBieCA8IGF4ID8gYnggOiBheDtcbiAgICB0aGlzLnkgPSBieSA8IGF5ID8gYnkgOiBheTtcbiAgICB0aGlzLnogPSBieiA8IGF6ID8gYnogOiBhejtcbiAgICB0aGlzLncgPSBidyA8IGF3ID8gYncgOiBhdztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIG1heFxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogcmV0dXJucyBtYXggdmFsdWVzIGZyb20gdGhpcyBhbmQgb3RoZXIgdmVjdG9yXG4gKiBAcGFyYW0gVmVjNCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHZhciBheCA9IHRoaXMueCxcbiAgICAgICAgYXkgPSB0aGlzLnksXG4gICAgICAgIGF6ID0gdGhpcy56LFxuICAgICAgICBhdyA9IHRoaXMudyxcbiAgICAgICAgYnggPSBvdGhlci54LFxuICAgICAgICBieSA9IG90aGVyLnksXG4gICAgICAgIGJ6ID0gb3RoZXIueixcbiAgICAgICAgYncgPSB0aGlzLnc7XG5cbiAgICB0aGlzLnggPSBieCA+IGF4ID8gYnggOiBheDtcbiAgICB0aGlzLnkgPSBieSA+IGF5ID8gYnkgOiBheTtcbiAgICB0aGlzLnogPSBieiA+IGF6ID8gYnogOiBhejtcbiAgICB0aGlzLncgPSBidyA+IGF3ID8gYncgOiBhdztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsYW1wXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBjbGFtcCB2YWx1ZXMgYmV0d2VlbiBtaW4gYW5kIG1heCdzIHZhbHVlc1xuICogQHBhcmFtIFZlYzQgbWluXG4gKiBAcGFyYW0gVmVjNCBtYXhcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5jbGFtcCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgIHZhciB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICB6ID0gdGhpcy56LFxuICAgICAgICB3ID0gdGhpcy53LFxuICAgICAgICBtaW54ID0gbWluLngsXG4gICAgICAgIG1pbnkgPSBtaW4ueSxcbiAgICAgICAgbWlueiA9IG1pbi56LFxuICAgICAgICBtaW53ID0gbWluLncsXG4gICAgICAgIG1heHggPSBtYXgueCxcbiAgICAgICAgbWF4eSA9IG1heC55LFxuICAgICAgICBtYXh6ID0gbWF4LnosXG4gICAgICAgIG1heHcgPSBtYXh3O1xuXG4gICAgdGhpcy54ID0geCA8IG1pbnggPyBtaW54IDogeCA+IG1heHggPyBtYXh4IDogeDtcbiAgICB0aGlzLnkgPSB5IDwgbWlueSA/IG1pbnkgOiB5ID4gbWF4eSA/IG1heHkgOiB5O1xuICAgIHRoaXMueiA9IHogPCBtaW56ID8gbWlueiA6IHogPiBtYXh6ID8gbWF4eiA6IHo7XG4gICAgdGhpcy53ID0gdyA8IG1pbncgPyBtaW53IDogdyA+IG1heHcgPyBtYXh3IDogdztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU1hdDRcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHRyYW5zZm9ybXMgdGhpcyB3aXRoIE1hdDRcbiAqIEBwYXJhbSBNYXQ0IG1cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS50cmFuc2Zvcm1NYXQ0ID0gZnVuY3Rpb24gKG0pIHtcbiAgICB2YXIgbWUgPSBtLmVsZW1lbnRzLFxuICAgICAgICB4ID0gdGhpcy54LFxuICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICB6ID0gdGhpcy56LFxuICAgICAgICB3ID0gdGhpcy53O1xuXG4gICAgdGhpcy54ID0geCAqIG1lWzBdICsgeSAqIG1lWzRdICsgeiAqIG1lWzhdICsgdyAqIG1lWzEyXTtcbiAgICB0aGlzLnkgPSB4ICogbWVbMV0gKyB5ICogbWVbNV0gKyB6ICogbWVbOV0gKyB3ICogbWVbMTNdO1xuICAgIHRoaXMueiA9IHggKiBtZVsyXSArIHkgKiBtZVs2XSArIHogKiBtZVsxMF0gKyB3ICogbWVbMTRdO1xuICAgIHRoaXMudyA9IHggKiBtZVszXSArIHkgKiBtZVs3XSArIHogKiBtZVsxMV0gKyB3ICogbWVbMTVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgdHJhbnNmb3JtUHJvamVjdGlvblxuICogQG1lbWJlcm9mIE9kaW4uVmVjM1xuICogdHJhbnNmb3JtcyB0aGlzIHdpdGggTWF0NCBwcm9qZWN0aW9uIG1hdHJpeFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnRyYW5zZm9ybVByb2plY3Rpb24gPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHMsXG4gICAgICAgIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgIHcgPSB0aGlzLncsXG4gICAgICAgIGQgPSAxIC8gKG1lWzNdICogeCArIG1lWzddICogeSArIG1lWzExXSAqIHogKyBtZVsxNV0pO1xuXG4gICAgdGhpcy54ID0gKG1lWzBdICogeCArIG1lWzRdICogeSArIG1lWzhdICogeiArIG1lWzEyXSAqIHcpICogZDtcbiAgICB0aGlzLnkgPSAobWVbMV0gKiB4ICsgbWVbNV0gKiB5ICsgbWVbOV0gKiB6ICsgbWVbMTNdICogdykgKiBkO1xuICAgIHRoaXMueiA9IChtZVsyXSAqIHggKyBtZVs2XSAqIHkgKyBtZVsxMF0gKiB6ICsgbWVbMTRdICogdykgKiBkO1xuICAgIHRoaXMudyA9IChtZVszXSAqIHggKyBtZVs3XSAqIHkgKyBtZVsxMV0gKiB6ICsgbWVbMTVdICogdykgKiBkO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbVZlYzJcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHNldHMgdmFsdWVzIGZyb20gVmVjMlxuICogQHBhcmFtIFZlYzIgdlxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLmZyb21WZWMyID0gZnVuY3Rpb24gKHYpIHtcblxuICAgIHRoaXMueCA9IHYueDtcbiAgICB0aGlzLnkgPSB2Lnk7XG4gICAgdGhpcy56ID0gMC4wO1xuICAgIHRoaXMudyA9IDE7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBmcm9tVmVjM1xuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogc2V0cyB2YWx1ZXMgZnJvbSBWZWMzXG4gKiBAcGFyYW0gVmVjMyB2XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUuZnJvbVZlYzMgPSBmdW5jdGlvbiAodikge1xuXG4gICAgdGhpcy54ID0gdi54O1xuICAgIHRoaXMueSA9IHYueTtcbiAgICB0aGlzLnogPSB2Lno7XG4gICAgdGhpcy53ID0gMTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21SZWN0XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBzZXRzIHZhbHVlcyBmcm9tIFJlY3RcbiAqIEBwYXJhbSBWZWMzIHZcbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5mcm9tUmVjdCA9IGZ1bmN0aW9uIChyZWN0KSB7XG5cbiAgICB0aGlzLnggPSByZWN0Lng7XG4gICAgdGhpcy55ID0gcmVjdC55O1xuICAgIHRoaXMueiA9IHJlY3Qud2lkdGg7XG4gICAgdGhpcy53ID0gcmVjdC5oZWlnaHQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCBwb3NpdGlvbkZyb21NYXQ0XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBzZXRzIHBvc2l0aW9uIGZyb20gTWF0NFxuICogQHBhcmFtIE1hdDQgbVxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLnBvc2l0aW9uRnJvbU1hdDQgPSBmdW5jdGlvbiAobSkge1xuICAgIHZhciBtZSA9IG0uZWxlbWVudHM7XG5cbiAgICB0aGlzLnggPSBtZVsxMl07XG4gICAgdGhpcy55ID0gbWVbMTNdO1xuICAgIHRoaXMueiA9IG1lWzE0XTtcbiAgICB0aGlzLncgPSBtZVsxNV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogQHBhcmFtIE9kaW4uVmVjNCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuICEoXG4gICAgdGhpcy54ICE9PSBvdGhlci54IHx8XG4gICAgdGhpcy55ICE9PSBvdGhlci55IHx8XG4gICAgdGhpcy56ICE9PSBvdGhlci56IHx8XG4gICAgdGhpcy53ICE9PSBvdGhlci53XG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1lbWJlcm9mIE9kaW4uVmVjNFxuICogQHBhcmFtIE9kaW4uVmVjNCBvdGhlclxuICogQHJldHVybiB0aGlzXG4gKi9cblZlYzQucHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuXG4gICAgcmV0dXJuIChcbiAgICB0aGlzLnggIT09IG90aGVyLnggfHxcbiAgICB0aGlzLnkgIT09IG90aGVyLnkgfHxcbiAgICB0aGlzLnogIT09IG90aGVyLnogfHxcbiAgICB0aGlzLncgIT09IG90aGVyLndcbiAgICApO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21KU09OXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBzZXRzIHZhbHVlcyBmcm9tIEpTT04gb2JqZWN0XG4gKiBAcGFyYW0gT2JqZWN0IGpzb25cbiAqIEByZXR1cm4gdGhpc1xuICovXG5WZWM0LnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICB0aGlzLnggPSBqc29uLng7XG4gICAgdGhpcy55ID0ganNvbi55O1xuICAgIHRoaXMueiA9IGpzb24uejtcbiAgICB0aGlzLncgPSBqc29uLnc7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG1ldGhvZCB0b0pTT05cbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHJldHVybnMganNvbiBvYmplY3Qgb2YgdGhpc1xuICogQHJldHVybiBPYmplY3RcbiAqL1xuVmVjNC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAganNvbi5fY2xhc3NOYW1lID0gXCJWZWM0XCI7XG4gICAganNvbi54ID0gdGhpcy54O1xuICAgIGpzb24ueSA9IHRoaXMueTtcbiAgICBqc29uLnogPSB0aGlzLno7XG4gICAganNvbi53ID0gdGhpcy53O1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZnJvbUFycmF5XG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiBzZXRzIHZhbHVlcyBmcm9tIEFycmF5IG9iamVjdFxuICogQHBhcmFtIEFycmF5IGFycmF5XG4gKiBAcmV0dXJuIHRoaXNcbiAqL1xuVmVjNC5wcm90b3R5cGUuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cbiAgICB0aGlzLnggPSBhcnJheVswXTtcbiAgICB0aGlzLnkgPSBhcnJheVsxXTtcbiAgICB0aGlzLnogPSBhcnJheVsyXTtcbiAgICB0aGlzLncgPSBhcnJheVszXTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEBtZW1iZXJvZiBPZGluLlZlYzRcbiAqIHJldHVybnMgYXJyYXkgb2JqZWN0IG9mIHRoaXNcbiAqIEByZXR1cm4gQXJyYXlcbiAqL1xuVmVjNC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIGFycmF5IHx8IChhcnJheSA9IFtdKTtcblxuICAgIGFycmF5WzBdID0gdGhpcy54O1xuICAgIGFycmF5WzFdID0gdGhpcy55O1xuICAgIGFycmF5WzJdID0gdGhpcy56O1xuICAgIGFycmF5WzNdID0gdGhpcy53O1xuXG4gICAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHRvU3RyaW5nXG4gKiBAbWVtYmVyb2YgT2Rpbi5WZWM0XG4gKiByZXR1cm5zIHN0cmluZyBvZiB0aGlzXG4gKiBAcmV0dXJuIFN0cmluZ1xuICovXG5WZWM0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBcIlZlYzQoIFwiICsgdGhpcy54ICsgXCIsIFwiICsgdGhpcy55ICsgXCIsIFwiICsgdGhpcy56ICsgXCIsIFwiICsgdGhpcy53ICsgXCIgKVwiO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFZlYzQ7XG4iLCJ2YXIgUDJFbnVtcyA9IHJlcXVpcmUoXCIuLi9wMmVudW1zXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIE1vdGlvblN0YXRlID0gUDJFbnVtcy5Nb3Rpb25TdGF0ZSxcbiAgICBTbGVlcFN0YXRlID0gUDJFbnVtcy5TbGVlcFN0YXRlO1xuXG5cbmZ1bmN0aW9uIFAyQnJvYWRwaGFzZSgpIHtcbn1cblxuXG5QMkJyb2FkcGhhc2UucHJvdG90eXBlLmNvbGxpc2lvbnMgPSBmdW5jdGlvbiAoYm9kaWVzLCBwYWlyc2ksIHBhaXJzaikge1xuICAgIHZhciBsZW5ndGggPSBib2RpZXMubGVuZ3RoLFxuICAgICAgICBiaSwgYmosIHNoYXBlc2ksIHNoYXBlc2osIGxlbmd0aCwgc2ksIHNqLFxuICAgICAgICBpID0gbGVuZ3RoLFxuICAgICAgICBqLCBrLCBsO1xuXG4gICAgcGFpcnNpLmxlbmd0aCA9IHBhaXJzai5sZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBqID0gMDtcbiAgICAgICAgd2hpbGUgKGogIT09IGkpIHtcbiAgICAgICAgICAgIGJpID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgYmogPSBib2RpZXNbal07XG4gICAgICAgICAgICBqKys7XG5cbiAgICAgICAgICAgIGlmICgoYmkubW90aW9uU3RhdGUgIT09IE1vdGlvblN0YXRlLkR5bmFtaWMgJiYgYmoubW90aW9uU3RhdGUgIT09IE1vdGlvblN0YXRlLkR5bmFtaWMpIHx8IChiaS5zbGVlcFN0YXRlID09PSBTbGVlcFN0YXRlLlNsZWVwaW5nICYmIGJqLnNsZWVwU3RhdGUgPT09IFNsZWVwU3RhdGUuU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoYXBlc2kgPSBiaS5zaGFwZXM7XG4gICAgICAgICAgICBzaGFwZXNqID0gYmouc2hhcGVzO1xuXG4gICAgICAgICAgICBpZiAoIWJpLmFhYmIuaW50ZXJzZWN0cyhiai5hYWJiKSkgY29udGludWU7XG5cbiAgICAgICAgICAgIGsgPSBzaGFwZXNpLmxlbmd0aDtcbiAgICAgICAgICAgIGxlbmd0aCA9IHNoYXBlc2oubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGstLSkge1xuICAgICAgICAgICAgICAgIGwgPSBsZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGwtLSkge1xuICAgICAgICAgICAgICAgICAgICBzaSA9IHNoYXBlc2lba107XG4gICAgICAgICAgICAgICAgICAgIHNqID0gc2hhcGVzaltsXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzaS5maWx0ZXJHcm91cCAmIHNqLmZpbHRlck1hc2spID09PSAwIHx8IChzai5maWx0ZXJHcm91cCAmIHNpLmZpbHRlck1hc2spID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2kuYWFiYi5pbnRlcnNlY3RzKHNqLmFhYmIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWlyc2kucHVzaChzaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWlyc2oucHVzaChzaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblAyQnJvYWRwaGFzZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblAyQnJvYWRwaGFzZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMkJyb2FkcGhhc2U7XG4iLCJ2YXIgUDJFbnVtcyA9IHJlcXVpcmUoXCIuLi9wMmVudW1zXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBNb3Rpb25TdGF0ZSA9IFAyRW51bXMuTW90aW9uU3RhdGUsXG4gICAgU2xlZXBTdGF0ZSA9IFAyRW51bXMuU2xlZXBTdGF0ZTtcblxuXG5mdW5jdGlvbiBDZWxsKGNvdW50ZXIpIHtcbiAgICBBcnJheS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX2NvdW50ZXIgPSBjb3VudGVyO1xufVxuXG5DZWxsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQXJyYXkucHJvdG90eXBlKTtcbkNlbGwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2VsbDtcblxuXG5mdW5jdGlvbiBQMkJyb2FkcGhhc2VTcGF0aWFsSGFzaChvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIHRoaXMuX2NlbGxTaXplID0gMDtcbiAgICB0aGlzLl9pbnZlcnNlQ2VsbFNpemUgPSAwO1xuXG4gICAgdGhpcy5jZWxscyA9IHt9O1xuICAgIHRoaXMuY2VsbERlYXRoRnJhbWVDb3VudCA9IG9wdHMuY2VsbERlYXRoRnJhbWVDb3VudCAhPSB1bmRlZmluZWQgPyBvcHRzLmNlbGxEZWF0aEZyYW1lQ291bnQgOiAzMDA7XG4gICAgdGhpcy5jZWxsU2l6ZSA9IG9wdHMuY2VsbFNpemUgIT0gdW5kZWZpbmVkID8gb3B0cy5jZWxsU2l6ZSA6IDE7XG59XG5cblxuZGVmaW5lUHJvcGVydHkoUDJCcm9hZHBoYXNlU3BhdGlhbEhhc2gucHJvdG90eXBlLCBcImNlbGxTaXplXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxTaXplO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PSAxID8gdmFsdWUgOiAxO1xuXG4gICAgICAgIHRoaXMuX2NlbGxTaXplID0gZmxvb3IodmFsdWUpO1xuICAgICAgICB0aGlzLl9pbnZlcnNlQ2VsbFNpemUgPSAxIC8gdGhpcy5fY2VsbFNpemU7XG4gICAgfVxufSk7XG5cblxuUDJCcm9hZHBoYXNlU3BhdGlhbEhhc2gucHJvdG90eXBlLmNvbGxpc2lvbnMgPSBmdW5jdGlvbiAoYm9kaWVzLCBwYWlyc2ksIHBhaXJzaikge1xuICAgIHZhciBjZWxscyA9IHRoaXMuY2VsbHMsXG4gICAgICAgIGNlbGxTaXplID0gdGhpcy5fY2VsbFNpemUsXG4gICAgICAgIGNlbGxEZWF0aEZyYW1lQ291bnQgPSB0aGlzLmNlbGxEZWF0aEZyYW1lQ291bnQsXG4gICAgICAgIGludmVyc2VDZWxsU2l6ZSA9IHRoaXMuX2ludmVyc2VDZWxsU2l6ZSxcbiAgICAgICAgYWFiYiwgbWluLCBtYXgsIG1pbngsIG1pbnksIGJvZHksIHBvc2l0aW9uLCBzaGFwZXMsIHNoYXBlLCB4LCB5LFxuICAgICAgICBjZWxsLCBrZXksIHNpLCBzaiwgYmksIGJqLCBpLCBqLCBrLCBsO1xuXG4gICAgZm9yIChrZXkgaW4gY2VsbHMpIHtcbiAgICAgICAgY2VsbCA9IGNlbGxzW2tleV07XG4gICAgICAgIGlmIChjZWxsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGNlbGwuX2NvdW50ZXItLSA8PSAwKSBkZWxldGUgY2VsbHNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbGwuX2NvdW50ZXIgPSBjZWxsRGVhdGhGcmFtZUNvdW50O1xuICAgICAgICB9XG4gICAgICAgIGNlbGwubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgcGFpcnNpLmxlbmd0aCA9IHBhaXJzai5sZW5ndGggPSAwO1xuXG4gICAgaSA9IGJvZGllcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICBzaGFwZXMgPSBib2R5LnNoYXBlcztcbiAgICAgICAgaiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgICAgIHNoYXBlID0gc2hhcGVzW2pdO1xuICAgICAgICAgICAgYWFiYiA9IHNoYXBlLmFhYmI7XG4gICAgICAgICAgICBtaW4gPSBhYWJiLm1pbjtcbiAgICAgICAgICAgIG1heCA9IGFhYmIubWF4O1xuICAgICAgICAgICAgbWlueCA9IChtaW4ueCAqIGludmVyc2VDZWxsU2l6ZSB8IDApICogY2VsbFNpemU7XG4gICAgICAgICAgICBtaW55ID0gKG1pbi55ICogaW52ZXJzZUNlbGxTaXplIHwgMCkgKiBjZWxsU2l6ZTtcblxuICAgICAgICAgICAgeCA9IG1pbnggKyAoKG1heC54IC0gbWluLngpICogaW52ZXJzZUNlbGxTaXplIHwgMCkgKiBjZWxsU2l6ZTtcbiAgICAgICAgICAgIHkgPSBtaW55ICsgKChtYXgueSAtIG1pbi55KSAqIGludmVyc2VDZWxsU2l6ZSB8IDApICogY2VsbFNpemU7XG5cbiAgICAgICAgICAgIGZvciAoayA9IG1pbng7IGsgPD0geDsgayArPSBjZWxsU2l6ZSkge1xuICAgICAgICAgICAgICAgIGZvciAobCA9IG1pbnk7IGwgPD0geTsgbCArPSBjZWxsU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBrICsgXCI6XCIgKyBsO1xuICAgICAgICAgICAgICAgICAgICAoY2VsbHNba2V5XSB8fCAoY2VsbHNba2V5XSA9IG5ldyBDZWxsKGNlbGxEZWF0aEZyYW1lQ291bnQpKSkucHVzaChzaGFwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChrZXkgaW4gY2VsbHMpIHtcbiAgICAgICAgY2VsbCA9IGNlbGxzW2tleV07XG4gICAgICAgIGkgPSBjZWxsLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBqID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChqICE9PSBpKSB7XG4gICAgICAgICAgICAgICAgc2kgPSBjZWxsW2ldO1xuICAgICAgICAgICAgICAgIHNqID0gY2VsbFtqXTtcbiAgICAgICAgICAgICAgICBqKys7XG5cbiAgICAgICAgICAgICAgICBiaSA9IHNpLmJvZHk7XG4gICAgICAgICAgICAgICAgYmogPSBzai5ib2R5O1xuXG4gICAgICAgICAgICAgICAgaWYgKGJpICYmIGJqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYmkuYWFiYi5pbnRlcnNlY3RzKGJqLmFhYmIpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKGJpLm1vdGlvblN0YXRlICE9PSBNb3Rpb25TdGF0ZS5EeW5hbWljICYmIGJqLm1vdGlvblN0YXRlICE9PSBNb3Rpb25TdGF0ZS5EeW5hbWljKSB8fCAoYmkuc2xlZXBTdGF0ZSA9PT0gU2xlZXBTdGF0ZS5TbGVlcGluZyAmJiBiai5zbGVlcFN0YXRlID09PSBTbGVlcFN0YXRlLlNsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChzaS5maWx0ZXJHcm91cCAmIHNqLmZpbHRlck1hc2spID09PSAwIHx8IChzai5maWx0ZXJHcm91cCAmIHNpLmZpbHRlck1hc2spID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYWlyc2kucHVzaChzaSk7XG4gICAgICAgICAgICAgICAgcGFpcnNqLnB1c2goc2opO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuXG5QMkJyb2FkcGhhc2VTcGF0aWFsSGFzaC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uIHx8IChqc29uID0ge30pO1xuXG4gICAganNvbi5jZWxsU2l6ZSA9IHRoaXMuY2VsbFNpemU7XG4gICAganNvbi5jZWxsRGVhdGhGcmFtZUNvdW50ID0gdGhpcy5jZWxsRGVhdGhGcmFtZUNvdW50O1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblAyQnJvYWRwaGFzZVNwYXRpYWxIYXNoLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICB0aGlzLmNlbGxTaXplID0ganNvbi5jZWxsU2l6ZTtcbiAgICB0aGlzLmNlbGxEZWF0aEZyYW1lQ291bnQgPSBqc29uLmNlbGxEZWF0aEZyYW1lQ291bnQ7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMkJyb2FkcGhhc2VTcGF0aWFsSGFzaDtcbiIsInZhciBPYmplY3RQb29sID0gcmVxdWlyZShcIi4uLy4uL2Jhc2Uvb2JqZWN0X3Bvb2xcIik7XG52YXIgTWF0aGYgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXRoZlwiKTtcbnZhciBWZWMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjMlwiKTtcbnZhciBQMkVudW1zID0gcmVxdWlyZShcIi4uL3AyZW51bXNcIik7XG52YXIgUDJDb250YWN0ID0gcmVxdWlyZShcIi4uL2NvbnN0cmFpbnRzL3AyY29udGFjdFwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtaW4gPSBNYXRoLm1pbixcbiAgICBhYnMgPSBNYXRoLmFicyxcbiAgICBzcXJ0ID0gTWF0aC5zcXJ0LFxuXG4gICAgRVBTSUxPTiA9IE1hdGhmLkVQU0lMT04sXG5cbiAgICBCb2R5VHlwZSA9IFAyRW51bXMuQm9keVR5cGUsXG4gICAgU2hhcGVUeXBlID0gUDJFbnVtcy5TaGFwZVR5cGUsXG5cbiAgICBDT05UQUNUX1BPT0wgPSBuZXcgT2JqZWN0UG9vbChQMkNvbnRhY3QpO1xuXG5cbmZ1bmN0aW9uIGNsZWFyQ29udGFjdChjb250YWN0KSB7XG5cbiAgICBjb250YWN0LmJpID0gY29udGFjdC5iaiA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGFjdChiaSwgYmosIGUsIHUsIG54LCBueSwgcHgsIHB5LCBzLCBjb250YWN0cykge1xuICAgIHZhciBjID0gQ09OVEFDVF9QT09MLmNyZWF0ZSgpLFxuICAgICAgICBuID0gYy5uLFxuICAgICAgICBwID0gYy5wO1xuXG4gICAgYy5iaSA9IGJpO1xuICAgIGMuYmogPSBiajtcblxuICAgIGMuZSA9IGU7XG4gICAgYy51ID0gdTtcblxuICAgIG4ueCA9IG54O1xuICAgIG4ueSA9IG55O1xuXG4gICAgcC54ID0gcHg7XG4gICAgcC55ID0gcHk7XG5cbiAgICBjLnMgPSBzO1xuXG4gICAgY29udGFjdHMucHVzaChjKTtcbn1cblxuZnVuY3Rpb24gY2lyY2xlMkNpcmNsZShzaSwgc2osIHhpeCwgeGl5LCByaSwgeGp4LCB4anksIHJqLCBjb250YWN0cykge1xuICAgIHZhciBkeCA9IHhqeCAtIHhpeCxcbiAgICAgICAgZHkgPSB4ankgLSB4aXksXG4gICAgICAgIGRpc3QgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgICAgaW52RGlzdCwgc2VwYXJhdGlvbiA9IDAuMCxcbiAgICAgICAgciA9IHJpICsgcmosXG4gICAgICAgIG54LCBueTtcblxuICAgIGlmIChkaXN0ID4gciAqIHIpIHJldHVybjtcbiAgICBpZiAoIWNvbGxpZGUoc2ksIHNqKSkgcmV0dXJuO1xuXG4gICAgaWYgKGRpc3QgPCBFUFNJTE9OKSB7XG4gICAgICAgIG54ID0gMC4wO1xuICAgICAgICBueSA9IDEuMDtcbiAgICAgICAgaW52RGlzdCA9IDAuMDtcbiAgICAgICAgc2VwYXJhdGlvbiA9IC1yO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3QgPSBzcXJ0KGRpc3QpO1xuICAgICAgICBpbnZEaXN0ID0gMS4wIC8gZGlzdDtcblxuICAgICAgICBueCA9IGR4ICogaW52RGlzdDtcbiAgICAgICAgbnkgPSBkeSAqIGludkRpc3Q7XG5cbiAgICAgICAgc2VwYXJhdGlvbiA9IGRpc3QgLSByO1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbnRhY3QoXG4gICAgICAgIHNpLmJvZHksXG4gICAgICAgIHNqLmJvZHksXG4gICAgICAgIDEuMCArIG1pbihzaS5lbGFzdGljaXR5LCBzai5lbGFzdGljaXR5KSxcbiAgICAgICAgbWluKHNpLmZyaWN0aW9uLCBzai5mcmljdGlvbiksXG4gICAgICAgIG54LFxuICAgICAgICBueSxcbiAgICAgICAgeGp4IC0gcmogKiBueCxcbiAgICAgICAgeGp5IC0gcmogKiBueSxcbiAgICAgICAgc2VwYXJhdGlvbixcbiAgICAgICAgY29udGFjdHNcbiAgICApO1xufVxuXG5mdW5jdGlvbiBQMk5lYXJwaGFzZSgpIHtcbn1cblxuUDJOZWFycGhhc2UuQ09OVEFDVF9QT09MID0gQ09OVEFDVF9QT09MO1xuXG5cblAyTmVhcnBoYXNlLnByb3RvdHlwZS5jb2xsaXNpb25zID0gZnVuY3Rpb24gKHBhaXJzaSwgcGFpcnNqLCBjb250YWN0cykge1xuICAgIHZhciBzaSwgc2osXG4gICAgICAgIGkgPSBwYWlyc2kubGVuZ3RoO1xuXG4gICAgY29udGFjdHMubGVuZ3RoID0gMDtcbiAgICBDT05UQUNUX1BPT0wuY2xlYXJGb3JFYWNoKGNsZWFyQ29udGFjdCk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHNpID0gcGFpcnNpW2ldO1xuICAgICAgICBzaiA9IHBhaXJzaltpXTtcblxuICAgICAgICBjb2xsaXNpb25UeXBlKHNpLCBzaiwgY29udGFjdHMpO1xuICAgIH1cbn07XG5cblxuZnVuY3Rpb24gY29sbGlkZShzaSwgc2opIHtcbiAgICB2YXIgYmkgPSBzaS5ib2R5LFxuICAgICAgICBiaiA9IHNqLmJvZHksXG4gICAgICAgIGkgPSBiaS5faW5kZXgsXG4gICAgICAgIGogPSBiai5faW5kZXgsXG4gICAgICAgIHNwYWNlID0gYmkuc3BhY2UgfHwgYmouc3BhY2U7XG5cbiAgICBpZiAoIXNwYWNlKSByZXR1cm4gZmFsc2U7XG4gICAgc3BhY2UuY29sbGlzaW9uTWF0cml4U2V0KGksIGosIDEsIHRydWUpO1xuXG4gICAgaWYgKHNwYWNlLmNvbGxpc2lvbk1hdHJpeEdldChpLCBqLCB0cnVlKSAhPT0gc3BhY2UuY29sbGlzaW9uTWF0cml4R2V0KGksIGosIGZhbHNlKSkge1xuICAgICAgICBiaS53YWtlKCk7XG4gICAgICAgIGJqLndha2UoKTtcblxuICAgICAgICBiaS5lbWl0KFwiY29sbGlkZVwiLCBiaiwgc2ksIHNqKTtcbiAgICAgICAgYmouZW1pdChcImNvbGxpZGVcIiwgYmksIHNqLCBzaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmkud2FrZSgpO1xuICAgICAgICBiai53YWtlKCk7XG5cbiAgICAgICAgYmkuZW1pdChcImNvbGxpZGluZ1wiLCBiaiwgc2ksIHNqKTtcbiAgICAgICAgYmouZW1pdChcImNvbGxpZGluZ1wiLCBiaSwgc2osIHNpKTtcbiAgICB9XG5cbiAgICBpZiAoc2kuaXNUcmlnZ2VyIHx8IHNqLmlzVHJpZ2dlcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cblxuZnVuY3Rpb24gY2lyY2xlQ2lyY2xlKHNpLCBzaiwgY29udGFjdHMpIHtcbiAgICB2YXIgeGkgPSBzaS5wb3NpdGlvbixcbiAgICAgICAgeGogPSBzai5wb3NpdGlvbjtcblxuICAgIGNpcmNsZTJDaXJjbGUoXG4gICAgICAgIHNpLFxuICAgICAgICBzaixcbiAgICAgICAgeGkueCwgeGkueSwgc2kucmFkaXVzLFxuICAgICAgICB4ai54LCB4ai55LCBzai5yYWRpdXMsXG4gICAgICAgIGNvbnRhY3RzXG4gICAgKTtcbn1cblxuXG5mdW5jdGlvbiBzZWdtZW50Q2lyY2xlKHNpLCBzaiwgY29udGFjdHMpIHtcbiAgICB2YXIgcmkgPSBzaS5yYWRpdXMsXG4gICAgICAgIGEgPSBzaS5fYSxcbiAgICAgICAgYiA9IHNpLl9iLFxuICAgICAgICBuID0gc2kuX25vcm1hbCxcbiAgICAgICAgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBieCA9IGIueCxcbiAgICAgICAgYnkgPSBiLnksXG4gICAgICAgIG54ID0gbi54LFxuICAgICAgICBueSA9IG4ueSxcblxuICAgICAgICB4aiA9IHNqLnBvc2l0aW9uLFxuICAgICAgICB4anggPSB4ai54LFxuICAgICAgICB4ankgPSB4ai55LFxuICAgICAgICByaiA9IHNqLnJhZGl1cyxcbiAgICAgICAgciA9IHJpICsgcmosXG5cbiAgICAgICAgZG4gPSAobnggKiB4anggKyBueSAqIHhqeSkgLSAoYXggKiBueCArIGF5ICogbnkpLFxuICAgICAgICBkaXN0ID0gYWJzKGRuKSxcbiAgICAgICAgZHQsIGR0YSwgZHRiLCBkeCwgZHksIGludkRpc3Q7XG5cbiAgICBpZiAoZGlzdCA+IHIpIHJldHVybjtcblxuICAgIGR0ID0geGp4ICogbnkgLSB4ankgKiBueDtcbiAgICBkdGEgPSBheCAqIG55IC0gYXkgKiBueDtcbiAgICBkdGIgPSBieCAqIG55IC0gYnkgKiBueDtcblxuICAgIGlmIChkdCA8PSBkdGEpIHtcbiAgICAgICAgaWYgKGR0IDwgZHRhIC0gcikgcmV0dXJuO1xuXG4gICAgICAgIGR4ID0geGp4IC0gYXg7XG4gICAgICAgIGR5ID0geGp5IC0gYXk7XG5cbiAgICAgICAgZGlzdCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZGlzdCA+IHIgKiByKSByZXR1cm47XG5cbiAgICAgICAgZGlzdCA9IGRpc3QgPT09IDAuMCA/IDAuMCA6IHNxcnQoZGlzdCk7XG4gICAgICAgIGludkRpc3QgPSBkaXN0ID09PSAwLjAgPyAwLjAgOiAxLjAgLyBkaXN0O1xuXG4gICAgICAgIG54ID0gZHggKiBpbnZEaXN0O1xuICAgICAgICBueSA9IGR5ICogaW52RGlzdDtcbiAgICB9IGVsc2UgaWYgKGR0ID4gZHRiKSB7XG4gICAgICAgIGlmIChkdCA+IGR0YiArIHIpIHJldHVybjtcblxuICAgICAgICBkeCA9IHhqeCAtIGJ4O1xuICAgICAgICBkeSA9IHhqeSAtIGJ5O1xuXG4gICAgICAgIGRpc3QgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGRpc3QgPiByICogcikgcmV0dXJuO1xuXG4gICAgICAgIGRpc3QgPSBkaXN0ID09PSAwLjAgPyAwLjAgOiBzcXJ0KGRpc3QpO1xuICAgICAgICBpbnZEaXN0ID0gZGlzdCA9PT0gMC4wID8gMC4wIDogMS4wIC8gZGlzdDtcblxuICAgICAgICBueCA9IGR4ICogaW52RGlzdDtcbiAgICAgICAgbnkgPSBkeSAqIGludkRpc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRuIDwgMC4wKSB7XG4gICAgICAgICAgICBueCA9IC1ueDtcbiAgICAgICAgICAgIG55ID0gLW55O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghY29sbGlkZShzaSwgc2opKSByZXR1cm47XG5cbiAgICBjcmVhdGVDb250YWN0KFxuICAgICAgICBzaS5ib2R5LFxuICAgICAgICBzai5ib2R5LFxuICAgICAgICAxLjAgKyBtaW4oc2kuZWxhc3RpY2l0eSwgc2ouZWxhc3RpY2l0eSksXG4gICAgICAgIG1pbihzaS5mcmljdGlvbiwgc2ouZnJpY3Rpb24pLFxuICAgICAgICBueCxcbiAgICAgICAgbnksXG4gICAgICAgIHhqeCAtIHIgKiBueCxcbiAgICAgICAgeGp5IC0gciAqIG55LFxuICAgICAgICBkaXN0IC0gcixcbiAgICAgICAgY29udGFjdHNcbiAgICApO1xufVxuXG5cbmZ1bmN0aW9uIHNlZ21lbnRTZWdtZW50KHNpLCBzaiwgY29udGFjdHMpIHtcbiAgICB2YXIgYWkgPSBzaS5fYSxcbiAgICAgICAgYWl4ID0gYWkueCxcbiAgICAgICAgYWl5ID0gYWkueSxcbiAgICAgICAgYmkgPSBzaS5fYixcbiAgICAgICAgYml4ID0gYmkueCxcbiAgICAgICAgYml5ID0gYmkueSxcbiAgICAgICAgcmkgPSBzaS5yYWRpdXMsXG5cbiAgICAgICAgYWogPSBzai5fYSxcbiAgICAgICAgYWp4ID0gYWoueCxcbiAgICAgICAgYWp5ID0gYWoueSxcbiAgICAgICAgYmogPSBzai5fYixcbiAgICAgICAgYmp4ID0gYmoueCxcbiAgICAgICAgYmp5ID0gYmoueSxcbiAgICAgICAgcmogPSBzai5yYWRpdXMsXG4gICAgICAgIGQwLCBkMSwgZDIsIGQzLCBtaSwgbWosIG0sIHMsIHQsIHV4LCB1eSwgdngsIHZ5LCBhbXgsIGFteSwgYm14LCBibXk7XG5cbiAgICBzZWdtZW50U2VnbWVudEFycmF5WzBdID0gZDAgPSBzZWdtZW50UG9pbnREaXN0YW5jZVNxKGFpeCwgYWl5LCBiaXgsIGJpeSwgYWp4LCBhankpO1xuICAgIHNlZ21lbnRTZWdtZW50QXJyYXlbMV0gPSBkMSA9IHNlZ21lbnRQb2ludERpc3RhbmNlU3EoYWl4LCBhaXksIGJpeCwgYml5LCBiangsIGJqeSk7XG4gICAgc2VnbWVudFNlZ21lbnRBcnJheVsyXSA9IGQyID0gc2VnbWVudFBvaW50RGlzdGFuY2VTcShhangsIGFqeSwgYmp4LCBianksIGFpeCwgYWl5KTtcbiAgICBzZWdtZW50U2VnbWVudEFycmF5WzNdID0gZDMgPSBzZWdtZW50UG9pbnREaXN0YW5jZVNxKGFqeCwgYWp5LCBiangsIGJqeSwgYml4LCBiaXkpO1xuXG4gICAgbWkgPSBkMCA8IGQxID8gMCA6IDE7XG4gICAgbWogPSBkMiA8IGQzID8gMiA6IDM7XG4gICAgbSA9IHNlZ21lbnRTZWdtZW50QXJyYXlbbWldIDwgc2VnbWVudFNlZ21lbnRBcnJheVttal0gPyBtaSA6IG1qO1xuXG4gICAgdXggPSBiaXggLSBhaXg7XG4gICAgdXkgPSBiaXkgLSBhaXk7XG4gICAgdnggPSBianggLSBhang7XG4gICAgdnkgPSBiankgLSBhank7XG5cbiAgICBpZiAobSA9PT0gMCkge1xuICAgICAgICBzID0gKChhanggLSBhaXgpICogdXggKyAoYWp5IC0gYWl5KSAqIHV5KSAvICh1eCAqIHV4ICsgdXkgKiB1eSk7XG4gICAgICAgIHMgPSBzIDwgMCA/IDAgOiAocyA+IDEgPyAxIDogcyk7XG4gICAgICAgIHQgPSAwO1xuICAgIH0gZWxzZSBpZiAobSA9PT0gMSkge1xuICAgICAgICBzID0gKChianggLSBhaXgpICogdXggKyAoYmp5IC0gYWl5KSAqIHV5KSAvICh1eCAqIHV4ICsgdXkgKiB1eSk7XG4gICAgICAgIHMgPSBzIDwgMCA/IDAgOiAocyA+IDEgPyAxIDogcyk7XG4gICAgICAgIHQgPSAxO1xuICAgIH0gZWxzZSBpZiAobSA9PT0gMikge1xuICAgICAgICBzID0gMDtcbiAgICAgICAgdCA9ICgoYWl4IC0gYWp4KSAqIHZ4ICsgKGFpeSAtIGFqeSkgKiB2eSkgLyAodnggKiB2eCArIHZ5ICogdnkpO1xuICAgICAgICB0ID0gdCA8IDAgPyAwIDogKHQgPiAxID8gMSA6IHQpO1xuICAgIH0gZWxzZSBpZiAobSA9PT0gMykge1xuICAgICAgICBzID0gMTtcbiAgICAgICAgdCA9ICgoYml4IC0gYWp4KSAqIHZ4ICsgKGJpeSAtIGFqeSkgKiB2eSkgLyAodnggKiB2eCArIHZ5ICogdnkpO1xuICAgICAgICB0ID0gdCA8IDAgPyAwIDogKHQgPiAxID8gMSA6IHQpO1xuICAgIH1cblxuICAgIGFteCA9IGFpeCArICh1eCAqIHMpO1xuICAgIGFteSA9IGFpeSArICh1eSAqIHMpO1xuICAgIGJteCA9IGFqeCArICh2eCAqIHQpO1xuICAgIGJteSA9IGFqeSArICh2eSAqIHQpO1xuXG4gICAgY2lyY2xlMkNpcmNsZShcbiAgICAgICAgc2ksXG4gICAgICAgIHNqLFxuICAgICAgICBhbXgsIGFteSwgcmksXG4gICAgICAgIGJteCwgYm15LCByaixcbiAgICAgICAgY29udGFjdHNcbiAgICApO1xufVxuXG5cbmZ1bmN0aW9uIGNvbnZleFNlZ21lbnQoc2ksIHNqLCBjb250YWN0cykge1xuICAgIHZhciB2ZXJ0aWNlcyA9IHNpLl92ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHNpLl9ub3JtYWxzLFxuXG4gICAgICAgIGEgPSBzai5fYSxcbiAgICAgICAgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBiID0gc2ouX2IsXG4gICAgICAgIGJ4ID0gYi54LFxuICAgICAgICBieSA9IGIueSxcbiAgICAgICAgbmogPSBzai5fbm9ybWFsLFxuICAgICAgICByYWRpdXMgPSBzai5yYWRpdXMsXG4gICAgICAgIG5qeCA9IG5qLngsXG4gICAgICAgIG5qeSA9IG5qLnksXG5cbiAgICAgICAgc2VnRCA9IG5qeCAqIGF4ICsgbmp5ICogYXksXG4gICAgICAgIG1pbk5vcm0gPSB2YWx1ZU9uQXhpcyh2ZXJ0aWNlcywgbmp4LCBuanksIHNlZ0QpIC0gcmFkaXVzLFxuICAgICAgICBtaW5OZWcgPSB2YWx1ZU9uQXhpcyh2ZXJ0aWNlcywgLW5qeCwgLW5qeSwgLXNlZ0QpIC0gcmFkaXVzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBwb2x5TWluID0gLUluZmluaXR5LFxuICAgICAgICB2LCBuLCBkaXN0LCBpLCB2YXgsIHZheSwgdmJ4LCB2YnksIHUsIGUsIG54LCBueSwgY291bnQgPSAwO1xuXG4gICAgaWYgKG1pbk5lZyA+IDAgfHwgbWluTm9ybSA+IDApIHJldHVybjtcblxuICAgIGkgPSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2ID0gdmVydGljZXNbaV07XG4gICAgICAgIG4gPSBub3JtYWxzW2ldO1xuICAgICAgICBueCA9IG4ueDtcbiAgICAgICAgbnkgPSBuLnk7XG4gICAgICAgIGRpc3QgPSBzZWdtZW50VmFsdWVPbkF4aXMoYXgsIGF5LCBieCwgYnksIHJhZGl1cywgbngsIG55LCAobnggKiB2LnggKyBueSAqIHYueSkpO1xuXG4gICAgICAgIGlmIChkaXN0ID4gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzdCA+IHBvbHlNaW4pIHtcbiAgICAgICAgICAgIHBvbHlNaW4gPSBkaXN0O1xuICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuO1xuICAgIGlmICghY29sbGlkZShzaSwgc2opKSByZXR1cm47XG5cbiAgICBlID0gMS4wICsgbWluKHNpLmVsYXN0aWNpdHksIHNqLmVsYXN0aWNpdHkpO1xuICAgIHUgPSBtaW4oc2kuZnJpY3Rpb24sIHNqLmZyaWN0aW9uKTtcblxuICAgIG4gPSBub3JtYWxzW2luZGV4XTtcbiAgICBueCA9IG4ueDtcbiAgICBueSA9IG4ueTtcblxuICAgIHZheCA9IGF4ICsgKC1ueCAqIHJhZGl1cyk7XG4gICAgdmF5ID0gYXkgKyAoLW55ICogcmFkaXVzKTtcblxuICAgIHZieCA9IGJ4ICsgKC1ueCAqIHJhZGl1cyk7XG4gICAgdmJ5ID0gYnkgKyAoLW55ICogcmFkaXVzKTtcblxuICAgIGlmIChjb250YWlucyh2ZXJ0aWNlcywgbm9ybWFscywgdmF4LCB2YXkpKSB7XG4gICAgICAgIGNyZWF0ZUNvbnRhY3QoXG4gICAgICAgICAgICBzaS5ib2R5LFxuICAgICAgICAgICAgc2ouYm9keSxcbiAgICAgICAgICAgIGUsXG4gICAgICAgICAgICB1LFxuICAgICAgICAgICAgbngsXG4gICAgICAgICAgICBueSxcbiAgICAgICAgICAgIHZheCxcbiAgICAgICAgICAgIHZheSxcbiAgICAgICAgICAgIHBvbHlNaW4sXG4gICAgICAgICAgICBjb250YWN0c1xuICAgICAgICApO1xuICAgICAgICBjb3VudCsrO1xuICAgIH1cbiAgICBpZiAoY29udGFpbnModmVydGljZXMsIG5vcm1hbHMsIHZieCwgdmJ5KSkge1xuICAgICAgICBjcmVhdGVDb250YWN0KFxuICAgICAgICAgICAgc2kuYm9keSxcbiAgICAgICAgICAgIHNqLmJvZHksXG4gICAgICAgICAgICBlLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIG54LFxuICAgICAgICAgICAgbnksXG4gICAgICAgICAgICB2YngsXG4gICAgICAgICAgICB2YnksXG4gICAgICAgICAgICBwb2x5TWluLFxuICAgICAgICAgICAgY29udGFjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY291bnQrKztcbiAgICB9XG5cbiAgICBpZiAobWluTm9ybSA+PSBwb2x5TWluIHx8IG1pbk5lZyA+PSBwb2x5TWluKSB7XG4gICAgICAgIGlmIChtaW5Ob3JtID4gbWluTmVnKSB7XG4gICAgICAgICAgICBjb3VudCArPSBwb2ludHNCZWhpbmRTZWdtZW50KHNpLCBzaiwgZSwgdSwgYXgsIGF5LCBieCwgYnksIHJhZGl1cywgbngsIG55LCBtaW5Ob3JtLCAxLCBjb250YWN0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3VudCArPSBwb2ludHNCZWhpbmRTZWdtZW50KHNpLCBzaiwgZSwgdSwgYXgsIGF5LCBieCwgYnksIHJhZGl1cywgbngsIG55LCBtaW5OZWcsIC0xLCBjb250YWN0cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciBzZWdtZW50U2VnbWVudEFycmF5ID0gWzAuMCwgMC4wLCAwLjAsIDAuMF07XG5cbmZ1bmN0aW9uIHBvaW50c0JlaGluZFNlZ21lbnQoc2ksIHNqLCBlLCB1LCBheCwgYXksIGJ4LCBieSwgcmFkaXVzLCBueCwgbnksIGRpc3QsIGNvZWYsIGNvbnRhY3RzKSB7XG4gICAgdmFyIGR0YSA9IG54ICogYXkgLSBueSAqIGF4LFxuICAgICAgICBkdGIgPSBueCAqIGJ5IC0gbnkgKiBieCxcbiAgICAgICAgdmVydGljZXMgPSBzaS5fdmVydGljZXMsXG4gICAgICAgIGkgPSB2ZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgIHYsIHZ4LCB2eSwgZHQsXG4gICAgICAgIGNvdW50ID0gMDtcblxuICAgIG54ICo9IGNvZWY7XG4gICAgbnkgKj0gY29lZjtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdiA9IHZlcnRpY2VzW2ldXG4gICAgICAgIHZ4ID0gdi54O1xuICAgICAgICB2eSA9IHYueTtcblxuICAgICAgICBpZiAoKHZ4ICogbnggKyB2eSAqIG55KSA8IChueCAqIGF4ICsgbnkgKiBheSkgKiBjb2VmICsgcmFkaXVzKSB7XG4gICAgICAgICAgICBkdCA9IG54ICogdnkgLSBueSAqIHZ4O1xuICAgICAgICAgICAgaWYgKGR0YSA+PSBkdCAmJiBkdCA+PSBkdGIpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVDb250YWN0KFxuICAgICAgICAgICAgICAgICAgICBzaS5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBzai5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgICAgICBueCxcbiAgICAgICAgICAgICAgICAgICAgbnksXG4gICAgICAgICAgICAgICAgICAgIHZ4LFxuICAgICAgICAgICAgICAgICAgICB2eSxcbiAgICAgICAgICAgICAgICAgICAgZGlzdCxcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdHNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG59XG5cbmZ1bmN0aW9uIHNlZ21lbnRQb2ludERpc3RhbmNlU3EoYXgsIGF5LCBieCwgYnksIHB4LCBweSkge1xuICAgIHZhciB3eCA9IHB4IC0gYXgsXG4gICAgICAgIHd5ID0gcHkgLSBheSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG5cbiAgICAgICAgcHJvaiA9IHd4ICogZHggKyB3eSAqIGR5LFxuICAgICAgICB2c3E7XG5cbiAgICBpZiAocHJvaiA8PSAwLjApIHJldHVybiB3eCAqIHd4ICsgd3kgKiB3eTtcblxuICAgIHZzcSA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChwcm9qID49IHZzcSkgcmV0dXJuICh3eCAqIHd4ICsgd3kgKiB3eSkgLSAyICogcHJvaiArIHZzcTtcblxuXG4gICAgcmV0dXJuICh3eCAqIHd4ICsgd3kgKiB3eSkgLSBwcm9qICogcHJvaiAvIHZzcTtcbn1cblxuZnVuY3Rpb24gc2VnbWVudFZhbHVlT25BeGlzKGF4LCBheSwgYngsIGJ5LCByLCBueCwgbnksIGQpIHtcbiAgICB2YXIgYSA9IChueCAqIGF4ICsgbnkgKiBheSkgLSByLFxuICAgICAgICBiID0gKG54ICogYnggKyBueSAqIGJ5KSAtIHI7XG5cbiAgICByZXR1cm4gbWluKGEsIGIpIC0gZDtcbn1cblxuXG5mdW5jdGlvbiBjb252ZXhDaXJjbGUoc2ksIHNqLCBjb250YWN0cykge1xuICAgIHZhciB2ZXJ0aWNlcyA9IHNpLl92ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHNpLl9ub3JtYWxzLFxuICAgICAgICB4aiA9IHNqLnBvc2l0aW9uLFxuICAgICAgICB4anggPSB4ai54LFxuICAgICAgICB4ankgPSB4ai55LFxuICAgICAgICByYWRpdXMgPSBzai5yYWRpdXMsXG5cbiAgICAgICAgdmVydGV4LCBub3JtYWwsIHMsIHNlcGFyYXRpb24gPSAtSW5maW5pdHksXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIHYxLCB2MiwgdjF4LCB2MXksIHYyeCwgdjJ5LCBleCwgZXksIGR4LCBkeSwgdSwgZGlzdCwgaW52RGlzdCxcblxuICAgICAgICBueCwgbnksXG4gICAgICAgIGkgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICBub3JtYWwgPSBub3JtYWxzW2ldO1xuICAgICAgICBzID0gbm9ybWFsLnggKiAoeGp4IC0gdmVydGV4LngpICsgbm9ybWFsLnkgKiAoeGp5IC0gdmVydGV4LnkpO1xuXG4gICAgICAgIGlmIChzID4gcmFkaXVzKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHMgPiBzZXBhcmF0aW9uKSB7XG4gICAgICAgICAgICBzZXBhcmF0aW9uID0gcztcbiAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybjtcblxuICAgIG5vcm1hbCA9IG5vcm1hbHNbaW5kZXhdO1xuICAgIG54ID0gbm9ybWFsLng7XG4gICAgbnkgPSBub3JtYWwueTtcblxuICAgIHYxID0gdmVydGljZXNbaW5kZXhdO1xuICAgIHYxeCA9IHYxLng7XG4gICAgdjF5ID0gdjEueTtcbiAgICB2MiA9IHZlcnRpY2VzW2luZGV4ICsgMV0gfHwgdmVydGljZXNbMF07XG4gICAgdjJ4ID0gdjIueDtcbiAgICB2MnkgPSB2Mi55O1xuXG4gICAgZXggPSB2MnggLSB2MXg7XG4gICAgZXkgPSB2MnkgLSB2MXk7XG5cbiAgICBkeCA9IHhqeCAtIHYxeDtcbiAgICBkeSA9IHhqeSAtIHYxeTtcblxuICAgIHUgPSAoZXggKiBkeCArIGV5ICogZHkpIC8gKGV4ICogZXggKyBleSAqIGV5KTtcblxuICAgIGlmICh1IDwgMC4wKSB7XG4gICAgICAgIGR4ID0geGp4IC0gdjF4O1xuICAgICAgICBkeSA9IHhqeSAtIHYxeTtcblxuICAgICAgICBkaXN0ID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkaXN0ID4gcmFkaXVzICogcmFkaXVzKSByZXR1cm47XG5cbiAgICAgICAgZGlzdCA9IHNxcnQoZGlzdCk7XG4gICAgICAgIGludkRpc3QgPSBkaXN0ID4gMC4wID8gMS4wIC8gZGlzdCA6IDAuMDtcblxuICAgICAgICBueCA9IGR4ICogaW52RGlzdDtcbiAgICAgICAgbnkgPSBkeSAqIGludkRpc3Q7XG4gICAgfSBlbHNlIGlmICh1ID4gMS4wKSB7XG4gICAgICAgIGR4ID0geGp4IC0gdjJ4O1xuICAgICAgICBkeSA9IHhqeSAtIHYyeTtcblxuICAgICAgICBkaXN0ID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkaXN0ID4gcmFkaXVzICogcmFkaXVzKSByZXR1cm47XG5cbiAgICAgICAgZGlzdCA9IHNxcnQoZGlzdCk7XG4gICAgICAgIGludkRpc3QgPSBkaXN0ID4gMC4wID8gMS4wIC8gZGlzdCA6IDAuMDtcblxuICAgICAgICBueCA9IGR4ICogaW52RGlzdDtcbiAgICAgICAgbnkgPSBkeSAqIGludkRpc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsID0gbm9ybWFsc1tpbmRleF07XG4gICAgICAgIG54ID0gbm9ybWFsLng7XG4gICAgICAgIG55ID0gbm9ybWFsLnk7XG5cbiAgICAgICAgZGlzdCA9IHNlcGFyYXRpb247XG4gICAgfVxuICAgIGlmICghY29sbGlkZShzaSwgc2opKSByZXR1cm47XG5cbiAgICBjcmVhdGVDb250YWN0KFxuICAgICAgICBzaS5ib2R5LFxuICAgICAgICBzai5ib2R5LFxuICAgICAgICAxLjAgKyBtaW4oc2kuZWxhc3RpY2l0eSwgc2ouZWxhc3RpY2l0eSksXG4gICAgICAgIG1pbihzaS5mcmljdGlvbiwgc2ouZnJpY3Rpb24pLFxuICAgICAgICBueCxcbiAgICAgICAgbnksXG4gICAgICAgIHhqeCAtIHJhZGl1cyAqIG54LFxuICAgICAgICB4ankgLSByYWRpdXMgKiBueSxcbiAgICAgICAgZGlzdCAtIHJhZGl1cyxcbiAgICAgICAgY29udGFjdHNcbiAgICApO1xufVxuXG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHZlcnRpY2VzLCBub3JtYWxzLCBweCwgcHkpIHtcbiAgICB2YXIgbiwgbngsIG55LCB2LCB2eCwgdnksXG4gICAgICAgIGkgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG4gPSBub3JtYWxzW2ldO1xuICAgICAgICBueCA9IG4ueDtcbiAgICAgICAgbnkgPSBuLnk7XG4gICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgdnggPSB2Lng7XG4gICAgICAgIHZ5ID0gdi55O1xuXG4gICAgICAgIGlmICgobnggKiBweCArIG55ICogcHkpIC0gKG54ICogdnggKyBueSAqIHZ5KSA+IDApIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuXG5mdW5jdGlvbiBmaW5kQ29udGFjdHMoc2ksIHNqLCBub3JtYWwsIGRpc3QsIGNvbnRhY3RzKSB7XG4gICAgaWYgKCFjb2xsaWRlKHNpLCBzaikpIHJldHVybjtcbiAgICB2YXIgdmVydGljZXNpID0gc2kuX3ZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzaSA9IHNpLl9ub3JtYWxzLFxuICAgICAgICB2ZXJ0aWNlc2ogPSBzai5fdmVydGljZXMsXG4gICAgICAgIG5vcm1hbHNqID0gc2ouX25vcm1hbHMsXG4gICAgICAgIHYsIHZ4LCB2eSxcbiAgICAgICAgbnggPSBub3JtYWwueCxcbiAgICAgICAgbnkgPSBub3JtYWwueSxcblxuICAgICAgICBlID0gMS4wICsgbWluKHNpLmVsYXN0aWNpdHksIHNqLmVsYXN0aWNpdHkpLFxuICAgICAgICB1ID0gbWluKHNpLmZyaWN0aW9uLCBzai5mcmljdGlvbiksXG5cbiAgICAgICAgaTtcblxuICAgIGkgPSB2ZXJ0aWNlc2kubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdiA9IHZlcnRpY2VzaVtpXTtcbiAgICAgICAgdnggPSB2Lng7XG4gICAgICAgIHZ5ID0gdi55O1xuXG4gICAgICAgIGlmIChjb250YWlucyh2ZXJ0aWNlc2osIG5vcm1hbHNqLCB2eCwgdnkpKSB7XG4gICAgICAgICAgICBjcmVhdGVDb250YWN0KFxuICAgICAgICAgICAgICAgIHNpLmJvZHksXG4gICAgICAgICAgICAgICAgc2ouYm9keSxcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgbngsXG4gICAgICAgICAgICAgICAgbnksXG4gICAgICAgICAgICAgICAgdngsXG4gICAgICAgICAgICAgICAgdnksXG4gICAgICAgICAgICAgICAgZGlzdCxcbiAgICAgICAgICAgICAgICBjb250YWN0c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGkgPSB2ZXJ0aWNlc2oubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdiA9IHZlcnRpY2VzaltpXTtcbiAgICAgICAgdnggPSB2Lng7XG4gICAgICAgIHZ5ID0gdi55O1xuXG4gICAgICAgIGlmIChjb250YWlucyh2ZXJ0aWNlc2ksIG5vcm1hbHNpLCB2eCwgdnkpKSB7XG4gICAgICAgICAgICBjcmVhdGVDb250YWN0KFxuICAgICAgICAgICAgICAgIHNpLmJvZHksXG4gICAgICAgICAgICAgICAgc2ouYm9keSxcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgbngsXG4gICAgICAgICAgICAgICAgbnksXG4gICAgICAgICAgICAgICAgdngsXG4gICAgICAgICAgICAgICAgdnksXG4gICAgICAgICAgICAgICAgZGlzdCxcbiAgICAgICAgICAgICAgICBjb250YWN0c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5mdW5jdGlvbiB2YWx1ZU9uQXhpcyh2ZXJ0aWNlcywgbngsIG55LCBkKSB7XG4gICAgdmFyIHYsIG0gPSBJbmZpbml0eSxcbiAgICAgICAgaSA9IHZlcnRpY2VzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdiA9IHZlcnRpY2VzW2ldO1xuICAgICAgICBtID0gbWluKG0sIG54ICogdi54ICsgbnkgKiB2LnkpO1xuICAgIH1cblxuICAgIHJldHVybiBtIC0gZDtcbn1cblxuXG52YXIgbGFzdE1pbk1TQSA9IDAuMDtcblxuZnVuY3Rpb24gZmluZE1TQShzaSwgc2opIHtcbiAgICB2YXIgdmVydGljZXNpID0gc2kuX3ZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzaSA9IHNpLl9ub3JtYWxzLFxuICAgICAgICBjb3VudGkgPSBub3JtYWxzaS5sZW5ndGgsXG4gICAgICAgIHZlcnRpY2VzaiA9IHNqLl92ZXJ0aWNlcyxcblxuICAgICAgICBuLCB2LCBkaXN0LCBtaW4gPSAtSW5maW5pdHksXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGkgPSBjb3VudGk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG4gPSBub3JtYWxzaVtpXTtcbiAgICAgICAgdiA9IHZlcnRpY2VzaVtpXTtcblxuICAgICAgICBkaXN0ID0gdmFsdWVPbkF4aXModmVydGljZXNqLCBuLngsIG4ueSwgKG4ueCAqIHYueCArIG4ueSAqIHYueSkpO1xuXG4gICAgICAgIGlmIChkaXN0ID4gMC4wKSByZXR1cm4gLTE7XG5cbiAgICAgICAgaWYgKGRpc3QgPiBtaW4pIHtcbiAgICAgICAgICAgIG1pbiA9IGRpc3Q7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0TWluTVNBID0gbWluO1xuICAgIHJldHVybiBpbmRleDtcbn1cblxuXG5mdW5jdGlvbiBjb252ZXhDb252ZXgoc2ksIHNqLCBjb250YWN0cykge1xuICAgIHZhciBpbmRleGksIG1pbmksIGluZGV4aiwgbWluajtcblxuICAgIGluZGV4aSA9IGZpbmRNU0Eoc2ksIHNqKTtcbiAgICBpZiAoaW5kZXhpIDwgMCkgcmV0dXJuO1xuICAgIG1pbmkgPSBsYXN0TWluTVNBO1xuXG4gICAgaW5kZXhqID0gZmluZE1TQShzaiwgc2kpO1xuICAgIGlmIChpbmRleGogPCAwKSByZXR1cm47XG4gICAgbWluaiA9IGxhc3RNaW5NU0E7XG5cbiAgICBpZiAobWluaSA+IG1pbmopIHtcbiAgICAgICAgZmluZENvbnRhY3RzKHNpLCBzaiwgc2kuX25vcm1hbHNbaW5kZXhpXSwgbWluaSwgY29udGFjdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmRDb250YWN0cyhzaiwgc2ksIHNqLl9ub3JtYWxzW2luZGV4al0sIG1pbmosIGNvbnRhY3RzKTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gY29sbGlzaW9uVHlwZShzaSwgc2osIGNvbnRhY3RzKSB7XG4gICAgdmFyIHNpVHlwZSA9IHNpLnR5cGUsXG4gICAgICAgIHNqVHlwZSA9IHNqLnR5cGU7XG5cbiAgICBpZiAoc2lUeXBlID09PSBTaGFwZVR5cGUuQ2lyY2xlKSB7XG5cbiAgICAgICAgaWYgKHNqVHlwZSA9PT0gU2hhcGVUeXBlLkNpcmNsZSkge1xuICAgICAgICAgICAgY2lyY2xlQ2lyY2xlKHNpLCBzaiwgY29udGFjdHMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNqVHlwZSA9PT0gU2hhcGVUeXBlLlNlZ21lbnQpIHtcbiAgICAgICAgICAgIHNlZ21lbnRDaXJjbGUoc2osIHNpLCBjb250YWN0cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2pUeXBlID09PSBTaGFwZVR5cGUuQ29udmV4KSB7XG4gICAgICAgICAgICBjb252ZXhDaXJjbGUoc2osIHNpLCBjb250YWN0cyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNpVHlwZSA9PT0gU2hhcGVUeXBlLkNvbnZleCkge1xuXG4gICAgICAgIGlmIChzalR5cGUgPT09IFNoYXBlVHlwZS5DaXJjbGUpIHtcbiAgICAgICAgICAgIGNvbnZleENpcmNsZShzaSwgc2osIGNvbnRhY3RzKTtcbiAgICAgICAgfSBlbHNlIGlmIChzalR5cGUgPT09IFNoYXBlVHlwZS5TZWdtZW50KSB7XG4gICAgICAgICAgICBjb252ZXhTZWdtZW50KHNpLCBzaiwgY29udGFjdHMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNqVHlwZSA9PT0gU2hhcGVUeXBlLkNvbnZleCkge1xuICAgICAgICAgICAgY29udmV4Q29udmV4KHNpLCBzaiwgY29udGFjdHMpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChzaVR5cGUgPT09IFNoYXBlVHlwZS5TZWdtZW50KSB7XG5cbiAgICAgICAgaWYgKHNqVHlwZSA9PT0gU2hhcGVUeXBlLkNpcmNsZSkge1xuICAgICAgICAgICAgc2VnbWVudENpcmNsZShzaSwgc2osIGNvbnRhY3RzKTtcbiAgICAgICAgfSBlbHNlIGlmIChzalR5cGUgPT09IFNoYXBlVHlwZS5TZWdtZW50KSB7XG4gICAgICAgICAgICBzZWdtZW50U2VnbWVudChzaSwgc2osIGNvbnRhY3RzKTtcbiAgICAgICAgfSBlbHNlIGlmIChzalR5cGUgPT09IFNoYXBlVHlwZS5Db252ZXgpIHtcbiAgICAgICAgICAgIGNvbnZleFNlZ21lbnQoc2osIHNpLCBjb250YWN0cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMk5lYXJwaGFzZTtcbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9ldmVudF9lbWl0dGVyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQGNsYXNzIFAyQ29uc3RyYWludFxuICogQGV4dGVuZHMgQ2xhc3NcbiAqIEBicmllZiAyZCBjb250YWN0IGVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIFAyQ29uc3RyYWludChiaSwgYmopIHtcblxuICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IFAyQm9keSBialxuICAgICAqIEBtZW1iZXJvZiBQMkNvbnN0cmFpbnRcbiAgICAgKi9cbiAgICB0aGlzLmJpID0gYmk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgUDJCb2R5IGJqXG4gICAgICogQG1lbWJlcm9mIFAyQ29uc3RyYWludFxuICAgICAqL1xuICAgIHRoaXMuYmogPSBiajtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBBcnJheSBlcXVhdGlvbnNcbiAgICAgKiBAbWVtYmVyb2YgUDJDb25zdHJhaW50XG4gICAgICovXG4gICAgdGhpcy5lcXVhdGlvbnMgPSBbXTtcbn1cblxuRXZlbnRFbWl0dGVyLmV4dGVuZChQMkNvbnN0cmFpbnQpO1xuXG5cblAyQ29uc3RyYWludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUDJDb25zdHJhaW50O1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgTWF0aGYgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXRoZlwiKTtcbnZhciBWZWMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjMlwiKTtcbnZhciBQMkVxdWF0aW9uID0gcmVxdWlyZShcIi4uL2NvbnN0cmFpbnRzL3AyZXF1YXRpb25cIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIEBjbGFzcyBQMkNvbnRhY3RcbiAqIEBleHRlbmRzIFAyRXF1YXRpb25cbiAqIEBicmllZiAyZCBjb250YWN0IGVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIFAyQ29udGFjdCgpIHtcblxuICAgIFAyRXF1YXRpb24uY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubWluRm9yY2UgPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgVmVjMiBwXG4gICAgICogQG1lbWJlcm9mIFAyQ29udGFjdFxuICAgICAqL1xuICAgIHRoaXMucCA9IG5ldyBWZWMyO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IFZlYzIgblxuICAgICAqIEBtZW1iZXJvZiBQMkNvbnRhY3RcbiAgICAgKi9cbiAgICB0aGlzLm4gPSBuZXcgVmVjMjtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgc1xuICAgICAqIEBtZW1iZXJvZiBQMkNvbnRhY3RcbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIGVcbiAgICAgKiBAbWVtYmVyb2YgUDJDb250YWN0XG4gICAgICovXG4gICAgdGhpcy5lID0gMS4wO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciB1XG4gICAgICogQG1lbWJlcm9mIFAyQ29udGFjdFxuICAgICAqL1xuICAgIHRoaXMudSA9IDEuMDtcblxuICAgIHRoaXMucmkgPSBuZXcgVmVjMjtcbiAgICB0aGlzLnJqID0gbmV3IFZlYzI7XG5cbiAgICB0aGlzLnJpeG4gPSAwO1xuICAgIHRoaXMucmp4biA9IDA7XG59XG5cblAyRXF1YXRpb24uZXh0ZW5kKFAyQ29udGFjdCk7XG5cblxuUDJDb250YWN0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG5cbiAgICAgICAgcCA9IHRoaXMucCxcbiAgICAgICAgcHggPSBwLngsXG4gICAgICAgIHB5ID0gcC55LFxuICAgICAgICBuID0gdGhpcy5uLFxuICAgICAgICBueCA9IG4ueCxcbiAgICAgICAgbnkgPSBuLnksXG5cbiAgICAgICAgeGkgPSBiaS5wb3NpdGlvbixcbiAgICAgICAgeGogPSBiai5wb3NpdGlvbixcblxuICAgICAgICByaSA9IHRoaXMucmksXG4gICAgICAgIHJpeCA9IHB4IC0geGkueCxcbiAgICAgICAgcml5ID0gcHkgLSB4aS55LFxuXG4gICAgICAgIHJqID0gdGhpcy5yaixcbiAgICAgICAgcmp4ID0gcHggLSB4ai54LFxuICAgICAgICByankgPSBweSAtIHhqLnksXG5cbiAgICAgICAgcml4biA9IHJpeCAqIG55IC0gcml5ICogbngsXG4gICAgICAgIHJqeG4gPSByanggKiBueSAtIHJqeSAqIG54O1xuXG4gICAgcmkueCA9IHJpeDtcbiAgICByaS55ID0gcml5O1xuXG4gICAgcmoueCA9IHJqeDtcbiAgICByai55ID0gcmp5O1xuXG4gICAgdGhpcy5yaXhuID0gcml4bjtcbiAgICB0aGlzLnJqeG4gPSByanhuO1xuXG4gICAgdGhpcy5sYW1iZGEgPSAwO1xuICAgIHRoaXMuY2FsY3VsYXRlQihoKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUMoKTtcbn07XG5cblxuUDJDb250YWN0LnByb3RvdHlwZS5jYWxjdWxhdGVCID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG5cbiAgICAgICAgbiA9IHRoaXMubixcbiAgICAgICAgbnggPSBuLngsXG4gICAgICAgIG55ID0gbi55LFxuXG4gICAgICAgIHZpID0gYmkudmVsb2NpdHksXG4gICAgICAgIHdpID0gYmkuYW5ndWxhclZlbG9jaXR5LFxuICAgICAgICBmaSA9IGJpLmZvcmNlLFxuICAgICAgICB0aSA9IGJpLnRvcnF1ZSxcbiAgICAgICAgaW52TWkgPSBiaS5pbnZNYXNzLFxuICAgICAgICBpbnZJaSA9IGJpLmludkluZXJ0aWEsXG5cbiAgICAgICAgdmogPSBiai52ZWxvY2l0eSxcbiAgICAgICAgd2ogPSBiai5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgIGZqID0gYmouZm9yY2UsXG4gICAgICAgIHRqID0gYmoudG9ycXVlLFxuICAgICAgICBpbnZNaiA9IGJqLmludk1hc3MsXG4gICAgICAgIGludklqID0gYmouaW52SW5lcnRpYSxcblxuICAgICAgICByaSA9IHRoaXMucmksXG4gICAgICAgIHJpeCA9IHJpLngsXG4gICAgICAgIHJpeSA9IHJpLnksXG4gICAgICAgIHJqID0gdGhpcy5yaixcbiAgICAgICAgcmp4ID0gcmoueCxcbiAgICAgICAgcmp5ID0gcmoueSxcblxuICAgICAgICBlID0gdGhpcy5lLFxuXG4gICAgICAgIEdxID0gdGhpcy5zLFxuXG4gICAgICAgIEdXeCA9IHZqLnggKyAoLXdqICogcmp5KSAtIHZpLnggLSAoLXdpICogcml5KSxcbiAgICAgICAgR1d5ID0gdmoueSArICh3aiAqIHJqeCkgLSB2aS55IC0gKHdpICogcml4KSxcbiAgICAgICAgR1cgPSBlICogR1d4ICogbnggKyBlICogR1d5ICogbnksXG5cbiAgICAgICAgR2lNZnggPSBmai54ICogaW52TWogKyAoLXRqICogaW52SWogKiByankpIC0gZmkueCAqIGludk1pIC0gKC10aSAqIGludklpICogcml5KSxcbiAgICAgICAgR2lNZnkgPSBmai55ICogaW52TWogKyAodGogKiBpbnZJaiAqIHJqeCkgLSBmaS55ICogaW52TWkgLSAodGkgKiBpbnZJaSAqIHJpeCksXG4gICAgICAgIEdpTWYgPSBHaU1meCAqIG54ICsgR2lNZnkgKiBueTtcblxuICAgIHRoaXMuQiA9IC10aGlzLmEgKiBHcSAtIHRoaXMuYiAqIEdXIC0gaCAqIEdpTWY7XG59O1xuXG5cblAyQ29udGFjdC5wcm90b3R5cGUuY2FsY3VsYXRlQyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG5cbiAgICAgICAgcml4biA9IHRoaXMucml4bixcbiAgICAgICAgcmp4biA9IHRoaXMucmp4bixcblxuICAgICAgICBpbnZJaSA9IGJpLmludkluZXJ0aWEsXG4gICAgICAgIGludklqID0gYmouaW52SW5lcnRpYSxcblxuICAgICAgICBDID0gYmkuaW52TWFzcyArIGJqLmludk1hc3MgKyB0aGlzLmVwc2lsb24gKyBpbnZJaSAqIHJpeG4gKiByaXhuICsgaW52SWogKiByanhuICogcmp4bjtcblxuICAgIHRoaXMuaW52QyA9IEMgPT09IDAgPyAwIDogMSAvIEM7XG59O1xuXG5cblAyQ29udGFjdC5wcm90b3R5cGUuY2FsY3VsYXRlR1dsYW1iZGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJpID0gdGhpcy5iaSxcbiAgICAgICAgYmogPSB0aGlzLmJqLFxuXG4gICAgICAgIG4gPSB0aGlzLm4sXG5cbiAgICAgICAgdmxhbWJkYWkgPSBiaS52bGFtYmRhLFxuICAgICAgICB3bGFtYmRhaSA9IGJpLndsYW1iZGEsXG4gICAgICAgIHZsYW1iZGFqID0gYmoudmxhbWJkYSxcbiAgICAgICAgd2xhbWJkYWogPSBiai53bGFtYmRhLFxuXG4gICAgICAgIHVsYW1iZGF4ID0gdmxhbWJkYWoueCAtIHZsYW1iZGFpLngsXG4gICAgICAgIHVsYW1iZGF5ID0gdmxhbWJkYWoueSAtIHZsYW1iZGFpLnksXG5cbiAgICAgICAgR1dsYW1iZGEgPSB1bGFtYmRheCAqIG4ueCArIHVsYW1iZGF5ICogbi55O1xuXG4gICAgaWYgKHdsYW1iZGFpICE9IHVuZGVmaW5lZCkgR1dsYW1iZGEgLT0gd2xhbWJkYWkgKiB0aGlzLnJpeG47XG4gICAgaWYgKHdsYW1iZGFqICE9IHVuZGVmaW5lZCkgR1dsYW1iZGEgKz0gd2xhbWJkYWogKiB0aGlzLnJqeG47XG5cbiAgICByZXR1cm4gR1dsYW1iZGE7XG59O1xuXG5cblAyQ29udGFjdC5wcm90b3R5cGUuYWRkVG9MYW1iZGEgPSBmdW5jdGlvbiAoZGVsdGFMYW1iZGEpIHtcbiAgICB2YXIgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG5cbiAgICAgICAgbiA9IHRoaXMubixcbiAgICAgICAgbnggPSBuLngsXG4gICAgICAgIG55ID0gbi55LFxuXG4gICAgICAgIGludk1pID0gYmkuaW52TWFzcyxcbiAgICAgICAgdmxhbWJkYWkgPSBiaS52bGFtYmRhLFxuICAgICAgICBpbnZNaiA9IGJqLmludk1hc3MsXG4gICAgICAgIHZsYW1iZGFqID0gYmoudmxhbWJkYTtcblxuICAgIHZsYW1iZGFpLnggLT0gZGVsdGFMYW1iZGEgKiBpbnZNaSAqIG54O1xuICAgIHZsYW1iZGFpLnkgLT0gZGVsdGFMYW1iZGEgKiBpbnZNaSAqIG55O1xuXG4gICAgdmxhbWJkYWoueCArPSBkZWx0YUxhbWJkYSAqIGludk1qICogbng7XG4gICAgdmxhbWJkYWoueSArPSBkZWx0YUxhbWJkYSAqIGludk1qICogbnk7XG5cbiAgICBpZiAoYmkud2xhbWJkYSAhPSB1bmRlZmluZWQpIGJpLndsYW1iZGEgLT0gZGVsdGFMYW1iZGEgKiBiaS5pbnZJbmVydGlhICogdGhpcy5yaXhuO1xuICAgIGlmIChiai53bGFtYmRhICE9IHVuZGVmaW5lZCkgYmoud2xhbWJkYSArPSBkZWx0YUxhbWJkYSAqIGJqLmludkluZXJ0aWEgKiB0aGlzLnJqeG47XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUDJDb250YWN0O1xuIiwidmFyIFAyQ29uc3RyYWludCA9IHJlcXVpcmUoXCIuL3AyY29uc3RyYWludFwiKTtcbnZhciBQMkNvbnRhY3QgPSByZXF1aXJlKFwiLi9wMmNvbnRhY3RcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuXG4vKipcbiAqIEBjbGFzcyBQMkRpc3RhbmNlQ29uc3RyYWludFxuICogQGV4dGVuZHMgUDJDb25zdHJhaW50XG4gKiBAYnJpZWYgMmQgY29udGFjdCBlcXVhdGlvblxuICovXG5mdW5jdGlvbiBQMkRpc3RhbmNlQ29uc3RyYWludChiaSwgYmosIGRpc3RhbmNlLCBtYXhGb3JjZSkge1xuXG4gICAgUDJDb25zdHJhaW50LmNhbGwodGhpcywgYmksIGJqKTtcblxuICAgIHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZSB8fCAoZGlzdGFuY2UgPSAxKTtcbiAgICBtYXhGb3JjZSB8fCAobWF4Rm9yY2UgPSAxZTYpO1xuXG4gICAgdmFyIGRpc3RhbmNlRXF1YXRpb24gPSB0aGlzLl9kaXN0YW5jZUVxdWF0aW9uID0gbmV3IFAyQ29udGFjdCgpO1xuICAgIGRpc3RhbmNlRXF1YXRpb24uYmkgPSBiaTtcbiAgICBkaXN0YW5jZUVxdWF0aW9uLmJqID0gYmo7XG4gICAgZGlzdGFuY2VFcXVhdGlvbi5taW5Gb3JjZSA9IC1tYXhGb3JjZTtcbiAgICBkaXN0YW5jZUVxdWF0aW9uLm1heEZvcmNlID0gbWF4Rm9yY2U7XG4gICAgY29uc29sZS5sb2coZGlzdGFuY2VFcXVhdGlvbik7XG5cbiAgICB0aGlzLmVxdWF0aW9ucy5wdXNoKGRpc3RhbmNlRXF1YXRpb24pO1xufVxuXG5QMkNvbnN0cmFpbnQuZXh0ZW5kKFAyRGlzdGFuY2VDb25zdHJhaW50KTtcblxuXG5QMkRpc3RhbmNlQ29uc3RyYWludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkaXN0YW5jZUVxdWF0aW9uID0gdGhpcy5fZGlzdGFuY2VFcXVhdGlvbixcbiAgICAgICAgZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlLFxuICAgICAgICBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcbiAgICAgICAgbiA9IGRpc3RhbmNlRXF1YXRpb24ubixcbiAgICAgICAgcmkgPSBkaXN0YW5jZUVxdWF0aW9uLnJpLFxuICAgICAgICByaiA9IGRpc3RhbmNlRXF1YXRpb24ucmosXG4gICAgICAgIHhpID0gYmkucG9zaXRpb24sXG4gICAgICAgIHhqID0gYmoucG9zaXRpb24sXG4gICAgICAgIG54ID0geGoueCAtIHhpLngsXG4gICAgICAgIG55ID0geGoueSAtIHhpLnksXG4gICAgICAgIGxlbiA9IG54ICogbnggKyBueSAqIG55LFxuICAgICAgICBpbnZMZW4gPSBsZW4gPT09IDAgPyAwIDogMSAvIChsZW4gPSBzcXJ0KGxlbikpXG5cbiAgICBueCAqPSBpbnZMZW47XG4gICAgbnkgKj0gaW52TGVuO1xuICAgIG4ueCA9IG54O1xuICAgIG4ueSA9IG55O1xuXG4gICAgcmkueCA9IG54ICogZGlzdGFuY2UgKiAwLjU7XG4gICAgcmkueSA9IG55ICogZGlzdGFuY2UgKiAwLjU7XG5cbiAgICByai54ID0gbnggKiBkaXN0YW5jZSAqIC0wLjU7XG4gICAgcmoueSA9IG55ICogZGlzdGFuY2UgKiAtMC41O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFAyRGlzdGFuY2VDb25zdHJhaW50O1xuIiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2V2ZW50X2VtaXR0ZXJcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgUDJFcXVhdGlvblxuICogQGV4dGVuZHMgQ2xhc3NcbiAqIEBicmllZiAyZCBjb250YWN0IGVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIFAyRXF1YXRpb24oKSB7XG5cbiAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBQMkJvZHkgYmpcbiAgICAgKiBAbWVtYmVyb2YgUDJFcXVhdGlvblxuICAgICAqL1xuICAgIHRoaXMuYmkgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgUDJCb2R5IGJqXG4gICAgICogQG1lbWJlcm9mIFAyRXF1YXRpb25cbiAgICAgKi9cbiAgICB0aGlzLmJqID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciBtaW5Gb3JjZVxuICAgICAqIEBtZW1iZXJvZiBQMkVxdWF0aW9uXG4gICAgICovXG4gICAgdGhpcy5taW5Gb3JjZSA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciBtYXhGb3JjZVxuICAgICAqIEBtZW1iZXJvZiBQMkVxdWF0aW9uXG4gICAgICovXG4gICAgdGhpcy5tYXhGb3JjZSA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgTnVtYmVyIHJlbGF4YXRpb25cbiAgICAgKiBAYnJpZWYgbnVtYmVyIG9mIHRpbWVzdGVwcyBpdCB0YWtlc3RvIHN0YWJpbGl6ZSB0aGUgY29uc3RyYWludFxuICAgICAqIEBtZW1iZXJvZiBQMkVxdWF0aW9uXG4gICAgICovXG4gICAgdGhpcy5yZWxheGF0aW9uID0gNDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgc3RpZmZuZXNzXG4gICAgICogQGJyaWVmIHNwcmluZyBjb25zdGFudFxuICAgICAqIEBtZW1iZXJvZiBQMkVxdWF0aW9uXG4gICAgICovXG4gICAgdGhpcy5zdGlmZm5lc3MgPSAxZTY7XG5cbiAgICB0aGlzLmEgPSAwO1xuICAgIHRoaXMuYiA9IDA7XG4gICAgdGhpcy5lcHNpbG9uID0gMDtcblxuICAgIHRoaXMubGFtYmRhID0gMDtcbiAgICB0aGlzLkIgPSAwO1xuICAgIHRoaXMuaW52QyA9IDA7XG59XG5cbkV2ZW50RW1pdHRlci5leHRlbmQoUDJFcXVhdGlvbik7XG5cblxuUDJFcXVhdGlvbi5wcm90b3R5cGUudXBkYXRlQ29uc3RhbnRzID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgayA9IHRoaXMuc3RpZmZuZXNzLFxuICAgICAgICBkID0gdGhpcy5yZWxheGF0aW9uO1xuXG4gICAgdGhpcy5hID0gNC4wIC8gKGggKiAoMS4wICsgNC4wICogZCkpO1xuICAgIHRoaXMuYiA9ICg0LjAgKiBkKSAvICgxLjAgKyA0LjAgKiBkKTtcbiAgICB0aGlzLmVwc2lsb24gPSA0LjAgLyAoaCAqIGggKiBrICogKDEuMCArIDQuMCAqIGQpKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMkVxdWF0aW9uO1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgTWF0aGYgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXRoZlwiKTtcbnZhciBWZWMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjMlwiKTtcbnZhciBQMkVxdWF0aW9uID0gcmVxdWlyZShcIi4vcDJlcXVhdGlvblwiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQGNsYXNzIFAyRnJpY3Rpb25cbiAqIEBleHRlbmRzIFAyRXF1YXRpb25cbiAqIEBicmllZiAyZCBjb250YWN0IGVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIFAyRnJpY3Rpb24oKSB7XG5cbiAgICBQMkVxdWF0aW9uLmNhbGwodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgVmVjMiBwXG4gICAgICogQG1lbWJlcm9mIFAyRnJpY3Rpb25cbiAgICAgKi9cbiAgICB0aGlzLnAgPSBuZXcgVmVjMjtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBWZWMyIHRcbiAgICAgKiBAbWVtYmVyb2YgUDJGcmljdGlvblxuICAgICAqL1xuICAgIHRoaXMudCA9IG5ldyBWZWMyO1xuXG4gICAgdGhpcy5yaSA9IG5ldyBWZWMyO1xuICAgIHRoaXMucmogPSBuZXcgVmVjMjtcblxuICAgIHRoaXMucml4dCA9IDA7XG4gICAgdGhpcy5yanh0ID0gMDtcbn1cblxuUDJFcXVhdGlvbi5leHRlbmQoUDJGcmljdGlvbik7XG5cblxuUDJGcmljdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChoKSB7XG4gICAgdmFyIGJpID0gdGhpcy5iaSxcbiAgICAgICAgYmogPSB0aGlzLmJqLFxuXG4gICAgICAgIHAgPSB0aGlzLnAsXG4gICAgICAgIHB4ID0gcC54LFxuICAgICAgICBweSA9IHAueSxcbiAgICAgICAgdCA9IHRoaXMudCxcbiAgICAgICAgdHggPSB0LngsXG4gICAgICAgIHR5ID0gdC55LFxuXG4gICAgICAgIHhpID0gYmkucG9zaXRpb24sXG4gICAgICAgIHhqID0gYmoucG9zaXRpb24sXG5cbiAgICAgICAgcmkgPSB0aGlzLnJpLFxuICAgICAgICByaXggPSBweCAtIHhpLngsXG4gICAgICAgIHJpeSA9IHB5IC0geGkueSxcblxuICAgICAgICByaiA9IHRoaXMucmosXG4gICAgICAgIHJqeCA9IHB4IC0geGoueCxcbiAgICAgICAgcmp5ID0gcHkgLSB4ai55LFxuXG4gICAgICAgIHJpeHQgPSByaXggKiB0eSAtIHJpeSAqIHR4LFxuICAgICAgICByanh0ID0gcmp4ICogdHkgLSByankgKiB0eDtcblxuICAgIHJpLnggPSByaXg7XG4gICAgcmkueSA9IHJpeTtcblxuICAgIHJqLnggPSByang7XG4gICAgcmoueSA9IHJqeTtcblxuICAgIHRoaXMucml4dCA9IHJpeHQ7XG4gICAgdGhpcy5yanh0ID0gcmp4dDtcblxuICAgIHRoaXMubGFtYmRhID0gMDtcbiAgICB0aGlzLmNhbGN1bGF0ZUIoaCk7XG4gICAgdGhpcy5jYWxjdWxhdGVDKCk7XG59O1xuXG5cblAyRnJpY3Rpb24ucHJvdG90eXBlLmNhbGN1bGF0ZUIgPSBmdW5jdGlvbiAoaCkge1xuICAgIHZhciBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcblxuICAgICAgICB0ID0gdGhpcy50LFxuICAgICAgICB0eCA9IHQueCxcbiAgICAgICAgdHkgPSB0LnksXG5cbiAgICAgICAgdmkgPSBiaS52ZWxvY2l0eSxcbiAgICAgICAgd2kgPSBiaS5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgIGZpID0gYmkuZm9yY2UsXG4gICAgICAgIHRpID0gYmkudG9ycXVlLFxuICAgICAgICBpbnZNaSA9IGJpLmludk1hc3MsXG4gICAgICAgIGludklpID0gYmkuaW52SW5lcnRpYSxcblxuICAgICAgICB2aiA9IGJqLnZlbG9jaXR5LFxuICAgICAgICB3aiA9IGJqLmFuZ3VsYXJWZWxvY2l0eSxcbiAgICAgICAgZmogPSBiai5mb3JjZSxcbiAgICAgICAgdGogPSBiai50b3JxdWUsXG4gICAgICAgIGludk1qID0gYmouaW52TWFzcyxcbiAgICAgICAgaW52SWogPSBiai5pbnZJbmVydGlhLFxuXG4gICAgICAgIHJpID0gdGhpcy5yaSxcbiAgICAgICAgcml4ID0gcmkueCxcbiAgICAgICAgcml5ID0gcmkueSxcbiAgICAgICAgcmogPSB0aGlzLnJqLFxuICAgICAgICByanggPSByai54LFxuICAgICAgICByankgPSByai55LFxuXG4gICAgICAgIEdxID0gMCxcblxuICAgICAgICBHV3ggPSB2ai54ICsgKC13aiAqIHJqeSkgLSB2aS54IC0gKC13aSAqIHJpeSksXG4gICAgICAgIEdXeSA9IHZqLnkgKyAod2ogKiByangpIC0gdmkueSAtICh3aSAqIHJpeCksXG4gICAgICAgIEdXID0gR1d4ICogdHggKyBHV3kgKiB0eSxcblxuICAgICAgICBHaU1meCA9IGZqLnggKiBpbnZNaiArICgtdGogKiBpbnZJaiAqIHJqeSkgLSBmaS54ICogaW52TWkgLSAoLXRpICogaW52SWkgKiByaXkpLFxuICAgICAgICBHaU1meSA9IGZqLnkgKiBpbnZNaiArICh0aiAqIGludklqICogcmp4KSAtIGZpLnkgKiBpbnZNaSAtICh0aSAqIGludklpICogcml4KSxcbiAgICAgICAgR2lNZiA9IEdpTWZ4ICogdHggKyBHaU1meSAqIHR5O1xuXG4gICAgdGhpcy5CID0gLXRoaXMuYSAqIEdxIC0gdGhpcy5iICogR1cgLSBoICogR2lNZjtcbn07XG5cblxuUDJGcmljdGlvbi5wcm90b3R5cGUuY2FsY3VsYXRlQyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG5cbiAgICAgICAgcml4dCA9IHRoaXMucml4dCxcbiAgICAgICAgcmp4dCA9IHRoaXMucmp4dCxcblxuICAgICAgICBpbnZJaSA9IGJpLmludkluZXJ0aWEsXG4gICAgICAgIGludklqID0gYmouaW52SW5lcnRpYSxcblxuICAgICAgICBDID0gYmkuaW52TWFzcyArIGJqLmludk1hc3MgKyB0aGlzLmVwc2lsb24gKyBpbnZJaSAqIHJpeHQgKiByaXh0ICsgaW52SWogKiByanh0ICogcmp4dDtcblxuICAgIHRoaXMuaW52QyA9IEMgPT09IDAgPyAwIDogMSAvIEM7XG59O1xuXG5cblAyRnJpY3Rpb24ucHJvdG90eXBlLmNhbGN1bGF0ZUdXbGFtYmRhID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcblxuICAgICAgICB0ID0gdGhpcy50LFxuXG4gICAgICAgIHZsYW1iZGFpID0gYmkudmxhbWJkYSxcbiAgICAgICAgd2xhbWJkYWkgPSBiaS53bGFtYmRhLFxuICAgICAgICB2bGFtYmRhaiA9IGJqLnZsYW1iZGEsXG4gICAgICAgIHdsYW1iZGFqID0gYmoud2xhbWJkYSxcblxuICAgICAgICB1bGFtYmRheCA9IHZsYW1iZGFqLnggLSB2bGFtYmRhaS54LFxuICAgICAgICB1bGFtYmRheSA9IHZsYW1iZGFqLnkgLSB2bGFtYmRhaS55LFxuXG4gICAgICAgIEdXbGFtYmRhID0gdWxhbWJkYXggKiB0LnggKyB1bGFtYmRheSAqIHQueTtcblxuICAgIGlmICh3bGFtYmRhaSAhPSB1bmRlZmluZWQpIEdXbGFtYmRhIC09IHdsYW1iZGFpICogdGhpcy5yaXh0O1xuICAgIGlmICh3bGFtYmRhaiAhPSB1bmRlZmluZWQpIEdXbGFtYmRhICs9IHdsYW1iZGFqICogdGhpcy5yanh0O1xuXG4gICAgcmV0dXJuIEdXbGFtYmRhO1xufTtcblxuXG5QMkZyaWN0aW9uLnByb3RvdHlwZS5hZGRUb0xhbWJkYSA9IGZ1bmN0aW9uIChkZWx0YUxhbWJkYSkge1xuICAgIHZhciBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcblxuICAgICAgICB0ID0gdGhpcy50LFxuICAgICAgICB0eCA9IHQueCxcbiAgICAgICAgdHkgPSB0LnksXG5cbiAgICAgICAgaW52TWkgPSBiaS5pbnZNYXNzLFxuICAgICAgICB2bGFtYmRhaSA9IGJpLnZsYW1iZGEsXG4gICAgICAgIGludk1qID0gYmouaW52TWFzcyxcbiAgICAgICAgdmxhbWJkYWogPSBiai52bGFtYmRhO1xuXG4gICAgdmxhbWJkYWkueCAtPSBkZWx0YUxhbWJkYSAqIGludk1pICogdHg7XG4gICAgdmxhbWJkYWkueSAtPSBkZWx0YUxhbWJkYSAqIGludk1pICogdHk7XG5cbiAgICB2bGFtYmRhai54ICs9IGRlbHRhTGFtYmRhICogaW52TWogKiB0eDtcbiAgICB2bGFtYmRhai55ICs9IGRlbHRhTGFtYmRhICogaW52TWogKiB0eTtcblxuICAgIGlmIChiaS53bGFtYmRhICE9IHVuZGVmaW5lZCkgYmkud2xhbWJkYSAtPSBkZWx0YUxhbWJkYSAqIGJpLmludkluZXJ0aWEgKiB0aGlzLnJpeHQ7XG4gICAgaWYgKGJqLndsYW1iZGEgIT0gdW5kZWZpbmVkKSBiai53bGFtYmRhICs9IGRlbHRhTGFtYmRhICogYmouaW52SW5lcnRpYSAqIHRoaXMucmp4dDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMkZyaWN0aW9uO1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgUDJFbnVtcyA9IHJlcXVpcmUoXCIuLi9wMmVudW1zXCIpO1xudmFyIFAyU2hhcGUgPSByZXF1aXJlKFwiLi9wMnNoYXBlXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIFNoYXBlVHlwZSA9IFAyRW51bXMuU2hhcGVUeXBlLFxuXG4gICAgYWJzID0gTWF0aC5hYnMsXG4gICAgUEkgPSBNYXRoLlBJO1xuXG5cbmZ1bmN0aW9uIFAyQ2lyY2xlKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgUDJTaGFwZS5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy50eXBlID0gU2hhcGVUeXBlLkNpcmNsZTtcbiAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzICE9IHVuZGVmaW5lZCA/IGFicyhvcHRzLnJhZGl1cykgOiAwLjU7XG59XG5cblAyU2hhcGUuZXh0ZW5kKFAyQ2lyY2xlKTtcblxuXG5QMkNpcmNsZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIFAyU2hhcGUucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBvdGhlcik7XG5cbiAgICB0aGlzLnJhZGl1cyA9IG90aGVyLnJhZGl1cztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QMkNpcmNsZS5wcm90b3R5cGUucG9pbnRRdWVyeSA9IGZ1bmN0aW9uIChwKSB7XG4gICAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLFxuICAgICAgICBkeCA9IHgueCAtIHAueCxcbiAgICAgICAgZHkgPSB4LnkgLSBwLnksXG4gICAgICAgIHIgPSB0aGlzLnJhZGl1cztcblxuICAgIHJldHVybiAoZHggKiBkeCArIGR5ICogZHkpIDwgciAqIHI7XG59O1xuXG5cblAyQ2lyY2xlLnByb3RvdHlwZS5jZW50cm9pZCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGxvY2FsUG9zaXRpb24gPSB0aGlzLmxvY2FsUG9zaXRpb247XG5cbiAgICB2LnggPSBsb2NhbFBvc2l0aW9uLng7XG4gICAgdi55ID0gbG9jYWxQb3NpdGlvbi55O1xuXG4gICAgcmV0dXJuIHY7XG59O1xuXG5cblAyQ2lyY2xlLnByb3RvdHlwZS5hcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByID0gdGhpcy5yYWRpdXM7XG5cbiAgICByZXR1cm4gUEkgKiAociAqIHIpO1xufTtcblxuXG5QMkNpcmNsZS5wcm90b3R5cGUuaW5lcnRpYSA9IGZ1bmN0aW9uIChtYXNzKSB7XG4gICAgdmFyIHIgPSB0aGlzLnJhZGl1cyxcbiAgICAgICAgbG9jYWxQb3NpdGlvbiA9IHRoaXMubG9jYWxQb3NpdGlvbixcbiAgICAgICAgbHggPSBsb2NhbFBvc2l0aW9uLngsXG4gICAgICAgIGx5ID0gbG9jYWxQb3NpdGlvbi55O1xuXG4gICAgcmV0dXJuIG1hc3MgKiAoKHIgKiByICogMC41KSArIChseCAqIGx4ICsgbHkgKiBseSkpO1xufTtcblxuXG5QMkNpcmNsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG1hdHJpeCkge1xuICAgIHZhciBsb2NhbE1hdHJpeCA9IHRoaXMubWF0cml4LFxuICAgICAgICBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQsXG4gICAgICAgIGxvY2FsUG9zaXRpb24gPSB0aGlzLmxvY2FsUG9zaXRpb24sXG4gICAgICAgIHBvcyA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIHIgPSB0aGlzLnJhZGl1cyxcbiAgICAgICAgYWFiYiA9IHRoaXMuYWFiYixcbiAgICAgICAgbWluID0gYWFiYi5taW4sXG4gICAgICAgIG1heCA9IGFhYmIubWF4LFxuICAgICAgICB4LCB5O1xuXG4gICAgbG9jYWxNYXRyaXguc2V0Um90YXRpb24odGhpcy5sb2NhbFJvdGF0aW9uKTtcbiAgICBsb2NhbE1hdHJpeC5zZXRQb3NpdGlvbihsb2NhbFBvc2l0aW9uKTtcbiAgICBtYXRyaXhXb3JsZC5tbXVsKG1hdHJpeCwgbG9jYWxNYXRyaXgpO1xuXG4gICAgcG9zLnggPSBsb2NhbFBvc2l0aW9uLng7XG4gICAgcG9zLnkgPSBsb2NhbFBvc2l0aW9uLnk7XG4gICAgcG9zLnRyYW5zZm9ybU1hdDMyKG1hdHJpeCk7XG4gICAgeCA9IHBvcy54O1xuICAgIHkgPSBwb3MueTtcblxuICAgIG1pbi54ID0geCAtIHI7XG4gICAgbWluLnkgPSB5IC0gcjtcbiAgICBtYXgueCA9IHggKyByO1xuICAgIG1heC55ID0geSArIHI7XG59O1xuXG5cblAyQ2lyY2xlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBQMlNoYXBlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24ucmFkaXVzID0gdGhpcy5yYWRpdXM7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuUDJDaXJjbGUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBQMlNoYXBlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5yYWRpdXMgPSBqc29uLnJhZGl1cztcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFAyQ2lyY2xlO1xuIiwidmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi8uLi9iYXNlL2xvZ1wiKTtcbnZhciBQMkVudW1zID0gcmVxdWlyZShcIi4uL3AyZW51bXNcIik7XG52YXIgUDJTaGFwZSA9IHJlcXVpcmUoXCIuL3Ayc2hhcGVcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgU2hhcGVUeXBlID0gUDJFbnVtcy5TaGFwZVR5cGU7XG5cblxuZnVuY3Rpb24gUDJDb252ZXgob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBQMlNoYXBlLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgICB0aGlzLnR5cGUgPSBTaGFwZVR5cGUuQ29udmV4O1xuXG4gICAgdGhpcy52ZXJ0aWNlcyA9IG9wdHMudmVydGljZXMgIT0gdW5kZWZpbmVkID8gb3B0cy52ZXJ0aWNlcyA6IFtcbiAgICAgICAgbmV3IFZlYzIoMC41LCAwLjUpLFxuICAgICAgICBuZXcgVmVjMigtMC41LCAwLjUpLFxuICAgICAgICBuZXcgVmVjMigtMC41LCAtMC41KSxcbiAgICAgICAgbmV3IFZlYzIoMC41LCAtMC41KVxuICAgIF07XG5cbiAgICBpZiAoIVAyQ29udmV4LnZhbGlkYXRlVmVydGljZXModGhpcy52ZXJ0aWNlcykpIHtcbiAgICAgICAgbG9nLndhcm4oXCJQMkNvbnZleC5jb25zdHJ1Y3RvcjogcGFzc2VkIHZlcnRpY2VzIGFyZSBpbnZhbGlkLCBjcmVhdGluZyBjb252ZXggaHVsbCBmcm9tIHZlcnRpY2VzIHdpdGggZ2lmdCB3cmFwcGluZyBhbGdvcml0aG1cIik7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSBQMkNvbnZleC5jcmVhdGVDb252ZXhIdWxsKHRoaXMudmVydGljZXMpO1xuICAgIH1cblxuICAgIHRoaXMubm9ybWFscyA9IFtdO1xuXG4gICAgdGhpcy5fdmVydGljZXMgPSBbXTtcbiAgICB0aGlzLl9ub3JtYWxzID0gW107XG5cbiAgICB2YXIgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICB3dmVydHMgPSB0aGlzLl92ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAgd25vcm1zID0gdGhpcy5fbm9ybWFscyxcbiAgICAgICAgdjEsIHYyLFxuICAgICAgICBpO1xuXG4gICAgaSA9IHZlcnRpY2VzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHYxID0gdmVydGljZXNbaV07XG4gICAgICAgIHYyID0gdmVydGljZXNbaSArIDFdIHx8IHZlcnRpY2VzWzBdO1xuXG4gICAgICAgIG5vcm1hbHNbaV0gPSBuZXcgVmVjMih2Mi55IC0gdjEueSwgLSh2Mi54IC0gdjEueCkpLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgIHd2ZXJ0c1tpXSA9IG5ldyBWZWMyKHYxKTtcbiAgICAgICAgd25vcm1zW2ldID0gbmV3IFZlYzIobm9ybWFsc1tpXSk7XG4gICAgfVxufVxuXG5QMlNoYXBlLmV4dGVuZChQMkNvbnZleCk7XG5cblxuUDJDb252ZXgucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICBQMlNoYXBlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgb3RoZXIpO1xuICAgIHZhciB2ZXJ0aWNlcyA9IG90aGVyLnZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzID0gb3RoZXIubm9ybWFscyxcbiAgICAgICAgaTtcblxuICAgIHRoaXMudmVydGljZXMubGVuZ3RoID0gdGhpcy5ub3JtYWxzLmxlbmd0aCA9IHRoaXMuX3ZlcnRpY2VzLmxlbmd0aCA9IHRoaXMuX25vcm1hbHMubGVuZ3RoID0gMDtcblxuICAgIGkgPSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgdGhpcy52ZXJ0aWNlc1tpXSA9IHZlcnRpY2VzW2ldLmNsb25lKCk7XG5cbiAgICBpID0gbm9ybWFscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgdGhpcy5ub3JtYWxzW2ldID0gbm9ybWFsc1tpXS5jbG9uZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblAyQ29udmV4LnByb3RvdHlwZS5wb2ludFF1ZXJ5ID0gZnVuY3Rpb24gKHApIHtcbiAgICBpZiAoIXRoaXMuYWFiYi5jb250YWlucyhwKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMuX3ZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzID0gdGhpcy5fbm9ybWFscyxcbiAgICAgICAgcHggPSBwLngsXG4gICAgICAgIHB5ID0gcC55LFxuICAgICAgICBuLCBueCwgbnksIHYsIHZ4LCB2eSxcbiAgICAgICAgaSA9IHZlcnRpY2VzLmxlbmd0aDtcbiAgICA7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG4gPSBub3JtYWxzW2ldO1xuICAgICAgICBueCA9IG4ueDtcbiAgICAgICAgbnkgPSBuLnk7XG4gICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgdnggPSB2Lng7XG4gICAgICAgIHZ5ID0gdi55O1xuXG4gICAgICAgIGlmICgobnggKiBweCArIG55ICogcHkpIC0gKG54ICogdnggKyBueSAqIHZ5KSA+IDApIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuXG5QMkNvbnZleC5wcm90b3R5cGUuY2VudHJvaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHYxID0gbmV3IFZlYzIsXG4gICAgICAgIHYyID0gbmV3IFZlYzIsXG4gICAgICAgIHZzdW0gPSBuZXcgVmVjMjtcblxuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICB2YXIgbG9jYWxQb3NpdGlvbiA9IHRoaXMubG9jYWxQb3NpdGlvbixcbiAgICAgICAgICAgIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgICAgIGxlbiA9IHZlcnRpY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIHYxeCwgdjF5LCB2MngsIHYyeSwgYXJlYSA9IDAsXG4gICAgICAgICAgICBjcm9zcyxcbiAgICAgICAgICAgIGkgPSBsZW47XG5cbiAgICAgICAgdnN1bS54ID0gdnN1bS55ID0gMDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICB2MS52YWRkKGxvY2FsUG9zaXRpb24sIHZlcnRpY2VzW2ldKTtcbiAgICAgICAgICAgIHYyLnZhZGQobG9jYWxQb3NpdGlvbiwgdmVydGljZXNbKGkgKyAxKSAlIGxlbl0pO1xuXG4gICAgICAgICAgICB2MXggPSB2MS54O1xuICAgICAgICAgICAgdjF5ID0gdjEueTtcbiAgICAgICAgICAgIHYyeCA9IHYyLng7XG4gICAgICAgICAgICB2MnkgPSB2Mi55O1xuXG4gICAgICAgICAgICBjcm9zcyA9IHYxeCAqIHYyeSAtIHYxeSAqIHYyeDtcbiAgICAgICAgICAgIGFyZWEgKz0gY3Jvc3M7XG5cbiAgICAgICAgICAgIHZzdW0ueCArPSAodjF4ICsgdjJ4KSAqIGNyb3NzO1xuICAgICAgICAgICAgdnN1bS55ICs9ICh2MXkgKyB2MnkpICogY3Jvc3M7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdi5jb3B5KHZzdW0pLnNtdWwoMSAvICgzICogYXJlYSkpO1xuICAgIH07XG59KCk7XG5cblxuUDJDb252ZXgucHJvdG90eXBlLmFyZWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgbGVuID0gdmVydGljZXMubGVuZ3RoLFxuICAgICAgICB2MSwgdjIsIGFyZWEgPSAwLFxuICAgICAgICBpID0gbGVuO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2MSA9IHZlcnRpY2VzW2ldO1xuICAgICAgICB2MiA9IHZlcnRpY2VzWyhpICsgMSkgJSBsZW5dO1xuXG4gICAgICAgIGFyZWEgKz0gdjEueCAqIHYyLnkgLSB2MS55ICogdjIueDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYSAqIDAuNTtcbn07XG5cblxuUDJDb252ZXgucHJvdG90eXBlLmluZXJ0aWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHYxID0gbmV3IFZlYzIsXG4gICAgICAgIHYyID0gbmV3IFZlYzI7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hc3MpIHtcbiAgICAgICAgdmFyIGxvY2FsUG9zaXRpb24gPSB0aGlzLmxvY2FsUG9zaXRpb24sXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMsXG4gICAgICAgICAgICBsZW4gPSB2ZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgICAgICB2MXgsIHYxeSwgdjJ4LCB2MnksIGEgPSAwLFxuICAgICAgICAgICAgYiA9IDAsXG4gICAgICAgICAgICBzdW0xID0gMCxcbiAgICAgICAgICAgIHN1bTIgPSAwLFxuICAgICAgICAgICAgaSA9IGxlbjtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICB2MS52YWRkKGxvY2FsUG9zaXRpb24sIHZlcnRpY2VzW2ldKTtcbiAgICAgICAgICAgIHYyLnZhZGQobG9jYWxQb3NpdGlvbiwgdmVydGljZXNbKGkgKyAxKSAlIGxlbl0pO1xuXG4gICAgICAgICAgICB2MXggPSB2MS54O1xuICAgICAgICAgICAgdjF5ID0gdjEueTtcbiAgICAgICAgICAgIHYyeCA9IHYyLng7XG4gICAgICAgICAgICB2MnkgPSB2Mi55O1xuXG4gICAgICAgICAgICBhID0gdjJ4ICogdjF5IC0gdjJ5ICogdjF4O1xuICAgICAgICAgICAgYiA9ICh2MXggKiB2MXggKyB2MXkgKiB2MXkpICsgKHYxeCAqIHYyeCArIHYxeSAqIHYyeSkgKyAodjJ4ICogdjJ4ICsgdjJ5ICogdjJ5KTtcblxuICAgICAgICAgICAgc3VtMSArPSBhICogYjtcbiAgICAgICAgICAgIHN1bTIgKz0gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobWFzcyAqIHN1bTEpIC8gKDYgKiBzdW0yKTtcbiAgICB9O1xufSgpO1xuXG5cblAyQ29udmV4LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobWF0cml4KSB7XG4gICAgdmFyIGxvY2FsTWF0cml4ID0gdGhpcy5tYXRyaXgsXG4gICAgICAgIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZCxcbiAgICAgICAgbG9jYWxQb3MgPSB0aGlzLmxvY2FsUG9zaXRpb24sXG5cbiAgICAgICAgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzID0gdGhpcy5ub3JtYWxzLFxuICAgICAgICBwb3MgPSB0aGlzLnBvc2l0aW9uLFxuXG4gICAgICAgIGFhYmIgPSB0aGlzLmFhYmIsXG4gICAgICAgIG1pbiA9IGFhYmIubWluLFxuICAgICAgICBtYXggPSBhYWJiLm1heCxcbiAgICAgICAgbWlueCA9IEluZmluaXR5LFxuICAgICAgICBtaW55ID0gSW5maW5pdHksXG4gICAgICAgIG1heHggPSAtSW5maW5pdHksXG4gICAgICAgIG1heHkgPSAtSW5maW5pdHksXG5cbiAgICAgICAgd25vcm1zID0gdGhpcy5fbm9ybWFscyxcbiAgICAgICAgd25vcm0sIHd2ZXJ0cyA9IHRoaXMuX3ZlcnRpY2VzLFxuICAgICAgICB3dmVydCwgeCwgeSxcbiAgICAgICAgaSA9IHZlcnRpY2VzLmxlbmd0aDtcblxuICAgIGxvY2FsTWF0cml4LnNldFJvdGF0aW9uKHRoaXMubG9jYWxSb3RhdGlvbik7XG4gICAgbG9jYWxNYXRyaXguc2V0UG9zaXRpb24obG9jYWxQb3MpO1xuICAgIG1hdHJpeFdvcmxkLm1tdWwobWF0cml4LCBsb2NhbE1hdHJpeCk7XG5cbiAgICBwb3MueCA9IGxvY2FsUG9zLng7XG4gICAgcG9zLnkgPSBsb2NhbFBvcy55O1xuICAgIHBvcy50cmFuc2Zvcm1NYXQzMihtYXRyaXgpO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB3dmVydCA9IHd2ZXJ0c1tpXSB8fCAod3ZlcnRzW2ldID0gbmV3IFZlYzIpO1xuICAgICAgICB3bm9ybSA9IHdub3Jtc1tpXSB8fCAod25vcm1zW2ldID0gbmV3IFZlYzIpO1xuXG4gICAgICAgIHdub3JtLmNvcHkobm9ybWFsc1tpXSkudHJhbnNmb3JtTWF0MihtYXRyaXhXb3JsZCk7XG4gICAgICAgIHd2ZXJ0LmNvcHkodmVydGljZXNbaV0pLnRyYW5zZm9ybU1hdDMyKG1hdHJpeFdvcmxkKTtcbiAgICAgICAgeCA9IHd2ZXJ0Lng7XG4gICAgICAgIHkgPSB3dmVydC55O1xuXG4gICAgICAgIG1pbnggPSB4IDwgbWlueCA/IHggOiBtaW54O1xuICAgICAgICBtaW55ID0geSA8IG1pbnkgPyB5IDogbWlueTtcblxuICAgICAgICBtYXh4ID0geCA+IG1heHggPyB4IDogbWF4eDtcbiAgICAgICAgbWF4eSA9IHkgPiBtYXh5ID8geSA6IG1heHk7XG4gICAgfVxuXG4gICAgbWluLnggPSBtaW54O1xuICAgIG1pbi55ID0gbWlueTtcbiAgICBtYXgueCA9IG1heHg7XG4gICAgbWF4LnkgPSBtYXh5O1xufTtcblxuXG5QMkNvbnZleC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gUDJTaGFwZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IHRoaXMubm9ybWFscyxcbiAgICAgICAganNvblZlcnRpY2VzID0ganNvbi52ZXJ0aWNlcyB8fCAoanNvbi52ZXJ0aWNlcyA9IFtdKSxcbiAgICAgICAganNvbk5vcm1hbHMgPSBqc29uLm5vcm1hbHMgfHwgKGpzb24ubm9ybWFscyA9IFtdKSxcbiAgICAgICAgaTtcblxuICAgIGkgPSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkganNvblZlcnRpY2VzW2ldID0gdmVydGljZXNbaV0udG9KU09OKGpzb25WZXJ0aWNlc1tpXSk7XG5cbiAgICBpID0gbm9ybWFscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkganNvbk5vcm1hbHNbaV0gPSBub3JtYWxzW2ldLnRvSlNPTihqc29uTm9ybWFsc1tpXSk7XG5cbiAgICByZXR1cm4ganNvbjtcbn07XG5cblxuUDJDb252ZXgucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBQMlNoYXBlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMsXG4gICAgICAgIG5vcm1hbHMgPSB0aGlzLm5vcm1hbHMsXG4gICAgICAgIGpzb25WZXJ0aWNlcyA9IGpzb24udmVydGljZXMsXG4gICAgICAgIGpzb25Ob3JtYWxzID0ganNvbi5ub3JtYWxzLFxuICAgICAgICB2ZXJ0aWNlc0xlbmd0aCA9IGpzb25WZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgIG5vcm1hbHNMZW5ndGggPSBqc29uTm9ybWFscy5sZW5ndGgsXG4gICAgICAgIGk7XG5cbiAgICB2ZXJ0aWNlcy5sZW5ndGggPSB0aGlzLl92ZXJ0aWNlcy5sZW5ndGggPSB2ZXJ0aWNlc0xlbmd0aDtcbiAgICBub3JtYWxzLmxlbmd0aCA9IHRoaXMuX25vcm1hbHMubGVuZ3RoID0gbm9ybWFsc0xlbmd0aDtcblxuICAgIGkgPSB2ZXJ0aWNlc0xlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB2ZXJ0aWNlc1tpXSA9ICh2ZXJ0aWNlc1tpXSB8fCBuZXcgVmVjMigpKS5mcm9tSlNPTihqc29uVmVydGljZXNbaV0pO1xuXG4gICAgaSA9IG5vcm1hbHNMZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgbm9ybWFsc1tpXSA9IChub3JtYWxzW2ldIHx8IG5ldyBWZWMyKCkpLmZyb21KU09OKGpzb25Ob3JtYWxzW2ldKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QMkNvbnZleC52YWxpZGF0ZVZlcnRpY2VzID0gUDJDb252ZXgucHJvdG90eXBlLnZhbGlkYXRlVmVydGljZXMgPSBmdW5jdGlvbiAodmVydGljZXMpIHtcbiAgICB2YXIgbGVuID0gdmVydGljZXMubGVuZ3RoLFxuICAgICAgICBhLCBiLCBieCwgYnksIGMsIGFieCwgYWJ5LCBiY3gsIGJjeSxcbiAgICAgICAgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBhID0gdmVydGljZXNbaV07XG4gICAgICAgIGIgPSB2ZXJ0aWNlc1soaSArIDEpICUgbGVuXTtcbiAgICAgICAgYnggPSBiLng7XG4gICAgICAgIGJ5ID0gYi55O1xuICAgICAgICBjID0gdmVydGljZXNbKGkgKyAyKSAlIGxlbl07XG5cbiAgICAgICAgYWJ4ID0gYnggLSBhLng7XG4gICAgICAgIGFieSA9IGJ5IC0gYS55O1xuICAgICAgICBiY3ggPSBjLnggLSBieDtcbiAgICAgICAgYmN5ID0gYy55IC0gYnk7XG5cbiAgICAgICAgaWYgKChiY3ggKiBhYnkgLSBiY3kgKiBhYngpID4gMCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufTtcblxuXG5QMkNvbnZleC5jcmVhdGVDb252ZXhIdWxsID0gUDJDb252ZXgucHJvdG90eXBlLmNyZWF0ZUNvbnZleEh1bGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGh1bGwgPSBbXSxcbiAgICAgICAgciA9IG5ldyBWZWMyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwb2ludHMpIHtcbiAgICAgICAgdmFyIHJtaSA9IDAsXG4gICAgICAgICAgICBybXggPSAtSW5maW5pdHksXG4gICAgICAgICAgICBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIHYsIHZ4LCB2eSxcbiAgICAgICAgICAgIGloLCBpZSwgbSA9IDAsXG4gICAgICAgICAgICBjLCBuZXdQb2ludHMgPSBbXSxcbiAgICAgICAgICAgIGZhaWxlZCA9IGZhbHNlLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSBuOyBpLS07KSB7XG4gICAgICAgICAgICB2ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgdnggPSB2Lng7XG4gICAgICAgICAgICB2eSA9IHYueTtcblxuICAgICAgICAgICAgaWYgKHZ4ID4gcm14IHx8ICh2eCA9PSBybXggJiYgdnkgPCBwb2ludHNbcm1pXS55KSkge1xuICAgICAgICAgICAgICAgIHJtaSA9IGk7XG4gICAgICAgICAgICAgICAgcm14ID0gdng7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBodWxsLmxlbmd0aCA9IDA7XG4gICAgICAgIGloID0gcm1pO1xuXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBodWxsW21dID0gaWg7XG5cbiAgICAgICAgICAgIGllID0gMDtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaWUgPT09IGloKSB7XG4gICAgICAgICAgICAgICAgICAgIGllID0gaTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgci52c3ViKHBvaW50c1tpZV0sIHBvaW50c1todWxsW21dXSk7XG4gICAgICAgICAgICAgICAgdi52c3ViKHBvaW50c1tpXSwgcG9pbnRzW2h1bGxbbV1dKTtcbiAgICAgICAgICAgICAgICBjID0gdi5jcm9zcyhyKTtcblxuICAgICAgICAgICAgICAgIGlmIChjIDwgMCkgaWUgPSBpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IDAgJiYgdi5sZW5TcSgpID4gci5sZW5TcSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGllID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG0rKztcbiAgICAgICAgICAgIGloID0gaWU7XG5cbiAgICAgICAgICAgIGlmIChtID4gbikge1xuICAgICAgICAgICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaWUgPT09IHJtaSkgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmFpbGVkKSB7XG4gICAgICAgICAgICBMb2cud2FybihcIlAyQ29udmV4LmNvbnN0cnVjdG9yOiBnaWZ0IHdyYXBwaW5nIGFsZ29yaXRobSBmYWlsZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5ldyBWZWMyKDAuNSwgMC41KSxcbiAgICAgICAgICAgICAgICBuZXcgVmVjMigtMC41LCAwLjUpLFxuICAgICAgICAgICAgICAgIG5ldyBWZWMyKC0wLjUsIC0wLjUpLFxuICAgICAgICAgICAgICAgIG5ldyBWZWMyKDAuNSwgLTAuNSlcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSBtOyBpLS07KSB7XG4gICAgICAgICAgICBuZXdQb2ludHMucHVzaChwb2ludHNbaHVsbFtpXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFQMkNvbnZleC52YWxpZGF0ZVZlcnRpY2VzKG5ld1BvaW50cykpIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUDJDb252ZXguY29uc3RydWN0b3I6IGdpZnQgd3JhcHBpbmcgYWxnb3JpdGhtIGZhaWxlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbmV3IFZlYzIoMC41LCAwLjUpLFxuICAgICAgICAgICAgICAgIG5ldyBWZWMyKC0wLjUsIDAuNSksXG4gICAgICAgICAgICAgICAgbmV3IFZlYzIoLTAuNSwgLTAuNSksXG4gICAgICAgICAgICAgICAgbmV3IFZlYzIoMC41LCAtMC41KVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdQb2ludHM7XG4gICAgfTtcbn0oKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFAyQ29udmV4O1xuIiwidmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIFAyQ29udmV4ID0gcmVxdWlyZShcIi4vcDJjb252ZXhcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBQMlJlY3Qob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICB2YXIgZXh0ZW50cyA9IG9wdHMuZXh0ZW50cyB8fCBuZXcgVmVjMigwLjUsIDAuNSksXG4gICAgICAgIHggPSBleHRlbnRzLngsXG4gICAgICAgIHkgPSBleHRlbnRzLnk7XG5cbiAgICBvcHRzLnZlcnRpY2VzID0gW1xuICAgICAgICBuZXcgVmVjMih4LCB5KSxcbiAgICAgICAgbmV3IFZlYzIoLXgsIHkpLFxuICAgICAgICBuZXcgVmVjMigteCwgLXkpLFxuICAgICAgICBuZXcgVmVjMih4LCAteSlcbiAgICBdO1xuXG4gICAgUDJDb252ZXguY2FsbCh0aGlzLCBvcHRzKTtcblxuICAgIHRoaXMuZXh0ZW50cyA9IGV4dGVudHM7XG59XG5cblAyQ29udmV4LmV4dGVuZChQMlJlY3QpO1xuXG5cblAyUmVjdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gUDJDb252ZXgucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAganNvbi5leHRlbnRzID0gdGhpcy5leHRlbnRzLnRvSlNPTihqc29uLmV4dGVudHMpO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblAyUmVjdC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIFAyQ29udmV4LnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5leHRlbnRzLmZyb21KU09OKGpzb24uZXh0ZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMlJlY3Q7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBBQUJCMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL2FhYmIyXCIpO1xudmFyIFZlYzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC92ZWMyXCIpO1xudmFyIE1hdDMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvbWF0MzJcIik7XG52YXIgTG9nID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvbG9nXCIpO1xudmFyIFAyRW51bXMgPSByZXF1aXJlKFwiLi4vcDJlbnVtc1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBUV09fUEkgPSBNYXRoLlBJICogMixcbiAgICBwb3cgPSBNYXRoLnBvdyxcblxuICAgIEJvZHlUeXBlID0gUDJFbnVtcy5Cb2R5VHlwZSxcbiAgICBNb3Rpb25TdGF0ZSA9IFAyRW51bXMuTW90aW9uU3RhdGUsXG4gICAgU2xlZXBTdGF0ZSA9IFAyRW51bXMuU2xlZXBTdGF0ZTtcblxuXG5mdW5jdGlvbiBQMlJpZ2lkYm9keShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENsYXNzLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgICB0aGlzLnR5cGUgPSBCb2R5VHlwZS5SaWdpZEJvZHk7XG4gICAgdGhpcy5faW5kZXggPSAtMTtcblxuICAgIHRoaXMuc3BhY2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gb3B0cy5wb3NpdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uIDogbmV3IFZlYzI7XG4gICAgdGhpcy52ZWxvY2l0eSA9IG9wdHMudmVsb2NpdHkgIT0gdW5kZWZpbmVkID8gb3B0cy52ZWxvY2l0eSA6IG5ldyBWZWMyO1xuICAgIHRoaXMuZm9yY2UgPSBuZXcgVmVjMjtcblxuICAgIHRoaXMucm90YXRpb24gPSBvcHRzLnJvdGF0aW9uICE9IHVuZGVmaW5lZCA/IG9wdHMucm90YXRpb24gOiAwO1xuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gb3B0cy5hbmd1bGFyVmVsb2NpdHkgIT0gdW5kZWZpbmVkID8gb3B0cy5hbmd1bGFyVmVsb2NpdHkgOiAwO1xuICAgIHRoaXMudG9ycXVlID0gMDtcblxuICAgIHRoaXMubGluZWFyRGFtcGluZyA9IG9wdHMubGluZWFyRGFtcGluZyAhPSB1bmRlZmluZWQgPyBvcHRzLmxpbmVhckRhbXBpbmcgOiAwLjAxO1xuICAgIHRoaXMuYW5ndWxhckRhbXBpbmcgPSBvcHRzLmFuZ3VsYXJEYW1waW5nICE9IHVuZGVmaW5lZCA/IG9wdHMuYW5ndWxhckRhbXBpbmcgOiBUV09fUEkgKiAwLjAxO1xuXG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0MzIoKTtcbiAgICB0aGlzLmFhYmIgPSBuZXcgQUFCQjI7XG5cbiAgICB0aGlzLm1hc3MgPSBvcHRzLm1hc3MgIT0gdW5kZWZpbmVkID8gb3B0cy5tYXNzIDogMC4wO1xuICAgIHRoaXMuaW52TWFzcyA9IHRoaXMubWFzcyA+IDAuMCA/IDEuMCAvIHRoaXMubWFzcyA6IDAuMDtcblxuICAgIHRoaXMuaW5lcnRpYSA9IDA7XG4gICAgdGhpcy5pbnZJbmVydGlhID0gMDtcblxuICAgIHRoaXMuc2hhcGVzID0gW107XG5cbiAgICB0aGlzLm1vdGlvblN0YXRlID0gb3B0cy5tb3Rpb25TdGF0ZSAhPSB1bmRlZmluZWQgPyBvcHRzLm1vdGlvblN0YXRlIDogTW90aW9uU3RhdGUuU3RhdGljO1xuXG4gICAgdGhpcy5hbGxvd1NsZWVwID0gb3B0cy5hbGxvd1NsZWVwICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5hbGxvd1NsZWVwIDogdHJ1ZTtcbiAgICB0aGlzLnNsZWVwU3RhdGUgPSBTbGVlcFN0YXRlLkF3YWtlO1xuXG4gICAgdGhpcy5zbGVlcFZlbG9jaXR5TGltaXQgPSBvcHRzLnNsZWVwVmVsb2NpdHlMaW1pdCAhPSB1bmRlZmluZWQgPyAhIW9wdHMuc2xlZXBWZWxvY2l0eUxpbWl0IDogMC4wMTtcbiAgICB0aGlzLnNsZWVwVGltZUxpbWl0ID0gb3B0cy5zbGVlcFRpbWVMaW1pdCAhPSB1bmRlZmluZWQgPyAhIW9wdHMuc2xlZXBUaW1lTGltaXQgOiAxLjA7XG4gICAgdGhpcy5zbGVlcEFuZ3VsYXJWZWxvY2l0eUxpbWl0ID0gb3B0cy5zbGVlcEFuZ3VsYXJWZWxvY2l0eUxpbWl0ICE9IHVuZGVmaW5lZCA/ICEhb3B0cy5zbGVlcEFuZ3VsYXJWZWxvY2l0eUxpbWl0IDogVFdPX1BJICogMC4wMTtcblxuICAgIHRoaXMudXNlckRhdGEgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl9zbGVlcFRpbWUgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFNsZWVweVRpbWUgPSAwLjA7XG5cbiAgICB0aGlzLnZsYW1iZGEgPSBuZXcgVmVjMjtcbiAgICB0aGlzLndsYW1iZGEgPSAwO1xuXG4gICAgaWYgKG9wdHMuc2hhcGUpIHRoaXMuYWRkU2hhcGUob3B0cy5zaGFwZSk7XG4gICAgaWYgKG9wdHMuc2hhcGVzKSB0aGlzLmFkZFNoYXBlcy5hcHBseSh0aGlzLCBvcHRzLnNoYXBlcyk7XG59XG5cbkNsYXNzLmV4dGVuZChQMlJpZ2lkYm9keSk7XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICB2YXIgc2hhcGVzID0gb3RoZXIuc2hhcGVzLFxuICAgICAgICBpID0gc2hhcGVzLmxlbmd0aDtcblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHRoaXMubW90aW9uU3RhdGUgPSBvdGhlci5tb3Rpb25TdGF0ZTtcblxuICAgIHRoaXMucG9zaXRpb24uY29weShvdGhlci5wb3NpdGlvbik7XG4gICAgdGhpcy52ZWxvY2l0eS5jb3B5KG90aGVyLnZlbG9jaXR5KTtcbiAgICB0aGlzLmZvcmNlLmNvcHkob3RoZXIuZm9yY2UpO1xuXG4gICAgdGhpcy5saW5lYXJEYW1waW5nID0gb3RoZXIubGluZWFyRGFtcGluZztcblxuICAgIHRoaXMubWFzcyA9IG90aGVyLm1hc3M7XG4gICAgdGhpcy5pbnZNYXNzID0gb3RoZXIuaW52TWFzcztcblxuICAgIHRoaXMuYWxsb3dTbGVlcCA9IG90aGVyLmFsbG93U2xlZXA7XG4gICAgdGhpcy5zbGVlcFN0YXRlID0gb3RoZXIuc2xlZXBTdGF0ZTtcblxuICAgIHRoaXMucm90YXRpb24gPSBvdGhlci5yb3RhdGlvbjtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IG90aGVyLmFuZ3VsYXJWZWxvY2l0eTtcbiAgICB0aGlzLnRvcnF1ZSA9IG90aGVyLnRvcnF1ZTtcblxuICAgIHRoaXMuYW5ndWxhckRhbXBpbmcgPSBvdGhlci5hbmd1bGFyRGFtcGluZztcblxuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkU2hhcGUoc2hhcGVzW2ldLmNsb25lKCkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbnZhciBWRUMyX1NDQUxFID0gbmV3IFZlYzIoMS4wLCAxLjApO1xuUDJSaWdpZGJvZHkucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNoYXBlcyA9IHRoaXMuc2hhcGVzLFxuICAgICAgICBtYXRyaXggPSB0aGlzLm1hdHJpeCxcbiAgICAgICAgYWFiYiA9IHRoaXMuYWFiYixcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIGkgPSBzaGFwZXMubGVuZ3RoO1xuXG4gICAgbWF0cml4LmNvbXBvc2UodGhpcy5wb3NpdGlvbiwgVkVDMl9TQ0FMRSwgdGhpcy5yb3RhdGlvbik7XG4gICAgYWFiYi5jbGVhcigpO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBzaGFwZSA9IHNoYXBlc1tpXTtcbiAgICAgICAgc2hhcGUudXBkYXRlKG1hdHJpeCk7XG4gICAgICAgIGFhYmIudW5pb24oc2hhcGUuYWFiYik7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldE1hc3NEYXRhKCk7XG59O1xuXG5cblAyUmlnaWRib2R5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBpZiAodGhpcy5tb3Rpb25TdGF0ZSA9PT0gTW90aW9uU3RhdGUuU3RhdGljKSByZXR1cm47XG4gICAgdmFyIHNoYXBlcyA9IHRoaXMuc2hhcGVzLFxuICAgICAgICBmb3JjZSA9IHRoaXMuZm9yY2UsXG4gICAgICAgIGludk1hc3MgPSB0aGlzLmludk1hc3MsXG4gICAgICAgIHBvcyA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIHZlbCA9IHRoaXMudmVsb2NpdHksXG4gICAgICAgIGxpbmVhckRhbXBpbmcgPSBwb3coMSAtIHRoaXMubGluZWFyRGFtcGluZywgZHQpLFxuICAgICAgICBtYXRyaXggPSB0aGlzLm1hdHJpeCxcbiAgICAgICAgYWFiYiA9IHRoaXMuYWFiYixcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIGk7XG5cbiAgICB2ZWwueCArPSBmb3JjZS54ICogaW52TWFzcyAqIGR0O1xuICAgIHZlbC55ICs9IGZvcmNlLnkgKiBpbnZNYXNzICogZHQ7XG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgKz0gdGhpcy50b3JxdWUgKiB0aGlzLmludkluZXJ0aWEgKiBkdDtcblxuICAgIGZvcmNlLnggPSBmb3JjZS55ID0gdGhpcy50b3JxdWUgPSAwO1xuXG4gICAgdmVsLnggKj0gbGluZWFyRGFtcGluZztcbiAgICB2ZWwueSAqPSBsaW5lYXJEYW1waW5nO1xuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgKj0gcG93KDEgLSB0aGlzLmFuZ3VsYXJEYW1waW5nLCBkdCk7XG5cbiAgICBpZiAodGhpcy5zbGVlcFN0YXRlICE9PSBTbGVlcFN0YXRlLlNsZWVwaW5nKSB7XG5cbiAgICAgICAgcG9zLnggKz0gdmVsLnggKiBkdDtcbiAgICAgICAgcG9zLnkgKz0gdmVsLnkgKiBkdDtcblxuICAgICAgICB0aGlzLnJvdGF0aW9uICs9IHRoaXMuYW5ndWxhclZlbG9jaXR5ICogZHQ7XG5cbiAgICAgICAgbWF0cml4LmNvbXBvc2UocG9zLCBWRUMyX1NDQUxFLCB0aGlzLnJvdGF0aW9uKTtcbiAgICAgICAgYWFiYi5jbGVhcigpO1xuXG4gICAgICAgIGkgPSBzaGFwZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBzaGFwZSA9IHNoYXBlc1tpXTtcbiAgICAgICAgICAgIHNoYXBlLnVwZGF0ZShtYXRyaXgpO1xuICAgICAgICAgICAgYWFiYi51bmlvbihzaGFwZS5hYWJiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGFwZXMgPSB0aGlzLnNoYXBlcyxcbiAgICAgICAgaSA9IHNoYXBlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLnJlbW92ZVNoYXBlKHNoYXBlc1tpXSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiAoZm9yY2UsIHdvcmxkUG9pbnQpIHtcbiAgICBpZiAodGhpcy5tb3Rpb25TdGF0ZSA9PT0gTW90aW9uU3RhdGUuU3RhdGljKSByZXR1cm47XG4gICAgaWYgKHRoaXMuc2xlZXBTdGF0ZSA9PT0gU2xlZXBTdGF0ZS5TbGVlcGluZykgdGhpcy53YWtlKCk7XG4gICAgdmFyIHBvcyA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIGYgPSB0aGlzLmZvcmNlLFxuICAgICAgICBmeCA9IGZvcmNlLngsXG4gICAgICAgIGZ5ID0gZm9yY2UueSxcbiAgICAgICAgcHgsIHB5O1xuXG4gICAgd29ybGRQb2ludCA9IHdvcmxkUG9pbnQgfHwgcG9zO1xuXG4gICAgcHggPSB3b3JsZFBvaW50LnggLSBwb3MueDtcbiAgICBweSA9IHdvcmxkUG9pbnQueSAtIHBvcy55O1xuXG4gICAgZi54ICs9IGZ4O1xuICAgIGYueSArPSBmeTtcblxuICAgIHRoaXMudG9ycXVlICs9IHB4ICogZnkgLSBweSAqIGZ4O1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuYXBwbHlUb3JxdWUgPSBmdW5jdGlvbiAodG9ycXVlKSB7XG4gICAgaWYgKHRoaXMubW90aW9uU3RhdGUgPT09IE1vdGlvblN0YXRlLlN0YXRpYykgcmV0dXJuO1xuICAgIGlmICh0aGlzLnNsZWVwU3RhdGUgPT09IFNsZWVwU3RhdGUuU2xlZXBpbmcpIHRoaXMud2FrZSgpO1xuXG4gICAgdGhpcy50b3JxdWUgKz0gdG9ycXVlO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuYXBwbHlJbXB1bHNlID0gZnVuY3Rpb24gKGltcHVsc2UsIHdvcmxkUG9pbnQpIHtcbiAgICBpZiAodGhpcy5tb3Rpb25TdGF0ZSA9PT0gTW90aW9uU3RhdGUuU3RhdGljKSByZXR1cm47XG4gICAgaWYgKHRoaXMuc2xlZXBTdGF0ZSA9PT0gU2xlZXBTdGF0ZS5TbGVlcGluZykgdGhpcy53YWtlKCk7XG4gICAgdmFyIHBvcyA9IHRoaXMucG9zaXRpb24sXG4gICAgICAgIGludk1hc3MgPSB0aGlzLmludk1hc3MsXG4gICAgICAgIHZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSxcbiAgICAgICAgaXggPSBpbXB1bHNlLngsXG4gICAgICAgIGl5ID0gaW1wdWxzZS55LFxuICAgICAgICBweCwgcHk7XG5cbiAgICB3b3JsZFBvaW50ID0gd29ybGRQb2ludCB8fCBwb3M7XG5cbiAgICBweCA9IHdvcmxkUG9pbnQueCAtIHBvcy54O1xuICAgIHB5ID0gd29ybGRQb2ludC55IC0gcG9zLnk7XG5cbiAgICB2ZWxvY2l0eS54ICs9IGl4ICogaW52TWFzcztcbiAgICB2ZWxvY2l0eS55ICs9IGl5ICogaW52TWFzcztcblxuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ICs9IChweCAqIGl5IC0gcHkgKiBpeCkgKiB0aGlzLmludkluZXJ0aWE7XG59O1xuXG5cblAyUmlnaWRib2R5LnByb3RvdHlwZS5hcHBseVZlbG9jaXR5ID0gZnVuY3Rpb24gKHZlbG9jaXR5KSB7XG4gICAgaWYgKHRoaXMubW90aW9uU3RhdGUgPT09IE1vdGlvblN0YXRlLlN0YXRpYykgcmV0dXJuO1xuICAgIGlmICh0aGlzLnNsZWVwU3RhdGUgPT09IFNsZWVwU3RhdGUuU2xlZXBpbmcpIHRoaXMud2FrZSgpO1xuICAgIHZhciB2ZWwgPSB0aGlzLnZlbG9jaXR5O1xuXG4gICAgdmVsLnggKz0gdmVsb2NpdHkueDtcbiAgICB2ZWwueSArPSB2ZWxvY2l0eS55O1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuYXBwbHlBbmd1bGFyVmVsb2NpdHkgPSBmdW5jdGlvbiAoYW5ndWxhclZlbG9jaXR5KSB7XG4gICAgaWYgKHRoaXMubW90aW9uU3RhdGUgPT09IE1vdGlvblN0YXRlLlN0YXRpYykgcmV0dXJuO1xuICAgIGlmICh0aGlzLnNsZWVwU3RhdGUgPT09IFNsZWVwU3RhdGUuU2xlZXBpbmcpIHRoaXMud2FrZSgpO1xuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgKz0gYW5ndWxhclZlbG9jaXR5O1xufTtcblxuXG52YXIgdG90YWxDZW50cm9pZCA9IG5ldyBWZWMyLFxuICAgIGNlbnRyb2lkID0gbmV3IFZlYzI7XG5QMlJpZ2lkYm9keS5wcm90b3R5cGUucmVzZXRNYXNzRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5tb3Rpb25TdGF0ZSAhPT0gTW90aW9uU3RhdGUuRHluYW1pYykgcmV0dXJuO1xuICAgIHZhciBzaGFwZXMgPSB0aGlzLnNoYXBlcyxcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHRvdGFsTWFzcyA9IDAsXG4gICAgICAgIHRvdGFsSW5lcnRpYSA9IDAsXG4gICAgICAgIG1hc3MsIGluZXJ0aWEsXG4gICAgICAgIGk7XG5cbiAgICB0b3RhbENlbnRyb2lkLnggPSB0b3RhbENlbnRyb2lkLnkgPSAwO1xuXG4gICAgaSA9IHNoYXBlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBzaGFwZSA9IHNoYXBlc1tpXTtcblxuICAgICAgICBzaGFwZS5jZW50cm9pZChjZW50cm9pZCk7XG4gICAgICAgIG1hc3MgPSBzaGFwZS5hcmVhKCkgKiBzaGFwZS5kZW5zaXR5O1xuICAgICAgICBpbmVydGlhID0gc2hhcGUuaW5lcnRpYShtYXNzKTtcblxuICAgICAgICB0b3RhbENlbnRyb2lkLmFkZChjZW50cm9pZC5zbXVsKG1hc3MpKTtcbiAgICAgICAgdG90YWxNYXNzICs9IG1hc3M7XG4gICAgICAgIHRvdGFsSW5lcnRpYSArPSBpbmVydGlhO1xuICAgIH1cblxuICAgIGNlbnRyb2lkLmNvcHkodG90YWxDZW50cm9pZC5zZGl2KHRvdGFsTWFzcykpO1xuXG4gICAgdGhpcy5zZXRNYXNzKHRvdGFsTWFzcyk7XG4gICAgdGhpcy5zZXRJbmVydGlhKHRvdGFsSW5lcnRpYSAtIHRvdGFsTWFzcyAqIGNlbnRyb2lkLmxlbmd0aFNxKCkpO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuc2V0TW90aW9uU3RhdGUgPSBmdW5jdGlvbiAobW90aW9uU3RhdGUpIHtcbiAgICBpZiAodGhpcy5tb3Rpb25TdGF0ZSA9PT0gbW90aW9uU3RhdGUpIHJldHVybjtcblxuICAgIHRoaXMubW90aW9uU3RhdGUgPSBtb3Rpb25TdGF0ZTtcblxuICAgIHRoaXMudmVsb2NpdHkuc2V0KDAsIDApO1xuICAgIHRoaXMuZm9yY2Uuc2V0KDAsIDApO1xuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gdGhpcy50b3JxdWUgPSAwO1xuXG4gICAgdGhpcy53YWtlKCk7XG59O1xuXG5cblAyUmlnaWRib2R5LnByb3RvdHlwZS5zZXRJbmVydGlhID0gZnVuY3Rpb24gKGluZXJ0aWEpIHtcblxuICAgIHRoaXMuaW5lcnRpYSA9IGluZXJ0aWE7XG4gICAgdGhpcy5pbnZJbmVydGlhID0gaW5lcnRpYSA+IDAuMCA/IDEuMCAvIGluZXJ0aWEgOiAwLjA7XG59O1xuXG5cblAyUmlnaWRib2R5LnByb3RvdHlwZS5zZXRNYXNzID0gZnVuY3Rpb24gKG1hc3MpIHtcblxuICAgIHRoaXMubWFzcyA9IG1hc3M7XG4gICAgdGhpcy5pbnZNYXNzID0gbWFzcyA+IDAuMCA/IDEuMCAvIG1hc3MgOiAwLjA7XG59O1xuXG5cblAyUmlnaWRib2R5LnByb3RvdHlwZS5pc0F3YWtlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXMuc2xlZXBTdGF0ZSA9PT0gU2xlZXBTdGF0ZS5Bd2FrZTtcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmlzU2xlZXB5ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXMuc2xlZXBTdGF0ZSA9PT0gU2xlZXBTdGF0ZS5TbGVlcHk7XG59O1xuXG5cblAyUmlnaWRib2R5LnByb3RvdHlwZS5pc1NsZWVwaW5nID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXMuc2xlZXBTdGF0ZSA9PT0gU2xlZXBTdGF0ZS5TbGVlcGluZztcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHRoaXMubW90aW9uU3RhdGUgPT09IE1vdGlvblN0YXRlLlN0YXRpYztcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmlzRHluYW1pYyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiB0aGlzLm1vdGlvblN0YXRlID09PSBNb3Rpb25TdGF0ZS5EeW5hbWljO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuaXNLaW5lbWF0aWMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gdGhpcy5tb3Rpb25TdGF0ZSA9PT0gTW90aW9uU3RhdGUuS2luZW1hdGljO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUud2FrZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmICh0aGlzLnNsZWVwU3RhdGUgPT09IFNsZWVwU3RhdGUuU2xlZXBpbmcpIHRoaXMuZW1pdChcIndha2VcIik7XG4gICAgdGhpcy5zbGVlcFN0YXRlID0gU2xlZXBTdGF0ZS5Bd2FrZTtcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLnNsZWVwID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYgKHRoaXMuc2xlZXBTdGF0ZSAhPT0gU2xlZXBTdGF0ZS5TbGVlcGluZykgdGhpcy5lbWl0KFwic2xlZXBcIik7XG4gICAgdGhpcy5zbGVlcFN0YXRlID0gU2xlZXBTdGF0ZS5TbGVlcGluZztcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmFkZFNoYXBlID0gZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgdmFyIHNoYXBlcyA9IHRoaXMuc2hhcGVzLFxuICAgICAgICBpbmRleCA9IHNoYXBlcy5pbmRleE9mKHNoYXBlKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgc2hhcGUuYm9keSA9IHRoaXM7XG5cbiAgICAgICAgc2hhcGVzLnB1c2goc2hhcGUpO1xuXG4gICAgICAgIGlmICh0aGlzLnNwYWNlKSB7XG4gICAgICAgICAgICBzaGFwZS51cGRhdGUodGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5yZXNldE1hc3NEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IoXCJQMlJpZ2lkYm9keS5hZGRTaGFwZTogU2hhcGUgYWxyZWFkeSBhdHRhY2hlZCB0byBCb2R5XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuYWRkU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGg7IGktLTspIHRoaXMuYWRkU2hhcGUoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLnJlbW92ZVNoYXBlID0gZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgdmFyIHNoYXBlcyA9IHRoaXMuc2hhcGVzLFxuICAgICAgICBpbmRleCA9IHNoYXBlcy5pbmRleE9mKHNoYXBlKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgc2hhcGUuYm9keSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBzaGFwZXMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICBpZiAodGhpcy5zcGFjZSkgdGhpcy5yZXNldE1hc3NEYXRhKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUDJSaWdpZGJvZHkucmVtb3ZlU2hhcGU6IFNoYXBlIG5vdCBhdHRhY2hlZCB0byBCb2R5XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUucmVtb3ZlU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGg7IGktLTspIHRoaXMucmVtb3ZlU2hhcGUoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLmZvckVhY2hTaGFwZSA9IGZ1bmN0aW9uIChmbiwgY3R4KSB7XG4gICAgdmFyIHNoYXBlcyA9IHRoaXMuc2hhcGVzLFxuICAgICAgICBpID0gc2hhcGVzLmxlbmd0aDtcblxuICAgIGlmIChjdHgpIHtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKGZuLmNhbGwoY3R4LCBzaGFwZXNbaV0sIGksIHNoYXBlcykgPT09IGZhbHNlKSBicmVhaztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChmbihzaGFwZXNbaV0sIGksIHNoYXBlcykgPT09IGZhbHNlKSBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuc2xlZXBUaWNrID0gZnVuY3Rpb24gKHRpbWUpIHtcblxuICAgIGlmICh0aGlzLmFsbG93U2xlZXApIHtcbiAgICAgICAgdmFyIHNsZWVwU3RhdGUgPSB0aGlzLnNsZWVwU3RhdGUsXG4gICAgICAgICAgICB2ZWxTcSA9IHRoaXMudmVsb2NpdHkubGVuZ3RoU3EoKSxcbiAgICAgICAgICAgIHNsZWVwVmVsb2NpdHlMaW1pdCA9IHRoaXMuc2xlZXBWZWxvY2l0eUxpbWl0ICogdGhpcy5zbGVlcFZlbG9jaXR5TGltaXQsXG4gICAgICAgICAgICBhVmVsID0gdGhpcy5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgICAgICBzbGVlcEFuZ3VsYXJWZWxvY2l0eUxpbWl0ID0gdGhpcy5zbGVlcEFuZ3VsYXJWZWxvY2l0eUxpbWl0O1xuXG4gICAgICAgIGlmIChzbGVlcFN0YXRlID09PSBTbGVlcFN0YXRlLkF3YWtlICYmICh2ZWxTcSA8IHNsZWVwVmVsb2NpdHlMaW1pdCAmJiBhVmVsIDwgc2xlZXBBbmd1bGFyVmVsb2NpdHlMaW1pdCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2xlZXBTdGF0ZSA9IFNsZWVwU3RhdGUuU2xlZXB5O1xuICAgICAgICAgICAgdGhpcy5fc2xlZXBUaW1lID0gdGltZTtcbiAgICAgICAgfSBlbHNlIGlmIChzbGVlcFN0YXRlID09PSBTbGVlcFN0YXRlLlNsZWVweSAmJiAodmVsU3EgPiBzbGVlcFZlbG9jaXR5TGltaXQgfHwgYVZlbCA+IHNsZWVwQW5ndWxhclZlbG9jaXR5TGltaXQpKSB7XG4gICAgICAgICAgICB0aGlzLndha2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChzbGVlcFN0YXRlID09PSBTbGVlcFN0YXRlLlNsZWVweSAmJiAodGltZSAtIHRoaXMuX2xhc3RTbGVlcHlUaW1lKSA+IHRoaXMuc2xlZXBUaW1lTGltaXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2xlZXAoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuUDJSaWdpZGJvZHkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcbiAgICB2YXIgc2hhcGVzID0gdGhpcy5zaGFwZXMsXG4gICAgICAgIGpzb25TaGFwZXMgPSBqc29uLnNoYXBlcyB8fCAoanNvbi5zaGFwZXMgPSBbXSksXG4gICAgICAgIGkgPSBzaGFwZXMubGVuZ3RoO1xuXG4gICAganNvbi5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24udG9KU09OKGpzb24ucG9zaXRpb24pO1xuICAgIGpzb24udmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5LnRvSlNPTihqc29uLnZlbG9jaXR5KTtcbiAgICBqc29uLmZvcmNlID0gdGhpcy5mb3JjZS50b0pTT04oanNvbi5mb3JjZSk7XG5cbiAgICBqc29uLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjtcbiAgICBqc29uLmFuZ3VsYXJWZWxvY2l0eSA9IHRoaXMuYW5ndWxhclZlbG9jaXR5O1xuICAgIGpzb24udG9ycXVlID0gdGhpcy50b3JxdWU7XG5cbiAgICBqc29uLm1vdGlvblN0YXRlID0gdGhpcy5tb3Rpb25TdGF0ZTtcblxuICAgIGpzb24ubGluZWFyRGFtcGluZyA9IHRoaXMubGluZWFyRGFtcGluZztcblxuICAgIGpzb24ubWFzcyA9IHRoaXMubWFzcztcbiAgICBqc29uLmludk1hc3MgPSB0aGlzLmludk1hc3M7XG5cbiAgICBqc29uLmFsbG93U2xlZXAgPSB0aGlzLmFsbG93U2xlZXA7XG4gICAganNvbi5zbGVlcFN0YXRlID0gdGhpcy5zbGVlcFN0YXRlO1xuXG4gICAganNvbi5hbmd1bGFyRGFtcGluZyA9IHRoaXMuYW5ndWxhckRhbXBpbmc7XG5cbiAgICB3aGlsZSAoaS0tKSBqc29uU2hhcGVzW2ldID0gc2hhcGVzW2ldLnRvSlNPTihqc29uU2hhcGVzW2ldKTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5QMlJpZ2lkYm9keS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIENsYXNzLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIHZhciBqc29uU2hhcGVzID0ganNvbi5zaGFwZXMgfHwgKGpzb24uc2hhcGVzID0gW10pLFxuICAgICAgICBpID0ganNvblNoYXBlcy5sZW5ndGg7XG5cbiAgICB0aGlzLnBvc2l0aW9uLmZyb21KU09OKGpzb24ucG9zaXRpb24pO1xuICAgIHRoaXMudmVsb2NpdHkuZnJvbUpTT04oanNvbi52ZWxvY2l0eSk7XG4gICAgdGhpcy5mb3JjZS5mcm9tSlNPTihqc29uLmZvcmNlKTtcblxuICAgIHRoaXMucm90YXRpb24gPSBqc29uLnJvdGF0aW9uO1xuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0ganNvbi5hbmd1bGFyVmVsb2NpdHk7XG4gICAgdGhpcy50b3JxdWUgPSBqc29uLnRvcnF1ZTtcblxuICAgIHRoaXMubW90aW9uU3RhdGUgPSBqc29uLm1vdGlvblN0YXRlO1xuXG4gICAgdGhpcy5saW5lYXJEYW1waW5nID0ganNvbi5saW5lYXJEYW1waW5nO1xuXG4gICAgdGhpcy5tYXNzID0ganNvbi5tYXNzO1xuICAgIHRoaXMuaW52TWFzcyA9IGpzb24uaW52TWFzcztcblxuICAgIHRoaXMuYWxsb3dTbGVlcCA9IGpzb24uYWxsb3dTbGVlcDtcbiAgICB0aGlzLnNsZWVwU3RhdGUgPSBqc29uLnNsZWVwU3RhdGU7XG5cbiAgICB0aGlzLmFuZ3VsYXJEYW1waW5nID0ganNvbi5hbmd1bGFyRGFtcGluZztcblxuICAgIHdoaWxlIChpLS0pIHRoaXMuYWRkU2hhcGUoQ2xhc3MuZnJvbUpTT04oanNvblNoYXBlc1tpXSkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUDJSaWdpZGJvZHk7XG4iLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBWZWMyID0gcmVxdWlyZShcIi4uLy4uL21hdGgvdmVjMlwiKTtcbnZhciBQMkVudW1zID0gcmVxdWlyZShcIi4uL3AyZW51bXNcIik7XG52YXIgUDJTaGFwZSA9IHJlcXVpcmUoXCIuL3Ayc2hhcGVcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgU2hhcGVUeXBlID0gUDJFbnVtcy5TaGFwZVR5cGUsXG5cbiAgICBhYnMgPSBNYXRoLmFicyxcbiAgICBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIFBJID0gTWF0aC5QSTtcblxuXG5mdW5jdGlvbiBQMlNlZ21lbnQob3B0cykge1xuICAgIG9wdHMgfHwgKG9wdHMgPSB7fSk7XG5cbiAgICBQMlNoYXBlLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgICB0aGlzLnR5cGUgPSBTaGFwZVR5cGUuU2VnbWVudDtcblxuICAgIHRoaXMuYSA9IG9wdHMuYSAhPSB1bmRlZmluZWQgPyBvcHRzLmEgOiBuZXcgVmVjMigtMC41LCAwLjApO1xuICAgIHRoaXMuYiA9IG9wdHMuYiAhPSB1bmRlZmluZWQgPyBvcHRzLmIgOiBuZXcgVmVjMigwLjUsIDAuMCk7XG5cbiAgICB0aGlzLl9hID0gdGhpcy5hLmNsb25lKCk7XG4gICAgdGhpcy5fYiA9IHRoaXMuYi5jbG9uZSgpO1xuICAgIHRoaXMuX25vcm1hbCA9IG5ldyBWZWMyKCkudnN1Yih0aGlzLl9iLCB0aGlzLl9hKS5wZXJwKCkubm9ybWFsaXplKCk7XG5cbiAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzICE9IHVuZGVmaW5lZCA/IGFicyhvcHRzLnJhZGl1cykgOiAwLjU7XG59XG5cblAyU2hhcGUuZXh0ZW5kKFAyU2VnbWVudCk7XG5cblxuUDJTZWdtZW50LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgUDJTaGFwZS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIG90aGVyKTtcblxuICAgIHRoaXMuYS5jb3B5KG90aGVyLmEpO1xuICAgIHRoaXMuYi5jb3B5KG90aGVyLmIpO1xuXG4gICAgdGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUDJTZWdtZW50LnByb3RvdHlwZS5wb2ludFF1ZXJ5ID0gZnVuY3Rpb24gKHApIHtcbiAgICBpZiAoIXRoaXMuYWFiYi5jb250YWlucyhwKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByID0gdGhpcy5yYWRpdXMsXG4gICAgICAgIGEgPSB0aGlzLl9hLFxuICAgICAgICBiID0gdGhpcy5fYixcbiAgICAgICAgbiA9IHRoaXMuX25vcm1hbCxcbiAgICAgICAgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBieCA9IGIueCxcbiAgICAgICAgYnkgPSBiLnksXG4gICAgICAgIG54ID0gbi54LFxuICAgICAgICBueSA9IG4ueSxcbiAgICAgICAgcHggPSBwLngsXG4gICAgICAgIHB5ID0gcC55LFxuXG4gICAgICAgIGRuID0gKG54ICogcHggKyBueSAqIHB5KSAtIChheCAqIG54ICsgYXkgKiBueSksXG4gICAgICAgIGRpc3QgPSBhYnMoZG4pLFxuICAgICAgICBkdCwgZHRhLCBkdGIsIGR4LCBkeTtcblxuICAgIGlmIChkaXN0ID4gcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgZHQgPSBweCAqIG55IC0gcHkgKiBueDtcbiAgICBkdGEgPSBheCAqIG55IC0gYXkgKiBueDtcbiAgICBkdGIgPSBieCAqIG55IC0gYnkgKiBueDtcblxuICAgIGlmIChkdCA8PSBkdGEpIHtcbiAgICAgICAgaWYgKGR0IDwgZHRhIC0gcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGR4ID0gcHggLSBheDtcbiAgICAgICAgZHkgPSBweSAtIGF5O1xuXG4gICAgICAgIHJldHVybiAoZHggKiBkeCArIGR5ICogZHkpIDwgKHIgKiByKTtcbiAgICB9IGVsc2UgaWYgKGR0ID4gZHRiKSB7XG4gICAgICAgIGlmIChkdCA+IGR0YiArIHIpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBkeCA9IHB4IC0gYng7XG4gICAgICAgIGR5ID0gcHkgLSBieTtcblxuICAgICAgICByZXR1cm4gKGR4ICogZHggKyBkeSAqIGR5KSA8IChyICogcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5cblAyU2VnbWVudC5wcm90b3R5cGUuY2VudHJvaWQgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciBsb2NhbFBvc2l0aW9uID0gdGhpcy5sb2NhbFBvc2l0aW9uLFxuICAgICAgICBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iO1xuXG4gICAgdi54ID0gbG9jYWxQb3NpdGlvbi54ICsgKGEueCArIGIueCkgKiAwLjU7XG4gICAgdi55ID0gbG9jYWxQb3NpdGlvbi55ICsgKGEueSArIGIueSkgKiAwLjU7XG5cbiAgICByZXR1cm4gdjtcbn07XG5cblxuUDJTZWdtZW50LnByb3RvdHlwZS5hcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICByID0gdGhpcy5yYWRpdXMsXG4gICAgICAgIGFieCA9IGIueCAtIGEueCxcbiAgICAgICAgYWJ5ID0gYi55IC0gYS55LFxuICAgICAgICBsID0gYWJ4ICogYWJ4ICsgYWJ5ICogYWJ5O1xuXG4gICAgbCA9IGwgPT09IDAuMCA/IDAuMCA6IHNxcnQobCk7XG5cbiAgICByZXR1cm4gciAqIChQSSAqIHIgKyAyICogbCk7XG59O1xuXG5cbnZhciBpbnYxMiA9IDEuMCAvIDEyLjA7XG5QMlNlZ21lbnQucHJvdG90eXBlLmluZXJ0aWEgPSBmdW5jdGlvbiAobWFzcykge1xuICAgIHZhciBsb2NhbFBvc2l0aW9uID0gdGhpcy5sb2NhbFBvc2l0aW9uLFxuICAgICAgICBseCA9IGxvY2FsUG9zaXRpb24ueCxcbiAgICAgICAgbHkgPSBsb2NhbFBvc2l0aW9uLnksXG4gICAgICAgIGEgPSB0aGlzLmEsXG4gICAgICAgIGIgPSB0aGlzLmIsXG4gICAgICAgIGF4ID0gbHggKyBhLngsXG4gICAgICAgIGF5ID0gbHkgKyBhLnksXG4gICAgICAgIGJ4ID0gbHggKyBiLngsXG4gICAgICAgIGJ5ID0gbHkgKyBiLnksXG4gICAgICAgIGFieCA9IGJ4IC0gYXgsXG4gICAgICAgIGFieSA9IGJ5IC0gYXksXG4gICAgICAgIGxzcSA9IGFieCAqIGFieCArIGFieSAqIGFieSxcbiAgICAgICAgeCA9IChheCArIGJ4KSAqIDAuNSxcbiAgICAgICAgeSA9IChheSArIGJ5KSAqIDAuNTtcblxuICAgIHJldHVybiBtYXNzICogKGxzcSAqIGludjEyICsgKHggKiB4ICsgeSAqIHkpKTtcbn07XG5cblxudmFyIFZFQzJfU0NBTEUgPSBuZXcgVmVjMigxLjAsIDEuMCk7XG5QMlNlZ21lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtYXRyaXgpIHtcbiAgICB2YXIgbG9jYWxNYXRyaXggPSB0aGlzLm1hdHJpeCxcbiAgICAgICAgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkLFxuICAgICAgICBsb2NhbFBvcyA9IHRoaXMubG9jYWxQb3NpdGlvbixcbiAgICAgICAgcG9zID0gdGhpcy5wb3NpdGlvbixcbiAgICAgICAgX2EgPSB0aGlzLl9hLFxuICAgICAgICBfYiA9IHRoaXMuX2IsXG4gICAgICAgIF9ub3JtYWwgPSB0aGlzLl9ub3JtYWwsXG4gICAgICAgIGEgPSB0aGlzLmEsXG4gICAgICAgIGIgPSB0aGlzLmIsXG4gICAgICAgIHJhZGl1cyA9IHRoaXMucmFkaXVzLFxuICAgICAgICBhYWJiID0gdGhpcy5hYWJiLFxuICAgICAgICBtaW4gPSBhYWJiLm1pbixcbiAgICAgICAgbWF4ID0gYWFiYi5tYXgsXG4gICAgICAgIGwsIHIsIGIsIHQ7XG5cbiAgICBsb2NhbE1hdHJpeC5jb21wb3NlKGxvY2FsUG9zLCBWRUMyX1NDQUxFLCB0aGlzLmxvY2FsUm90YXRpb24pO1xuICAgIG1hdHJpeFdvcmxkLm1tdWwobWF0cml4LCBsb2NhbE1hdHJpeCk7XG5cbiAgICBwb3MueCA9IGxvY2FsUG9zLng7XG4gICAgcG9zLnkgPSBsb2NhbFBvcy55O1xuICAgIHBvcy50cmFuc2Zvcm1NYXQzMihtYXRyaXgpO1xuXG4gICAgX2EueCA9IGEueDtcbiAgICBfYS55ID0gYS55O1xuICAgIF9hLnRyYW5zZm9ybU1hdDMyKG1hdHJpeCk7XG5cbiAgICBfYi54ID0gYi54O1xuICAgIF9iLnkgPSBiLnk7XG4gICAgX2IudHJhbnNmb3JtTWF0MzIobWF0cml4KTtcblxuICAgIF9ub3JtYWwueCA9IC0oX2IueSAtIF9hLnkpO1xuICAgIF9ub3JtYWwueSA9IF9iLnggLSBfYS54O1xuICAgIF9ub3JtYWwubm9ybWFsaXplKCk7XG5cbiAgICBpZiAoX2EueCA8IF9iLngpIHtcbiAgICAgICAgbCA9IF9hLng7XG4gICAgICAgIHIgPSBfYi54O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGwgPSBfYi54O1xuICAgICAgICByID0gX2EueDtcbiAgICB9XG5cbiAgICBpZiAoX2EueSA8IF9iLnkpIHtcbiAgICAgICAgYiA9IF9hLnk7XG4gICAgICAgIHQgPSBfYi55O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGIgPSBfYi55O1xuICAgICAgICB0ID0gX2EueTtcbiAgICB9XG5cbiAgICBtaW4ueCA9IGwgLSByYWRpdXM7XG4gICAgbWluLnkgPSBiIC0gcmFkaXVzO1xuICAgIG1heC54ID0gciArIHJhZGl1cztcbiAgICBtYXgueSA9IHQgKyByYWRpdXM7XG59O1xuXG5cblAyU2VnbWVudC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBqc29uID0gUDJTaGFwZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLmEgPSB0aGlzLmEudG9KU09OKGpzb24uYSk7XG4gICAganNvbi5iID0gdGhpcy5iLnRvSlNPTihqc29uLmIpO1xuXG4gICAganNvbi5yYWRpdXMgPSB0aGlzLnJhZGl1cztcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5QMlNlZ21lbnQucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBQMlNoYXBlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuXG4gICAgdGhpcy5hLmZyb21KU09OKGpzb24uYSk7XG4gICAgdGhpcy5iLmZyb21KU09OKGpzb24uYik7XG5cbiAgICB0aGlzLnJhZGl1cyA9IGpzb24ucmFkaXVzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUDJTZWdtZW50O1xuIiwidmFyIENsYXNzID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvY2xhc3NcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL3ZlYzJcIik7XG52YXIgTWF0MzIgPSByZXF1aXJlKFwiLi4vLi4vbWF0aC9tYXQzMlwiKTtcbnZhciBBQUJCMiA9IHJlcXVpcmUoXCIuLi8uLi9tYXRoL2FhYmIyXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gUDJTaGFwZShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENsYXNzLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnR5cGUgPSAtMTtcblxuICAgIHRoaXMuYm9keSA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZGVuc2l0eSA9IG9wdHMuZGVuc2l0eSAhPSB1bmRlZmluZWQgPyBvcHRzLmRlbnNpdHkgOiAxO1xuXG4gICAgdGhpcy5sb2NhbFBvc2l0aW9uID0gb3B0cy5wb3NpdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLnBvc2l0aW9uIDogbmV3IFZlYzI7XG4gICAgdGhpcy5sb2NhbFJvdGF0aW9uID0gb3B0cy5yb3RhdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLnJvdGF0aW9uIDogMDtcblxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjMjtcbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcblxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdDMyO1xuICAgIHRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0MzI7XG5cbiAgICB0aGlzLmZyaWN0aW9uID0gb3B0cy5mcmljdGlvbiAhPSB1bmRlZmluZWQgPyBvcHRzLmZyaWN0aW9uIDogMC41O1xuICAgIHRoaXMuZWxhc3RpY2l0eSA9IG9wdHMuZWxhc3RpY2l0eSAhPSB1bmRlZmluZWQgPyBvcHRzLmVsYXN0aWNpdHkgOiAwLjI1O1xuXG4gICAgdGhpcy5pc1RyaWdnZXIgPSBvcHRzLmlzVHJpZ2dlciAhPSB1bmRlZmluZWQgPyAhIW9wdHMuaXNUcmlnZ2VyIDogZmFsc2U7XG5cbiAgICB0aGlzLmZpbHRlck1hc2sgPSBvcHRzLmZpbHRlck1hc2sgIT0gdW5kZWZpbmVkID8gb3B0cy5maWx0ZXJNYXNrIDogMTtcbiAgICB0aGlzLmZpbHRlckdyb3VwID0gb3B0cy5maWx0ZXJHcm91cCAhPSB1bmRlZmluZWQgPyBvcHRzLmZpbHRlckdyb3VwIDogMTtcblxuICAgIHRoaXMuYWFiYiA9IG5ldyBBQUJCMjtcbn1cblxuQ2xhc3MuZXh0ZW5kKFAyU2hhcGUpO1xuXG5cblAyU2hhcGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXIpIHtcblxuICAgIHRoaXMuZGVuc2l0eSA9IG90aGVyLmRlbnNpdHk7XG5cbiAgICB0aGlzLmxvY2FsUG9zaXRpb24uY29weShvdGhlci5sb2NhbFBvc2l0aW9uKTtcbiAgICB0aGlzLmxvY2FsUm90YXRpb24gPSBvdGhlci5sb2NhbFJvdGF0aW9uO1xuXG4gICAgdGhpcy5mcmljdGlvbiA9IG90aGVyLmZyaWN0aW9uO1xuICAgIHRoaXMuZWxhc3RpY2l0eSA9IG90aGVyLmVsYXN0aWNpdHk7XG5cbiAgICB0aGlzLmlzVHJpZ2dlciA9IG90aGVyLmlzVHJpZ2dlcjtcblxuICAgIHRoaXMuZmlsdGVyTWFzayA9IG90aGVyLmZpbHRlck1hc2s7XG4gICAgdGhpcy5maWx0ZXJHcm91cCA9IG90aGVyLmZpbHRlckdyb3VwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblAyU2hhcGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAganNvbiA9IENsYXNzLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIGpzb24uZGVuc2l0eSA9IHRoaXMuZGVuc2l0eTtcblxuICAgIGpzb24ubG9jYWxQb3NpdGlvbiA9IHRoaXMubG9jYWxQb3NpdGlvbi50b0pTT04oanNvbi5sb2NhbFBvc2l0aW9uKTtcbiAgICBqc29uLmxvY2FsUm90YXRpb24gPSB0aGlzLmxvY2FsUm90YXRpb247XG5cbiAgICBqc29uLmZyaWN0aW9uID0gdGhpcy5mcmljdGlvbjtcbiAgICBqc29uLmVsYXN0aWNpdHkgPSB0aGlzLmVsYXN0aWNpdHk7XG5cbiAgICBqc29uLmlzVHJpZ2dlciA9IHRoaXMuaXNUcmlnZ2VyO1xuXG4gICAganNvbi5maWx0ZXJNYXNrID0gdGhpcy5maWx0ZXJNYXNrO1xuICAgIGpzb24uZmlsdGVyR3JvdXAgPSB0aGlzLmZpbHRlckdyb3VwO1xuXG4gICAgcmV0dXJuIGpzb247XG59O1xuXG5cblAyU2hhcGUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICBDbGFzcy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcblxuICAgIHRoaXMuZGVuc2l0eSA9IGpzb24uZGVuc2l0eTtcblxuICAgIHRoaXMubG9jYWxQb3NpdGlvbi5mcm9tSlNPTihqc29uLmxvY2FsUG9zaXRpb24pO1xuICAgIHRoaXMubG9jYWxSb3RhdGlvbiA9IGpzb24ubG9jYWxSb3RhdGlvbjtcblxuICAgIHRoaXMuZnJpY3Rpb24gPSBqc29uLmZyaWN0aW9uO1xuICAgIHRoaXMuZWxhc3RpY2l0eSA9IGpzb24uZWxhc3RpY2l0eTtcblxuICAgIHRoaXMuaXNUcmlnZ2VyID0ganNvbi5pc1RyaWdnZXI7XG5cbiAgICB0aGlzLmZpbHRlck1hc2sgPSBqc29uLmZpbHRlck1hc2s7XG4gICAgdGhpcy5maWx0ZXJHcm91cCA9IGpzb24uZmlsdGVyR3JvdXA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMlNoYXBlO1xuIiwidmFyIEVudW0gPSByZXF1aXJlKFwiLi4vYmFzZS9lbnVtXCIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQm9keVR5cGU6IG5ldyBFbnVtKFwiUGFydGljbGUgUmlnaWRCb2R5XCIpLFxuICAgIFNoYXBlVHlwZTogbmV3IEVudW0oXCJDb252ZXggQ2lyY2xlIFNlZ21lbnRcIiksXG4gICAgTW90aW9uU3RhdGU6IG5ldyBFbnVtKFwiRHluYW1pYyBTdGF0aWMgS2luZW1hdGljXCIpLFxuICAgIFNsZWVwU3RhdGU6IG5ldyBFbnVtKFwiQXdha2UgU2xlZXB5IFNsZWVwaW5nXCIpXG59O1xuIiwidmFyIE1hdGhmID0gcmVxdWlyZShcIi4uL21hdGgvbWF0aGZcIik7XG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY2xhbXAgPSBNYXRoZi5jbGFtcDtcblxuLyoqXG4gKiBAY2xhc3MgUDJTb2x2ZXJcbiAqIEBicmllZiBXb3JsZCBTb2x2ZXJcbiAqIEBwYXJhbSBPYmplY3Qgb3B0cyBzZXRzIENsYXNzIHByb3BlcnRpZXMgZnJvbSBwYXNzZWQgT2JqZWN0XG4gKi9cbmZ1bmN0aW9uIFAyU29sdmVyKG9wdHMpIHtcbiAgICBvcHRzIHx8IChvcHRzID0ge30pO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE51bWJlciBpdGVyYXRpb25zXG4gICAgICogQGJyaWVmIG1heCBudW1iZXIgb2YgaXRlcmF0aW9uc1xuICAgICAqIEBtZW1iZXJvZiBQMlNvbHZlclxuICAgICAqL1xuICAgIHRoaXMuaXRlcmF0aW9ucyA9IG9wdHMuaXRlcmF0aW9ucyAhPSB1bmRlZmluZWQgPyBvcHRzLml0ZXJhdGlvbnMgOiAxMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBOdW1iZXIgdG9sZXJhbmNlXG4gICAgICogQG1lbWJlcm9mIFAyU29sdmVyXG4gICAgICovXG4gICAgdGhpcy50b2xlcmFuY2UgPSBvcHRzLnRvbGVyYW5jZSAhPSB1bmRlZmluZWQgPyBvcHRzLnRvbGVyYW5jZSA6IDFlLTY7XG59XG5cbi8qKlxuICogQG1ldGhvZCBzb2x2ZVxuICogQG1lbWJlcm9mIFAyU29sdmVyXG4gKiBAYnJpZWYgc29sdmVzIGFsbCBlcXVhdGlvbnNcbiAqIEBwYXJhbSBOdW1iZXIgaFxuICogQHBhcmFtIEFycmF5IGVxdWF0aW9uc1xuICovXG5QMlNvbHZlci5wcm90b3R5cGUuc29sdmUgPSBmdW5jdGlvbiAoaCwgZXF1YXRpb25zKSB7XG4gICAgdmFyIG51bSA9IGVxdWF0aW9ucy5sZW5ndGgsXG4gICAgICAgIGVxLCBiaSwgYmosXG4gICAgICAgIHZsYW1iZGFpLCB2bGFtYmRhaiwgdmksIHZqLFxuICAgICAgICBpdGVyYXRpb25zID0gdGhpcy5pdGVyYXRpb25zLFxuICAgICAgICBpdGVyID0gMCxcbiAgICAgICAgdG9sZXJhbmNlU3EgPSB0aGlzLnRvbGVyYW5jZSAqIHRoaXMudG9sZXJhbmNlLFxuICAgICAgICBHV2xhbWJkYSwgbGFtYmRhLCBkZWx0YUxhbWJkYSwgZGVsdGFMYW1iZGFUb3RhbCxcbiAgICAgICAgaSwgajtcblxuICAgIGlmIChudW0gPiAtMSkge1xuXG4gICAgICAgIGkgPSBudW07XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGVxID0gZXF1YXRpb25zW2ldO1xuXG4gICAgICAgICAgICBlcS51cGRhdGVDb25zdGFudHMoaCk7XG4gICAgICAgICAgICBlcS5pbml0KGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaSA9IGl0ZXJhdGlvbnM7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcblxuICAgICAgICAgICAgaXRlcisrO1xuICAgICAgICAgICAgZGVsdGFMYW1iZGFUb3RhbCA9IDA7XG5cbiAgICAgICAgICAgIGogPSBudW07XG4gICAgICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICAgICAgZXEgPSBlcXVhdGlvbnNbal07XG5cbiAgICAgICAgICAgICAgICBHV2xhbWJkYSA9IGVxLmNhbGN1bGF0ZUdXbGFtYmRhKCk7XG4gICAgICAgICAgICAgICAgbGFtYmRhID0gZXEubGFtYmRhO1xuICAgICAgICAgICAgICAgIGRlbHRhTGFtYmRhID0gZXEuaW52QyAqIChlcS5CIC0gR1dsYW1iZGEgLSBlcS5lcHNpbG9uICogbGFtYmRhKTtcblxuICAgICAgICAgICAgICAgIGVxLmxhbWJkYSA9IGNsYW1wKGxhbWJkYSArIGRlbHRhTGFtYmRhLCBlcS5taW5Gb3JjZSwgZXEubWF4Rm9yY2UpO1xuICAgICAgICAgICAgICAgIGRlbHRhTGFtYmRhID0gZXEubGFtYmRhIC0gbGFtYmRhO1xuXG4gICAgICAgICAgICAgICAgZXEuYWRkVG9MYW1iZGEoZGVsdGFMYW1iZGEpO1xuICAgICAgICAgICAgICAgIGRlbHRhTGFtYmRhVG90YWwgKz0gZGVsdGFMYW1iZGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWx0YUxhbWJkYVRvdGFsICogZGVsdGFMYW1iZGFUb3RhbCA8IHRvbGVyYW5jZVNxKSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkgPSBudW07XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGVxID0gZXF1YXRpb25zW2ldO1xuXG4gICAgICAgICAgICBiaSA9IGVxLmJpO1xuICAgICAgICAgICAgdmkgPSBiaS52ZWxvY2l0eTtcbiAgICAgICAgICAgIHZsYW1iZGFpID0gYmkudmxhbWJkYTtcbiAgICAgICAgICAgIGJqID0gZXEuYmo7XG4gICAgICAgICAgICB2aiA9IGJqLnZlbG9jaXR5O1xuICAgICAgICAgICAgdmxhbWJkYWogPSBiai52bGFtYmRhO1xuXG4gICAgICAgICAgICB2aS54ICs9IHZsYW1iZGFpLng7XG4gICAgICAgICAgICB2aS55ICs9IHZsYW1iZGFpLnk7XG5cbiAgICAgICAgICAgIHZqLnggKz0gdmxhbWJkYWoueDtcbiAgICAgICAgICAgIHZqLnkgKz0gdmxhbWJkYWoueTtcblxuICAgICAgICAgICAgdmxhbWJkYWkueCA9IHZsYW1iZGFpLnkgPSB2bGFtYmRhai54ID0gdmxhbWJkYWoueSA9IDA7XG5cbiAgICAgICAgICAgIGlmIChiaS53bGFtYmRhICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJpLmFuZ3VsYXJWZWxvY2l0eSArPSBiaS53bGFtYmRhO1xuICAgICAgICAgICAgICAgIGJpLndsYW1iZGEgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJqLndsYW1iZGEgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYmouYW5ndWxhclZlbG9jaXR5ICs9IGJqLndsYW1iZGE7XG4gICAgICAgICAgICAgICAgYmoud2xhbWJkYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcjtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMlNvbHZlcjsiLCJ2YXIgQ2xhc3MgPSByZXF1aXJlKFwiLi4vYmFzZS9jbGFzc1wiKTtcbnZhciBUaW1lID0gcmVxdWlyZShcIi4uL2Jhc2UvdGltZVwiKTtcbnZhciBPYmplY3RQb29sID0gcmVxdWlyZShcIi4uL2Jhc2Uvb2JqZWN0X3Bvb2xcIik7XG52YXIgVmVjMiA9IHJlcXVpcmUoXCIuLi9tYXRoL3ZlYzJcIik7XG52YXIgUDJFbnVtcyA9IHJlcXVpcmUoXCIuL3AyZW51bXNcIik7XG52YXIgUDJTb2x2ZXIgPSByZXF1aXJlKFwiLi9wMnNvbHZlclwiKTtcbnZhciBQMkJyb2FkcGhhc2UgPSByZXF1aXJlKFwiLi9jb2xsaXNpb24vcDJicm9hZHBoYXNlXCIpO1xudmFyIFAyTmVhcnBoYXNlID0gcmVxdWlyZShcIi4vY29sbGlzaW9uL3AybmVhcnBoYXNlXCIpO1xudmFyIFAyRnJpY3Rpb24gPSByZXF1aXJlKFwiLi9jb25zdHJhaW50cy9wMmZyaWN0aW9uXCIpO1xudmFyIExvZyA9IHJlcXVpcmUoXCIuLi9iYXNlL2xvZ1wiKTtcblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBub3cgPSBUaW1lLm5vdyxcbiAgICBNb3Rpb25TdGF0ZSA9IFAyRW51bXMuTW90aW9uU3RhdGUsXG5cbiAgICBGUklDVElPTl9QT09MID0gbmV3IE9iamVjdFBvb2woUDJGcmljdGlvbik7XG5cblxuZnVuY3Rpb24gUDJTcGFjZShvcHRzKSB7XG4gICAgb3B0cyB8fCAob3B0cyA9IHt9KTtcblxuICAgIENsYXNzLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgICB0aGlzLnVzZUdyYXZpdHkgPSBvcHRzLnVzZUdyYXZpdHkgIT0gdW5kZWZpbmVkID8gISFvcHRzLnVzZUdyYXZpdHkgOiB0cnVlO1xuICAgIHRoaXMuZ3Jhdml0eSA9IG9wdHMuZ3Jhdml0eSAhPSB1bmRlZmluZWQgPyBvcHRzLmdyYXZpdHkgOiBuZXcgVmVjMigwLjAsIC05LjgwMSk7XG5cbiAgICB0aGlzLnRpbWUgPSAwLjA7XG5cbiAgICB0aGlzLmJyb2FkcGhhc2UgPSBuZXcgUDJTcGFjZS5EZWZhdWx0QnJvYWRQaGFzZShvcHRzLmJyb2FkcGhhc2UpO1xuICAgIHRoaXMubmVhcnBoYXNlID0gbmV3IFAyU3BhY2UuRGVmYXVsdE5lYXJQaGFzZShvcHRzLm5lYXJwaGFzZSk7XG5cbiAgICB0aGlzLnNvbHZlciA9IG5ldyBQMlNwYWNlLkRlZmF1bHRTb2x2ZXIob3B0cy5zb2x2ZXIpO1xuXG4gICAgdGhpcy5ib2RpZXMgPSBbXTtcbiAgICB0aGlzLl9ib2R5SGFzaCA9IHt9O1xuXG4gICAgdGhpcy5fcGFpcnNpID0gW107XG4gICAgdGhpcy5fcGFpcnNqID0gW107XG5cbiAgICB0aGlzLmNvbnRhY3RzID0gW107XG4gICAgdGhpcy5mcmljdGlvbnMgPSBbXTtcbiAgICB0aGlzLmNvbnN0cmFpbnRzID0gW107XG5cbiAgICB0aGlzLl9jb2xsaXNpb25NYXRyaXggPSBbXTtcbiAgICB0aGlzLl9jb2xsaXNpb25NYXRyaXhQcmV2aW91cyA9IFtdO1xuXG4gICAgdGhpcy5zdGF0cyA9IHtcbiAgICAgICAgc3RlcDogMC4wLFxuICAgICAgICBzb2x2ZTogMC4wLFxuICAgICAgICBpbnRlZ3JhdGU6IDAuMCxcbiAgICAgICAgbmVhcnBoYXNlOiAwLjAsXG4gICAgICAgIGJyb2FkcGhhc2U6IDAuMFxuICAgIH07XG59XG5cbkNsYXNzLmV4dGVuZChQMlNwYWNlKTtcblxuXG5QMlNwYWNlLkRlZmF1bHRCcm9hZFBoYXNlID0gUDJCcm9hZHBoYXNlO1xuUDJTcGFjZS5EZWZhdWx0TmVhclBoYXNlID0gUDJOZWFycGhhc2U7XG5QMlNwYWNlLkRlZmF1bHRTb2x2ZXIgPSBQMlNvbHZlcjtcblAyU3BhY2UuRlJJQ1RJT05fUE9PTCA9IEZSSUNUSU9OX1BPT0w7XG5cblxuUDJTcGFjZS5wcm90b3R5cGUuY29sbGlzaW9uTWF0cml4R2V0ID0gZnVuY3Rpb24gKGksIGosIGN1cnJlbnQpIHtcbiAgICB2YXIgdG1wID0gajtcblxuICAgIGlmIChqID4gaSkge1xuICAgICAgICBqID0gaTtcbiAgICAgICAgaSA9IHRtcDtcbiAgICB9XG4gICAgaSA9IChpICogKGkgKyAxKSA+PiAxKSArIGogLSAxO1xuXG4gICAgcmV0dXJuIChjdXJyZW50ID09PSB1bmRlZmluZWQgfHwgY3VycmVudCkgPyB0aGlzLl9jb2xsaXNpb25NYXRyaXhbaV0gOiB0aGlzLl9jb2xsaXNpb25NYXRyaXhQcmV2aW91c1tpXTtcbn07XG5cblxuUDJTcGFjZS5wcm90b3R5cGUuY29sbGlzaW9uTWF0cml4U2V0ID0gZnVuY3Rpb24gKGksIGosIHZhbHVlLCBjdXJyZW50KSB7XG4gICAgdmFyIHRtcCA9IGo7XG5cbiAgICBpZiAoaiA+IGkpIHtcbiAgICAgICAgaiA9IGk7XG4gICAgICAgIGkgPSB0bXA7XG4gICAgfVxuXG4gICAgaSA9IChpICogKGkgKyAxKSA+PiAxKSArIGogLSAxO1xuXG4gICAgaWYgKGN1cnJlbnQgPT0gdW5kZWZpbmVkIHx8IGN1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5fY29sbGlzaW9uTWF0cml4W2ldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29sbGlzaW9uTWF0cml4UHJldmlvdXNbaV0gPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5cblAyU3BhY2UucHJvdG90eXBlLmNvbGxpc2lvbk1hdHJpeFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbGxpc2lvbk1hdHJpeCA9IHRoaXMuX2NvbGxpc2lvbk1hdHJpeFByZXZpb3VzLFxuICAgICAgICBpO1xuXG4gICAgdGhpcy5fY29sbGlzaW9uTWF0cml4UHJldmlvdXMgPSB0aGlzLl9jb2xsaXNpb25NYXRyaXg7XG4gICAgdGhpcy5fY29sbGlzaW9uTWF0cml4ID0gY29sbGlzaW9uTWF0cml4O1xuXG4gICAgaSA9IGNvbGxpc2lvbk1hdHJpeC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgY29sbGlzaW9uTWF0cml4W2ldID0gMDtcbn07XG5cblxuUDJTcGFjZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZGllcyA9IHRoaXMuYm9kaWVzLFxuICAgICAgICBpID0gYm9kaWVzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlQm9keShib2RpZXNbaV0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblAyU3BhY2UucHJvdG90eXBlLmFkZEJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgIHZhciBib2RpZXMgPSB0aGlzLmJvZGllcyxcbiAgICAgICAgaW5kZXggPSBib2RpZXMuaW5kZXhPZihib2R5KTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYm9kaWVzLnB1c2goYm9keSk7XG4gICAgICAgIHRoaXMuX2JvZHlIYXNoW2JvZHkuX2lkXSA9IGJvZHk7XG5cbiAgICAgICAgYm9keS5zcGFjZSA9IHRoaXM7XG4gICAgICAgIGJvZHkuX2luZGV4ID0gYm9kaWVzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgYm9keS5pbml0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUDJTcGFjZS5hZGRCb2R5OiBCb2R5IGFscmVhZHkgbWVtYmVyIG9mIFAyU3BhY2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblAyU3BhY2UucHJvdG90eXBlLmFkZEJvZGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB0aGlzLmFkZEJvZHkoYXJndW1lbnRzW2ldKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUDJTcGFjZS5wcm90b3R5cGUucmVtb3ZlQm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgdmFyIGJvZGllcyA9IHRoaXMuYm9kaWVzLFxuICAgICAgICBpbmRleCA9IGJvZGllcy5pbmRleE9mKGJvZHkpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBib2R5LnNwYWNlID0gdW5kZWZpbmVkO1xuICAgICAgICBib2R5Ll9pbmRleCA9IC0xO1xuXG4gICAgICAgIGJvZGllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLl9ib2R5SGFzaFtib2R5Ll9pZF0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUDJTcGFjZS5hZGRCb2R5OiBCb2R5IG5vdCBtZW1iZXIgb2YgUDJTcGFjZVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuUDJTcGFjZS5wcm90b3R5cGUucmVtb3ZlQm9kaWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHRoaXMucmVtb3ZlQm9keShhcmd1bWVudHNbaV0pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5QMlNwYWNlLnByb3RvdHlwZS5hZGRDb25zdHJhaW50ID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICB2YXIgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzLFxuICAgICAgICBpbmRleCA9IGNvbnN0cmFpbnRzLmluZGV4T2YoY29uc3RyYWludCk7XG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUDJTcGFjZS5hZGRDb25zdHJhaW50OiBDb25zdHJhaW50IGFscmVhZHkgbWVtYmVyIG9mIFAyU3BhY2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblAyU3BhY2UucHJvdG90eXBlLnJlbW92ZUNvbnN0cmFpbnQgPSBmdW5jdGlvbiAoY29uc3RyYWludCkge1xuICAgIHZhciBjb25zdHJhaW50cyA9IHRoaXMuY29uc3RyYWludHMsXG4gICAgICAgIGluZGV4ID0gY29uc3RyYWludHMuaW5kZXhPZihjb25zdHJhaW50KTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgY29uc3RyYWludHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cuZXJyb3IoXCJQMlNwYWNlLnJlbW92ZUNvbnN0cmFpbnQ6IENvbnN0cmFpbnQgbm90IGEgbWVtYmVyIG9mIFAyU3BhY2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblAyU3BhY2UucHJvdG90eXBlLmZpbmRCb2R5QnlQb2ludCA9IGZ1bmN0aW9uIChwKSB7XG4gICAgdmFyIGJvZGllcyA9IHRoaXMuYm9kaWVzLFxuICAgICAgICBib2R5LCBzaGFwZXMsIHNoYXBlLFxuICAgICAgICBpID0gYm9kaWVzLmxlbmd0aCxcbiAgICAgICAgajtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgaWYgKCFib2R5KSBjb250aW51ZTtcblxuICAgICAgICBzaGFwZXMgPSBib2R5LnNoYXBlcztcbiAgICAgICAgaiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgICAgIHNoYXBlID0gc2hhcGVzW2pdO1xuICAgICAgICAgICAgaWYgKCFzaGFwZSkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChzaGFwZS5wb2ludFF1ZXJ5KHApKSByZXR1cm4gYm9keTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5cblAyU3BhY2UucHJvdG90eXBlLmZpbmRCb2R5QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuX2JvZHlIYXNoW2lkXTtcbn07XG5cblxuUDJTcGFjZS5wcm90b3R5cGUuc3RlcCA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHZhciBzdGVwU3RhcnQgPSBub3coKSxcbiAgICAgICAgc3RhdHMgPSB0aGlzLnN0YXRzLFxuICAgICAgICBnID0gdGhpcy5ncmF2aXR5LFxuICAgICAgICBneCA9IGcueCxcbiAgICAgICAgZ3kgPSBnLnksXG4gICAgICAgIGJvZGllcyA9IHRoaXMuYm9kaWVzLFxuICAgICAgICBudW1Cb2RpZXMgPSBib2RpZXMubGVuZ3RoLFxuICAgICAgICBzb2x2ZXIgPSB0aGlzLnNvbHZlcixcbiAgICAgICAgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzLFxuICAgICAgICBwYWlyc2kgPSB0aGlzLl9wYWlyc2ksXG4gICAgICAgIHBhaXJzaiA9IHRoaXMuX3BhaXJzaixcbiAgICAgICAgY29udGFjdHMgPSB0aGlzLmNvbnRhY3RzLFxuICAgICAgICBmcmljdGlvbnMgPSB0aGlzLmZyaWN0aW9ucyxcbiAgICAgICAgY29uc3RyYWludCwgdGltZSwgc3RhcnQsIGJvZHksIGZvcmNlLCBtYXNzLFxuICAgICAgICBiaSwgYmosIGMsIGNwLCBjbiwgdSwgc2xpcEZvcmNlLCBmYywgZmNwLCBmY3QsXG4gICAgICAgIGk7XG5cbiAgICB0aW1lID0gdGhpcy50aW1lICs9IGR0O1xuXG4gICAgaWYgKHRoaXMudXNlR3Jhdml0eSkge1xuICAgICAgICBpID0gbnVtQm9kaWVzO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5tb3Rpb25TdGF0ZSA9PT0gTW90aW9uU3RhdGUuRHluYW1pYykge1xuICAgICAgICAgICAgICAgIGZvcmNlID0gYm9keS5mb3JjZTtcbiAgICAgICAgICAgICAgICBtYXNzID0gYm9keS5tYXNzO1xuXG4gICAgICAgICAgICAgICAgZm9yY2UueCArPSBneCAqIG1hc3M7XG4gICAgICAgICAgICAgICAgZm9yY2UueSArPSBneSAqIG1hc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbGxpc2lvbk1hdHJpeFRpY2soKTtcblxuICAgIHN0YXJ0ID0gbm93KCk7XG4gICAgdGhpcy5icm9hZHBoYXNlLmNvbGxpc2lvbnMoYm9kaWVzLCBwYWlyc2ksIHBhaXJzaik7XG4gICAgc3RhdHMuYnJvYWRwaGFzZSA9IG5vdygpIC0gc3RhcnQ7XG5cbiAgICBzdGFydCA9IG5vdygpO1xuICAgIHRoaXMubmVhcnBoYXNlLmNvbGxpc2lvbnMocGFpcnNpLCBwYWlyc2osIGNvbnRhY3RzKTtcbiAgICBzdGF0cy5uZWFycGhhc2UgPSBub3coKSAtIHN0YXJ0O1xuXG4gICAgc3RhcnQgPSBub3coKTtcbiAgICBzb2x2ZXIuc29sdmUoZHQsIGNvbnRhY3RzKTtcblxuICAgIEZSSUNUSU9OX1BPT0wuY2xlYXIoKTtcbiAgICBmcmljdGlvbnMubGVuZ3RoID0gMDtcblxuICAgIGkgPSBjb250YWN0cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjID0gY29udGFjdHNbaV07XG5cbiAgICAgICAgaWYgKGMudSA+IDAuMCkge1xuICAgICAgICAgICAgYmkgPSBjLmJpO1xuICAgICAgICAgICAgYmogPSBjLmJqO1xuICAgICAgICAgICAgZmMgPSBGUklDVElPTl9QT09MLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdSA9IGMudTtcblxuICAgICAgICAgICAgc2xpcEZvcmNlID0gdSAqIGMubGFtYmRhO1xuICAgICAgICAgICAgZmMubWluRm9yY2UgPSAtc2xpcEZvcmNlO1xuICAgICAgICAgICAgZmMubWF4Rm9yY2UgPSBzbGlwRm9yY2U7XG5cbiAgICAgICAgICAgIGZjLmJpID0gYmk7XG4gICAgICAgICAgICBmYy5iaiA9IGJqO1xuXG4gICAgICAgICAgICBjcCA9IGMucDtcbiAgICAgICAgICAgIGZjcCA9IGZjLnA7XG5cbiAgICAgICAgICAgIGZjcC54ID0gY3AueDtcbiAgICAgICAgICAgIGZjcC55ID0gY3AueTtcblxuICAgICAgICAgICAgY24gPSBjLm47XG4gICAgICAgICAgICBmY3QgPSBmYy50O1xuXG4gICAgICAgICAgICBmY3QueCA9IC1jbi55O1xuICAgICAgICAgICAgZmN0LnkgPSBjbi54O1xuXG4gICAgICAgICAgICBmcmljdGlvbnMucHVzaChmYyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb2x2ZXIuc29sdmUoZHQsIGZyaWN0aW9ucyk7XG5cbiAgICBpID0gY29uc3RyYWludHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldO1xuICAgICAgICBjb25zdHJhaW50LnVwZGF0ZSgpO1xuICAgICAgICBzb2x2ZXIuc29sdmUoZHQsIGNvbnN0cmFpbnQuZXF1YXRpb25zKTtcbiAgICB9XG4gICAgc3RhdHMuc29sdmUgPSBub3coKSAtIHN0YXJ0O1xuXG4gICAgc3RhcnQgPSBub3coKTtcbiAgICBpID0gbnVtQm9kaWVzO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgaWYgKCFib2R5KSBjb250aW51ZTtcblxuICAgICAgICBib2R5LnVwZGF0ZShkdCk7XG4gICAgICAgIGJvZHkuc2xlZXBUaWNrKHRpbWUpO1xuICAgIH1cbiAgICBzdGF0cy5pbnRlZ3JhdGUgPSBub3coKSAtIHN0YXJ0O1xuXG4gICAgc3RhdHMuc3RlcCA9IG5vdygpIC0gc3RlcFN0YXJ0O1xufTtcblxuXG5QMlNwYWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGpzb24gPSBDbGFzcy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICBqc29uLnVzZUdyYXZpdHkgPSB0aGlzLnVzZUdyYXZpdHk7XG4gICAganNvbi5ncmF2aXR5ID0gdGhpcy5ncmF2aXR5LnRvSlNPTihqc29uLmdyYXZpdHkpO1xuICAgIGpzb24uYnJvYWRwaGFzZSA9IHRoaXMuYnJvYWRwaGFzZS50b0pTT04oanNvbi5icm9hZHBoYXNlKTtcblxuICAgIHJldHVybiBqc29uO1xufTtcblxuXG5QMlNwYWNlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgQ2xhc3MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XG5cbiAgICB0aGlzLnVzZUdyYXZpdHkgPSBqc29uLnVzZUdyYXZpdHk7XG4gICAgdGhpcy5ncmF2aXR5LmZyb21KU09OKGpzb24uZ3Jhdml0eSk7XG4gICAgdGhpcy5icm9hZHBoYXNlLmZyb21KU09OKGpzb24uYnJvYWRwaGFzZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQMlNwYWNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gUGh5czJEKCkge1xuXG4gICAgdGhpcy5QMkJyb2FkcGhhc2UgPSByZXF1aXJlKFwiLi9jb2xsaXNpb24vcDJicm9hZHBoYXNlXCIpO1xuICAgIHRoaXMuUDJCcm9hZHBoYXNlU3BhdGlhbEhhc2ggPSByZXF1aXJlKFwiLi9jb2xsaXNpb24vcDJicm9hZHBoYXNlX3NwYXRpYWxoYXNoXCIpO1xuICAgIHRoaXMuUDJOZWFycGhhc2UgPSByZXF1aXJlKFwiLi9jb2xsaXNpb24vcDJuZWFycGhhc2VcIik7XG5cbiAgICB0aGlzLlAyQ2lyY2xlID0gcmVxdWlyZShcIi4vb2JqZWN0cy9wMmNpcmNsZVwiKTtcbiAgICB0aGlzLlAyQ29udmV4ID0gcmVxdWlyZShcIi4vb2JqZWN0cy9wMmNvbnZleFwiKTtcbiAgICB0aGlzLlAyUmVjdCA9IHJlcXVpcmUoXCIuL29iamVjdHMvcDJyZWN0XCIpO1xuICAgIHRoaXMuUDJSaWdpZGJvZHkgPSByZXF1aXJlKFwiLi9vYmplY3RzL3AycmlnaWRib2R5XCIpO1xuICAgIHRoaXMuUDJTZWdtZW50ID0gcmVxdWlyZShcIi4vb2JqZWN0cy9wMnNlZ21lbnRcIik7XG4gICAgdGhpcy5QMlNoYXBlID0gcmVxdWlyZShcIi4vb2JqZWN0cy9wMnNoYXBlXCIpO1xuXG4gICAgdGhpcy5QMkNvbnN0cmFpbnQgPSByZXF1aXJlKFwiLi9jb25zdHJhaW50cy9wMmNvbnN0cmFpbnRcIik7XG4gICAgdGhpcy5QMkRpc3RhbmNlQ29uc3RyYWludCA9IHJlcXVpcmUoXCIuL2NvbnN0cmFpbnRzL3AyZGlzdGFuY2VfY29uc3RyYWludFwiKTtcblxuICAgIHRoaXMuUDJFbnVtcyA9IHJlcXVpcmUoXCIuL3AyZW51bXNcIik7XG4gICAgdGhpcy5QMlNwYWNlID0gcmVxdWlyZShcIi4vcDJzcGFjZVwiKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBQaHlzMkQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuXG52YXIgRGV2aWNlID0gcmVxdWlyZShcIi4vYmFzZS9kZXZpY2VcIiksXG4gICAgVGltZSA9IHJlcXVpcmUoXCIuL2Jhc2UvdGltZVwiKSxcbiAgICBub3cgPSBUaW1lLm5vdyxcblxuICAgIElTX1NFUlZFUiA9ICEodHlwZW9mKHdpbmRvdykgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmRvY3VtZW50KSxcbiAgICBJU19DTElFTlQgPSAhSVNfU0VSVkVSLFxuXG4gICAgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cblxuaWYgKERldmljZS5tb2JpbGUpIHtcbiAgICB3aW5kb3cub25lcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBwYWdlLCBsaW5lKSB7XG4gICAgICAgIGFsZXJ0KFwibGluZTogXCIgKyBsaW5lICsgXCIsIHBhZ2U6IFwiICsgcGFnZSArIFwiXFxubWVzc2FnZTogXCIgKyBtZXNzYWdlKTtcbiAgICB9O1xufVxuXG5cbi8qKlxuICogSG9sZHMgYWxsIGFjY2Vzc2libGUgQ2xhc3Nlc1xuICogQGNsYXNzIFhpYW5cbiAqL1xuZnVuY3Rpb24gWGlhbigpIHtcblxuICAgIHRoaXMuUGh5czJEID0gcmVxdWlyZShcIi4vcGh5czJkL3BoeXMyZFwiKTtcblxuICAgIHRoaXMuQXVkaW9DdHggPSByZXF1aXJlKFwiLi9iYXNlL2F1ZGlvX2N0eFwiKTtcbiAgICB0aGlzLkNsYXNzID0gcmVxdWlyZShcIi4vYmFzZS9jbGFzc1wiKTtcbiAgICB0aGlzLkRldmljZSA9IHJlcXVpcmUoXCIuL2Jhc2UvZGV2aWNlXCIpO1xuICAgIHRoaXMuRG9tID0gcmVxdWlyZShcIi4vYmFzZS9kb21cIik7XG4gICAgdGhpcy5FbnVtID0gcmVxdWlyZShcIi4vYmFzZS9lbnVtXCIpO1xuICAgIHRoaXMuRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vYmFzZS9ldmVudF9lbWl0dGVyXCIpO1xuICAgIHRoaXMuT2JqZWN0UG9vbCA9IHJlcXVpcmUoXCIuL2Jhc2Uvb2JqZWN0X3Bvb2xcIik7XG4gICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKFwiLi9iYXNlL3JlcXVlc3RfYW5pbWF0aW9uX2ZyYW1lXCIpO1xuICAgIHRoaXMuaW8gPSByZXF1aXJlKFwiLi9iYXNlL3NvY2tldC5pb1wiKTtcbiAgICB0aGlzLlRpbWUgPSByZXF1aXJlKFwiLi9iYXNlL3RpbWVcIik7XG4gICAgdGhpcy51dGlsID0gcmVxdWlyZShcIi4vYmFzZS91dGlsXCIpO1xuICAgIC8vXG4gICAgdGhpcy5TaGFkZXIgPSByZXF1aXJlKFwiLi9jb3JlL2Fzc2V0cy9zaGFkZXJzL3NoYWRlclwiKTtcbiAgICB0aGlzLlNoYWRlckxpYiA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL3NoYWRlcnMvc2hhZGVyX2xpYlwiKTtcbiAgICB0aGlzLkFzc2V0ID0gcmVxdWlyZShcIi4vY29yZS9hc3NldHMvYXNzZXRcIik7XG4gICAgdGhpcy5Bc3NldExvYWRlciA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL2Fzc2V0X2xvYWRlclwiKTtcbiAgICB0aGlzLkFzc2V0cyA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL2Fzc2V0c1wiKTtcbiAgICB0aGlzLkF1ZGlvQ2xpcCA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL2F1ZGlvX2NsaXBcIik7XG4gICAgdGhpcy5NYXRlcmlhbCA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL21hdGVyaWFsXCIpO1xuICAgIHRoaXMuTWVzaCA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL21lc2hcIik7XG4gICAgdGhpcy5TcHJpdGVTaGVldCA9IHJlcXVpcmUoXCIuL2NvcmUvYXNzZXRzL3Nwcml0ZV9zaGVldFwiKTtcbiAgICB0aGlzLlRleHR1cmUgPSByZXF1aXJlKFwiLi9jb3JlL2Fzc2V0cy90ZXh0dXJlXCIpO1xuICAgIHRoaXMuVGV4dHVyZUN1YmUgPSByZXF1aXJlKFwiLi9jb3JlL2Fzc2V0cy90ZXh0dXJlX2N1YmVcIik7XG4gICAgLy9cbiAgICB0aGlzLkJvbmVDb21wb25lbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRfbWFuYWdlcnMvYm9uZV9jb21wb25lbnRfbWFuYWdlclwiKTtcbiAgICB0aGlzLkNhbWVyYTJEQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50X21hbmFnZXJzL2NhbWVyYV8yZF9jb21wb25lbnRfbWFuYWdlclwiKTtcbiAgICB0aGlzLkNhbWVyYUNvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudF9tYW5hZ2Vycy9jYW1lcmFfY29tcG9uZW50X21hbmFnZXJcIik7XG4gICAgdGhpcy5Db21wb25lbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRfbWFuYWdlcnMvY29tcG9uZW50X21hbmFnZXJcIik7XG4gICAgdGhpcy5MaWdodENvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudF9tYW5hZ2Vycy9saWdodF9jb21wb25lbnRfbWFuYWdlclwiKTtcbiAgICB0aGlzLk1lc2hBbmltYXRpb25Db21wb25lbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRfbWFuYWdlcnMvbWVzaF9hbmltYXRpb25fY29tcG9uZW50X21hbmFnZXJcIik7XG4gICAgdGhpcy5NZXNoRmlsdGVyQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50X21hbmFnZXJzL21lc2hfZmlsdGVyX2NvbXBvbmVudF9tYW5hZ2VyXCIpO1xuICAgIHRoaXMuU3ByaXRlQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50X21hbmFnZXJzL3Nwcml0ZV9jb21wb25lbnRfbWFuYWdlclwiKTtcbiAgICB0aGlzLlRyYW5zZm9ybTJEQ29tcG9uZW50TWFuYWdlciA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50X21hbmFnZXJzL3RyYW5zZm9ybV8yZF9jb21wb25lbnRfbWFuYWdlclwiKTtcbiAgICB0aGlzLlRyYW5zZm9ybUNvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudF9tYW5hZ2Vycy90cmFuc2Zvcm1fY29tcG9uZW50X21hbmFnZXJcIik7XG5cbiAgICB0aGlzLlBhcnRpY2xlU3lzdGVtID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRzL3BhcnRpY2xlX3N5c3RlbS9wYXJ0aWNsZV9zeXN0ZW1cIik7XG4gICAgdGhpcy5BdWRpb1NvdXJjZSA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50cy9hdWRpb19zb3VyY2VcIik7XG4gICAgdGhpcy5DYW1lcmEgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudHMvY2FtZXJhXCIpO1xuICAgIHRoaXMuQ2FtZXJhMkQgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudHMvY2FtZXJhXzJkXCIpO1xuICAgIHRoaXMuQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRzL2NvbXBvbmVudFwiKTtcbiAgICB0aGlzLkdVSVRleHQgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudHMvZ3VpX3RleHRcIik7XG4gICAgdGhpcy5HVUlUZXh0dXJlID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRzL2d1aV90ZXh0dXJlXCIpO1xuICAgIHRoaXMuTGlnaHQgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudHMvbGlnaHRcIik7XG4gICAgdGhpcy5NZXNoQW5pbWF0aW9uID0gcmVxdWlyZShcIi4vY29yZS9jb21wb25lbnRzL21lc2hfYW5pbWF0aW9uXCIpO1xuICAgIHRoaXMuTWVzaEZpbHRlciA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50cy9tZXNoX2ZpbHRlclwiKTtcbiAgICB0aGlzLk9yYml0Q29udHJvbCA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50cy9vcmJpdF9jb250cm9sXCIpO1xuICAgIHRoaXMuUmlnaWRCb2R5MkQgPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudHMvcmlnaWRfYm9keV8yZFwiKTtcbiAgICB0aGlzLlNwcml0ZSA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50cy9zcHJpdGVcIik7XG4gICAgdGhpcy5TcHJpdGVBbmltYXRpb24gPSByZXF1aXJlKFwiLi9jb3JlL2NvbXBvbmVudHMvc3ByaXRlX2FuaW1hdGlvblwiKTtcbiAgICB0aGlzLlRyYW5zZm9ybSA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50cy90cmFuc2Zvcm1cIik7XG4gICAgdGhpcy5UcmFuc2Zvcm0yRCA9IHJlcXVpcmUoXCIuL2NvcmUvY29tcG9uZW50cy90cmFuc2Zvcm1fMmRcIik7XG4gICAgLy9cbiAgICB0aGlzLkJhc2VHYW1lID0gcmVxdWlyZShcIi4vY29yZS9nYW1lL2Jhc2VfZ2FtZVwiKTtcbiAgICAvL3RoaXMuQ2xpZW50R2FtZSA9IHJlcXVpcmUoXCIuL2NvcmUvZ2FtZS9jbGllbnRfZ2FtZVwiKTtcbiAgICB0aGlzLkdhbWUgPSByZXF1aXJlKFwiLi9jb3JlL2dhbWUvZ2FtZVwiKTtcbiAgICB0aGlzLkNvbmZpZyA9IHJlcXVpcmUoXCIuL2Jhc2UvY29uZmlnXCIpO1xuICAgIHRoaXMuTG9nID0gcmVxdWlyZShcIi4vYmFzZS9sb2dcIik7XG4gICAgLy9cbiAgICB0aGlzLkdVSUNvbXBvbmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9jb3JlL2d1aS9jb21wb25lbnRfbWFuYWdlcnMvZ3VpX2NvbXBvbmVudF9tYW5hZ2VyXCIpO1xuXG4gICAgdGhpcy5HVUlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jb3JlL2d1aS9jb21wb25lbnRzL2d1aV9jb21wb25lbnRcIik7XG4gICAgLy90aGlzLkdVSUNvbnRlbnQgPSByZXF1aXJlKFwiLi9jb3JlL2d1aS9jb21wb25lbnRzL2d1aV9jb250ZW50XCIpO1xuICAgIHRoaXMuR1VJVHJhbnNmb3JtID0gcmVxdWlyZShcIi4vY29yZS9ndWkvY29tcG9uZW50cy9ndWlfdHJhbnNmb3JtXCIpO1xuICAgIC8vXG4gICAgdGhpcy5HVUkgPSByZXF1aXJlKFwiLi9jb3JlL2d1aS9ndWlcIik7XG4gICAgdGhpcy5HVUlPYmplY3QgPSByZXF1aXJlKFwiLi9jb3JlL2d1aS9ndWlfb2JqZWN0XCIpO1xuICAgIC8vdGhpcy5HVUlTdHlsZSA9IHJlcXVpcmUoXCIuL2NvcmUvZ3VpL2d1aV9zdHlsZVwiKTtcbiAgICAvL3RoaXMuR1VJU3R5bGVTdGF0ZSA9IHJlcXVpcmUoXCIuL2NvcmUvZ3VpL2d1aV9zdHlsZV9zdGF0ZVwiKTtcbiAgICAvL1xuICAgIHRoaXMuSGFuZGxlciA9IHJlcXVpcmUoXCIuL2NvcmUvaW5wdXQvaGFuZGxlclwiKTtcbiAgICB0aGlzLklucHV0ID0gcmVxdWlyZShcIi4vY29yZS9pbnB1dC9pbnB1dFwiKTtcbiAgICAvL1xuICAgIHRoaXMuQ2FudmFzID0gcmVxdWlyZShcIi4vY29yZS9yZW5kZXJlci9jYW52YXNcIik7XG4gICAgdGhpcy5SZW5kZXJUYXJnZXQgPSByZXF1aXJlKFwiLi9jb3JlL3JlbmRlcmVyL3JlbmRlcl90YXJnZXRcIik7XG4gICAgdGhpcy5SZW5kZXJlciA9IHJlcXVpcmUoXCIuL2NvcmUvcmVuZGVyZXIvcmVuZGVyZXJcIik7XG4gICAgdGhpcy5TaGFkZXJDaHVua3MgPSByZXF1aXJlKFwiLi9jb3JlL3JlbmRlcmVyL3NoYWRlcl9jaHVua3NcIik7XG5cbiAgICB0aGlzLldvcmxkID0gcmVxdWlyZShcIi4vY29yZS93b3JsZC93b3JsZFwiKTtcbiAgICB0aGlzLldvcmxkMkQgPSByZXF1aXJlKFwiLi9jb3JlL3dvcmxkL3dvcmxkXzJkXCIpO1xuICAgIC8vXG4gICAgdGhpcy5FbnVtcyA9IHJlcXVpcmUoXCIuL2NvcmUvZW51bXNcIik7XG4gICAgdGhpcy5HYW1lT2JqZWN0ID0gcmVxdWlyZShcIi4vY29yZS9nYW1lX29iamVjdFwiKTtcbiAgICB0aGlzLlByZWZhYiA9IHJlcXVpcmUoXCIuL2NvcmUvcHJlZmFiXCIpO1xuICAgIHRoaXMuU2NlbmUgPSByZXF1aXJlKFwiLi9jb3JlL3NjZW5lXCIpO1xuICAgIC8vXG4gICAgdGhpcy5BQUJCMiA9IHJlcXVpcmUoXCIuL21hdGgvYWFiYjJcIik7XG4gICAgdGhpcy5BQUJCMyA9IHJlcXVpcmUoXCIuL21hdGgvYWFiYjNcIik7XG4gICAgdGhpcy5Db2xvciA9IHJlcXVpcmUoXCIuL21hdGgvY29sb3JcIik7XG4gICAgdGhpcy5NYXQyID0gcmVxdWlyZShcIi4vbWF0aC9tYXQyXCIpO1xuICAgIHRoaXMuTWF0MyA9IHJlcXVpcmUoXCIuL21hdGgvbWF0M1wiKTtcbiAgICB0aGlzLk1hdDMyID0gcmVxdWlyZShcIi4vbWF0aC9tYXQzMlwiKTtcbiAgICB0aGlzLk1hdDQgPSByZXF1aXJlKFwiLi9tYXRoL21hdDRcIik7XG4gICAgdGhpcy5NYXRoZiA9IHJlcXVpcmUoXCIuL21hdGgvbWF0aGZcIik7XG4gICAgdGhpcy5RdWF0ID0gcmVxdWlyZShcIi4vbWF0aC9xdWF0XCIpO1xuICAgIHRoaXMuUmVjdCA9IHJlcXVpcmUoXCIuL21hdGgvcmVjdFwiKTtcbiAgICB0aGlzLlJlY3RPZmZzZXQgPSByZXF1aXJlKFwiLi9tYXRoL3JlY3Rfb2Zmc2V0XCIpO1xuICAgIHRoaXMuVmVjMiA9IHJlcXVpcmUoXCIuL21hdGgvdmVjMlwiKTtcbiAgICB0aGlzLlZlYzMgPSByZXF1aXJlKFwiLi9tYXRoL3ZlYzNcIik7XG4gICAgdGhpcy5WZWM0ID0gcmVxdWlyZShcIi4vbWF0aC92ZWM0XCIpO1xufVxuXG5cbmRlZmluZVByb3BlcnR5KFhpYW4ucHJvdG90eXBlLCBcImlzU2VydmVyXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIElTX1NFUlZFUjtcbiAgICB9XG59KTtcblxuXG5kZWZpbmVQcm9wZXJ0eShYaWFuLnByb3RvdHlwZSwgXCJpc0NsaWVudFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBJU19DTElFTlQ7XG4gICAgfVxufSk7XG5cblxuLyoqXG4gKiBhdHRhY2hlcyBYaWFuIHRvIHdpbmRvdy9nbG9iYWwgYW5kIGFsbCBzdWJjbGFzc2VzXG4gKi9cblhpYW4ucHJvdG90eXBlLmdsb2JhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzKSB3aW5kb3dba2V5XSA9IHRoaXNba2V5XTtcbiAgICB3aW5kb3cuWGlhbiA9IHRoaXM7XG59O1xuXG4vKipcbiAqIGJlbmNobWFya3MgZnVuY3Rpb24gY29uc29sZS5sb2dzIG51bWJlciBvZiBvcGVyYXRpb25zIC8gc2Vjb25kXG4gKiBAcGFyYW0gU3RyaW5nIG5hbWVcbiAqIEBwYXJhbSBGdW5jdGlvbiBmblxuICovXG5YaWFuLnByb3RvdHlwZS5iZW5jaG1hcmsgPSBmdW5jdGlvbiAobmFtZSwgZm4sIHRpbWVzKSB7XG4gICAgdGltZXMgfHwgKHRpbWVzID0gMTAwMCk7XG4gICAgdmFyIHN0YXJ0ID0gMC4wLFxuICAgICAgICB0aW1lID0gMC4wLFxuICAgICAgICBpID0gdGltZXM7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHN0YXJ0ID0gbm93KCk7XG4gICAgICAgIGZuKCk7XG4gICAgICAgIHRpbWUgKz0gbm93KCkgLSBzdGFydDtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhuYW1lICsgXCI6XFxuXFx0XCIgKyB0aW1lcyAvIHRpbWUgKyBcIiAob3BzL3NlYylcXG5cXHRcIiArIHRpbWUgLyB0aW1lcyArIFwiKGF2Zy9jYWxsKVwiKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgWGlhbigpO1xuIl19
